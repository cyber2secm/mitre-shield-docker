[
  {
    "technique_id": "T1190",
    "name": "Exploit Public-Facing Application",
    "description": "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.Exploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet-accessible open sockets.[1][2][3][4][5]On ESXi infrastructure, adversaries may exploit exposed OpenSLP services; they may alternatively exploit exposed VMware vCenter servers.[6][7]Depending on the flaw being exploited, this may also involveExploitation for Defense EvasionorExploitation for Client Execution.If an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs (e.g., via theCloud Instance Metadata API), exploit container host access viaEscape to Host, or take advantage of weak identity and access management policies.Adversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.[8][9]For websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.[10][11]",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:39:40.818683",
    "subtechniques": []
  },
  {
    "technique_id": "T1199",
    "name": "Trusted Relationship",
    "description": "Adversaries may breach or otherwise leverage organizations who have access to intended victims. Access through trusted third party relationship abuses an existing connection that may not be protected or receives less scrutiny than standard mechanisms of gaining access to a network.Organizations often grant elevated access to second or third-party external providers in order to allow them to manage internal systems as well as cloud-based environments. Some examples of these relationships include IT services contractors, managed security providers, infrastructure contractors (e.g. HVAC, elevators, physical security). The third-party provider's access may be intended to be limited to the infrastructure being maintained, but may exist on the same network as the rest of the enterprise. As such,Valid Accountsused by the other party for access to internal network systems may be compromised and used.[1]In Office 365 environments, organizations may grant Microsoft partners or resellers delegated administrator permissions. By compromising a partner or reseller account, an adversary may be able to leverage existing delegated administrator relationships or send new delegated administrator offers to clients in order to gain administrative control over the victim tenant.[2]",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:39:44.670875",
    "subtechniques": []
  },
  {
    "technique_id": "T1078",
    "name": "Valid Accounts",
    "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.[1]Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.In some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.[2]The overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.[3]",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:39:48.573872",
    "subtechniques": [
      {
        "id": "T1078.001",
        "name": "Default Accounts"
      },
      {
        "id": "T1078.004",
        "name": "Cloud Accounts"
      }
    ]
  },
  {
    "technique_id": "T1078.001",
    "name": "Default Accounts",
    "description": "Adversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems. Default accounts also include default factory/provider set accounts on other types of systems, software, or devices, including the root user account in AWS, the root user account in ESXi, and the default service account in Kubernetes.[1][2][3]Default accounts are not limited to client machines; rather, they also include accounts that are preset for equipment such as network devices and computer applications, whether they are internal, open source, or commercial. Appliances that come preset with a username and password combination pose a serious threat to organizations that do not change it post installation, as they are easy targets for an adversary. Similarly, adversaries may also utilize publicly disclosed or stolenPrivate Keysor credential materials to legitimately connect to remote environments viaRemote Services.[4]Default accounts may be created on a system after initial setup by connecting or integrating it with another application. For example, when an ESXi server is connected to a vCenter server, a default privileged account calledvpxuseris created on the ESXi server. If a threat actor is able to compromise this accountâ€™s credentials (for example, viaExploitation for Credential Accesson the vCenter host), they will then have access to the ESXi server.[5][6]",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Valid Accounts",
    "parent_technique_id": "T1078",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:39:52.414100"
  },
  {
    "technique_id": "T1078.004",
    "name": "Cloud Accounts",
    "description": "Valid accounts in cloud environments may allow adversaries to perform actions to achieve Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. Cloud Accounts can exist solely in the cloud; alternatively, they may be hybrid-joined between on-premises systems and the cloud through syncing or federation with other identity sources such as Windows Active Directory.[1][2][3]Service or user accounts may be targeted by adversaries throughBrute Force,Phishing, or various other means to gain access to the environment. Federated or synced accounts may be a pathway for the adversary to affect both on-premises systems and cloud environments - for example, by leveraging shared credentials to log ontoRemote Services. High privileged cloud accounts, whether federated, synced, or cloud-only, may also allow pivoting to on-premises environments by leveraging SaaS-basedSoftware Deployment Toolsto run commands on hybrid-joined devices.An adversary may create long lastingAdditional Cloud Credentialson a compromised cloud account to maintain persistence in the environment. Such credentials may also be used to bypass security controls such as multi-factor authentication.Cloud accounts may also be able to assumeTemporary Elevated Cloud Accessor other privileges through various means within the environment. Misconfigurations in role assignments or role assumption policies may allow an adversary to use these mechanisms to leverage permissions outside the intended scope of the account. Such over privileged accounts may be used to harvest sensitive data from online storage accounts and databases throughCloud APIor other methods. For example, in Azure environments, adversaries may target Azure Managed Identities, which allow associated Azure resources to request access tokens. By compromising a resource with an attached Managed Identity, such as an Azure VM, adversaries may be able toSteal Application Access Tokens to move laterally across the cloud environment.[4]",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Valid Accounts",
    "parent_technique_id": "T1078",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:39:55.763734"
  },
  {
    "technique_id": "T1651",
    "name": "Cloud Administration Command",
    "description": "Adversaries may abuse cloud management services to execute commands within virtual machines. Resources such as AWS Systems Manager, Azure RunCommand, and Runbooks allow users to remotely run scripts in virtual machines by leveraging installed virtual machine agents.[1][2]If an adversary gains administrative access to a cloud environment, they may be able to abuse cloud management services to execute commands in the environmentâ€™s virtual machines. Additionally, an adversary that compromises a service provider or delegated administrator account may similarly be able to leverage aTrusted Relationshipto execute commands in connected virtual machines.[3]",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:39:59.097408",
    "subtechniques": []
  },
  {
    "technique_id": "T1059",
    "name": "Command and Scripting Interpreter",
    "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor ofUnix Shellwhile Windows installations include theWindows Command ShellandPowerShell.There are also cross-platform interpreters such asPython, as well as those commonly associated with client applications such asJavaScriptandVisual Basic.Adversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded inInitial Accesspayloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize variousRemote Servicesin order to achieve remote Execution.[1][2][3]",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:40:02.440062",
    "subtechniques": [
      {
        "id": "T1059.009",
        "name": "Cloud API"
      }
    ]
  },
  {
    "technique_id": "T1059.009",
    "name": "Cloud API",
    "description": "Adversaries may abuse cloud APIs to execute malicious commands. APIs available in cloud environments provide various functionalities and are a feature-rich method for programmatic access to nearly all aspects of a tenant. These APIs may be utilized through various methods such as command line interpreters (CLIs), in-browser Cloud Shells,PowerShellmodules like Azure for PowerShell[1], or software developer kits (SDKs) available for languages such asPython.Cloud API functionality may allow for administrative access across all major services in a tenant such as compute, storage, identity and access management (IAM), networking, and security policies.With proper permissions (often via use of credentials such asApplication Access TokenandWeb Session Cookie), adversaries may abuse cloud APIs to invoke various functions that execute malicious actions. For example, CLI and PowerShell functionality may be accessed through binaries installed on cloud-hosted or on-premises hosts or accessed through a browser-based cloud shell offered by many cloud platforms (such as AWS, Azure, and GCP). These cloud shells are often a packaged unified environment to use CLI and/or scripting modules hosted as a container in the cloud environment.",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Command and Scripting Interpreter",
    "parent_technique_id": "T1059",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:40:05.753505"
  },
  {
    "technique_id": "T1648",
    "name": "Serverless Execution",
    "description": "Adversaries may abuse serverless computing, integration, and automation services to execute arbitrary code in cloud environments. Many cloud providers offer a variety of serverless resources, including compute engines, application integration services, and web servers.Adversaries may abuse these resources in various ways as a means of executing arbitrary commands. For example, adversaries may use serverless functions to execute malicious code, such as crypto-mining malware (i.e.Resource Hijacking).[1]Adversaries may also create functions that enable further compromise of the cloud environment. For example, an adversary may use theIAM:PassRolepermission in AWS or theiam.serviceAccounts.actAspermission in Google Cloud to addAdditional Cloud Rolesto a serverless cloud function, which may then be able to perform actions the original user cannot.[2][3]Serverless functions can also be invoked in response to cloud events (i.e.Event Triggered Execution), potentially enabling persistent execution over time. For example, in AWS environments, an adversary may create a Lambda function that automatically addsAdditional Cloud Credentialsto a user and a corresponding CloudWatch events rule that invokes that function whenever a new user is created.[4]This is also possible in many cloud-based office application suites. For example, in Microsoft 365 environments, an adversary may create a Power Automate workflow that forwards all emails a user receives or creates anonymous sharing links whenever a user is granted access to a document in SharePoint.[5][6]In Google Workspace environments, they may instead create an Apps Script that exfiltrates a user's data when they open a file.[7][8]",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:40:09.145594",
    "subtechniques": []
  },
  {
    "technique_id": "T1204",
    "name": "User Execution",
    "description": "An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms ofPhishing.WhileUser Executionfrequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly afterInternal Spearphishing.Adversaries may also deceive users into performing actions such as:EnablingRemote Access Tools, allowing direct control of the system to the adversaryRunning malicious JavaScript in their browser, allowing adversaries toSteal Web Session Cookies[1][2]Downloading and executing malware forUser ExecutionCoerceing users to copy, paste, and execute malicious code manually[3][4]For example, tech support scams can be facilitated throughPhishing, vishing, or various forms of user interaction. Adversaries can use a combination of these methods, such as spoofing and promoting toll-free numbers or call centers that are used to direct victims to malicious websites, to deliver and execute payloads containing malware orRemote Access Tools.[5]",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:40:12.462493",
    "subtechniques": [
      {
        "id": "T1204.003",
        "name": "Malicious Image"
      }
    ]
  },
  {
    "technique_id": "T1204.003",
    "name": "Malicious Image",
    "description": "Adversaries may rely on a user running a malicious image to facilitate execution. Amazon Web Services (AWS) Amazon Machine Images (AMIs), Google Cloud Platform (GCP) Images, and Azure Images as well as popular container runtimes such as Docker can be backdoored. Backdoored images may be uploaded to a public repository viaUpload Malware, and users may then download and deploy an instance or container from the image without realizing the image is malicious, thus bypassing techniques that specifically achieve Initial Access. This can lead to the execution of malicious code, such as code that executes cryptocurrency mining, in the instance or container.[1]Adversaries may also name images a certain way to increase the chance of users mistakenly deploying an instance or container from the image (ex:Match Legitimate Resource Name or Location).[2]",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "User Execution",
    "parent_technique_id": "T1204",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:40:15.785707"
  },
  {
    "technique_id": "T1098",
    "name": "Account Manipulation",
    "description": "Adversaries may manipulate accounts to maintain and/or elevate access to victim systems. Account manipulation may consist of any action that preserves or modifies adversary access to a compromised account, such as modifying credentials or permission groups.[1]These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials.In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain. However, account manipulation may also lead to privilege escalation where modifications grant access to additional roles, permissions, or higher-privilegedValid Accounts.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:40:19.020753",
    "subtechniques": [
      {
        "id": "T1098.001",
        "name": "Additional Cloud Credentials"
      },
      {
        "id": "T1098.003",
        "name": "Additional Cloud Roles"
      },
      {
        "id": "T1098.004",
        "name": "SSH Authorized Keys"
      }
    ]
  },
  {
    "technique_id": "T1098.001",
    "name": "Additional Cloud Credentials",
    "description": "Adversaries may add adversary-controlled credentials to a cloud account to maintain persistent access to victim accounts and instances within the environment.For example, adversaries may add credentials for Service Principals and Applications in addition to existing legitimate credentials in Azure / Entra ID.[1][2][3]These credentials include both x509 keys and passwords.[1]With sufficient permissions, there are a variety of ways to add credentials including the Azure Portal, Azure command line interface, and Azure or Az PowerShell modules.[4]In infrastructure-as-a-service (IaaS) environments, after gaining access throughCloud Accounts, adversaries may generate or import their own SSH keys using either theCreateKeyPairorImportKeyPairAPI in AWS or thegcloud compute os-login ssh-keys addcommand in GCP.[5]This allows persistent access to instances within the cloud environment without further usage of the compromised cloud accounts.[6][7]Adversaries may also use theCreateAccessKeyAPI in AWS or thegcloud iam service-accounts keys createcommand in GCP to add access keys to an account. Alternatively, they may use theCreateLoginProfileAPI in AWS to add a password that can be used to log into the AWS Management Console forCloud Service Dashboard.[8][9]If the target account has different permissions from the requesting account, the adversary may also be able to escalate their privileges in the environment (i.e.Cloud Accounts).[10][11]For example, in Entra ID environments, an adversary with the Application Administrator role can add a new set of credentials to their application's service principal. In doing so the adversary would be able to access the service principalâ€™s roles and permissions, which may be different from those of the Application Administrator.[12]In AWS environments, adversaries with the appropriate permissions may also use thests:GetFederationTokenAPI call to create a temporary set of credentials toForge Web Credentialstied to the permissions of the original user account. These temporary credentials may remain valid for the duration of their lifetime even if the original accountâ€™s API credentials are deactivated.[13]In Entra ID environments with the app password feature enabled, adversaries may be able to add an app password to a user account.[14]As app passwords are intended to be used with legacy devices that do not support multi-factor authentication (MFA), adding an app password can allow an adversary to bypass MFA requirements. Additionally, app passwords may remain valid even if the userâ€™s primary password is reset.[15]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Account Manipulation",
    "parent_technique_id": "T1098",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:40:22.248642"
  },
  {
    "technique_id": "T1098.003",
    "name": "Additional Cloud Roles",
    "description": "An adversary may add additional roles or permissions to an adversary-controlled cloud account to maintain persistent access to a tenant. For example, adversaries may update IAM policies in cloud-based environments or add a new global administrator in Office 365 environments.[1][2][3][4]With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins).[5][4]This account modification may immediately followCreate Accountor other malicious account activity. Adversaries may also modify existingValid Accountsthat they have compromised. This could lead to privilege escalation, particularly if the roles added allow for lateral movement to additional accounts.For example, in AWS environments, an adversary with appropriate permissions may be able to use theCreatePolicyVersionAPI to define a new version of an IAM policy or theAttachUserPolicyAPI to attach an IAM policy with additional or distinct permissions to a compromised user account.[6]In some cases, adversaries may add roles to adversary-controlled accounts outside the victim cloud tenant. This allows these external accounts to perform actions inside the victim tenant without requiring the adversary toCreate Accountor modify a victim-owned account.[7]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Account Manipulation",
    "parent_technique_id": "T1098",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:40:25.483884"
  },
  {
    "technique_id": "T1098.004",
    "name": "SSH Authorized Keys",
    "description": "Adversaries may modify the SSHauthorized_keysfile to maintain persistence on a victim host. Linux distributions, macOS, and ESXi hypervisors commonly use key-based authentication to secure the authentication process of SSH sessions for remote management. Theauthorized_keysfile in SSH specifies the SSH keys that can be used for logging into the user account for which the file is configured. This file is usually found in the user's home directory under<user-home>/.ssh/authorized_keys(or, on ESXi,/etc/ssh/keys-<username>/authorized_keys).[1]Users may edit the systemâ€™s SSH config file to modify the directivesPubkeyAuthenticationandRSAAuthenticationto the valueyesto ensure public key and RSA authentication are enabled, as well as modify the directivePermitRootLoginto the valueyesto enable root authentication via SSH.[2]The SSH config file is usually located under/etc/ssh/sshd_config.Adversaries may modify SSHauthorized_keysfiles directly with scripts or shell commands to add their own adversary-supplied public keys. In cloud environments, adversaries may be able to modify the SSH authorized_keys file of a particular virtual machine via the command line interface or rest API. For example, by using the Google Cloud CLIâ€™s \"add-metadata\" command an adversary may add SSH keys to a user account.[3][4]Similarly, in Azure, an adversary may update the authorized_keys file of a virtual machine via a PATCH request to the API.[5]This ensures that an adversary possessing the corresponding private key may log in as an existing user via SSH.[6][7]It may also lead to privilege escalation where the virtual machine or instance has distinct permissions from the requesting user.Where authorized_keys files are modified via cloud APIs or command line interfaces, an adversary may achieve privilege escalation on the target virtual machine if they add a key to a higher-privileged user.SSH keys can also be added to accounts on network devices, such as with theip ssh pubkey-chainNetwork Device CLIcommand.[8]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Account Manipulation",
    "parent_technique_id": "T1098",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:40:28.808437"
  },
  {
    "technique_id": "T1136",
    "name": "Create Account",
    "description": "Adversaries may create an account to maintain access to victim systems.[1]With a sufficient level of access, creating such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.Accounts may be created on the local system or within a domain or cloud tenant. In cloud environments, adversaries may create accounts that only have access to specific services, which can reduce the chance of detection.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:40:32.030537",
    "subtechniques": [
      {
        "id": "T1136.003",
        "name": "Cloud Account"
      }
    ]
  },
  {
    "technique_id": "T1136.003",
    "name": "Cloud Account",
    "description": "Adversaries may create a cloud account to maintain access to victim systems. With a sufficient level of access, such accounts may be used to establish secondary credentialed access that does not require persistent remote access tools to be deployed on the system.[1][2][3][4][5]In addition to user accounts, cloud accounts may be associated with services. Cloud providers handle the concept of service accounts in different ways. In Azure, service accounts include service principals and managed identities, which can be linked to various resources such as OAuth applications, serverless functions, and virtual machines in order to grant those resources permissions to perform various activities in the environment.[6]In GCP, service accounts can also be linked to specific resources, as well as be impersonated by other accounts forTemporary Elevated Cloud Access.[7]While AWS has no specific concept of service accounts, resources can be directly granted permission to assume roles.[8][9]Adversaries may create accounts that only have access to specific cloud services, which can reduce the chance of detection.Once an adversary has created a cloud account, they can then manipulate that account to ensure persistence and allow access to additional resources - for example, by addingAdditional Cloud Credentialsor assigningAdditional Cloud Roles.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Create Account",
    "parent_technique_id": "T1136",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:40:35.300726"
  },
  {
    "technique_id": "T1546",
    "name": "Event Triggered Execution",
    "description": "Adversaries may establish persistence and/or elevate privileges using system mechanisms that trigger execution based on specific events. Various operating systems have means to monitor and subscribe to events such as logons or other user activity such as running specific applications/binaries. Cloud environments may also support various functions and services that monitor and can be invoked in response to specific cloud events.[1][2][3]Adversaries may abuse these mechanisms as a means of maintaining persistent access to a victim via repeatedly executing malicious code. After gaining access to a victim system, adversaries may create/modify event triggers to point to malicious content that will be executed whenever the event trigger is invoked.[4][5][6]Since the execution can be proxied by an account with higher permissions, such as SYSTEM or service accounts, an adversary may be able to abuse these triggered execution mechanisms to escalate their privileges.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:40:38.653707",
    "subtechniques": []
  },
  {
    "technique_id": "T1525",
    "name": "Implant Internal Image",
    "description": "Adversaries may implant cloud or container images with malicious code to establish persistence after gaining access to an environment. Amazon Web Services (AWS) Amazon Machine Images (AMIs), Google Cloud Platform (GCP) Images, and Azure Images as well as popular container runtimes such as Docker can be implanted or backdoored. UnlikeUpload Malware, this technique focuses on adversaries implanting an image in a registry within a victimâ€™s environment. Depending on how the infrastructure is provisioned, this could provide persistent access if the infrastructure provisioning tool is instructed to always use the latest image.[1]A tool has been developed to facilitate planting backdoors in cloud container images.[2]If an adversary has access to a compromised AWS instance, and permissions to list the available container images, they may implant a backdoor such as aWeb Shell.[1]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:40:41.970069",
    "subtechniques": []
  },
  {
    "technique_id": "T1556",
    "name": "Modify Authentication Process",
    "description": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without usingValid Accounts.Adversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms. Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:40:45.217041",
    "subtechniques": [
      {
        "id": "T1556.006",
        "name": "Multi-Factor Authentication"
      },
      {
        "id": "T1556.007",
        "name": "Hybrid Identity"
      },
      {
        "id": "T1556.009",
        "name": "Conditional Access Policies"
      }
    ]
  },
  {
    "technique_id": "T1556.006",
    "name": "Multi-Factor Authentication",
    "description": "Adversaries may disable or modify multi-factor authentication (MFA) mechanisms to enable persistent access to compromised accounts.Once adversaries have gained access to a network by either compromising an account lacking MFA or by employing an MFA bypass method such asMulti-Factor Authentication Request Generation, adversaries may leverage their access to modify or completely disable MFA defenses. This can be accomplished by abusing legitimate features, such as excluding users from Azure AD Conditional Access Policies, registering a new yet vulnerable/adversary-controlled MFA method, or by manually patching MFA programs and configuration files to bypass expected functionality.[1][2]For example, modifying the Windows hosts file (C:\\windows\\system32\\drivers\\etc\\hosts) to redirect MFA calls to localhost instead of an MFA server may cause the MFA process to fail. If a \"fail open\" policy is in place, any otherwise successful authentication attempt may be granted access without enforcing MFA.[3]Depending on the scope, goals, and privileges of the adversary, MFA defenses may be disabled for individual accounts or for all accounts tied to a larger group, such as all domain accounts in a victim's network environment.[3]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Modify Authentication Process",
    "parent_technique_id": "T1556",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:40:48.453073"
  },
  {
    "technique_id": "T1556.007",
    "name": "Hybrid Identity",
    "description": "Adversaries may patch, modify, or otherwise backdoor cloud authentication processes that are tied to on-premises user identities in order to bypass typical authentication mechanisms, access credentials, and enable persistent access to accounts.Many organizations maintain hybrid user and device identities that are shared between on-premises and cloud-based environments. These can be maintained in a number of ways. For example, Microsoft Entra ID includes three options for synchronizing identities between Active Directory and Entra ID[1]:Password Hash Synchronization (PHS), in which a privileged on-premises account synchronizes user password hashes between Active Directory and Entra ID, allowing authentication to Entra ID to take place entirely in the cloudPass Through Authentication (PTA), in which Entra ID authentication attempts are forwarded to an on-premises PTA agent, which validates the credentials against Active DirectoryActive Directory Federation Services (AD FS), in which a trust relationship is established between Active Directory and Entra IDAD FS can also be used with other SaaS and cloud platforms such as AWS and GCP, which will hand off the authentication process to AD FS and receive a token containing the hybrid usersâ€™ identity and privileges.By modifying authentication processes tied to hybrid identities, an adversary may be able to establish persistent privileged access to cloud resources. For example, adversaries who compromise an on-premises server running a PTA agent may inject a malicious DLL into theAzureADConnectAuthenticationAgentServiceprocess that authorizes all attempts to authenticate to Entra ID, as well as records user credentials.[2][3]In environments using AD FS, an adversary may edit theMicrosoft.IdentityServer.Servicehostconfiguration file to load a malicious DLL that generates authentication tokens for any user with any set of claims, thereby bypassing multi-factor authentication and defined AD FS policies.[4]In some cases, adversaries may be able to modify the hybrid identity authentication process from the cloud. For example, adversaries who compromise a Global Administrator account in an Entra ID tenant may be able to register a new PTA agent via the web console, similarly allowing them to harvest credentials and log into the Entra ID environment as any user.[5]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Modify Authentication Process",
    "parent_technique_id": "T1556",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:40:51.854281"
  },
  {
    "technique_id": "T1556.009",
    "name": "Conditional Access Policies",
    "description": "Adversaries may disable or modify conditional access policies to enable persistent access to compromised accounts. Conditional access policies are additional verifications used by identity providers and identity and access management systems to determine whether a user should be granted access to a resource.For example, in Entra ID, Okta, and JumpCloud, users can be denied access to applications based on their IP address, device enrollment status, and use of multi-factor authentication.[1][2][3]In some cases, identity providers may also support the use of risk-based metrics to deny sign-ins based on a variety of indicators. In AWS and GCP, IAM policies can containconditionattributes that verify arbitrary constraints such as the source IP, the date the request was made, and the nature of the resources or regions being requested.[4][5]These measures help to prevent compromised credentials from resulting in unauthorized access to data or resources, as well as limit user permissions to only those required.By modifying conditional access policies, such as adding additional trusted IP ranges, removingMulti-Factor Authenticationrequirements, or allowing additionalUnused/Unsupported Cloud Regions, adversaries may be able to ensure persistent access to accounts and circumvent defensive measures.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Modify Authentication Process",
    "parent_technique_id": "T1556",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:40:55.076490"
  },
  {
    "technique_id": "T1078",
    "name": "Valid Accounts",
    "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.[1]Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.In some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.[2]The overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.[3]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:40:58.479146",
    "subtechniques": [
      {
        "id": "T1078.001",
        "name": "Default Accounts"
      },
      {
        "id": "T1078.004",
        "name": "Cloud Accounts"
      }
    ]
  },
  {
    "technique_id": "T1078.001",
    "name": "Default Accounts",
    "description": "Adversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems. Default accounts also include default factory/provider set accounts on other types of systems, software, or devices, including the root user account in AWS, the root user account in ESXi, and the default service account in Kubernetes.[1][2][3]Default accounts are not limited to client machines; rather, they also include accounts that are preset for equipment such as network devices and computer applications, whether they are internal, open source, or commercial. Appliances that come preset with a username and password combination pose a serious threat to organizations that do not change it post installation, as they are easy targets for an adversary. Similarly, adversaries may also utilize publicly disclosed or stolenPrivate Keysor credential materials to legitimately connect to remote environments viaRemote Services.[4]Default accounts may be created on a system after initial setup by connecting or integrating it with another application. For example, when an ESXi server is connected to a vCenter server, a default privileged account calledvpxuseris created on the ESXi server. If a threat actor is able to compromise this accountâ€™s credentials (for example, viaExploitation for Credential Accesson the vCenter host), they will then have access to the ESXi server.[5][6]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Valid Accounts",
    "parent_technique_id": "T1078",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:41:01.803670"
  },
  {
    "technique_id": "T1078.004",
    "name": "Cloud Accounts",
    "description": "Valid accounts in cloud environments may allow adversaries to perform actions to achieve Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. Cloud Accounts can exist solely in the cloud; alternatively, they may be hybrid-joined between on-premises systems and the cloud through syncing or federation with other identity sources such as Windows Active Directory.[1][2][3]Service or user accounts may be targeted by adversaries throughBrute Force,Phishing, or various other means to gain access to the environment. Federated or synced accounts may be a pathway for the adversary to affect both on-premises systems and cloud environments - for example, by leveraging shared credentials to log ontoRemote Services. High privileged cloud accounts, whether federated, synced, or cloud-only, may also allow pivoting to on-premises environments by leveraging SaaS-basedSoftware Deployment Toolsto run commands on hybrid-joined devices.An adversary may create long lastingAdditional Cloud Credentialson a compromised cloud account to maintain persistence in the environment. Such credentials may also be used to bypass security controls such as multi-factor authentication.Cloud accounts may also be able to assumeTemporary Elevated Cloud Accessor other privileges through various means within the environment. Misconfigurations in role assignments or role assumption policies may allow an adversary to use these mechanisms to leverage permissions outside the intended scope of the account. Such over privileged accounts may be used to harvest sensitive data from online storage accounts and databases throughCloud APIor other methods. For example, in Azure environments, adversaries may target Azure Managed Identities, which allow associated Azure resources to request access tokens. By compromising a resource with an attached Managed Identity, such as an Azure VM, adversaries may be able toSteal Application Access Tokens to move laterally across the cloud environment.[4]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Valid Accounts",
    "parent_technique_id": "T1078",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:41:05.130092"
  },
  {
    "technique_id": "T1548",
    "name": "Abuse Elevation Control Mechanism",
    "description": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk.[1][2]An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.[3][4]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:41:08.496480",
    "subtechniques": [
      {
        "id": "T1548.005",
        "name": "Temporary Elevated Cloud Access"
      }
    ]
  },
  {
    "technique_id": "T1548.005",
    "name": "Temporary Elevated Cloud Access",
    "description": "Adversaries may abuse permission configurations that allow them to gain temporarily elevated access to cloud resources. Many cloud environments allow administrators to grant user or service accounts permission to request just-in-time access to roles, impersonate other accounts, pass roles onto resources and services, or otherwise gain short-term access to a set of privileges that may be distinct from their own.Just-in-time access is a mechanism for granting additional roles to cloud accounts in a granular, temporary manner. This allows accounts to operate with only the permissions they need on a daily basis, and to request additional permissions as necessary. Sometimes just-in-time access requests are configured to require manual approval, while other times the desired permissions are automatically granted.[1]Account impersonation allows user or service accounts to temporarily act with the permissions of another account. For example, in GCP users with theiam.serviceAccountTokenCreatorrole can create temporary access tokens or sign arbitrary payloads with the permissions of a service account, while service accounts with domain-wide delegation permission are permitted to impersonate Google Workspace accounts.[2][3][4][5]In Exchange Online, theApplicationImpersonationrole allows a service account to use the permissions associated with specified user accounts.[6]Many cloud environments also include mechanisms for users to pass roles to resources that allow them to perform tasks and authenticate to other services. While the user that creates the resource does not directly assume the role they pass to it, they may still be able to take advantage of the role's access -- for example, by configuring the resource to perform certain actions with the permissions it has been granted. In AWS, users with thePassRolepermission can allow a service they create to assume a given role, while in GCP, users with theiam.serviceAccountUserrole can attach a service account to a resource.[7][2]While users require specific role assignments in order to use any of these features, cloud administrators may misconfigure permissions. This could result in escalation paths that allow adversaries to gain access to resources beyond what was originally intended.[8][9]Note:this technique is distinct fromAdditional Cloud Roles, which involves assigning permanent roles to accounts rather than abusing existing permissions structures to gain temporarily elevated access to resources. However, adversaries that compromise a sufficiently privileged account may grant another account they controlAdditional Cloud Rolesthat would allow them to also abuse these features. This may also allow for greater stealth than would be had by directly using the highly privileged account, especially when logs do not clarify when role impersonation is taking place.[10]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Abuse Elevation Control Mechanism",
    "parent_technique_id": "T1548",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:41:11.769298"
  },
  {
    "technique_id": "T1098",
    "name": "Account Manipulation",
    "description": "Adversaries may manipulate accounts to maintain and/or elevate access to victim systems. Account manipulation may consist of any action that preserves or modifies adversary access to a compromised account, such as modifying credentials or permission groups.[1]These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials.In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain. However, account manipulation may also lead to privilege escalation where modifications grant access to additional roles, permissions, or higher-privilegedValid Accounts.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:41:15.019592",
    "subtechniques": [
      {
        "id": "T1098.001",
        "name": "Additional Cloud Credentials"
      },
      {
        "id": "T1098.003",
        "name": "Additional Cloud Roles"
      },
      {
        "id": "T1098.004",
        "name": "SSH Authorized Keys"
      }
    ]
  },
  {
    "technique_id": "T1098.001",
    "name": "Additional Cloud Credentials",
    "description": "Adversaries may add adversary-controlled credentials to a cloud account to maintain persistent access to victim accounts and instances within the environment.For example, adversaries may add credentials for Service Principals and Applications in addition to existing legitimate credentials in Azure / Entra ID.[1][2][3]These credentials include both x509 keys and passwords.[1]With sufficient permissions, there are a variety of ways to add credentials including the Azure Portal, Azure command line interface, and Azure or Az PowerShell modules.[4]In infrastructure-as-a-service (IaaS) environments, after gaining access throughCloud Accounts, adversaries may generate or import their own SSH keys using either theCreateKeyPairorImportKeyPairAPI in AWS or thegcloud compute os-login ssh-keys addcommand in GCP.[5]This allows persistent access to instances within the cloud environment without further usage of the compromised cloud accounts.[6][7]Adversaries may also use theCreateAccessKeyAPI in AWS or thegcloud iam service-accounts keys createcommand in GCP to add access keys to an account. Alternatively, they may use theCreateLoginProfileAPI in AWS to add a password that can be used to log into the AWS Management Console forCloud Service Dashboard.[8][9]If the target account has different permissions from the requesting account, the adversary may also be able to escalate their privileges in the environment (i.e.Cloud Accounts).[10][11]For example, in Entra ID environments, an adversary with the Application Administrator role can add a new set of credentials to their application's service principal. In doing so the adversary would be able to access the service principalâ€™s roles and permissions, which may be different from those of the Application Administrator.[12]In AWS environments, adversaries with the appropriate permissions may also use thests:GetFederationTokenAPI call to create a temporary set of credentials toForge Web Credentialstied to the permissions of the original user account. These temporary credentials may remain valid for the duration of their lifetime even if the original accountâ€™s API credentials are deactivated.[13]In Entra ID environments with the app password feature enabled, adversaries may be able to add an app password to a user account.[14]As app passwords are intended to be used with legacy devices that do not support multi-factor authentication (MFA), adding an app password can allow an adversary to bypass MFA requirements. Additionally, app passwords may remain valid even if the userâ€™s primary password is reset.[15]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Account Manipulation",
    "parent_technique_id": "T1098",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:41:18.301829"
  },
  {
    "technique_id": "T1098.003",
    "name": "Additional Cloud Roles",
    "description": "An adversary may add additional roles or permissions to an adversary-controlled cloud account to maintain persistent access to a tenant. For example, adversaries may update IAM policies in cloud-based environments or add a new global administrator in Office 365 environments.[1][2][3][4]With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins).[5][4]This account modification may immediately followCreate Accountor other malicious account activity. Adversaries may also modify existingValid Accountsthat they have compromised. This could lead to privilege escalation, particularly if the roles added allow for lateral movement to additional accounts.For example, in AWS environments, an adversary with appropriate permissions may be able to use theCreatePolicyVersionAPI to define a new version of an IAM policy or theAttachUserPolicyAPI to attach an IAM policy with additional or distinct permissions to a compromised user account.[6]In some cases, adversaries may add roles to adversary-controlled accounts outside the victim cloud tenant. This allows these external accounts to perform actions inside the victim tenant without requiring the adversary toCreate Accountor modify a victim-owned account.[7]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Account Manipulation",
    "parent_technique_id": "T1098",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:41:21.635926"
  },
  {
    "technique_id": "T1098.004",
    "name": "SSH Authorized Keys",
    "description": "Adversaries may modify the SSHauthorized_keysfile to maintain persistence on a victim host. Linux distributions, macOS, and ESXi hypervisors commonly use key-based authentication to secure the authentication process of SSH sessions for remote management. Theauthorized_keysfile in SSH specifies the SSH keys that can be used for logging into the user account for which the file is configured. This file is usually found in the user's home directory under<user-home>/.ssh/authorized_keys(or, on ESXi,/etc/ssh/keys-<username>/authorized_keys).[1]Users may edit the systemâ€™s SSH config file to modify the directivesPubkeyAuthenticationandRSAAuthenticationto the valueyesto ensure public key and RSA authentication are enabled, as well as modify the directivePermitRootLoginto the valueyesto enable root authentication via SSH.[2]The SSH config file is usually located under/etc/ssh/sshd_config.Adversaries may modify SSHauthorized_keysfiles directly with scripts or shell commands to add their own adversary-supplied public keys. In cloud environments, adversaries may be able to modify the SSH authorized_keys file of a particular virtual machine via the command line interface or rest API. For example, by using the Google Cloud CLIâ€™s \"add-metadata\" command an adversary may add SSH keys to a user account.[3][4]Similarly, in Azure, an adversary may update the authorized_keys file of a virtual machine via a PATCH request to the API.[5]This ensures that an adversary possessing the corresponding private key may log in as an existing user via SSH.[6][7]It may also lead to privilege escalation where the virtual machine or instance has distinct permissions from the requesting user.Where authorized_keys files are modified via cloud APIs or command line interfaces, an adversary may achieve privilege escalation on the target virtual machine if they add a key to a higher-privileged user.SSH keys can also be added to accounts on network devices, such as with theip ssh pubkey-chainNetwork Device CLIcommand.[8]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Account Manipulation",
    "parent_technique_id": "T1098",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:41:25.000662"
  },
  {
    "technique_id": "T1546",
    "name": "Event Triggered Execution",
    "description": "Adversaries may establish persistence and/or elevate privileges using system mechanisms that trigger execution based on specific events. Various operating systems have means to monitor and subscribe to events such as logons or other user activity such as running specific applications/binaries. Cloud environments may also support various functions and services that monitor and can be invoked in response to specific cloud events.[1][2][3]Adversaries may abuse these mechanisms as a means of maintaining persistent access to a victim via repeatedly executing malicious code. After gaining access to a victim system, adversaries may create/modify event triggers to point to malicious content that will be executed whenever the event trigger is invoked.[4][5][6]Since the execution can be proxied by an account with higher permissions, such as SYSTEM or service accounts, an adversary may be able to abuse these triggered execution mechanisms to escalate their privileges.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:41:28.277340",
    "subtechniques": []
  },
  {
    "technique_id": "T1078",
    "name": "Valid Accounts",
    "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.[1]Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.In some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.[2]The overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.[3]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:41:31.572905",
    "subtechniques": [
      {
        "id": "T1078.001",
        "name": "Default Accounts"
      },
      {
        "id": "T1078.004",
        "name": "Cloud Accounts"
      }
    ]
  },
  {
    "technique_id": "T1078.001",
    "name": "Default Accounts",
    "description": "Adversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems. Default accounts also include default factory/provider set accounts on other types of systems, software, or devices, including the root user account in AWS, the root user account in ESXi, and the default service account in Kubernetes.[1][2][3]Default accounts are not limited to client machines; rather, they also include accounts that are preset for equipment such as network devices and computer applications, whether they are internal, open source, or commercial. Appliances that come preset with a username and password combination pose a serious threat to organizations that do not change it post installation, as they are easy targets for an adversary. Similarly, adversaries may also utilize publicly disclosed or stolenPrivate Keysor credential materials to legitimately connect to remote environments viaRemote Services.[4]Default accounts may be created on a system after initial setup by connecting or integrating it with another application. For example, when an ESXi server is connected to a vCenter server, a default privileged account calledvpxuseris created on the ESXi server. If a threat actor is able to compromise this accountâ€™s credentials (for example, viaExploitation for Credential Accesson the vCenter host), they will then have access to the ESXi server.[5][6]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Valid Accounts",
    "parent_technique_id": "T1078",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:41:34.838520"
  },
  {
    "technique_id": "T1078.004",
    "name": "Cloud Accounts",
    "description": "Valid accounts in cloud environments may allow adversaries to perform actions to achieve Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. Cloud Accounts can exist solely in the cloud; alternatively, they may be hybrid-joined between on-premises systems and the cloud through syncing or federation with other identity sources such as Windows Active Directory.[1][2][3]Service or user accounts may be targeted by adversaries throughBrute Force,Phishing, or various other means to gain access to the environment. Federated or synced accounts may be a pathway for the adversary to affect both on-premises systems and cloud environments - for example, by leveraging shared credentials to log ontoRemote Services. High privileged cloud accounts, whether federated, synced, or cloud-only, may also allow pivoting to on-premises environments by leveraging SaaS-basedSoftware Deployment Toolsto run commands on hybrid-joined devices.An adversary may create long lastingAdditional Cloud Credentialson a compromised cloud account to maintain persistence in the environment. Such credentials may also be used to bypass security controls such as multi-factor authentication.Cloud accounts may also be able to assumeTemporary Elevated Cloud Accessor other privileges through various means within the environment. Misconfigurations in role assignments or role assumption policies may allow an adversary to use these mechanisms to leverage permissions outside the intended scope of the account. Such over privileged accounts may be used to harvest sensitive data from online storage accounts and databases throughCloud APIor other methods. For example, in Azure environments, adversaries may target Azure Managed Identities, which allow associated Azure resources to request access tokens. By compromising a resource with an attached Managed Identity, such as an Azure VM, adversaries may be able toSteal Application Access Tokens to move laterally across the cloud environment.[4]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Valid Accounts",
    "parent_technique_id": "T1078",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:41:38.198759"
  },
  {
    "technique_id": "T1548",
    "name": "Abuse Elevation Control Mechanism",
    "description": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk.[1][2]An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.[3][4]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:41:41.555274",
    "subtechniques": [
      {
        "id": "T1548.005",
        "name": "Temporary Elevated Cloud Access"
      }
    ]
  },
  {
    "technique_id": "T1548.005",
    "name": "Temporary Elevated Cloud Access",
    "description": "Adversaries may abuse permission configurations that allow them to gain temporarily elevated access to cloud resources. Many cloud environments allow administrators to grant user or service accounts permission to request just-in-time access to roles, impersonate other accounts, pass roles onto resources and services, or otherwise gain short-term access to a set of privileges that may be distinct from their own.Just-in-time access is a mechanism for granting additional roles to cloud accounts in a granular, temporary manner. This allows accounts to operate with only the permissions they need on a daily basis, and to request additional permissions as necessary. Sometimes just-in-time access requests are configured to require manual approval, while other times the desired permissions are automatically granted.[1]Account impersonation allows user or service accounts to temporarily act with the permissions of another account. For example, in GCP users with theiam.serviceAccountTokenCreatorrole can create temporary access tokens or sign arbitrary payloads with the permissions of a service account, while service accounts with domain-wide delegation permission are permitted to impersonate Google Workspace accounts.[2][3][4][5]In Exchange Online, theApplicationImpersonationrole allows a service account to use the permissions associated with specified user accounts.[6]Many cloud environments also include mechanisms for users to pass roles to resources that allow them to perform tasks and authenticate to other services. While the user that creates the resource does not directly assume the role they pass to it, they may still be able to take advantage of the role's access -- for example, by configuring the resource to perform certain actions with the permissions it has been granted. In AWS, users with thePassRolepermission can allow a service they create to assume a given role, while in GCP, users with theiam.serviceAccountUserrole can attach a service account to a resource.[7][2]While users require specific role assignments in order to use any of these features, cloud administrators may misconfigure permissions. This could result in escalation paths that allow adversaries to gain access to resources beyond what was originally intended.[8][9]Note:this technique is distinct fromAdditional Cloud Roles, which involves assigning permanent roles to accounts rather than abusing existing permissions structures to gain temporarily elevated access to resources. However, adversaries that compromise a sufficiently privileged account may grant another account they controlAdditional Cloud Rolesthat would allow them to also abuse these features. This may also allow for greater stealth than would be had by directly using the highly privileged account, especially when logs do not clarify when role impersonation is taking place.[10]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Abuse Elevation Control Mechanism",
    "parent_technique_id": "T1548",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:41:44.790774"
  },
  {
    "technique_id": "T1211",
    "name": "Exploitation for Defense Evasion",
    "description": "Adversaries may exploit a system or application vulnerability to bypass security features. Exploitation of a vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.Â Vulnerabilities may exist in defensive security software that can be used to disable or circumvent them.Adversaries may have prior knowledge through reconnaissance that security software exists within an environment or they may perform checks during or shortly after the system is compromised forSecurity Software Discovery. The security software will likely be targeted directly for exploitation. There are examples of antivirus software being targeted by persistent threat groups to avoid detection.There have also been examples of vulnerabilities in public cloud infrastructure of SaaS applications that may bypass defense boundaries[1], evade security logs[2], or deploy hidden infrastructure.[3]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:41:48.117947",
    "subtechniques": []
  },
  {
    "technique_id": "T1562",
    "name": "Impair Defenses",
    "description": "Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.Adversaries may also impair routine operations that contribute to defensive hygiene, such as blocking users from logging out, preventing a system from shutting down, or disabling or modifying the update process. Adversaries could also target event aggregation and analysis mechanisms, or otherwise disrupt these procedures by altering other system components. These restrictions can further enable malicious operations as well as the continued propagation of incidents.[1][2]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:41:51.484020",
    "subtechniques": [
      {
        "id": "T1562.001",
        "name": "Disable or Modify Tools"
      },
      {
        "id": "T1562.007",
        "name": "Disable or Modify Cloud Firewall"
      },
      {
        "id": "T1562.008",
        "name": "Disable or Modify Cloud Logs"
      }
    ]
  },
  {
    "technique_id": "T1562.001",
    "name": "Disable or Modify Tools",
    "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.[1]Adversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar toIndicator Blocking, adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.[2][3]Alternatively, they may add new directories to an endpoint detection and response (EDR) toolâ€™s exclusion list, enabling them to hide malicious files viaFile/Path Exclusions.[4][5]Adversaries may also focus on specific applications such as Sysmon. For example, the \"Start\" and \"Enable\" values inHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operationalmay be modified to tamper with and potentially disable Sysmon logging.[6]On network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.[7][8]In cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.Furthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools.[9][10][11][12]For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.[11]Additionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e.Exploitation for Privilege Escalation), which may lead to bypassing anti-tampering features.[13]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Impair Defenses",
    "parent_technique_id": "T1562",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:41:54.901267"
  },
  {
    "technique_id": "T1562.007",
    "name": "Disable or Modify Cloud Firewall",
    "description": "Adversaries may disable or modify a firewall within a cloud environment to bypass controls that limit access to cloud resources. Cloud firewalls are separate from system firewalls that are described inDisable or Modify System Firewall.Cloud environments typically utilize restrictive security groups and firewall rules that only allow network activity from trusted IP addresses via expected ports and protocols. An adversary with appropriate permissions may introduce new firewall rules or policies to allow access into a victim cloud environment and/or move laterally from the cloud control plane to the data plane. For example, an adversary may use a script or utility that creates new ingress rules in existing security groups (or creates new security groups entirely) to allow any TCP/IP connectivity to a cloud-hosted instance.[1]They may also remove networking limitations to support traffic associated with malicious activity (such as cryptomining).[2][1]Modifying or disabling a cloud firewall may enable adversary C2 communications, lateral movement, and/or data exfiltration that would otherwise not be allowed. It may also be used to open up resources forBrute ForceorEndpoint Denial of Service.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Impair Defenses",
    "parent_technique_id": "T1562",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:41:58.224626"
  },
  {
    "technique_id": "T1562.008",
    "name": "Disable or Modify Cloud Logs",
    "description": "An adversary may disable or modify cloud logging capabilities and integrations to limit what data is collected on their activities and avoid detection. Cloud environments allow for collection and analysis of audit and application logs that provide insight into what activities a user does within the environment. If an adversary has sufficient permissions, they can disable or modify logging to avoid detection of their activities.For example, in AWS an adversary may disable CloudWatch/CloudTrail integrations prior to conducting further malicious activity.[1]They may alternatively tamper with logging functionality â€“ for example, by removing any associated SNS topics, disabling multi-region logging, or disabling settings that validate and/or encrypt log files.[2][3]In Office 365, an adversary may disable logging on mail collection activities for specific users by using theSet-MailboxAuditBypassAssociationcmdlet, by disabling M365 Advanced Auditing for the user, or by downgrading the userâ€™s license from an Enterprise E5 to an Enterprise E3 license.[4]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Impair Defenses",
    "parent_technique_id": "T1562",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:42:01.471320"
  },
  {
    "technique_id": "T1556",
    "name": "Modify Authentication Process",
    "description": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without usingValid Accounts.Adversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms. Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:42:04.752817",
    "subtechniques": [
      {
        "id": "T1556.006",
        "name": "Multi-Factor Authentication"
      },
      {
        "id": "T1556.007",
        "name": "Hybrid Identity"
      },
      {
        "id": "T1556.009",
        "name": "Conditional Access Policies"
      }
    ]
  },
  {
    "technique_id": "T1556.006",
    "name": "Multi-Factor Authentication",
    "description": "Adversaries may disable or modify multi-factor authentication (MFA) mechanisms to enable persistent access to compromised accounts.Once adversaries have gained access to a network by either compromising an account lacking MFA or by employing an MFA bypass method such asMulti-Factor Authentication Request Generation, adversaries may leverage their access to modify or completely disable MFA defenses. This can be accomplished by abusing legitimate features, such as excluding users from Azure AD Conditional Access Policies, registering a new yet vulnerable/adversary-controlled MFA method, or by manually patching MFA programs and configuration files to bypass expected functionality.[1][2]For example, modifying the Windows hosts file (C:\\windows\\system32\\drivers\\etc\\hosts) to redirect MFA calls to localhost instead of an MFA server may cause the MFA process to fail. If a \"fail open\" policy is in place, any otherwise successful authentication attempt may be granted access without enforcing MFA.[3]Depending on the scope, goals, and privileges of the adversary, MFA defenses may be disabled for individual accounts or for all accounts tied to a larger group, such as all domain accounts in a victim's network environment.[3]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Modify Authentication Process",
    "parent_technique_id": "T1556",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:42:08.027105"
  },
  {
    "technique_id": "T1556.007",
    "name": "Hybrid Identity",
    "description": "Adversaries may patch, modify, or otherwise backdoor cloud authentication processes that are tied to on-premises user identities in order to bypass typical authentication mechanisms, access credentials, and enable persistent access to accounts.Many organizations maintain hybrid user and device identities that are shared between on-premises and cloud-based environments. These can be maintained in a number of ways. For example, Microsoft Entra ID includes three options for synchronizing identities between Active Directory and Entra ID[1]:Password Hash Synchronization (PHS), in which a privileged on-premises account synchronizes user password hashes between Active Directory and Entra ID, allowing authentication to Entra ID to take place entirely in the cloudPass Through Authentication (PTA), in which Entra ID authentication attempts are forwarded to an on-premises PTA agent, which validates the credentials against Active DirectoryActive Directory Federation Services (AD FS), in which a trust relationship is established between Active Directory and Entra IDAD FS can also be used with other SaaS and cloud platforms such as AWS and GCP, which will hand off the authentication process to AD FS and receive a token containing the hybrid usersâ€™ identity and privileges.By modifying authentication processes tied to hybrid identities, an adversary may be able to establish persistent privileged access to cloud resources. For example, adversaries who compromise an on-premises server running a PTA agent may inject a malicious DLL into theAzureADConnectAuthenticationAgentServiceprocess that authorizes all attempts to authenticate to Entra ID, as well as records user credentials.[2][3]In environments using AD FS, an adversary may edit theMicrosoft.IdentityServer.Servicehostconfiguration file to load a malicious DLL that generates authentication tokens for any user with any set of claims, thereby bypassing multi-factor authentication and defined AD FS policies.[4]In some cases, adversaries may be able to modify the hybrid identity authentication process from the cloud. For example, adversaries who compromise a Global Administrator account in an Entra ID tenant may be able to register a new PTA agent via the web console, similarly allowing them to harvest credentials and log into the Entra ID environment as any user.[5]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Modify Authentication Process",
    "parent_technique_id": "T1556",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:42:11.384837"
  },
  {
    "technique_id": "T1556.009",
    "name": "Conditional Access Policies",
    "description": "Adversaries may disable or modify conditional access policies to enable persistent access to compromised accounts. Conditional access policies are additional verifications used by identity providers and identity and access management systems to determine whether a user should be granted access to a resource.For example, in Entra ID, Okta, and JumpCloud, users can be denied access to applications based on their IP address, device enrollment status, and use of multi-factor authentication.[1][2][3]In some cases, identity providers may also support the use of risk-based metrics to deny sign-ins based on a variety of indicators. In AWS and GCP, IAM policies can containconditionattributes that verify arbitrary constraints such as the source IP, the date the request was made, and the nature of the resources or regions being requested.[4][5]These measures help to prevent compromised credentials from resulting in unauthorized access to data or resources, as well as limit user permissions to only those required.By modifying conditional access policies, such as adding additional trusted IP ranges, removingMulti-Factor Authenticationrequirements, or allowing additionalUnused/Unsupported Cloud Regions, adversaries may be able to ensure persistent access to accounts and circumvent defensive measures.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Modify Authentication Process",
    "parent_technique_id": "T1556",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:42:14.672099"
  },
  {
    "technique_id": "T1578",
    "name": "Modify Cloud Compute Infrastructure",
    "description": "An adversary may attempt to modify a cloud account's compute service infrastructure to evade defenses. A modification to the compute service infrastructure can include the creation, deletion, or modification of one or more components such as compute instances, virtual machines, and snapshots.Permissions gained from the modification of infrastructure components may bypass restrictions that prevent access to existing infrastructure. Modifying infrastructure components may also allow an adversary to evade detection and remove evidence of their presence.[1]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:42:18.039454",
    "subtechniques": [
      {
        "id": "T1578.001",
        "name": "Create Snapshot"
      },
      {
        "id": "T1578.002",
        "name": "Create Cloud Instance"
      },
      {
        "id": "T1578.003",
        "name": "Delete Cloud Instance"
      },
      {
        "id": "T1578.004",
        "name": "Revert Cloud Instance"
      },
      {
        "id": "T1578.005",
        "name": "Modify Cloud Compute Configurations"
      }
    ]
  },
  {
    "technique_id": "T1578.001",
    "name": "Create Snapshot",
    "description": "An adversary may create a snapshot or data backup within a cloud account to evade defenses. A snapshot is a point-in-time copy of an existing cloud compute component such as a virtual machine (VM), virtual hard drive, or volume. An adversary may leverage permissions to create a snapshot in order to bypass restrictions that prevent access to existing compute service infrastructure, unlike inRevert Cloud Instancewhere an adversary may revert to a snapshot to evade detection and remove evidence of their presence.An adversary mayCreate Cloud Instance, mount one or more created snapshots to that instance, and then apply a policy that allows the adversary access to the created instance, such as a firewall policy that allows them inbound and outbound SSH access.[1]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Modify Cloud Compute Infrastructure",
    "parent_technique_id": "T1578",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:42:21.377635"
  },
  {
    "technique_id": "T1578.002",
    "name": "Create Cloud Instance",
    "description": "An adversary may create a new instance or virtual machine (VM) within the compute service of a cloud account to evade defenses. Creating a new instance may allow an adversary to bypass firewall rules and permissions that exist on instances currently residing within an account. An adversary mayCreate Snapshotof one or more volumes in an account, create a new instance, mount the snapshots, and then apply a less restrictive security policy to collectData from Local Systemor forRemote Data Staging.[1]Creating a new instance may also allow an adversary to carry out malicious activity within an environment without affecting the execution of current running instances.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Modify Cloud Compute Infrastructure",
    "parent_technique_id": "T1578",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:42:24.756823"
  },
  {
    "technique_id": "T1578.003",
    "name": "Delete Cloud Instance",
    "description": "An adversary may delete a cloud instance after they have performed malicious activities in an attempt to evade detection and remove evidence of their presence.  Deleting an instance or virtual machine can remove valuable forensic artifacts and other evidence of suspicious behavior if the instance is not recoverable.An adversary may alsoCreate Cloud Instanceand later terminate the instance after achieving their objectives.[1]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Modify Cloud Compute Infrastructure",
    "parent_technique_id": "T1578",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:42:28.138589"
  },
  {
    "technique_id": "T1578.004",
    "name": "Revert Cloud Instance",
    "description": "An adversary may revert changes made to a cloud instance after they have performed malicious activities in attempt to evade detection and remove evidence of their presence. In highly virtualized environments, such as cloud-based infrastructure, this may be accomplished by restoring virtual machine (VM) or data storage snapshots through the cloud management dashboard or cloud APIs.Another variation of this technique is to utilize temporary storage attached to the compute instance. Most cloud providers provide various types of storage including persistent, local, and/or ephemeral, with the ephemeral types often reset upon stop/restart of the VM.[1][2]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Modify Cloud Compute Infrastructure",
    "parent_technique_id": "T1578",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:42:31.484129"
  },
  {
    "technique_id": "T1578.005",
    "name": "Modify Cloud Compute Configurations",
    "description": "Adversaries may modify settings that directly affect the size, locations, and resources available to cloud compute infrastructure in order to evade defenses. These settings may include service quotas, subscription associations, tenant-wide policies, or other configurations that impact available compute. Such modifications may allow adversaries to abuse the victimâ€™s compute resources to achieve their goals, potentially without affecting the execution of running instances and/or revealing their activities to the victim.For example, cloud providers often limit customer usage of compute resources via quotas. Customers may request adjustments to these quotas to support increased computing needs, though these adjustments may require approval from the cloud provider. Adversaries who compromise a cloud environment may similarly request quota adjustments in order to support their activities, such as enabling additionalResource Hijackingwithout raising suspicion by using up a victimâ€™s entire quota.[1]Adversaries may also increase allowed resource usage by modifying any tenant-wide policies that limit the sizes of deployed virtual machines.[2]Adversaries may also modify settings that affect where cloud resources can be deployed, such as enablingUnused/Unsupported Cloud Regions.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Modify Cloud Compute Infrastructure",
    "parent_technique_id": "T1578",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:42:34.847437"
  },
  {
    "technique_id": "T1666",
    "name": "Modify Cloud Resource Hierarchy",
    "description": "Adversaries may attempt to modify hierarchical structures in infrastructure-as-a-service (IaaS) environments in order to evade defenses.IaaS environments often group resources into a hierarchy, enabling improved resource management and application of policies to relevant groups. Hierarchical structures differ among cloud providers. For example, in AWS environments, multiple accounts can be grouped under a single organization, while in Azure environments, multiple subscriptions can be grouped under a single management group.[1][2]Adversaries may add, delete, or otherwise modify resource groups within an IaaS hierarchy. For example, in Azure environments, an adversary who has gained access to a Global Administrator account may create new subscriptions in which to deploy resources. They may also engage in subscription hijacking by transferring an existing pay-as-you-go subscription from a victim tenant to an adversary-controlled tenant. This will allow the adversary to use the victimâ€™s compute resources without generating logs on the victim tenant.[3][4]In AWS environments, adversaries with appropriate permissions in a given account may call theLeaveOrganizationAPI, causing the account to be severed from the AWS Organization to which it was tied and removing any Service Control Policies, guardrails, or restrictions imposed upon it by its former Organization. Alternatively, adversaries may call theCreateAccountAPI in order to create a new account within an AWS Organization. This account will use the same payment methods registered to the payment account but may not be subject to existing detections or Service Control Policies.[5]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:42:38.204258",
    "subtechniques": []
  },
  {
    "technique_id": "T1535",
    "name": "Unused/Unsupported Cloud Regions",
    "description": "Adversaries may create cloud instances in unused geographic service regions in order to evade detection. Access is usually obtained through compromising accounts used to manage cloud infrastructure.Cloud service providers often provide infrastructure throughout the world in order to improve performance, provide redundancy, and allow customers to meet compliance requirements. Oftentimes, a customer will only use a subset of the available regions and may not actively monitor other regions. If an adversary creates resources in an unused region, they may be able to operate undetected.A variation on this behavior takes advantage of differences in functionality across cloud regions. An adversary could utilize regions which do not support advanced detection services in order to avoid detection of their activity.An example of adversary use of unused AWS regions is to mine cryptocurrency throughResource Hijacking, which can cost organizations substantial amounts of money over time depending on the processing power used.[1]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:42:41.563015",
    "subtechniques": []
  },
  {
    "technique_id": "T1550",
    "name": "Use Alternate Authentication Material",
    "description": "Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls.Authentication processes generally require a valid identity (e.g., username) along with one or more authentication factors (e.g., password, pin, physical smart card, token generator, etc.). Alternate authentication material is legitimately generated by systems after a user or application successfully authenticates by providing a valid identity and the required authentication factor(s). Alternate authentication material may also be generated during the identity creation process.[1][2]Caching alternate authentication material allows the system to verify an identity has successfully authenticated without asking the user to reenter authentication factor(s). Because the alternate authentication must be maintained by the systemâ€”either in memory or on diskâ€”it may be at risk of being stolen throughCredential Accesstechniques. By stealing alternate authentication material, adversaries are able to bypass system access controls and authenticate to systems without knowing the plaintext password or any additional authentication factors.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:42:44.845481",
    "subtechniques": [
      {
        "id": "T1550.001",
        "name": "Application Access Token"
      },
      {
        "id": "T1550.004",
        "name": "Web Session Cookie"
      }
    ]
  },
  {
    "technique_id": "T1550.001",
    "name": "Application Access Token",
    "description": "Adversaries may use stolen application access tokens to bypass the typical authentication process and access restricted accounts, information, or services on remote systems. These tokens are typically stolen from users or services and used in lieu of login credentials.Application access tokens are used to make authorized API requests on behalf of a user or service and are commonly used to access resources in cloud, container-based applications, and software-as-a-service (SaaS).[1]OAuth is one commonly implemented framework that issues tokens to users for access to systems. These frameworks are used collaboratively to verify the user and determine what actions the user is allowed to perform. Once identity is established, the token allows actions to be authorized, without passing the actual credentials of the user. Therefore, compromise of the token can grant the adversary access to resources of other sites through a malicious application.[2]For example, with a cloud-based email service, once an OAuth access token is granted to a malicious application, it can potentially gain long-term access to features of the user account if a \"refresh\" token enabling background access is awarded.[3]With an OAuth access token an adversary can use the user-granted REST API to perform functions such as email searching and contact enumeration.[4]Compromised access tokens may be used as an initial step in compromising other services. For example, if a token grants access to a victimâ€™s primary email, the adversary may be able to extend access to all other services which the target subscribes by triggering forgotten password routines. In AWS and GCP environments, adversaries can trigger a request for a short-lived access token with the privileges of another user account.[5][6]The adversary can then use this token to request data or perform actions the original account could not. If permissions for this feature are misconfigured â€“ for example, by allowing all users to request a token for a particular account - an adversary may be able to gain initial access to a Cloud Account or escalate their privileges.[7]Direct API access through a token negates the effectiveness of a second authentication factor and may be immune to intuitive countermeasures like changing passwords.  For example, in AWS environments, an adversary who compromises a userâ€™s AWS API credentials may be able to use thests:GetFederationTokenAPI call to create a federated user session, which will have the same permissions as the original user but may persist even if the original user credentials are deactivated.[8]Additionally, access abuse over an API channel can be difficult to detect even from the service provider end, as the access can still align well with a legitimate workflow.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Use Alternate Authentication Material",
    "parent_technique_id": "T1550",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:42:48.139134"
  },
  {
    "technique_id": "T1550.004",
    "name": "Web Session Cookie",
    "description": "Adversaries can use stolen session cookies to authenticate to web applications and services. This technique bypasses some multi-factor authentication protocols since the session is already authenticated.[1]Authentication cookies are commonly used in web applications, including cloud-based services, after a user has authenticated to the service so credentials are not passed and re-authentication does not need to occur as frequently. Cookies are often valid for an extended period of time, even if the web application is not actively used. After the cookie is obtained throughSteal Web Session CookieorWeb Cookies, the adversary may then import the cookie into a browser they control and is then able to use the site or application as the user for as long as the session cookie is active. Once logged into the site, an adversary can access sensitive information, read email, or perform actions that the victim account has permissions to perform.There have been examples of malware targeting session cookies to bypass multi-factor authentication systems.[2]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Use Alternate Authentication Material",
    "parent_technique_id": "T1550",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:42:51.533789"
  },
  {
    "technique_id": "T1078",
    "name": "Valid Accounts",
    "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.[1]Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.In some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.[2]The overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.[3]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:42:54.871281",
    "subtechniques": [
      {
        "id": "T1078.001",
        "name": "Default Accounts"
      },
      {
        "id": "T1078.004",
        "name": "Cloud Accounts"
      }
    ]
  },
  {
    "technique_id": "T1078.001",
    "name": "Default Accounts",
    "description": "Adversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems. Default accounts also include default factory/provider set accounts on other types of systems, software, or devices, including the root user account in AWS, the root user account in ESXi, and the default service account in Kubernetes.[1][2][3]Default accounts are not limited to client machines; rather, they also include accounts that are preset for equipment such as network devices and computer applications, whether they are internal, open source, or commercial. Appliances that come preset with a username and password combination pose a serious threat to organizations that do not change it post installation, as they are easy targets for an adversary. Similarly, adversaries may also utilize publicly disclosed or stolenPrivate Keysor credential materials to legitimately connect to remote environments viaRemote Services.[4]Default accounts may be created on a system after initial setup by connecting or integrating it with another application. For example, when an ESXi server is connected to a vCenter server, a default privileged account calledvpxuseris created on the ESXi server. If a threat actor is able to compromise this accountâ€™s credentials (for example, viaExploitation for Credential Accesson the vCenter host), they will then have access to the ESXi server.[5][6]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Valid Accounts",
    "parent_technique_id": "T1078",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:42:58.199630"
  },
  {
    "technique_id": "T1078.004",
    "name": "Cloud Accounts",
    "description": "Valid accounts in cloud environments may allow adversaries to perform actions to achieve Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. Cloud Accounts can exist solely in the cloud; alternatively, they may be hybrid-joined between on-premises systems and the cloud through syncing or federation with other identity sources such as Windows Active Directory.[1][2][3]Service or user accounts may be targeted by adversaries throughBrute Force,Phishing, or various other means to gain access to the environment. Federated or synced accounts may be a pathway for the adversary to affect both on-premises systems and cloud environments - for example, by leveraging shared credentials to log ontoRemote Services. High privileged cloud accounts, whether federated, synced, or cloud-only, may also allow pivoting to on-premises environments by leveraging SaaS-basedSoftware Deployment Toolsto run commands on hybrid-joined devices.An adversary may create long lastingAdditional Cloud Credentialson a compromised cloud account to maintain persistence in the environment. Such credentials may also be used to bypass security controls such as multi-factor authentication.Cloud accounts may also be able to assumeTemporary Elevated Cloud Accessor other privileges through various means within the environment. Misconfigurations in role assignments or role assumption policies may allow an adversary to use these mechanisms to leverage permissions outside the intended scope of the account. Such over privileged accounts may be used to harvest sensitive data from online storage accounts and databases throughCloud APIor other methods. For example, in Azure environments, adversaries may target Azure Managed Identities, which allow associated Azure resources to request access tokens. By compromising a resource with an attached Managed Identity, such as an Azure VM, adversaries may be able toSteal Application Access Tokens to move laterally across the cloud environment.[4]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Valid Accounts",
    "parent_technique_id": "T1078",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:43:01.483061"
  },
  {
    "technique_id": "T1110",
    "name": "Brute Force",
    "description": "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained.[1]Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism.[2]Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.Brute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access toValid Accountswithin a victim environment leveraging knowledge gathered from other post-compromise behaviors such asOS Credential Dumping,Account Discovery, orPassword Policy Discovery. Adversaries may also combine brute forcing activity with behaviors such asExternal Remote Servicesas part of Initial Access.",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:43:04.848171",
    "subtechniques": [
      {
        "id": "T1110.001",
        "name": "Password Guessing"
      },
      {
        "id": "T1110.003",
        "name": "Password Spraying"
      },
      {
        "id": "T1110.004",
        "name": "Credential Stuffing"
      }
    ]
  },
  {
    "technique_id": "T1110.001",
    "name": "Password Guessing",
    "description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.Guessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies.[1]Typically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:SSH (22/TCP)Telnet (23/TCP)FTP (21/TCP)NetBIOS / SMB / Samba (139/TCP & 445/TCP)LDAP (389/TCP)Kerberos (88/TCP)RDP / Terminal Services (3389/TCP)HTTP/HTTP Management Services (80/TCP & 443/TCP)MSSQL (1433/TCP)Oracle (1521/TCP)MySQL (3306/TCP)VNC (5900/TCP)SNMP (161/UDP and 162/TCP/UDP)In addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.[2]. Further, adversaries may abuse network device interfaces (such aswlanAPI) to brute force accessible wifi-router(s) via wireless authentication protocols.[3]In default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Brute Force",
    "parent_technique_id": "T1110",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:43:08.133183"
  },
  {
    "technique_id": "T1110.003",
    "name": "Password Spraying",
    "description": "Adversaries may use a single or small list of commonly used passwords against many different accounts to attempt to acquire valid account credentials. Password spraying uses one password (e.g. 'Password01'), or a small list of commonly used passwords, that may match the complexity policy of the domain. Logins are attempted with that password against many different accounts on a network to avoid account lockouts that would normally occur when brute forcing a single account with many passwords.[1]Typically, management services over commonly used ports are used when password spraying. Commonly targeted services include the following:SSH (22/TCP)Telnet (23/TCP)FTP (21/TCP)NetBIOS / SMB / Samba (139/TCP & 445/TCP)LDAP (389/TCP)Kerberos (88/TCP)RDP / Terminal Services (3389/TCP)HTTP/HTTP Management Services (80/TCP & 443/TCP)MSSQL (1433/TCP)Oracle (1521/TCP)MySQL (3306/TCP)VNC (5900/TCP)In addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.[2]In default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Brute Force",
    "parent_technique_id": "T1110",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:43:11.417905"
  },
  {
    "technique_id": "T1110.004",
    "name": "Credential Stuffing",
    "description": "Adversaries may use credentials obtained from breach dumps of unrelated accounts to gain access to target accounts through credential overlap. Occasionally, large numbers of username and password pairs are dumped online when a website or service is compromised and the user account credentials accessed. The information may be useful to an adversary attempting to compromise accounts by taking advantage of the tendency for users to use the same passwords across personal and business accounts.Credential stuffing is a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies.Typically, management services over commonly used ports are used when stuffing credentials. Commonly targeted services include the following:SSH (22/TCP)Telnet (23/TCP)FTP (21/TCP)NetBIOS / SMB / Samba (139/TCP & 445/TCP)LDAP (389/TCP)Kerberos (88/TCP)RDP / Terminal Services (3389/TCP)HTTP/HTTP Management Services (80/TCP & 443/TCP)MSSQL (1433/TCP)Oracle (1521/TCP)MySQL (3306/TCP)VNC (5900/TCP)In addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.[1]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Brute Force",
    "parent_technique_id": "T1110",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:43:14.782824"
  },
  {
    "technique_id": "T1555",
    "name": "Credentials from Password Stores",
    "description": "Adversaries may search for common password storage locations to obtain user credentials.[1]Passwords are stored in several places on a system, depending on the operating system or application holding the credentials. There are also specific applications and services that store passwords to make them easier for users to manage and maintain, such as password managers and cloud secrets vaults. Once credentials are obtained, they can be used to perform lateral movement and access restricted information.",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:43:18.190511",
    "subtechniques": [
      {
        "id": "T1555.006",
        "name": "Cloud Secrets Management Stores"
      }
    ]
  },
  {
    "technique_id": "T1555.006",
    "name": "Cloud Secrets Management Stores",
    "description": "Adversaries may acquire credentials from cloud-native secret management solutions such as AWS Secrets Manager, GCP Secret Manager, Azure Key Vault, and Terraform Vault.Secrets managers support the secure centralized management of passwords, API keys, and other credential material. Where secrets managers are in use, cloud services can dynamically acquire credentials via API requests rather than accessing secrets insecurely stored in plain text files or environment variables.If an adversary is able to gain sufficient privileges in a cloud environment â€“ for example, by obtaining the credentials of high-privilegedCloud Accountsor compromising a service that has permission to retrieve secrets â€“ they may be able to request secrets from the secrets manager. This can be accomplished via commands such asget-secret-valuein AWS,gcloud secrets describein GCP, andaz key vault secret showin Azure.[1][2][3][4][5]Note:this technique is distinct fromCloud Instance Metadata APIin that the credentials are being directly requested from the cloud secrets manager, rather than through the medium of the instance metadata API.",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Credentials from Password Stores",
    "parent_technique_id": "T1555",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:43:21.513344"
  },
  {
    "technique_id": "T1606",
    "name": "Forge Web Credentials",
    "description": "Adversaries may forge credential materials that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies, tokens, or other materials to authenticate and authorize user access.Adversaries may generate these credential materials in order to gain access to web resources. This differs fromSteal Web Session Cookie,Steal Application Access Token, and other similar behaviors in that the credentials are new and forged by the adversary, rather than stolen or intercepted from legitimate users.The generation of web credentials often requires secret values, such as passwords,Private Keys, or other cryptographic seed values.[1]Adversaries may also forge tokens by taking advantage of features such as theAssumeRoleandGetFederationTokenAPIs in AWS, which allow users to request temporary security credentials (i.e.,Temporary Elevated Cloud Access), or thezmprov gdpakcommand in Zimbra, which generates a pre-authentication key that can be used to generate tokens for any user in the domain.[2][3]Once forged, adversaries may use these web credentials to access resources (ex:Use Alternate Authentication Material), which may bypass multi-factor and other authentication protection mechanisms.[4][5][6]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:43:24.780372",
    "subtechniques": [
      {
        "id": "T1606.001",
        "name": "Web Cookies"
      },
      {
        "id": "T1606.002",
        "name": "SAML Tokens"
      }
    ]
  },
  {
    "technique_id": "T1606.001",
    "name": "Web Cookies",
    "description": "Adversaries may forge web cookies that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies to authenticate and authorize user access.Adversaries may generate these cookies in order to gain access to web resources. This differs fromSteal Web Session Cookieand other similar behaviors in that the cookies are new and forged by the adversary, rather than stolen or intercepted from legitimate users. Most common web applications have standardized and documented cookie values that can be generated using provided tools or interfaces.[1]The generation of web cookies often requires secret values, such as passwords,Private Keys, or other cryptographic seed values.Once forged, adversaries may use these web cookies to access resources (Web Session Cookie), which may bypass multi-factor and other authentication protection mechanisms.[2][1][3]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Forge Web Credentials",
    "parent_technique_id": "T1606",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:43:28.195724"
  },
  {
    "technique_id": "T1606.002",
    "name": "SAML Tokens",
    "description": "An adversary may forge SAML tokens with any permissions claims and lifetimes if they possess a valid SAML token-signing certificate.[1]The default lifetime of a SAML token is one hour, but the validity period can be specified in theNotOnOrAftervalue of theconditions ...element in a token. This value can be changed using theAccessTokenLifetimein aLifetimeTokenPolicy.[2]Forged SAML tokens enable adversaries to authenticate across services that use SAML 2.0 as an SSO (single sign-on) mechanism.[3]An adversary may utilizePrivate Keysto compromise an organization's token-signing certificate to create forged SAML tokens. If the adversary has sufficient permissions to establish a new federation trust with their own Active Directory Federation Services (AD FS) server, they may instead generate their own trusted token-signing certificate.[4]This differs fromSteal Application Access Tokenand other similar behaviors in that the tokens are new and forged by the adversary, rather than stolen or intercepted from legitimate users.An adversary may gain administrative Entra ID privileges if a SAML token is forged which claims to represent a highly privileged account. This may lead toUse Alternate Authentication Material, which may bypass multi-factor and other authentication protection mechanisms.[4]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Forge Web Credentials",
    "parent_technique_id": "T1606",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:43:31.546875"
  },
  {
    "technique_id": "T1556",
    "name": "Modify Authentication Process",
    "description": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without usingValid Accounts.Adversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms. Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop.",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:43:34.849518",
    "subtechniques": [
      {
        "id": "T1556.006",
        "name": "Multi-Factor Authentication"
      },
      {
        "id": "T1556.007",
        "name": "Hybrid Identity"
      },
      {
        "id": "T1556.009",
        "name": "Conditional Access Policies"
      }
    ]
  },
  {
    "technique_id": "T1556.006",
    "name": "Multi-Factor Authentication",
    "description": "Adversaries may disable or modify multi-factor authentication (MFA) mechanisms to enable persistent access to compromised accounts.Once adversaries have gained access to a network by either compromising an account lacking MFA or by employing an MFA bypass method such asMulti-Factor Authentication Request Generation, adversaries may leverage their access to modify or completely disable MFA defenses. This can be accomplished by abusing legitimate features, such as excluding users from Azure AD Conditional Access Policies, registering a new yet vulnerable/adversary-controlled MFA method, or by manually patching MFA programs and configuration files to bypass expected functionality.[1][2]For example, modifying the Windows hosts file (C:\\windows\\system32\\drivers\\etc\\hosts) to redirect MFA calls to localhost instead of an MFA server may cause the MFA process to fail. If a \"fail open\" policy is in place, any otherwise successful authentication attempt may be granted access without enforcing MFA.[3]Depending on the scope, goals, and privileges of the adversary, MFA defenses may be disabled for individual accounts or for all accounts tied to a larger group, such as all domain accounts in a victim's network environment.[3]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Modify Authentication Process",
    "parent_technique_id": "T1556",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:43:38.115706"
  },
  {
    "technique_id": "T1556.007",
    "name": "Hybrid Identity",
    "description": "Adversaries may patch, modify, or otherwise backdoor cloud authentication processes that are tied to on-premises user identities in order to bypass typical authentication mechanisms, access credentials, and enable persistent access to accounts.Many organizations maintain hybrid user and device identities that are shared between on-premises and cloud-based environments. These can be maintained in a number of ways. For example, Microsoft Entra ID includes three options for synchronizing identities between Active Directory and Entra ID[1]:Password Hash Synchronization (PHS), in which a privileged on-premises account synchronizes user password hashes between Active Directory and Entra ID, allowing authentication to Entra ID to take place entirely in the cloudPass Through Authentication (PTA), in which Entra ID authentication attempts are forwarded to an on-premises PTA agent, which validates the credentials against Active DirectoryActive Directory Federation Services (AD FS), in which a trust relationship is established between Active Directory and Entra IDAD FS can also be used with other SaaS and cloud platforms such as AWS and GCP, which will hand off the authentication process to AD FS and receive a token containing the hybrid usersâ€™ identity and privileges.By modifying authentication processes tied to hybrid identities, an adversary may be able to establish persistent privileged access to cloud resources. For example, adversaries who compromise an on-premises server running a PTA agent may inject a malicious DLL into theAzureADConnectAuthenticationAgentServiceprocess that authorizes all attempts to authenticate to Entra ID, as well as records user credentials.[2][3]In environments using AD FS, an adversary may edit theMicrosoft.IdentityServer.Servicehostconfiguration file to load a malicious DLL that generates authentication tokens for any user with any set of claims, thereby bypassing multi-factor authentication and defined AD FS policies.[4]In some cases, adversaries may be able to modify the hybrid identity authentication process from the cloud. For example, adversaries who compromise a Global Administrator account in an Entra ID tenant may be able to register a new PTA agent via the web console, similarly allowing them to harvest credentials and log into the Entra ID environment as any user.[5]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Modify Authentication Process",
    "parent_technique_id": "T1556",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:43:41.470783"
  },
  {
    "technique_id": "T1556.009",
    "name": "Conditional Access Policies",
    "description": "Adversaries may disable or modify conditional access policies to enable persistent access to compromised accounts. Conditional access policies are additional verifications used by identity providers and identity and access management systems to determine whether a user should be granted access to a resource.For example, in Entra ID, Okta, and JumpCloud, users can be denied access to applications based on their IP address, device enrollment status, and use of multi-factor authentication.[1][2][3]In some cases, identity providers may also support the use of risk-based metrics to deny sign-ins based on a variety of indicators. In AWS and GCP, IAM policies can containconditionattributes that verify arbitrary constraints such as the source IP, the date the request was made, and the nature of the resources or regions being requested.[4][5]These measures help to prevent compromised credentials from resulting in unauthorized access to data or resources, as well as limit user permissions to only those required.By modifying conditional access policies, such as adding additional trusted IP ranges, removingMulti-Factor Authenticationrequirements, or allowing additionalUnused/Unsupported Cloud Regions, adversaries may be able to ensure persistent access to accounts and circumvent defensive measures.",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Modify Authentication Process",
    "parent_technique_id": "T1556",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:43:44.765575"
  },
  {
    "technique_id": "T1621",
    "name": "Multi-Factor Authentication Request Generation",
    "description": "Adversaries may attempt to bypass multi-factor authentication (MFA) mechanisms and gain access to accounts by generating MFA requests sent to users.Adversaries in possession of credentials toValid Accountsmay be unable to complete the login process if they lack access to the 2FA or MFA mechanisms required as an additional credential and security control. To circumvent this, adversaries may abuse the automatic generation of push notifications to MFA services such as Duo Push, Microsoft Authenticator, Okta, or similar services to have the user grant access to their account. If adversaries lack credentials to victim accounts, they may also abuse automatic push notification generation when this option is configured for self-service password reset (SSPR).[1]In some cases, adversaries may continuously repeat login attempts in order to bombard users with MFA push notifications, SMS messages, and phone calls, potentially resulting in the user finally accepting the authentication request in response to \"MFA fatigue.\"[2][3][4]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:43:48.044977",
    "subtechniques": []
  },
  {
    "technique_id": "T1040",
    "name": "Network Sniffing",
    "description": "Adversaries may passively sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.Data captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such asLLMNR/NBT-NS Poisoning and SMB Relay, can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.Network sniffing may reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequentLateral Movementand/orDefense Evasionactivities. Adversaries may likely also utilize network sniffing duringAdversary-in-the-Middle(AiTM) to passively gain additional knowledge about the environment.In cloud-based environments, adversaries may still be able to use traffic mirroring services to sniff network traffic from virtual machines. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.[1][2][3]Often, much of this traffic will be in cleartext due to the use of TLS termination at the load balancer level to reduce the strain of encrypting and decrypting traffic.[4][5]The adversary can then use exfiltration techniques such as Transfer Data to Cloud Account in order to access the sniffed traffic.[4]On network devices, adversaries may perform network captures usingNetwork Device CLIcommands such asmonitor capture.[6][7]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:43:51.422116",
    "subtechniques": []
  },
  {
    "technique_id": "T1528",
    "name": "Steal Application Access Token",
    "description": "Adversaries can steal application access tokens as a means of acquiring credentials to access remote systems and resources.Application access tokens are used to make authorized API requests on behalf of a user or service and are commonly used as a way to access resources in cloud and container-based applications and software-as-a-service (SaaS).[1]Adversaries who steal account API tokens in cloud and containerized environments may be able to access data and perform actions with the permissions of these accounts, which can lead to privilege escalation and further compromise of the environment.For example, in Kubernetes environments, processes running inside a container may communicate with the Kubernetes API server using service account tokens. If a container is compromised, an adversary may be able to steal the containerâ€™s token and thereby gain access to Kubernetes API commands.[2]Similarly, instances within continuous-development / continuous-integration (CI/CD) pipelines will often use API tokens to authenticate to other services for testing and deployment.[3]If these pipelines are compromised, adversaries may be able to steal these tokens and leverage their privileges.In Azure, an adversary who compromises a resource with an attached Managed Identity, such as an Azure VM, can request short-lived tokens through the Azure Instance Metadata Service (IMDS). These tokens can then facilitate unauthorized actions or further access to other Azure services, bypassing typical credential-based authentication.[4][5]Token theft can also occur through social engineering, in which case user action may be required to grant access. OAuth is one commonly implemented framework that issues tokens to users for access to systems. An application desiring access to cloud-based services or protected APIs can gain entry using OAuth 2.0 through a variety of authorization protocols. An example commonly-used sequence is Microsoft's Authorization Code Grant flow.[6][7]An OAuth access token enables a third-party application to interact with resources containing user data in the ways requested by the application without obtaining user credentials.Adversaries can leverage OAuth authorization by constructing a malicious application designed to be granted access to resources with the target user's OAuth token.[8][9]The adversary will need to complete registration of their application with the authorization server, for example Microsoft Identity Platform using Azure Portal, the Visual Studio IDE, the command-line interface, PowerShell, or REST API calls.[10]Then, they can send aSpearphishing Linkto the target user to entice them to grant access to the application. Once the OAuth access token is granted, the application can gain potentially long-term access to features of the user account throughApplication Access Token.[11]Application access tokens may function within a limited lifetime, limiting how long an adversary can utilize the stolen token. However, in some cases, adversaries can also steal application refresh tokens[12], allowing them to obtain new access tokens without prompting the user.",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:43:54.825195",
    "subtechniques": []
  },
  {
    "technique_id": "T1552",
    "name": "Unsecured Credentials",
    "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g.Bash History), operating system or application-specific repositories (e.g.Credentials in Registry),  or other specialized files/artifacts (e.g.Private Keys).[1]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:43:58.198416",
    "subtechniques": [
      {
        "id": "T1552.001",
        "name": "Credentials In Files"
      },
      {
        "id": "T1552.005",
        "name": "Cloud Instance Metadata API"
      }
    ]
  },
  {
    "technique_id": "T1552.001",
    "name": "Credentials In Files",
    "description": "Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.It is possible to extract passwords from backups or saved virtual machines throughOS Credential Dumping.[1]Passwords may also be obtained from Group Policy Preferences stored on the Windows Domain Controller.[2]In cloud and/or containerized environments, authenticated user and service account credentials are often stored in local configuration and credential files.[3]They may also be found as parameters to deployment commands in container logs.[4]In some cases, these files can be copied and reused on another machine or the contents can be read and then used to authenticate without needing to copy any files.[5]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Unsecured Credentials",
    "parent_technique_id": "T1552",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:44:01.588367"
  },
  {
    "technique_id": "T1552.005",
    "name": "Cloud Instance Metadata API",
    "description": "Adversaries may attempt to access the Cloud Instance Metadata API to collect credentials and other sensitive data.Most cloud service providers support a Cloud Instance Metadata API which is a service provided to running virtual instances that allows applications to access information about the running virtual instance. Available information generally includes name, security group, and additional metadata including sensitive data such as credentials and UserData scripts that may contain additional secrets. The Instance Metadata API is provided as a convenience to assist in managing applications and is accessible by anyone who can access the instance.[1]A cloud metadata API has been used in at least one high profile compromise.[2]If adversaries have a presence on the running virtual instance, they may query the Instance Metadata API directly to identify credentials that grant access to additional resources. Additionally, adversaries may exploit a Server-Side Request Forgery (SSRF) vulnerability in a public facing web proxy that allows them to gain access to the sensitive information via a request to the Instance Metadata API.[3]The de facto standard across cloud service providers is to host the Instance Metadata API athttp[:]//169.254.169.254.",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Unsecured Credentials",
    "parent_technique_id": "T1552",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:44:04.947611"
  },
  {
    "technique_id": "T1087",
    "name": "Account Discovery",
    "description": "Adversaries may attempt to get a listing of valid accounts, usernames, or email addresses on a system or within a compromised environment. This information can help adversaries determine which accounts exist, which can aid in follow-on behavior such as brute-forcing, spear-phishing attacks, or account takeovers (e.g.,Valid Accounts).Adversaries may use several methods to enumerate accounts, including abuse of existing tools, built-in commands, and potential misconfigurations that leak account names and roles or permissions in the targeted environment.For examples, cloud environments typically provide easily accessible interfaces to obtain user lists.[1][2]On hosts, adversaries can use defaultPowerShelland other command line functionality to identify accounts. Information about email addresses and accounts may also be extracted by searching an infected systemâ€™s files.",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:44:08.230119",
    "subtechniques": [
      {
        "id": "T1087.004",
        "name": "Cloud Account"
      }
    ]
  },
  {
    "technique_id": "T1087.004",
    "name": "Cloud Account",
    "description": "Adversaries may attempt to get a listing of cloud accounts. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application.With authenticated access there are several tools that can be used to find accounts. TheGet-MsolRoleMemberPowerShell cmdlet can be used to obtain account names given a role or permissions group in Office 365.[1][2]The Azure CLI (AZ CLI) also provides an interface to obtain user accounts with authenticated access to a domain. The commandaz ad user listwill list all users within a domain.[3][4]The AWS commandaws iam list-usersmay be used to obtain a list of users in the current account whileaws iam list-rolescan obtain IAM roles that have a specified path prefix.[5][6]In GCP,gcloud iam service-accounts listandgcloud projects get-iam-policymay be used to obtain a listing of service accounts and users in a project.[7]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Account Discovery",
    "parent_technique_id": "T1087",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:44:11.565013"
  },
  {
    "technique_id": "T1580",
    "name": "Cloud Infrastructure Discovery",
    "description": "An adversary may attempt to discover infrastructure and resources that are available within an infrastructure-as-a-service (IaaS) environment. This includes compute service resources such as instances, virtual machines, and snapshots as well as resources of other services including the storage and database services.Cloud providers offer methods such as APIs and commands issued through CLIs to serve information about infrastructure. For example, AWS provides aDescribeInstancesAPI within the Amazon EC2 API that can return information about one or more instances within an account, theListBucketsAPI that returns a list of all buckets owned by the authenticated sender of the request, theHeadBucketAPI to determine a bucketâ€™s existence along with access permissions of the request sender, or theGetPublicAccessBlockAPI to retrieve access block configuration for a bucket.[1][2][3][4]Similarly, GCP's Cloud SDK CLI provides thegcloud compute instances listcommand to list all Google Compute Engine instances in a project[5], and Azure's CLI commandaz vm listlists details of virtual machines.[6]In addition to API commands, adversaries can utilize open source tools to discover cloud storage infrastructure throughWordlist Scanning.[7]An adversary may enumerate resources using a compromised user's access keys to determine which are available to that user.[8]The discovery of these available resources may help adversaries determine their next steps in the Cloud environment, such as establishing Persistence.[9]An adversary may also use this information to change the configuration to make the bucket publicly accessible, allowing data to be accessed without authentication. Adversaries have also may use infrastructure discovery APIs such asDescribeDBInstancesto determine size, owner, permissions, and network ACLs of database resources.[10]Adversaries can use this information to determine the potential value of databases and discover the requirements to access them. Unlike inCloud Service Discovery, this technique focuses on the discovery of components of the provided services rather than the services themselves.",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:44:14.907946",
    "subtechniques": []
  },
  {
    "technique_id": "T1538",
    "name": "Cloud Service Dashboard",
    "description": "An adversary may use a cloud service dashboard GUI with stolen credentials to gain useful information from an operational cloud environment, such as specific services, resources, and features. For example, the GCP Command Center can be used to view all assets, review findings of potential security risks, and run additional queries, such as finding public IP addresses and open ports.[1]Depending on the configuration of the environment, an adversary may be able to enumerate more information via the graphical dashboard than an API. This also allows the adversary to gain information without manually making any API requests.",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:44:18.180592",
    "subtechniques": []
  },
  {
    "technique_id": "T1526",
    "name": "Cloud Service Discovery",
    "description": "An adversary may attempt to enumerate the cloud services running on a system after gaining access. These methods can differ from platform-as-a-service (PaaS), to infrastructure-as-a-service (IaaS), or software-as-a-service (SaaS). Many services exist throughout the various cloud providers and can include Continuous Integration and Continuous Delivery (CI/CD), Lambda Functions, Entra ID, etc. They may also include security services, such as AWS GuardDuty and Microsoft Defender for Cloud, and logging services, such as AWS CloudTrail and Google Cloud Audit Logs.Adversaries may attempt to discover information about the services enabled throughout the environment. Azure tools and APIs, such as the Microsoft Graph API and Azure Resource Manager API, can enumerate resources and services, including applications, management groups, resources and policy definitions, and their relationships that are accessible by an identity.[1][2]For example, Stormspotter is an open source tool for enumerating and constructing a graph for Azure resources and services, and Pacu is an open source AWS exploitation framework that supports several methods for discovering cloud services.[3][4]Adversaries may use the information gained to shape follow-on behaviors, such as targeting data or credentials from enumerated services or evading identified defenses throughDisable or Modify ToolsorDisable or Modify Cloud Logs.",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:44:21.435833",
    "subtechniques": []
  },
  {
    "technique_id": "T1619",
    "name": "Cloud Storage Object Discovery",
    "description": "Adversaries may enumerate objects in cloud storage infrastructure. Adversaries may use this information during automated discovery to shape follow-on behaviors, including requesting all or specific objects from cloud storage.  Similar toFile and Directory Discoveryon a local host, after identifying available storage services (i.e.Cloud Infrastructure Discovery) adversaries may access the contents/objects stored in cloud infrastructure.Cloud service providers offer APIs allowing users to enumerate objects stored within cloud storage. Examples include ListObjectsV2 in AWS[1]and List Blobs in Azure[2].",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:44:24.789908",
    "subtechniques": []
  },
  {
    "technique_id": "T1654",
    "name": "Log Enumeration",
    "description": "Adversaries may enumerate system and service logs to find useful data. These logs may highlight various types of valuable insights for an adversary, such as user authentication records (Account Discovery), security or vulnerable software (Software Discovery), or hosts within a compromised network (Remote System Discovery).Host binaries may be leveraged to collect system logs. Examples include usingwevtutil.exeorPowerShellon Windows to access and/or export security event information.[1][2]In cloud environments, adversaries may leverage utilities such as the Azure VM Agentâ€™sCollectGuestLogs.exeto collect security logs from cloud hosted infrastructure.[3]Adversaries may also target centralized logging infrastructure such as SIEMs. Logs may also be bulk exported and sent to adversary-controlled infrastructure for offline analysis.In addition to gaining a better understanding of the environment, adversaries may also monitor logs in real time to track incident response procedures. This may allow them to adjust their techniques in order to maintain persistence or evade defenses.[4]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:44:28.162087",
    "subtechniques": []
  },
  {
    "technique_id": "T1046",
    "name": "Network Service Discovery",
    "description": "Adversaries may attempt to get a listing of services running on remote hosts and local network infrastructure devices, including those that may be vulnerable to remote software exploitation. Common methods to acquire this information include port, vulnerability, and/or wordlist scans using tools that are brought onto a system.[1]Within cloud environments, adversaries may attempt to discover services running on other cloud hosts. Additionally, if the cloud environment is connected to a on-premises environment, adversaries may be able to identify services running on non-cloud systems as well.Within macOS environments, adversaries may use the native Bonjour application to discover services running on other macOS hosts within a network. The Bonjour mDNSResponder daemon automatically registers and advertises a hostâ€™s registered services on the network. For example, adversaries can use a mDNS query (such asdns-sd -B _ssh._tcp .) to find other systems broadcasting the ssh service.[2][3]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:44:31.546664",
    "subtechniques": []
  },
  {
    "technique_id": "T1040",
    "name": "Network Sniffing",
    "description": "Adversaries may passively sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.Data captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such asLLMNR/NBT-NS Poisoning and SMB Relay, can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.Network sniffing may reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequentLateral Movementand/orDefense Evasionactivities. Adversaries may likely also utilize network sniffing duringAdversary-in-the-Middle(AiTM) to passively gain additional knowledge about the environment.In cloud-based environments, adversaries may still be able to use traffic mirroring services to sniff network traffic from virtual machines. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.[1][2][3]Often, much of this traffic will be in cleartext due to the use of TLS termination at the load balancer level to reduce the strain of encrypting and decrypting traffic.[4][5]The adversary can then use exfiltration techniques such as Transfer Data to Cloud Account in order to access the sniffed traffic.[4]On network devices, adversaries may perform network captures usingNetwork Device CLIcommands such asmonitor capture.[6][7]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:44:34.928611",
    "subtechniques": []
  },
  {
    "technique_id": "T1201",
    "name": "Password Policy Discovery",
    "description": "Adversaries may attempt to access detailed information about the password policy used within an enterprise network or cloud environment. Password policies are a way to enforce complex passwords that are difficult to guess or crack throughBrute Force. This information may help the adversary to create a list of common passwords and launch dictionary and/or brute force attacks which adheres to the policy (e.g. if the minimum password length should be 8, then not trying passwords such as 'pass123'; not checking for more than 3-4 passwords per account if the lockout is set to 6 as to not lock out accounts).Password policies can be set and discovered on Windows, Linux, and macOS systems via various command shell utilities such asnet accounts (/domain),Get-ADDefaultDomainPasswordPolicy,chage -l,cat /etc/pam.d/common-password, andpwpolicy getaccountpolicies[1][2]. Adversaries may also leverage aNetwork Device CLIon network devices to discover password policy information (e.g.show aaa,show aaa common-criteria policy all).[3]Password policies can be discovered in cloud environments using available APIs such asGetAccountPasswordPolicyin AWS[4].",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:44:38.292243",
    "subtechniques": []
  },
  {
    "technique_id": "T1069",
    "name": "Permission Groups Discovery",
    "description": "Adversaries may attempt to discover group and permission settings. This information can help adversaries determine which user accounts and groups are available, the membership of users in particular groups, and which users and groups have elevated permissions.Adversaries may attempt to discover group permission settings in many different ways. This data may provide the adversary with information about the compromised environment that can be used in follow-on activity and targeting.[1]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:44:41.576155",
    "subtechniques": [
      {
        "id": "T1069.003",
        "name": "Cloud Groups"
      }
    ]
  },
  {
    "technique_id": "T1069.003",
    "name": "Cloud Groups",
    "description": "Adversaries may attempt to find cloud groups and permission settings. The knowledge of cloud permission groups can help adversaries determine the particular roles of users and groups within an environment, as well as which users are associated with a particular group.With authenticated access there are several tools that can be used to find permissions groups. TheGet-MsolRolePowerShell cmdlet can be used to obtain roles and permissions groups for Exchange and Office 365 accounts[1][2].Azure CLI (AZ CLI) and the Google Cloud Identity Provider API also provide interfaces to obtain permissions groups. The commandaz ad user get-member-groupswill list groups associated to a user account for Azure while the API endpointGET https://cloudidentity.googleapis.com/v1/groupslists group resources available to a user for Google.[3][4][5]In AWS, the commandsListRolePoliciesandListAttachedRolePoliciesallow users to enumerate the policies attached to a role.[6]Adversaries may attempt to list ACLs for objects to determine the owner and other accounts with access to the object, for example, via the AWSGetBucketAclAPI[7]. Using this information an adversary can target accounts with permissions to a given object or leverage accounts they have already compromised to access the object.",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Permission Groups Discovery",
    "parent_technique_id": "T1069",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:44:44.948479"
  },
  {
    "technique_id": "T1518",
    "name": "Software Discovery",
    "description": "Adversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment. Adversaries may use the information fromSoftware Discoveryduring automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Such software may be deployed widely across the environment for configuration management or security reasons, such asSoftware Deployment Tools, and may allow adversaries broad access to infect devices or move laterally.Adversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable toExploitation for Privilege Escalation.",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:44:48.318098",
    "subtechniques": [
      {
        "id": "T1518.001",
        "name": "Security Software Discovery"
      }
    ]
  },
  {
    "technique_id": "T1518.001",
    "name": "Security Software Discovery",
    "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as cloud monitoring agents and anti-virus. Adversaries may use the information fromSecurity Software Discoveryduring automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Example commands that can be used to obtain security software information arenetsh,reg querywithReg,dirwithcmd, andTasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.Adversaries may also utilize theCloud APIto discover cloud-native security software installed on compute infrastructure, such as the AWS CloudWatch agent, Azure VM Agent, and Google Cloud Monitor agent. These agents  may collect  metrics and logs from the VM, which may be centrally aggregated in a cloud-based monitoring platform.",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Software Discovery",
    "parent_technique_id": "T1518",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:44:51.782049"
  },
  {
    "technique_id": "T1082",
    "name": "System Information Discovery",
    "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information fromSystem Information Discoveryduring automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Tools such asSysteminfocan be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through thesystemsetupconfiguration tool on macOS. As an example, adversaries with user-level access can execute thedf -aHcommand to obtain currently mounted disks and associated freely available space. Adversaries may also leverage aNetwork Device CLIon network devices to gather detailed system information (e.g.show version).[1]On ESXi servers, threat actors may gather system information from various esxcli utilities, such assystem hostname get,system version get, andstorage filesystem list(to list storage volumes).[2][3]Infrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.[4][5][6]System Information Discoverycombined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.[7][8]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:44:55.421136",
    "subtechniques": []
  },
  {
    "technique_id": "T1614",
    "name": "System Location Discovery",
    "description": "Adversaries may gather information in an attempt to calculate the geographical location of a victim host. Adversaries may use the information fromSystem Location Discoveryduring automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Adversaries may attempt to infer the location of a system using various system checks, such as time zone, keyboard layout, and/or language settings.[1][2][3]Windows API functions such asGetLocaleInfoWcan also be used to determine the locale of the host.[1]In cloud environments, an instance's availability zone may also be discovered by accessing the instance metadata service from the instance.[4][5]Adversaries may also attempt to infer the location of a victim host using IP addressing, such as via online geolocation IP-lookup services.[6][2]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:44:58.802667",
    "subtechniques": []
  },
  {
    "technique_id": "T1049",
    "name": "System Network Connections Discovery",
    "description": "Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network.An adversary who gains access to a system that is part of a cloud-based environment may map out Virtual Private Clouds or Virtual Networks in order to determine what systems and services are connected. The actions performed are likely the same types of discovery techniques depending on the operating system, but the resulting information may include details about the networked cloud environment relevant to the adversary's goals. Cloud providers may have different ways in which their virtual networks operate.[1][2][3]Similarly, adversaries who gain access to network devices may also perform similar discovery activities to gather information about connected systems and services.Utilities and commands that acquire this information includenetstat, \"net use,\" and \"net session\" withNet. In Mac and Linux,netstatandlsofcan be used to list current connections.who -aandwcan be used to show which users are currently logged in, similar to \"net session\". Additionally, built-in features native to network devices andNetwork Device CLImay be used (e.g.show ip sockets,show tcp brief).[4]On ESXi servers, the commandesxi network ip connection listcan be used to list active network connections.[5]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:45:02.163674",
    "subtechniques": []
  },
  {
    "technique_id": "T1021",
    "name": "Remote Services",
    "description": "Adversaries may useValid Accountsto log into a service that accepts remote connections, such as telnet, SSH, and VNC. The adversary may then perform actions as the logged-on user.In an enterprise environment, servers and workstations can be organized into domains. Domains provide centralized identity management, allowing users to login using one set of credentials across the entire network. If an adversary is able to obtain a set of valid domain credentials, they could login to many different machines using remote access protocols such as secure shell (SSH) or remote desktop protocol (RDP).[1][2]They could also login to accessible SaaS or IaaS services, such as those that federate their identities to the domain, or management platforms for internal virtualization environments such as VMware vCenter.Legitimate applications (such asSoftware Deployment Toolsand other administrative programs) may utilizeRemote Servicesto access remote hosts. For example, Apple Remote Desktop (ARD) on macOS is native software used for remote management. ARD leverages a blend of protocols, includingVNCto send the screen and control buffers andSSHfor secure file transfer.[3][4][5]Adversaries can abuse applications such as ARD to gain remote code execution and perform lateral movement. In versions of macOS prior to 10.14, an adversary can escalate an SSH session to an ARD session which enables an adversary to accept TCC (Transparency, Consent, and Control) prompts without user interaction and gain access to data.[6][7][4]",
    "tactic": "Lateral Movement",
    "tactics": [
      "Lateral Movement"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:45:05.511548",
    "subtechniques": [
      {
        "id": "T1021.007",
        "name": "Cloud Services"
      },
      {
        "id": "T1021.008",
        "name": "Direct Cloud VM Connections"
      }
    ]
  },
  {
    "technique_id": "T1021.007",
    "name": "Cloud Services",
    "description": "Adversaries may log into accessible cloud services within a compromised environment usingValid Accountsthat are synchronized with or federated to on-premises user identities. The adversary may then perform management actions or access cloud-hosted resources as the logged-on user.Many enterprises federate centrally managed user identities to cloud services, allowing users to login with their domain credentials in order to access the cloud control plane. Similarly, adversaries may connect to available cloud services through the web console or through the cloud command line interface (CLI) (e.g.,Cloud API), using commands such asConnect-AZAccountfor Azure PowerShell,Connect-MgGraphfor Microsoft Graph PowerShell, andgcloud auth loginfor the Google Cloud CLI.In some cases, adversaries may be able to authenticate to these services viaApplication Access Tokeninstead of a username and password.",
    "tactic": "Lateral Movement",
    "tactics": [
      "Lateral Movement"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Remote Services",
    "parent_technique_id": "T1021",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:45:08.865971"
  },
  {
    "technique_id": "T1021.008",
    "name": "Direct Cloud VM Connections",
    "description": "Adversaries may leverageValid Accountsto log directly into accessible cloud hosted compute infrastructure through cloud native methods. Many cloud providers offer interactive connections to virtual infrastructure that can be accessed through theCloud API, such as Azure Serial Console[1], AWS EC2 Instance Connect[2][3], and AWS System Manager.[4].Methods of authentication for these connections can include passwords, application access tokens, or SSH keys. These cloud native methods may, by default, allow for privileged access on the host with SYSTEM or root level access.Adversaries may utilize these cloud native methods to directly access virtual infrastructure and pivot through an environment.[5]These connections typically provide direct console access to the VM rather than the execution of scripts (i.e.,Cloud Administration Command).",
    "tactic": "Lateral Movement",
    "tactics": [
      "Lateral Movement"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Remote Services",
    "parent_technique_id": "T1021",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:45:12.225997"
  },
  {
    "technique_id": "T1550",
    "name": "Use Alternate Authentication Material",
    "description": "Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls.Authentication processes generally require a valid identity (e.g., username) along with one or more authentication factors (e.g., password, pin, physical smart card, token generator, etc.). Alternate authentication material is legitimately generated by systems after a user or application successfully authenticates by providing a valid identity and the required authentication factor(s). Alternate authentication material may also be generated during the identity creation process.[1][2]Caching alternate authentication material allows the system to verify an identity has successfully authenticated without asking the user to reenter authentication factor(s). Because the alternate authentication must be maintained by the systemâ€”either in memory or on diskâ€”it may be at risk of being stolen throughCredential Accesstechniques. By stealing alternate authentication material, adversaries are able to bypass system access controls and authenticate to systems without knowing the plaintext password or any additional authentication factors.",
    "tactic": "Lateral Movement",
    "tactics": [
      "Lateral Movement"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:45:15.600743",
    "subtechniques": [
      {
        "id": "T1550.001",
        "name": "Application Access Token"
      },
      {
        "id": "T1550.004",
        "name": "Web Session Cookie"
      }
    ]
  },
  {
    "technique_id": "T1550.001",
    "name": "Application Access Token",
    "description": "Adversaries may use stolen application access tokens to bypass the typical authentication process and access restricted accounts, information, or services on remote systems. These tokens are typically stolen from users or services and used in lieu of login credentials.Application access tokens are used to make authorized API requests on behalf of a user or service and are commonly used to access resources in cloud, container-based applications, and software-as-a-service (SaaS).[1]OAuth is one commonly implemented framework that issues tokens to users for access to systems. These frameworks are used collaboratively to verify the user and determine what actions the user is allowed to perform. Once identity is established, the token allows actions to be authorized, without passing the actual credentials of the user. Therefore, compromise of the token can grant the adversary access to resources of other sites through a malicious application.[2]For example, with a cloud-based email service, once an OAuth access token is granted to a malicious application, it can potentially gain long-term access to features of the user account if a \"refresh\" token enabling background access is awarded.[3]With an OAuth access token an adversary can use the user-granted REST API to perform functions such as email searching and contact enumeration.[4]Compromised access tokens may be used as an initial step in compromising other services. For example, if a token grants access to a victimâ€™s primary email, the adversary may be able to extend access to all other services which the target subscribes by triggering forgotten password routines. In AWS and GCP environments, adversaries can trigger a request for a short-lived access token with the privileges of another user account.[5][6]The adversary can then use this token to request data or perform actions the original account could not. If permissions for this feature are misconfigured â€“ for example, by allowing all users to request a token for a particular account - an adversary may be able to gain initial access to a Cloud Account or escalate their privileges.[7]Direct API access through a token negates the effectiveness of a second authentication factor and may be immune to intuitive countermeasures like changing passwords.  For example, in AWS environments, an adversary who compromises a userâ€™s AWS API credentials may be able to use thests:GetFederationTokenAPI call to create a federated user session, which will have the same permissions as the original user but may persist even if the original user credentials are deactivated.[8]Additionally, access abuse over an API channel can be difficult to detect even from the service provider end, as the access can still align well with a legitimate workflow.",
    "tactic": "Lateral Movement",
    "tactics": [
      "Lateral Movement"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Use Alternate Authentication Material",
    "parent_technique_id": "T1550",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:45:18.940299"
  },
  {
    "technique_id": "T1550.004",
    "name": "Web Session Cookie",
    "description": "Adversaries can use stolen session cookies to authenticate to web applications and services. This technique bypasses some multi-factor authentication protocols since the session is already authenticated.[1]Authentication cookies are commonly used in web applications, including cloud-based services, after a user has authenticated to the service so credentials are not passed and re-authentication does not need to occur as frequently. Cookies are often valid for an extended period of time, even if the web application is not actively used. After the cookie is obtained throughSteal Web Session CookieorWeb Cookies, the adversary may then import the cookie into a browser they control and is then able to use the site or application as the user for as long as the session cookie is active. Once logged into the site, an adversary can access sensitive information, read email, or perform actions that the victim account has permissions to perform.There have been examples of malware targeting session cookies to bypass multi-factor authentication systems.[2]",
    "tactic": "Lateral Movement",
    "tactics": [
      "Lateral Movement"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Use Alternate Authentication Material",
    "parent_technique_id": "T1550",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:45:22.267876"
  },
  {
    "technique_id": "T1119",
    "name": "Automated Collection",
    "description": "Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of aCommand and Scripting Interpreterto search for and copy information fitting set criteria such as file type, location, or name at specific time intervals.In cloud-based environments, adversaries may also use cloud APIs, data pipelines, command line interfaces, or extract, transform, and load (ETL) services to automatically collect data.[1]This functionality could also be built into remote access tools.This technique may incorporate use of other techniques such asFile and Directory DiscoveryandLateral Tool Transferto identify and move files, as well asCloud Service DashboardandCloud Storage Object Discoveryto identify resources in cloud environments.",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:45:25.660819",
    "subtechniques": []
  },
  {
    "technique_id": "T1530",
    "name": "Data from Cloud Storage",
    "description": "Adversaries may access data from cloud storage.Many IaaS providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. Similarly, SaaS enterprise platforms such as Office 365 and Google Workspace provide cloud-based document storage to users through services such as OneDrive and Google Drive, while SaaS application providers such as Slack, Confluence, Salesforce, and Dropbox may provide cloud storage solutions as a peripheral or primary use case of their platform.In some cases, as with IaaS-based cloud storage, there exists no overarching application (such as SQL or Elasticsearch) with which to interact with the stored objects: instead, data from these solutions is retrieved directly though theCloud API. In SaaS applications, adversaries may be able to collect this data directly from APIs or backend cloud storage objects, rather than through their front-end application or interface (i.e.,Data from Information Repositories).Adversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem.[1][2][3]There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.This open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records.[4][5][6][7]Adversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects.",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:45:29.019808",
    "subtechniques": []
  },
  {
    "technique_id": "T1213",
    "name": "Data from Information Repositories",
    "description": "Adversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, such as Credential Access, Lateral Movement, or Defense Evasion, or direct access to the target information. Adversaries may also abuse external sharing features to share sensitive documents with recipients outside of the organization (i.e.,Transfer Data to Cloud Account).The following is a brief list of example information that may hold potential value to an adversary and may also be found on an information repository:Policies, procedures, and standardsPhysical / logical network diagramsSystem architecture diagramsTechnical system documentationTesting / development credentials (i.e.,Unsecured Credentials)Work / project schedulesSource code snippetsLinks to network shares and other internal resourcesContact or other sensitive information about business partners and customers, including personally identifiable information (PII)Information stored in a repository may vary based on the specific instance or environment. Specific common information repositories include the following:Storage services such as IaaS databases, enterprise databases, and more specialized platforms such as customer relationship management (CRM) databasesCollaboration platforms such as SharePoint, Confluence, and code repositoriesMessaging platforms such as Slack and Microsoft TeamsIn some cases, information repositories have been improperly secured, typically by unintentionally allowing for overly-broad access by all users or even public access to unauthenticated users. This is particularly common with cloud-native or cloud-hosted services, such as AWS Relational Database Service (RDS), Redis, or ElasticSearch.[1][2][3]",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:45:32.368038",
    "subtechniques": []
  },
  {
    "technique_id": "T1074",
    "name": "Data Staged",
    "description": "Adversaries may stage collected data in a central location or directory prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such asArchive Collected Data. Interactive command shells may be used, and common functionality withincmdand bash may be used to copy data into a staging location.[1]In cloud environments, adversaries may stage data within a particular instance or virtual machine before exfiltration. An adversary mayCreate Cloud Instanceand stage data in that instance.[2]Adversaries may choose to stage data from a victim network in a centralized location prior to Exfiltration to minimize the number of connections made to their C2 server and better evade detection.",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:45:35.706520",
    "subtechniques": [
      {
        "id": "T1074.002",
        "name": "Remote Data Staging"
      }
    ]
  },
  {
    "technique_id": "T1074.002",
    "name": "Remote Data Staging",
    "description": "Adversaries may stage data collected from multiple systems in a central location or directory on one system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such asArchive Collected Data. Interactive command shells may be used, and common functionality withincmdand bash may be used to copy data into a staging location.In cloud environments, adversaries may stage data within a particular instance or virtual machine before exfiltration. An adversary mayCreate Cloud Instanceand stage data in that instance.[1]By staging data on one system prior to Exfiltration, adversaries can minimize the number of connections made to their C2 server and better evade detection.",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Data Staged",
    "parent_technique_id": "T1074",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:45:39.052209"
  },
  {
    "technique_id": "T1048",
    "name": "Exfiltration Over Alternative Protocol",
    "description": "Adversaries may steal data by exfiltrating it over a different protocol than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.Alternate protocols include FTP, SMTP, HTTP/S, DNS, SMB, or any other network protocol not being used as the main command and control channel. Adversaries may also opt to encrypt and/or obfuscate these alternate channels.Exfiltration Over Alternative Protocolcan be done using various common operating system utilities such asNet/SMB or FTP.[1]On macOS and Linuxcurlmay be used to invoke protocols such as HTTP/S or FTP/S to exfiltrate data from a system.[2]Many IaaS and SaaS platforms (such as Microsoft Exchange, Microsoft SharePoint, GitHub, and AWS S3) support the direct download of files, emails, source code, and other sensitive information via the web console orCloud API.",
    "tactic": "Exfiltration",
    "tactics": [
      "Exfiltration"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:45:42.417742",
    "subtechniques": []
  },
  {
    "technique_id": "T1537",
    "name": "Transfer Data to Cloud Account",
    "description": "Adversaries may exfiltrate data by transferring the data, including through sharing/syncing and creating backups of cloud environments, to another cloud account they control on the same service.A defender who is monitoring for large transfers to outside the cloud environment through normal file transfers or over command and control channels may not be watching for data transfers to another account within the same cloud provider. Such transfers may utilize existing cloud provider APIs and the internal address space of the cloud provider to blend into normal traffic or avoid data transfers over external network interfaces.[1]Adversaries may also use cloud-native mechanisms to share victim data with adversary-controlled cloud accounts, such as creating anonymous file sharing links or, in Azure, a shared access signature (SAS) URI.[2]Incidents have been observed where adversaries have created backups of cloud instances and transferred them to separate accounts.[3]",
    "tactic": "Exfiltration",
    "tactics": [
      "Exfiltration"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:45:45.759598",
    "subtechniques": []
  },
  {
    "technique_id": "T1531",
    "name": "Account Access Removal",
    "description": "Adversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users. Accounts may be deleted, locked, or manipulated (ex: changed credentials) to remove access to accounts. Adversaries may also subsequently log off and/or perform aSystem Shutdown/Rebootto set malicious changes into place.[1][2]In Windows,Netutility,Set-LocalUserandSet-ADAccountPasswordPowerShellcmdlets may be used by adversaries to modify user accounts. Accounts could also be disabled by Group Policy. In Linux, thepasswdutility may be used to change passwords. On ESXi servers, accounts can be removed or modified via esxcli (system account set,system account remove).Adversaries who use ransomware or similar attacks may first perform this and other Impact behaviors, such asData DestructionandDefacement, in order to impede incident response/recovery before completing theData Encrypted for Impactobjective.",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:45:49.070715",
    "subtechniques": []
  },
  {
    "technique_id": "T1485",
    "name": "Data Destruction",
    "description": "Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives.[1][2][3][4][5][6]Common operating system file deletion commands such asdelandrmoften only remove pointers to files without wiping the contents of the files themselves, making the files recoverable by proper forensic methodology. This behavior is distinct fromDisk Content WipeandDisk Structure Wipebecause individual files are destroyed rather than sections of a storage disk or the disk's logical structure.Adversaries may attempt to overwrite files and directories with randomly generated data to make it irrecoverable.[4][5]In some cases politically oriented image files have been used to overwrite data.[2][3][4]To maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware designed for destroying data may have worm-like features to propagate across a network by leveraging additional techniques likeValid Accounts,OS Credential Dumping, andSMB/Windows Admin Shares.[1][2][3][4][6].In cloud environments, adversaries may leverage access to delete cloud storage objects, machine images, database instances, and other infrastructure crucial to operations to damage an organization or their customers.[7][8]Similarly, they may delete virtual machines from on-prem virtualized environments.",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:45:52.417374",
    "subtechniques": [
      {
        "id": "T1485.001",
        "name": "Lifecycle-Triggered Deletion"
      }
    ]
  },
  {
    "technique_id": "T1485.001",
    "name": "Lifecycle-Triggered Deletion",
    "description": "Adversaries may modify the lifecycle policies of a cloud storage bucket to destroy all objects stored within.Cloud storage buckets often allow users to set lifecycle policies to automate the migration, archival, or deletion of objects after a set period of time.[1][2][3]If a threat actor has sufficient permissions to modify these policies, they may be able to delete all objects at once.For example, in AWS environments, an adversary with thePutLifecycleConfigurationpermission may use thePutBucketLifecycleAPI call to apply a lifecycle policy to an S3 bucket that deletes all objects in the bucket after one day.[4][5]In addition to destroying data for purposes of extortion andFinancial Theft, adversaries may also perform this action on buckets storing cloud logs forIndicator Removal.[6]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Data Destruction",
    "parent_technique_id": "T1485",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:45:55.746134"
  },
  {
    "technique_id": "T1486",
    "name": "Data Encrypted for Impact",
    "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted.[1][2][3][4]In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted (and often renamed and/or tagged with specific file markers). Adversaries may need to first employ other behaviors, such asFile and Directory Permissions ModificationorSystem Shutdown/Reboot, in order to unlock and/or gain access to manipulate these files.[5]In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.[3]Adversaries may also encrypt virtual machines hosted on ESXi or other hypervisors.[6]To maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques likeValid Accounts,OS Credential Dumping, andSMB/Windows Admin Shares.[2][3]Encryption malware may also leverageInternal Defacement, such as changing victim wallpapers or ESXi server login messages, or otherwise intimidate victims by sending ransom notes or other messages to connected printers (known as \"print bombing\").[7][8]In cloud environments, storage objects within compromised accounts may also be encrypted.[9]For example, in AWS environments, adversaries may leverage services such as AWSâ€™s Server-Side Encryption with Customer Provided Keys (SSE-C) to encrypt data.[10]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:45:59.158257",
    "subtechniques": []
  },
  {
    "technique_id": "T1491",
    "name": "Defacement",
    "description": "Adversaries may modify visual content available internally or externally to an enterprise network, thus affecting the integrity of the original content. Reasons forDefacementinclude delivering messaging, intimidation, or claiming (possibly false) credit for an intrusion. Disturbing or offensive images may be used as a part ofDefacementin order to cause user discomfort, or to pressure compliance with accompanying messages.",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:46:02.506907",
    "subtechniques": [
      {
        "id": "T1491.002",
        "name": "External Defacement"
      }
    ]
  },
  {
    "technique_id": "T1491.002",
    "name": "External Defacement",
    "description": "An adversary may deface systems external to an organization in an attempt to deliver messaging, intimidate, or otherwise mislead an organization or users.External Defacementmay ultimately cause users to distrust the systems and to question/discredit the systemâ€™s integrity. Externally-facing websites are a common victim of defacement; often targeted by adversary and hacktivist groups in order to push a political message or spread propaganda.[1][2][3]External Defacementmay be used as a catalyst to trigger events, or as a response to actions taken by an organization or government. Similarly, website defacement may also be used as setup, or a precursor, for future attacks such asDrive-by Compromise.[4]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Defacement",
    "parent_technique_id": "T1491",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:46:05.861193"
  },
  {
    "technique_id": "T1499",
    "name": "Endpoint Denial of Service",
    "description": "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes[1]and to support other malicious activities, including distraction[2], hacktivism, and extortion.[3]An Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).To perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.Adversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.Botnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.[4]In cases where traffic manipulation is used, there may be points in the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.[5]For attacks attempting to saturate the providing network, seeNetwork Denial of Service.",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:46:09.200218",
    "subtechniques": [
      {
        "id": "T1499.002",
        "name": "Service Exhaustion Flood"
      },
      {
        "id": "T1499.003",
        "name": "Application Exhaustion Flood"
      },
      {
        "id": "T1499.004",
        "name": "Application or System Exploitation"
      }
    ]
  },
  {
    "technique_id": "T1499.002",
    "name": "Service Exhaustion Flood",
    "description": "Adversaries may target the different network services provided by systems to conduct a denial of service (DoS). Adversaries often target the availability of DNS and web services, however others have been targeted as well.[1]Web server software can be attacked through a variety of means, some of which apply generally while others are specific to the software being used to provide the service.One example of this type of attack is known as a simple HTTP flood, where an adversary sends a large number of HTTP requests to a web server to overwhelm it and/or an application that runs on top of it. This flood relies on raw volume to accomplish the objective, exhausting any of the various resources required by the victim software to provide the service.[2]Another variation, known as a SSL renegotiation attack, takes advantage of a protocol feature in SSL/TLS. The SSL/TLS protocol suite includes mechanisms for the client and server to agree on an encryption algorithm to use for subsequent secure connections. If SSL renegotiation is enabled, a request can be made for renegotiation of the crypto algorithm. In a renegotiation attack, the adversary establishes a SSL/TLS connection and then proceeds to make a series of renegotiation requests. Because the cryptographic renegotiation has a meaningful cost in computation cycles, this can cause an impact to the availability of the service when done in volume.[3]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Endpoint Denial of Service",
    "parent_technique_id": "T1499",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:46:12.546973"
  },
  {
    "technique_id": "T1499.003",
    "name": "Application Exhaustion Flood",
    "description": "Adversaries may target resource intensive features of applications to cause a denial of service (DoS), denying availability to those applications. For example, specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.[1]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Endpoint Denial of Service",
    "parent_technique_id": "T1499",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:46:15.879728"
  },
  {
    "technique_id": "T1499.004",
    "name": "Application or System Exploitation",
    "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users.[1]Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.Adversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such asData Destruction,Firmware Corruption,Service Stopetc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems.",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Endpoint Denial of Service",
    "parent_technique_id": "T1499",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:46:19.221672"
  },
  {
    "technique_id": "T1490",
    "name": "Inhibit System Recovery",
    "description": "Adversaries may delete or remove built-in data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery.[1][2]This may deny access to available backups and recovery options.Operating systems may contain features that can help fix corrupted systems, such as a backup catalog, volume shadow copies, and automatic repair features. Adversaries may disable or delete system recovery features to augment the effects ofData DestructionandData Encrypted for Impact.[1][2]Furthermore, adversaries may disable recovery notifications, then corrupt backups.[3]A number of native Windows utilities have been used by adversaries to disable or delete system recovery features:vssadmin.execan be used to delete all volume shadow copies on a system -vssadmin.exe delete shadows /all /quietWindows Management Instrumentationcan be used to delete volume shadow copies -wmic shadowcopy deletewbadmin.execan be used to delete the Windows Backup Catalog -wbadmin.exe delete catalog -quietbcdedit.execan be used to disable automatic Windows recovery features by modifying boot configuration data -bcdedit.exe /set {default} bootstatuspolicy ignoreallfailures & bcdedit /set {default} recoveryenabled noREAgentC.execan be used to disable Windows Recovery Environment (WinRE) repair/recovery options of an infected systemdiskshadow.execan be used to delete all volume shadow copies on a system -diskshadow delete shadows all[4][5]On network devices, adversaries may leverageDisk Wipeto delete backup firmware images and reformat the file system, thenSystem Shutdown/Rebootto reload the device. Together this activity may leave network devices completely inoperable and inhibit recovery operations.On ESXi servers, adversaries may delete or encrypt snapshots of virtual machines to supportData Encrypted for Impact, preventing them from being leveraged as backups (e.g., viavim-cmd vmsvc/snapshot.removeall).[6]Adversaries may also delete \"online\" backups that are connected to their network â€“ whether via network storage media or through folders that sync to cloud services.[7]In cloud environments, adversaries may disable versioning and backup policies and delete snapshots, database backups, machine images, and prior versions of objects designed to be used in disaster recovery scenarios.[8][9]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:46:22.614030",
    "subtechniques": []
  },
  {
    "technique_id": "T1498",
    "name": "Network Denial of Service",
    "description": "Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes[1]and to support other malicious activities, including distraction[2], hacktivism, and extortion.[3]A Network DoS will occur when the bandwidth capacity of the network connection to a system is exhausted due to the volume of malicious traffic directed at the resource or the network connections and network devices the resource relies on. For example, an adversary may send 10Gbps of traffic to a server that is hosted by a network with a 1Gbps connection to the internet. This traffic can be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).To perform Network DoS attacks several aspects apply to multiple methods, including IP address spoofing, and botnets.Adversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.For DoS attacks targeting the hosting system directly, seeEndpoint Denial of Service.",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:46:26.080592",
    "subtechniques": [
      {
        "id": "T1498.001",
        "name": "Direct Network Flood"
      },
      {
        "id": "T1498.002",
        "name": "Reflection Amplification"
      }
    ]
  },
  {
    "technique_id": "T1498.001",
    "name": "Direct Network Flood",
    "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network.Direct Network Floods are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.Botnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.[1]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Network Denial of Service",
    "parent_technique_id": "T1498",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:46:29.425988"
  },
  {
    "technique_id": "T1498.002",
    "name": "Reflection Amplification",
    "description": "Adversaries may attempt to cause a denial of service (DoS) by reflecting a high-volume of network traffic to a target. This type of Network DoS takes advantage of a third-party server intermediary that hosts and will respond to a given spoofed source IP address. This third-party server is commonly termed a reflector. An adversary accomplishes a reflection attack by sending packets to reflectors with the spoofed address of the victim. Similar to Direct Network Floods, more than one system may be used to conduct the attack, or a botnet may be used. Likewise, one or more reflectors may be used to focus traffic on the target.[1]This Network DoS attack may also reduce the availability and functionality of the targeted system(s) and network.Reflection attacks often take advantage of protocols with larger responses than requests in order to amplify their traffic, commonly known as a Reflection Amplification attack. Adversaries may be able to generate an increase in volume of attack traffic that is several orders of magnitude greater than the requests sent to the amplifiers. The extent of this increase will depending upon many variables, such as the protocol in question, the technique used, and the amplifying servers that actually produce the amplification in attack volume. Two prominent protocols that have enabled Reflection Amplification Floods are DNS[2]and NTP[3], though the use of several others in the wild have been documented.[4]In particular, the memcache protocol showed itself to be a powerful protocol, with amplification sizes up to 51,200 times the requesting packet.[5]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Network Denial of Service",
    "parent_technique_id": "T1498",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:46:32.781704"
  },
  {
    "technique_id": "T1496",
    "name": "Resource Hijacking",
    "description": "Adversaries may leverage the resources of co-opted systems to complete resource-intensive tasks, which may impact system and/or hosted service availability.Resource hijacking may take a number of different forms. For example, adversaries may:Leverage compute resources in order to mine cryptocurrencySell network bandwidth to proxy networksGenerate SMS traffic for profitAbuse cloud-based messaging services to send large quantities of spam messagesIn some cases, adversaries may leverage multiple types of Resource Hijacking at once.[1]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:46:36.108208",
    "subtechniques": [
      {
        "id": "T1496.001",
        "name": "Compute Hijacking"
      },
      {
        "id": "T1496.002",
        "name": "Bandwidth Hijacking"
      }
    ]
  },
  {
    "technique_id": "T1496.001",
    "name": "Compute Hijacking",
    "description": "Adversaries may leverage the compute resources of co-opted systems to complete resource-intensive tasks, which may impact system and/or hosted service availability.One common purpose forCompute Hijackingis to validate transactions of cryptocurrency networks and earn virtual currency. Adversaries may consume enough system resources to negatively impact and/or cause affected machines to become unresponsive.[1]Servers and cloud-based systems are common targets because of the high potential for available resources, but user endpoint systems may also be compromised and used forCompute Hijackingand cryptocurrency mining.[2]Containerized environments may also be targeted due to the ease of deployment via exposed APIs and the potential for scaling mining activities by deploying or compromising multiple containers within an environment or cluster.[3][4]Additionally, some cryptocurrency mining malware identify then kill off processes for competing malware to ensure itâ€™s not competing for resources.[5]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Resource Hijacking",
    "parent_technique_id": "T1496",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:46:39.451202"
  },
  {
    "technique_id": "T1496.002",
    "name": "Bandwidth Hijacking",
    "description": "Adversaries may leverage the network bandwidth resources of co-opted systems to complete resource-intensive tasks, which may impact system and/or hosted service availability.Adversaries may also use malware that leverages a system's network bandwidth as part of a botnet in order to facilitateNetwork Denial of Servicecampaigns and/or to seed malicious torrents.[1]Alternatively, they may engage in proxyjacking by selling use of the victims' network bandwidth and IP address to proxyware services.[2]Finally, they may engage in internet-wide scanning in order to identify additional targets for compromise.[3]In addition to incurring potential financial costs or availability disruptions, this technique may cause reputational damage if a victimâ€™s bandwidth is used for illegal activities.[2]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "IaaS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Resource Hijacking",
    "parent_technique_id": "T1496",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:46:42.787928"
  }
]