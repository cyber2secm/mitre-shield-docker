[
  {
    "technique_id": "T1190",
    "name": "Exploit Public-Facing Application",
    "description": "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.Exploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet-accessible open sockets.[1][2][3][4][5]On ESXi infrastructure, adversaries may exploit exposed OpenSLP services; they may alternatively exploit exposed VMware vCenter servers.[6][7]Depending on the flaw being exploited, this may also involveExploitation for Defense EvasionorExploitation for Client Execution.If an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs (e.g., via theCloud Instance Metadata API), exploit container host access viaEscape to Host, or take advantage of weak identity and access management policies.Adversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.[8][9]For websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.[10][11]",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:47:13.584512",
    "subtechniques": []
  },
  {
    "technique_id": "T1078",
    "name": "Valid Accounts",
    "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.[1]Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.In some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.[2]The overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.[3]",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:47:17.596969",
    "subtechniques": [
      {
        "id": "T1078.001",
        "name": "Default Accounts"
      },
      {
        "id": "T1078.003",
        "name": "Local Accounts"
      }
    ]
  },
  {
    "technique_id": "T1078.001",
    "name": "Default Accounts",
    "description": "Adversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems. Default accounts also include default factory/provider set accounts on other types of systems, software, or devices, including the root user account in AWS, the root user account in ESXi, and the default service account in Kubernetes.[1][2][3]Default accounts are not limited to client machines; rather, they also include accounts that are preset for equipment such as network devices and computer applications, whether they are internal, open source, or commercial. Appliances that come preset with a username and password combination pose a serious threat to organizations that do not change it post installation, as they are easy targets for an adversary. Similarly, adversaries may also utilize publicly disclosed or stolenPrivate Keysor credential materials to legitimately connect to remote environments viaRemote Services.[4]Default accounts may be created on a system after initial setup by connecting or integrating it with another application. For example, when an ESXi server is connected to a vCenter server, a default privileged account calledvpxuseris created on the ESXi server. If a threat actor is able to compromise this account’s credentials (for example, viaExploitation for Credential Accesson the vCenter host), they will then have access to the ESXi server.[5][6]",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Valid Accounts",
    "parent_technique_id": "T1078",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:47:21.565298"
  },
  {
    "technique_id": "T1078.003",
    "name": "Local Accounts",
    "description": "Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.Local Accounts may also be abused to elevate privileges and harvest credentials throughOS Credential Dumping. Password reuse may allow the abuse of local accounts across a set of machines on a network for the purposes of Privilege Escalation and Lateral Movement.",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Valid Accounts",
    "parent_technique_id": "T1078",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:47:25.441954"
  },
  {
    "technique_id": "T1669",
    "name": "Wi-Fi Networks",
    "description": "Adversaries may gain initial access to target systems by connecting to wireless networks. They may accomplish this by exploiting open Wi-Fi networks used by target devices or by accessing secured Wi-Fi networks — requiringValid Accounts— belonging to a target organization.[1][2]Establishing a connection to a Wi-Fi access point requires a certain level of proximity to both discover and maintain a stable network connection.Adversaries may establish a wireless connection through various methods, such as by physically positioning themselves near a Wi-Fi network to conduct close access operations. To bypass the need for physical proximity, adversaries may attempt to remotely compromise nearby third-party systems that have both wired and wireless network connections available (i.e., dual-homed systems). These third-party compromised devices can then serve as a bridge to connect to a target’s Wi-Fi network.[2]Once an initial wireless connection is achieved, adversaries may leverage this access for follow-on activities in the victim network or further targeting of specific devices on the network. Adversaries may performNetwork SniffingorAdversary-in-the-Middleactivities forCredential AccessorDiscovery.",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:47:28.781163",
    "subtechniques": []
  },
  {
    "technique_id": "T1059",
    "name": "Command and Scripting Interpreter",
    "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor ofUnix Shellwhile Windows installations include theWindows Command ShellandPowerShell.There are also cross-platform interpreters such asPython, as well as those commonly associated with client applications such asJavaScriptandVisual Basic.Adversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded inInitial Accesspayloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize variousRemote Servicesin order to achieve remote Execution.[1][2][3]",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:47:32.156245",
    "subtechniques": [
      {
        "id": "T1059.004",
        "name": "Unix Shell"
      },
      {
        "id": "T1059.008",
        "name": "Network Device CLI"
      },
      {
        "id": "T1059.011",
        "name": "Lua"
      }
    ]
  },
  {
    "technique_id": "T1059.004",
    "name": "Unix Shell",
    "description": "Adversaries may abuse Unix shell commands and scripts for execution. Unix shells are the primary command prompt on Linux, macOS, and ESXi systems, though many variations of the Unix shell exist (e.g. sh, ash, bash, zsh, etc.) depending on the specific OS or distribution.[1][2]Unix shells can control every aspect of a system, with certain commands requiring elevated privileges.Unix shells also support scripts that enable sequential execution of commands as well as other typical programming operations such as conditionals and loops. Common uses of shell scripts include long or repetitive tasks, or the need to run the same set of commands on multiple systems.Adversaries may abuse Unix shells to execute various commands or payloads. Interactive shells may be accessed through command and control channels or during lateral movement such as withSSH. Adversaries may also leverage shell scripts to deliver and execute multiple commands on victims or as part of payloads used for persistence.Some systems, such as embedded devices, lightweight Linux distributions, and ESXi servers, may leverage stripped-down Unix shells via Busybox, a small executable that contains a variety of tools, including a simple shell.",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Command and Scripting Interpreter",
    "parent_technique_id": "T1059",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:47:35.508489"
  },
  {
    "technique_id": "T1059.008",
    "name": "Network Device CLI",
    "description": "Adversaries may abuse scripting or built-in command line interpreters (CLI) on network devices to execute malicious command and payloads. The CLI is the primary means through which users and administrators interact with the device in order to view system information, modify device operations, or perform diagnostic and administrative functions. CLIs typically contain various permission levels required for different commands.Scripting interpreters automate tasks and extend functionality beyond the command set included in the network OS. The CLI and scripting interpreter are accessible through a direct console connection, or through remote means, such as telnet orSSH.Adversaries can use the network CLI to change how network devices behave and operate. The CLI may be used to manipulate traffic flows to intercept or manipulate data, modify startup configuration parameters to load malicious system software, or to disable security features or logging to avoid detection.[1]",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Command and Scripting Interpreter",
    "parent_technique_id": "T1059",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:47:38.840125"
  },
  {
    "technique_id": "T1059.011",
    "name": "Lua",
    "description": "Adversaries may abuse Lua commands and scripts for execution. Lua is a cross-platform scripting and programming language primarily designed for embedded use in applications. Lua can be executed on the command-line (through the stand-alone lua interpreter), via scripts (.lua), or from Lua-embedded programs (through thestruct lua_State).[1][2]Lua scripts may be executed by adversaries for malicious purposes. Adversaries may incorporate, abuse, or replace existing Lua interpreters to allow for malicious Lua command execution at runtime.[3][4][5][6]",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Command and Scripting Interpreter",
    "parent_technique_id": "T1059",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:47:42.212557"
  },
  {
    "technique_id": "T1072",
    "name": "Software Deployment Tools",
    "description": "Adversaries may gain access to and use centralized software suites installed within an enterprise to execute commands and move laterally through the network. Configuration management and software deployment applications may be used in an enterprise network or cloud environment for routine administration purposes. These systems may also be integrated into CI/CD pipelines. Examples of such solutions include: SCCM, HBSS, Altiris, AWS Systems Manager, Microsoft Intune, Azure Arc, and GCP Deployment Manager.Access to network-wide or enterprise-wide endpoint management software may enable an adversary to achieve remote code execution on all connected systems. The access may be used to laterally move to other systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints.SaaS-based configuration management services may allow for broadCloud Administration Commandon cloud-hosted instances, as well as the execution of arbitrary commands on on-premises endpoints. For example, Microsoft Configuration Manager allows Global or Intune Administrators to run scripts as SYSTEM on on-premises devices joined to Entra ID.[1]Such services may also utilizeWeb Protocolsto communicate back to adversary owned infrastructure.[2]Network infrastructure devices may also have configuration management tools that can be similarly abused by adversaries.[3]The permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the third-party system, or specific domain credentials may be required. However, the system may require an administrative account to log in or to access specific functionality.",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:47:45.572101",
    "subtechniques": []
  },
  {
    "technique_id": "T1098",
    "name": "Account Manipulation",
    "description": "Adversaries may manipulate accounts to maintain and/or elevate access to victim systems. Account manipulation may consist of any action that preserves or modifies adversary access to a compromised account, such as modifying credentials or permission groups.[1]These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials.In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain. However, account manipulation may also lead to privilege escalation where modifications grant access to additional roles, permissions, or higher-privilegedValid Accounts.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:47:48.921653",
    "subtechniques": [
      {
        "id": "T1098.004",
        "name": "SSH Authorized Keys"
      }
    ]
  },
  {
    "technique_id": "T1098.004",
    "name": "SSH Authorized Keys",
    "description": "Adversaries may modify the SSHauthorized_keysfile to maintain persistence on a victim host. Linux distributions, macOS, and ESXi hypervisors commonly use key-based authentication to secure the authentication process of SSH sessions for remote management. Theauthorized_keysfile in SSH specifies the SSH keys that can be used for logging into the user account for which the file is configured. This file is usually found in the user's home directory under<user-home>/.ssh/authorized_keys(or, on ESXi,/etc/ssh/keys-<username>/authorized_keys).[1]Users may edit the system’s SSH config file to modify the directivesPubkeyAuthenticationandRSAAuthenticationto the valueyesto ensure public key and RSA authentication are enabled, as well as modify the directivePermitRootLoginto the valueyesto enable root authentication via SSH.[2]The SSH config file is usually located under/etc/ssh/sshd_config.Adversaries may modify SSHauthorized_keysfiles directly with scripts or shell commands to add their own adversary-supplied public keys. In cloud environments, adversaries may be able to modify the SSH authorized_keys file of a particular virtual machine via the command line interface or rest API. For example, by using the Google Cloud CLI’s \"add-metadata\" command an adversary may add SSH keys to a user account.[3][4]Similarly, in Azure, an adversary may update the authorized_keys file of a virtual machine via a PATCH request to the API.[5]This ensures that an adversary possessing the corresponding private key may log in as an existing user via SSH.[6][7]It may also lead to privilege escalation where the virtual machine or instance has distinct permissions from the requesting user.Where authorized_keys files are modified via cloud APIs or command line interfaces, an adversary may achieve privilege escalation on the target virtual machine if they add a key to a higher-privileged user.SSH keys can also be added to accounts on network devices, such as with theip ssh pubkey-chainNetwork Device CLIcommand.[8]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Account Manipulation",
    "parent_technique_id": "T1098",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:47:52.160534"
  },
  {
    "technique_id": "T1547",
    "name": "Boot or Logon Autostart Execution",
    "description": "Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon.[1][2][3][4][5]These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel.Since some boot or logon autostart programs run with higher privileges, an adversary may leverage these to elevate privileges.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:47:55.479925",
    "subtechniques": []
  },
  {
    "technique_id": "T1037",
    "name": "Boot or Logon Initialization Scripts",
    "description": "Adversaries may use scripts automatically executed at boot or logon initialization to establish persistence.[1][2]Initialization scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server. These scripts can vary based on operating system and whether applied locally or remotely.Adversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.An adversary may also be able to escalate their privileges since some boot or logon initialization scripts run with higher privileges.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:47:58.840945",
    "subtechniques": [
      {
        "id": "T1037.004",
        "name": "RC Scripts"
      }
    ]
  },
  {
    "technique_id": "T1037.004",
    "name": "RC Scripts",
    "description": "Adversaries may establish persistence by modifying RC scripts, which are executed during a Unix-like system’s startup. These files allow system administrators to map and start custom services at startup for different run levels. RC scripts require root privileges to modify.Adversaries may establish persistence by adding a malicious binary path or shell commands torc.local,rc.common, and other RC scripts specific to the Unix-like distribution.[1][2]Upon reboot, the system executes the script's contents as root, resulting in persistence.Adversary abuse of RC scripts is especially effective for lightweight Unix-like distributions using the root user as default, such as ESXi hypervisors, IoT, or embedded systems.[3]As ESXi servers store most system files in memory and therefore discard changes on shutdown, leveraging/etc/rc.local.d/local.shis one of the few mechanisms for enabling persistence across reboots.[4]Several Unix-like systems have moved to Systemd and deprecated the use of RC scripts. This is now a deprecated mechanism in macOS in favor ofLaunchd.[5][6]This technique can be used on Mac OS X Panther v10.3 and earlier versions which still execute the RC scripts.[7]To maintain backwards compatibility some systems, such as Ubuntu, will execute the RC scripts if they exist with the correct file permissions.[8]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Boot or Logon Initialization Scripts",
    "parent_technique_id": "T1037",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:48:02.198910"
  },
  {
    "technique_id": "T1136",
    "name": "Create Account",
    "description": "Adversaries may create an account to maintain access to victim systems.[1]With a sufficient level of access, creating such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.Accounts may be created on the local system or within a domain or cloud tenant. In cloud environments, adversaries may create accounts that only have access to specific services, which can reduce the chance of detection.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:48:05.531069",
    "subtechniques": [
      {
        "id": "T1136.001",
        "name": "Local Account"
      }
    ]
  },
  {
    "technique_id": "T1136.001",
    "name": "Local Account",
    "description": "Adversaries may create a local account to maintain access to victim systems. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.For example, with a sufficient level of access, the Windowsnet user /addcommand can be used to create a local account.  In Linux, theuseraddcommand can be used, while on macOS systems, thedscl -createcommand can be used. Local accounts may also be added to network devices, often via commonNetwork Device CLIcommands such asusername, to ESXi servers viaesxcli system account add, or to Kubernetes clusters using thekubectlutility.[1][2]Such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Create Account",
    "parent_technique_id": "T1136",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:48:08.870372"
  },
  {
    "technique_id": "T1556",
    "name": "Modify Authentication Process",
    "description": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without usingValid Accounts.Adversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms. Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:48:12.233034",
    "subtechniques": [
      {
        "id": "T1556.004",
        "name": "Network Device Authentication"
      }
    ]
  },
  {
    "technique_id": "T1556.004",
    "name": "Network Device Authentication",
    "description": "Adversaries may usePatch System Imageto hard code a password in the operating system, thus bypassing of native authentication mechanisms for local accounts on network devices.Modify System Imagemay include implanted code to the operating system for network devices to provide access for adversaries using a specific password.  The modification includes a specific password which is implanted in the operating system image via the patch.  Upon authentication attempts, the inserted code will first check to see if the user input is the password. If so, access is granted. Otherwise, the implanted code will pass the credentials on for verification of potentially valid credentials.[1]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Modify Authentication Process",
    "parent_technique_id": "T1556",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:48:15.564686"
  },
  {
    "technique_id": "T1653",
    "name": "Power Settings",
    "description": "Adversaries may impair a system's ability to hibernate, reboot, or shut down in order to extend access to infected machines. When a computer enters a dormant state, some or all software and hardware may cease to operate which can disrupt malicious activity.[1]Adversaries may abuse system utilities and configuration settings to maintain access by preventing machines from entering a state, such as standby, that can terminate malicious activity.[2][3]For example,powercfgcontrols all configurable power system settings on a Windows system and can be abused to prevent an infected host from locking or shutting down.[4]Adversaries may also extend system lock screen timeout settings.[5]Other relevant settings, such as disk and hibernate timeout, can be similarly abused to keep the infected machine running even if no user is active.[6]Aware that some malware cannot survive system reboots, adversaries may entirely delete files used to invoke system shut down or reboot.[7]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:48:18.939730",
    "subtechniques": []
  },
  {
    "technique_id": "T1542",
    "name": "Pre-OS Boot",
    "description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.[1]Adversaries may overwrite data in boot drivers or firmware such as BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) to persist on systems at a layer below the operating system. This can be particularly difficult to detect as malware at this level will not be detected by host software-based defenses.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:48:22.247617",
    "subtechniques": [
      {
        "id": "T1542.001",
        "name": "System Firmware"
      },
      {
        "id": "T1542.004",
        "name": "ROMMONkit"
      },
      {
        "id": "T1542.005",
        "name": "TFTP Boot"
      }
    ]
  },
  {
    "technique_id": "T1542.001",
    "name": "System Firmware",
    "description": "Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.[1][2][3]System firmware like BIOS and (U)EFI underly the functionality of a computer and may be modified by an adversary to perform or assist in malicious activity. Capabilities exist to overwrite the system firmware, which may give sophisticated adversaries a means to install malicious firmware updates as a means of persistence on a system that may be difficult to detect.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Pre-OS Boot",
    "parent_technique_id": "T1542",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:48:25.580606"
  },
  {
    "technique_id": "T1542.004",
    "name": "ROMMONkit",
    "description": "Adversaries may abuse the ROM Monitor (ROMMON) by loading an unauthorized firmware with adversary code to provide persistent access and manipulate device behavior that is difficult to detect.[1][2]ROMMON is a Cisco network device firmware that functions as a boot loader, boot image, or boot helper to initialize hardware and software when the platform is powered on or reset. Similar toTFTP Boot, an adversary may upgrade the ROMMON image locally or remotely (for example, through TFTP) with adversary code and restart the device in order to overwrite the existing ROMMON image. This provides adversaries with the means to update the ROMMON to gain persistence on a system in a way that may be difficult to detect.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Pre-OS Boot",
    "parent_technique_id": "T1542",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:48:28.917204"
  },
  {
    "technique_id": "T1542.005",
    "name": "TFTP Boot",
    "description": "Adversaries may abuse netbooting to load an unauthorized network device operating system from a Trivial File Transfer Protocol (TFTP) server. TFTP boot (netbooting) is commonly used by network administrators to load configuration-controlled network device images from a centralized management server. Netbooting is one option in the boot sequence and can be used to centralize, manage, and control device images.Adversaries may manipulate the configuration on the network device specifying use of a malicious TFTP server, which may be used in conjunction withModify System Imageto load a modified image on device startup or reset. The unauthorized image allows adversaries to modify device configuration, add malicious capabilities to the device, and introduce backdoors to maintain control of the network device while minimizing detection through use of a standard functionality. This technique is similar toROMMONkitand may result in the network device running a modified image.[1]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Pre-OS Boot",
    "parent_technique_id": "T1542",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:48:32.244000"
  },
  {
    "technique_id": "T1505",
    "name": "Server Software Component",
    "description": "Adversaries may abuse legitimate extensible development features of servers to establish persistent access to systems. Enterprise server applications may include features that allow developers to write and install software or scripts to extend the functionality of the main application. Adversaries may install malicious components to extend and abuse server applications.[1]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:48:35.601188",
    "subtechniques": [
      {
        "id": "T1505.003",
        "name": "Web Shell"
      }
    ]
  },
  {
    "technique_id": "T1505.003",
    "name": "Web Shell",
    "description": "Adversaries may backdoor web servers with web shells to establish persistent access to systems. A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to access the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server.[1]In addition to a server-side script, a Web shell may have a client interface program that is used to talk to the Web server (e.g.China ChopperWeb shell client).[2]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Server Software Component",
    "parent_technique_id": "T1505",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:48:38.965168"
  },
  {
    "technique_id": "T1205",
    "name": "Traffic Signaling",
    "description": "Adversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e.Port Knocking), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software.Adversaries may also communicate with an already open port, but the service listening on that port will only respond to commands or trigger other malicious functionality if passed the appropriate magic value(s).The observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r[1], is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.On network devices, adversaries may use crafted packets to enableNetwork Device Authenticationfor standard services offered by the device such as telnet.  Such signaling may also be used to open a closed service port such as telnet, or to trigger module modification of malware implants on the device, adding, removing, or changing malicious capabilities.  Adversaries may use crafted packets to attempt to connect to one or more (open or closed) ports, but may also attempt to connect to a router interface, broadcast, and network address IP on the same port in order to achieve their goals and objectives.[2][3][4]To enable this traffic signaling on embedded devices, adversaries must first achieve and leveragePatch System Imagedue to the monolithic nature of the architecture.Adversaries may also use the Wake-on-LAN feature to turn on powered off systems. Wake-on-LAN is a hardware feature that allows a powered down system to be powered on, or woken up, by sending a magic packet to it. Once the system is powered on, it may become a target for lateral movement.[5][6]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:48:42.295721",
    "subtechniques": [
      {
        "id": "T1205.001",
        "name": "Port Knocking"
      }
    ]
  },
  {
    "technique_id": "T1205.001",
    "name": "Port Knocking",
    "description": "Adversaries may use port knocking to hide open ports used for persistence or command and control. To enable a port, an adversary sends a series of attempted connections to a predefined sequence of closed ports. After the sequence is completed, opening a port is often accomplished by the host based firewall, but could also be implemented by custom software.This technique has been observed both for the dynamic opening of a listening port as well as the initiating of a connection to a listening server on a different system.The observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r[1], is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Traffic Signaling",
    "parent_technique_id": "T1205",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:48:45.614379"
  },
  {
    "technique_id": "T1078",
    "name": "Valid Accounts",
    "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.[1]Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.In some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.[2]The overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.[3]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:48:48.880802",
    "subtechniques": [
      {
        "id": "T1078.001",
        "name": "Default Accounts"
      },
      {
        "id": "T1078.003",
        "name": "Local Accounts"
      }
    ]
  },
  {
    "technique_id": "T1078.001",
    "name": "Default Accounts",
    "description": "Adversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems. Default accounts also include default factory/provider set accounts on other types of systems, software, or devices, including the root user account in AWS, the root user account in ESXi, and the default service account in Kubernetes.[1][2][3]Default accounts are not limited to client machines; rather, they also include accounts that are preset for equipment such as network devices and computer applications, whether they are internal, open source, or commercial. Appliances that come preset with a username and password combination pose a serious threat to organizations that do not change it post installation, as they are easy targets for an adversary. Similarly, adversaries may also utilize publicly disclosed or stolenPrivate Keysor credential materials to legitimately connect to remote environments viaRemote Services.[4]Default accounts may be created on a system after initial setup by connecting or integrating it with another application. For example, when an ESXi server is connected to a vCenter server, a default privileged account calledvpxuseris created on the ESXi server. If a threat actor is able to compromise this account’s credentials (for example, viaExploitation for Credential Accesson the vCenter host), they will then have access to the ESXi server.[5][6]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Valid Accounts",
    "parent_technique_id": "T1078",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:48:52.121817"
  },
  {
    "technique_id": "T1078.003",
    "name": "Local Accounts",
    "description": "Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.Local Accounts may also be abused to elevate privileges and harvest credentials throughOS Credential Dumping. Password reuse may allow the abuse of local accounts across a set of machines on a network for the purposes of Privilege Escalation and Lateral Movement.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Valid Accounts",
    "parent_technique_id": "T1078",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:48:55.492644"
  },
  {
    "technique_id": "T1098",
    "name": "Account Manipulation",
    "description": "Adversaries may manipulate accounts to maintain and/or elevate access to victim systems. Account manipulation may consist of any action that preserves or modifies adversary access to a compromised account, such as modifying credentials or permission groups.[1]These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials.In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain. However, account manipulation may also lead to privilege escalation where modifications grant access to additional roles, permissions, or higher-privilegedValid Accounts.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:48:58.757423",
    "subtechniques": [
      {
        "id": "T1098.004",
        "name": "SSH Authorized Keys"
      }
    ]
  },
  {
    "technique_id": "T1098.004",
    "name": "SSH Authorized Keys",
    "description": "Adversaries may modify the SSHauthorized_keysfile to maintain persistence on a victim host. Linux distributions, macOS, and ESXi hypervisors commonly use key-based authentication to secure the authentication process of SSH sessions for remote management. Theauthorized_keysfile in SSH specifies the SSH keys that can be used for logging into the user account for which the file is configured. This file is usually found in the user's home directory under<user-home>/.ssh/authorized_keys(or, on ESXi,/etc/ssh/keys-<username>/authorized_keys).[1]Users may edit the system’s SSH config file to modify the directivesPubkeyAuthenticationandRSAAuthenticationto the valueyesto ensure public key and RSA authentication are enabled, as well as modify the directivePermitRootLoginto the valueyesto enable root authentication via SSH.[2]The SSH config file is usually located under/etc/ssh/sshd_config.Adversaries may modify SSHauthorized_keysfiles directly with scripts or shell commands to add their own adversary-supplied public keys. In cloud environments, adversaries may be able to modify the SSH authorized_keys file of a particular virtual machine via the command line interface or rest API. For example, by using the Google Cloud CLI’s \"add-metadata\" command an adversary may add SSH keys to a user account.[3][4]Similarly, in Azure, an adversary may update the authorized_keys file of a virtual machine via a PATCH request to the API.[5]This ensures that an adversary possessing the corresponding private key may log in as an existing user via SSH.[6][7]It may also lead to privilege escalation where the virtual machine or instance has distinct permissions from the requesting user.Where authorized_keys files are modified via cloud APIs or command line interfaces, an adversary may achieve privilege escalation on the target virtual machine if they add a key to a higher-privileged user.SSH keys can also be added to accounts on network devices, such as with theip ssh pubkey-chainNetwork Device CLIcommand.[8]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Account Manipulation",
    "parent_technique_id": "T1098",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:49:01.995278"
  },
  {
    "technique_id": "T1547",
    "name": "Boot or Logon Autostart Execution",
    "description": "Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon.[1][2][3][4][5]These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel.Since some boot or logon autostart programs run with higher privileges, an adversary may leverage these to elevate privileges.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:49:05.250957",
    "subtechniques": []
  },
  {
    "technique_id": "T1037",
    "name": "Boot or Logon Initialization Scripts",
    "description": "Adversaries may use scripts automatically executed at boot or logon initialization to establish persistence.[1][2]Initialization scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server. These scripts can vary based on operating system and whether applied locally or remotely.Adversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.An adversary may also be able to escalate their privileges since some boot or logon initialization scripts run with higher privileges.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:49:08.555798",
    "subtechniques": [
      {
        "id": "T1037.004",
        "name": "RC Scripts"
      }
    ]
  },
  {
    "technique_id": "T1037.004",
    "name": "RC Scripts",
    "description": "Adversaries may establish persistence by modifying RC scripts, which are executed during a Unix-like system’s startup. These files allow system administrators to map and start custom services at startup for different run levels. RC scripts require root privileges to modify.Adversaries may establish persistence by adding a malicious binary path or shell commands torc.local,rc.common, and other RC scripts specific to the Unix-like distribution.[1][2]Upon reboot, the system executes the script's contents as root, resulting in persistence.Adversary abuse of RC scripts is especially effective for lightweight Unix-like distributions using the root user as default, such as ESXi hypervisors, IoT, or embedded systems.[3]As ESXi servers store most system files in memory and therefore discard changes on shutdown, leveraging/etc/rc.local.d/local.shis one of the few mechanisms for enabling persistence across reboots.[4]Several Unix-like systems have moved to Systemd and deprecated the use of RC scripts. This is now a deprecated mechanism in macOS in favor ofLaunchd.[5][6]This technique can be used on Mac OS X Panther v10.3 and earlier versions which still execute the RC scripts.[7]To maintain backwards compatibility some systems, such as Ubuntu, will execute the RC scripts if they exist with the correct file permissions.[8]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Boot or Logon Initialization Scripts",
    "parent_technique_id": "T1037",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:49:11.838012"
  },
  {
    "technique_id": "T1078",
    "name": "Valid Accounts",
    "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.[1]Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.In some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.[2]The overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.[3]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:49:15.124768",
    "subtechniques": [
      {
        "id": "T1078.001",
        "name": "Default Accounts"
      },
      {
        "id": "T1078.003",
        "name": "Local Accounts"
      }
    ]
  },
  {
    "technique_id": "T1078.001",
    "name": "Default Accounts",
    "description": "Adversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems. Default accounts also include default factory/provider set accounts on other types of systems, software, or devices, including the root user account in AWS, the root user account in ESXi, and the default service account in Kubernetes.[1][2][3]Default accounts are not limited to client machines; rather, they also include accounts that are preset for equipment such as network devices and computer applications, whether they are internal, open source, or commercial. Appliances that come preset with a username and password combination pose a serious threat to organizations that do not change it post installation, as they are easy targets for an adversary. Similarly, adversaries may also utilize publicly disclosed or stolenPrivate Keysor credential materials to legitimately connect to remote environments viaRemote Services.[4]Default accounts may be created on a system after initial setup by connecting or integrating it with another application. For example, when an ESXi server is connected to a vCenter server, a default privileged account calledvpxuseris created on the ESXi server. If a threat actor is able to compromise this account’s credentials (for example, viaExploitation for Credential Accesson the vCenter host), they will then have access to the ESXi server.[5][6]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Valid Accounts",
    "parent_technique_id": "T1078",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:49:18.362029"
  },
  {
    "technique_id": "T1078.003",
    "name": "Local Accounts",
    "description": "Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.Local Accounts may also be abused to elevate privileges and harvest credentials throughOS Credential Dumping. Password reuse may allow the abuse of local accounts across a set of machines on a network for the purposes of Privilege Escalation and Lateral Movement.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Valid Accounts",
    "parent_technique_id": "T1078",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:49:21.603580"
  },
  {
    "technique_id": "T1006",
    "name": "Direct Volume Access",
    "description": "Adversaries may directly access a volume to bypass file access controls and file system monitoring. Windows allows programs to have direct access to logical volumes. Programs with direct access may read and write files directly from the drive by analyzing file system data structures. This technique may bypass Windows file access controls as well as file system monitoring tools.[1]Utilities, such asNinjaCopy, exist to perform these actions in PowerShell.[2]Adversaries may also use built-in or third-party utilities (such asvssadmin,wbadmin, andesentutl) to create shadow copies or backups of data from system volumes.[3]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:49:24.936536",
    "subtechniques": []
  },
  {
    "technique_id": "T1562",
    "name": "Impair Defenses",
    "description": "Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.Adversaries may also impair routine operations that contribute to defensive hygiene, such as blocking users from logging out, preventing a system from shutting down, or disabling or modifying the update process. Adversaries could also target event aggregation and analysis mechanisms, or otherwise disrupt these procedures by altering other system components. These restrictions can further enable malicious operations as well as the continued propagation of incidents.[1][2]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:49:28.312552",
    "subtechniques": [
      {
        "id": "T1562.001",
        "name": "Disable or Modify Tools"
      },
      {
        "id": "T1562.003",
        "name": "Impair Command History Logging"
      },
      {
        "id": "T1562.004",
        "name": "Disable or Modify System Firewall"
      }
    ]
  },
  {
    "technique_id": "T1562.001",
    "name": "Disable or Modify Tools",
    "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.[1]Adversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar toIndicator Blocking, adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.[2][3]Alternatively, they may add new directories to an endpoint detection and response (EDR) tool’s exclusion list, enabling them to hide malicious files viaFile/Path Exclusions.[4][5]Adversaries may also focus on specific applications such as Sysmon. For example, the \"Start\" and \"Enable\" values inHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operationalmay be modified to tamper with and potentially disable Sysmon logging.[6]On network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.[7][8]In cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.Furthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools.[9][10][11][12]For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.[11]Additionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e.Exploitation for Privilege Escalation), which may lead to bypassing anti-tampering features.[13]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Impair Defenses",
    "parent_technique_id": "T1562",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:49:31.679733"
  },
  {
    "technique_id": "T1562.003",
    "name": "Impair Command History Logging",
    "description": "Adversaries may impair command history logging to hide commands they run on a compromised system. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.On Linux and macOS, command history is tracked in a file pointed to by the environment variableHISTFILE. When a user logs off a system, this information is flushed to a file in the user's home directory called~/.bash_history. TheHISTCONTROLenvironment variable keeps track of what should be saved by thehistorycommand and eventually into the~/.bash_historyfile when a user logs out.HISTCONTROLdoes not exist by default on macOS, but can be set by the user and will be respected. TheHISTFILEenvironment variable is also used in some ESXi systems.[1]Adversaries may clear the history environment variable (unset HISTFILE) or set the command history size to zero (export HISTFILESIZE=0) to prevent logging of commands. Additionally,HISTCONTROLcan be configured to ignore commands that start with a space by simply setting it to \"ignorespace\".HISTCONTROLcan also be set to ignore duplicate commands by setting it to \"ignoredups\". In some Linux systems, this is set by default to \"ignoreboth\" which covers both of the previous examples. This means that \" ls\" will not be saved, but \"ls\" would be saved by history. Adversaries can abuse this to operate without leaving traces by simply prepending a space to all of their terminal commands.On Windows systems, thePSReadLinemodule tracks commands used in all PowerShell sessions and writes them to a file ($env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txtby default). Adversaries may change where these logs are saved usingSet-PSReadLineOption -HistorySavePath {File Path}. This will causeConsoleHost_history.txtto stop receiving logs. Additionally, it is possible to turn off logging to this file using the PowerShell commandSet-PSReadlineOption -HistorySaveStyle SaveNothing.[2][3][4]Adversaries may also leverage aNetwork Device CLIon network devices to disable historical command logging (e.g.no logging).",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Impair Defenses",
    "parent_technique_id": "T1562",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:49:35.026535"
  },
  {
    "technique_id": "T1562.004",
    "name": "Disable or Modify System Firewall",
    "description": "Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage. Changes could be disabling the entire mechanism as well as adding, deleting, or modifying particular rules. This can be done numerous ways depending on the operating system, including via command-line, editing Windows Registry keys, and Windows Control Panel.Modifying or disabling a system firewall may enable adversary C2 communications, lateral movement, and/or data exfiltration that would otherwise not be allowed. For example, adversaries may add a new firewall rule for a well-known protocol (such as RDP) using a non-traditional and potentially less securitized port (i.e.Non-Standard Port).[1]Adversaries may also modify host networking settings that indirectly manipulate system firewalls, such as interface bandwidth or network connection request thresholds.[2]Settings related to enabling abuse of variousRemote Servicesmay also indirectly modify firewall rules.In ESXi, firewall rules may be modified directly via the esxcli command line interface (e.g., viaesxcli network firewall set) or via the vCenter user interface.[3][4]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Impair Defenses",
    "parent_technique_id": "T1562",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:49:38.372207"
  },
  {
    "technique_id": "T1070",
    "name": "Indicator Removal",
    "description": "Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary’s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.Removal of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:49:41.713987",
    "subtechniques": [
      {
        "id": "T1070.003",
        "name": "Clear Command History"
      },
      {
        "id": "T1070.007",
        "name": "Clear Network Connection History and Configurations"
      },
      {
        "id": "T1070.010",
        "name": "Relocate Malware"
      }
    ]
  },
  {
    "technique_id": "T1070.003",
    "name": "Clear Command History",
    "description": "In addition to clearing system logs, an adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.On Linux and macOS, these command histories can be accessed in a few different ways. While logged in, this command history is tracked in a file pointed to by the environment variableHISTFILE. When a user logs off a system, this information is flushed to a file in the user's home directory called~/.bash_history. The benefit of this is that it allows users to go back to commands they've used before in different sessions. Adversaries may delete their commands from these logs by manually clearing the history (history -c) or deleting the bash history filerm ~/.bash_history.Adversaries may also leverage aNetwork Device CLIon network devices to clear command history data (clear loggingand/orclear history).[1]On ESXi servers, command history may be manually removed from the/var/log/shell.logfile.[2]On Windows hosts, PowerShell has two different command history providers: the built-in history and the command history managed by thePSReadLinemodule. The built-in history only tracks the commands used in the current session. This command history is not available to other sessions and is deleted when the session ends.ThePSReadLinecommand history tracks the commands used in all PowerShell sessions and writes them to a file ($env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txtby default). This history file is available to all sessions and contains all past history since the file is not deleted when the session ends.[3]Adversaries may run the PowerShell commandClear-Historyto flush the entire command history from a current PowerShell session. This, however, will not delete/flush theConsoleHost_history.txtfile. Adversaries may also delete theConsoleHost_history.txtfile or edit its contents to hide PowerShell commands they have run.[4][5]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Indicator Removal",
    "parent_technique_id": "T1070",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:49:45.068077"
  },
  {
    "technique_id": "T1070.007",
    "name": "Clear Network Connection History and Configurations",
    "description": "Adversaries may clear or remove evidence of malicious network connections in order to clean up traces of their operations. Configuration settings as well as various artifacts that highlight connection history may be created on a system and/or in application logs from behaviors that require network connections, such asRemote ServicesorExternal Remote Services. Defenders may use these artifacts to monitor or otherwise analyze network connections created by adversaries.Network connection history may be stored in various locations. For example, RDP connection history may be stored in Windows Registry values under[1]:HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\DefaultHKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\ServersWindows may also store information about recent RDP connections in files such asC:\\Users\\%username%\\Documents\\Default.rdpandC:\\Users\\%username%\\AppData\\Local\\Microsoft\\TerminalServer Client\\Cache\\.[2]Similarly, macOS and Linux hosts may store information highlighting connection history in system logs (such as those stored in/Library/Logsand/or/var/log/).[3][4][5]Malicious network connections may also require changes to third-party applications or network configuration settings, such asDisable or Modify System Firewallor tampering to enableProxy. Adversaries may delete or modify this data to conceal indicators and/or impede defensive analysis.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Indicator Removal",
    "parent_technique_id": "T1070",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:49:48.430994"
  },
  {
    "technique_id": "T1070.010",
    "name": "Relocate Malware",
    "description": "Once a payload is delivered, adversaries may reproduce copies of the same malware on the victim system to remove evidence of their presence and/or avoid defenses. Copying malware payloads to new locations may also be combined withFile Deletionto cleanup older artifacts.Relocating malware may be a part of many actions intended to evade defenses. For example, adversaries may copy and rename payloads to better blend into the local environment (i.e.,Match Legitimate Resource Name or Location).[1]Payloads may also be repositioned to targetFile/Path Exclusionsas well as specific locations associated with establishingPersistence.[2]Relocating malicious payloads may also hinder defensive analysis, especially to separate these payloads from earlier events (such asUser ExecutionandPhishing) that may have generated alerts or otherwise drawn attention from defenders.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Indicator Removal",
    "parent_technique_id": "T1070",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:49:51.777330"
  },
  {
    "technique_id": "T1556",
    "name": "Modify Authentication Process",
    "description": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without usingValid Accounts.Adversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms. Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:49:55.105323",
    "subtechniques": [
      {
        "id": "T1556.004",
        "name": "Network Device Authentication"
      }
    ]
  },
  {
    "technique_id": "T1556.004",
    "name": "Network Device Authentication",
    "description": "Adversaries may usePatch System Imageto hard code a password in the operating system, thus bypassing of native authentication mechanisms for local accounts on network devices.Modify System Imagemay include implanted code to the operating system for network devices to provide access for adversaries using a specific password.  The modification includes a specific password which is implanted in the operating system image via the patch.  Upon authentication attempts, the inserted code will first check to see if the user input is the password. If so, access is granted. Otherwise, the implanted code will pass the credentials on for verification of potentially valid credentials.[1]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Modify Authentication Process",
    "parent_technique_id": "T1556",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:49:58.441091"
  },
  {
    "technique_id": "T1601",
    "name": "Modify System Image",
    "description": "Adversaries may make changes to the operating system of embedded network devices to weaken defenses and provide new capabilities for themselves.  On such devices, the operating systems are typically monolithic and most of the device functionality and capabilities are contained within a single file.To change the operating system, the adversary typically only needs to affect this one file, replacing or modifying it.  This can either be done live in memory during system runtime for immediate effect, or in storage to implement the change on the next boot of the network device.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:50:01.764641",
    "subtechniques": [
      {
        "id": "T1601.001",
        "name": "Patch System Image"
      },
      {
        "id": "T1601.002",
        "name": "Downgrade System Image"
      }
    ]
  },
  {
    "technique_id": "T1601.001",
    "name": "Patch System Image",
    "description": "Adversaries may modify the operating system of a network device to introduce new capabilities or weaken existing defenses.[1][2][3][4][5]Some network devices are built with a monolithic architecture, where the entire operating system and most of the functionality of the device is contained within a single file.  Adversaries may change this file in storage, to be loaded in a future boot, or in memory during runtime.To change the operating system in storage, the adversary will typically use the standard procedures available to device operators. This may involve downloading a new file via typical protocols used on network devices, such as TFTP, FTP, SCP, or a console connection.  The original file may be overwritten, or a new file may be written alongside of it and the device reconfigured to boot to the compromised image.To change the operating system in memory, the adversary typically can use one of two methods. In the first, the adversary would make use of native debug commands in the original, unaltered running operating system that allow them to directly modify the relevant memory addresses containing the running operating system.  This method typically requires administrative level access to the device.In the second method for changing the operating system in memory, the adversary would make use of the boot loader. The boot loader is the first piece of software that loads when the device starts that, in turn, will launch the operating system.  Adversaries may use malicious code previously implanted in the boot loader, such as through theROMMONkitmethod, to directly manipulate running operating system code in memory.  This malicious code in the bootloader provides the capability of direct memory manipulation to the adversary, allowing them to patch the live operating system during runtime.By modifying the instructions stored in the system image file, adversaries may either weaken existing defenses or provision new capabilities that the device did not have before. Examples of existing defenses that can be impeded include encryption, viaWeaken Encryption, authentication, viaNetwork Device Authentication, and perimeter defenses, viaNetwork Boundary Bridging.  Adding new capabilities for the adversary’s purpose includeKeylogging,Multi-hop Proxy, andPort Knocking.Adversaries may also compromise existing commands in the operating system to produce false output to mislead defenders.   When this method is used in conjunction withDowngrade System Image, one example of a compromised system command may include changing the output of the command that shows the version of the currently running operating system.  By patching the operating system, the adversary can change this command to instead display the original, higher revision number that they replaced through the system downgrade.When the operating system is patched in storage, this can be achieved in either the resident storage (typically a form of flash memory, which is non-volatile) or viaTFTP Boot.When the technique is performed on the running operating system in memory and not on the stored copy, this technique will not survive across reboots.  However, live memory modification of the operating system can be combined withROMMONkitto achieve persistence.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Modify System Image",
    "parent_technique_id": "T1601",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:50:05.137701"
  },
  {
    "technique_id": "T1601.002",
    "name": "Downgrade System Image",
    "description": "Adversaries may install an older version of the operating system of a network device to weaken security.  Older operating system versions on network devices often have weaker encryption ciphers and, in general, fewer/less updated defensive features.[1]On embedded devices, downgrading the version typically only requires replacing the operating system file in storage.  With most embedded devices, this can be achieved by downloading a copy of the desired version of the operating system file and reconfiguring the device to boot from that file on next system restart.  The adversary could then restart the device to implement the change immediately or they could wait until the next time the system restarts.Downgrading the system image to an older versions may allow an adversary to evade defenses by enabling behaviors such asWeaken Encryption.  Downgrading of a system image can be done on its own, or it can be used in conjunction withPatch System Image.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Modify System Image",
    "parent_technique_id": "T1601",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:50:08.469069"
  },
  {
    "technique_id": "T1599",
    "name": "Network Boundary Bridging",
    "description": "Adversaries may bridge network boundaries by compromising perimeter network devices or internal devices responsible for network segmentation. Breaching these devices may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.Devices such as routers and firewalls can be used to create boundaries between trusted and untrusted networks.  They achieve this by restricting traffic types to enforce organizational policy in an attempt to reduce the risk inherent in such connections.  Restriction of traffic can be achieved by prohibiting IP addresses, layer 4 protocol ports, or through deep packet inspection to identify applications.  To participate with the rest of the network, these devices can be directly addressable or transparent, but their mode of operation has no bearing on how the adversary can bypass them when compromised.When an adversary takes control of such a boundary device, they can bypass its policy enforcement to pass normally prohibited traffic across the trust boundary between the two separated networks without hinderance.  By achieving sufficient rights on the device, an adversary can reconfigure the device to allow the traffic they want, allowing them to then further achieve goals such as command and control viaMulti-hop Proxyor exfiltration of data viaTraffic Duplication. Adversaries may also target internal devices responsible for network segmentation and abuse these in conjunction withInternal Proxyto achieve the same goals.[1]In the cases where a border device separates two separate organizations, the adversary can also facilitate lateral movement into new victim environments.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:50:11.846813",
    "subtechniques": [
      {
        "id": "T1599.001",
        "name": "Network Address Translation Traversal"
      }
    ]
  },
  {
    "technique_id": "T1599.001",
    "name": "Network Address Translation Traversal",
    "description": "Adversaries may bridge network boundaries by modifying a network device’s Network Address Translation (NAT) configuration. Malicious modifications to NAT may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.Network devices such as routers and firewalls that connect multiple networks together may implement NAT during the process of passing packets between networks. When performing NAT, the network device will rewrite the source and/or destination addresses of the IP address header. Some network designs require NAT for the packets to cross the border device.  A typical example of this is environments where internal networks make use of non-Internet routable addresses.[1]When an adversary gains control of a network boundary device, they can either leverage existing NAT configurations to send traffic between two separated networks, or they can implement NAT configurations of their own design.  In the case of network designs that require NAT to function, this enables the adversary to overcome inherent routing limitations that would normally prevent them from accessing protected systems behind the border device.  In the case of network designs that do not require NAT, address translation can be used by adversaries to obscure their activities, as changing the addresses of packets that traverse a network boundary device can make monitoring data transmissions more challenging for defenders.Adversaries may usePatch System Imageto change the operating system of a network device, implementing their own custom NAT mechanisms to further obscure their activities",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Network Boundary Bridging",
    "parent_technique_id": "T1599",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:50:15.158833"
  },
  {
    "technique_id": "T1027",
    "name": "Obfuscated Files or Information",
    "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses.Payloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open andDeobfuscate/Decode Files or InformationforUser Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.[1]Adversaries may also use compressed or archived scripts, such as JavaScript.Portions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.[2]Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled.[3]Adversaries may also abuseCommand Obfuscationto obscure commands executed from payloads or directly viaCommand and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.[4][5][6]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:50:18.511709",
    "subtechniques": [
      {
        "id": "T1027.008",
        "name": "Stripped Payloads"
      }
    ]
  },
  {
    "technique_id": "T1027.008",
    "name": "Stripped Payloads",
    "description": "Adversaries may attempt to make a payload difficult to analyze by removing symbols, strings, and other human readable information. Scripts and executables may contain variables names and other strings that help developers document code functionality. Symbols are often created by an operating system’slinkerwhen executable payloads are compiled. Reverse engineers use these symbols and strings to analyze code and to identify functionality in payloads.[1][2]Adversaries may use stripped payloads in order to make malware analysis more difficult. For example, compilers and other tools may provide features to remove or obfuscate strings and symbols. Adversaries have also used stripped payload formats, such as run-only AppleScripts, a compiled and stripped version ofAppleScript, to evade detection and analysis. The lack of human-readable information may directly hinder detection and analysis of payloads.[3]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Obfuscated Files or Information",
    "parent_technique_id": "T1027",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:50:21.840681"
  },
  {
    "technique_id": "T1542",
    "name": "Pre-OS Boot",
    "description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.[1]Adversaries may overwrite data in boot drivers or firmware such as BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) to persist on systems at a layer below the operating system. This can be particularly difficult to detect as malware at this level will not be detected by host software-based defenses.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:50:25.073089",
    "subtechniques": [
      {
        "id": "T1542.001",
        "name": "System Firmware"
      },
      {
        "id": "T1542.004",
        "name": "ROMMONkit"
      },
      {
        "id": "T1542.005",
        "name": "TFTP Boot"
      }
    ]
  },
  {
    "technique_id": "T1542.001",
    "name": "System Firmware",
    "description": "Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.[1][2][3]System firmware like BIOS and (U)EFI underly the functionality of a computer and may be modified by an adversary to perform or assist in malicious activity. Capabilities exist to overwrite the system firmware, which may give sophisticated adversaries a means to install malicious firmware updates as a means of persistence on a system that may be difficult to detect.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Pre-OS Boot",
    "parent_technique_id": "T1542",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:50:28.399901"
  },
  {
    "technique_id": "T1542.004",
    "name": "ROMMONkit",
    "description": "Adversaries may abuse the ROM Monitor (ROMMON) by loading an unauthorized firmware with adversary code to provide persistent access and manipulate device behavior that is difficult to detect.[1][2]ROMMON is a Cisco network device firmware that functions as a boot loader, boot image, or boot helper to initialize hardware and software when the platform is powered on or reset. Similar toTFTP Boot, an adversary may upgrade the ROMMON image locally or remotely (for example, through TFTP) with adversary code and restart the device in order to overwrite the existing ROMMON image. This provides adversaries with the means to update the ROMMON to gain persistence on a system in a way that may be difficult to detect.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Pre-OS Boot",
    "parent_technique_id": "T1542",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:50:31.713813"
  },
  {
    "technique_id": "T1542.005",
    "name": "TFTP Boot",
    "description": "Adversaries may abuse netbooting to load an unauthorized network device operating system from a Trivial File Transfer Protocol (TFTP) server. TFTP boot (netbooting) is commonly used by network administrators to load configuration-controlled network device images from a centralized management server. Netbooting is one option in the boot sequence and can be used to centralize, manage, and control device images.Adversaries may manipulate the configuration on the network device specifying use of a malicious TFTP server, which may be used in conjunction withModify System Imageto load a modified image on device startup or reset. The unauthorized image allows adversaries to modify device configuration, add malicious capabilities to the device, and introduce backdoors to maintain control of the network device while minimizing detection through use of a standard functionality. This technique is similar toROMMONkitand may result in the network device running a modified image.[1]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Pre-OS Boot",
    "parent_technique_id": "T1542",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:50:35.045484"
  },
  {
    "technique_id": "T1205",
    "name": "Traffic Signaling",
    "description": "Adversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e.Port Knocking), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software.Adversaries may also communicate with an already open port, but the service listening on that port will only respond to commands or trigger other malicious functionality if passed the appropriate magic value(s).The observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r[1], is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.On network devices, adversaries may use crafted packets to enableNetwork Device Authenticationfor standard services offered by the device such as telnet.  Such signaling may also be used to open a closed service port such as telnet, or to trigger module modification of malware implants on the device, adding, removing, or changing malicious capabilities.  Adversaries may use crafted packets to attempt to connect to one or more (open or closed) ports, but may also attempt to connect to a router interface, broadcast, and network address IP on the same port in order to achieve their goals and objectives.[2][3][4]To enable this traffic signaling on embedded devices, adversaries must first achieve and leveragePatch System Imagedue to the monolithic nature of the architecture.Adversaries may also use the Wake-on-LAN feature to turn on powered off systems. Wake-on-LAN is a hardware feature that allows a powered down system to be powered on, or woken up, by sending a magic packet to it. Once the system is powered on, it may become a target for lateral movement.[5][6]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:50:38.455604",
    "subtechniques": [
      {
        "id": "T1205.001",
        "name": "Port Knocking"
      }
    ]
  },
  {
    "technique_id": "T1205.001",
    "name": "Port Knocking",
    "description": "Adversaries may use port knocking to hide open ports used for persistence or command and control. To enable a port, an adversary sends a series of attempted connections to a predefined sequence of closed ports. After the sequence is completed, opening a port is often accomplished by the host based firewall, but could also be implemented by custom software.This technique has been observed both for the dynamic opening of a listening port as well as the initiating of a connection to a listening server on a different system.The observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r[1], is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Traffic Signaling",
    "parent_technique_id": "T1205",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:50:41.779084"
  },
  {
    "technique_id": "T1078",
    "name": "Valid Accounts",
    "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.[1]Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.In some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.[2]The overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.[3]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:50:45.055877",
    "subtechniques": [
      {
        "id": "T1078.001",
        "name": "Default Accounts"
      },
      {
        "id": "T1078.003",
        "name": "Local Accounts"
      }
    ]
  },
  {
    "technique_id": "T1078.001",
    "name": "Default Accounts",
    "description": "Adversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems. Default accounts also include default factory/provider set accounts on other types of systems, software, or devices, including the root user account in AWS, the root user account in ESXi, and the default service account in Kubernetes.[1][2][3]Default accounts are not limited to client machines; rather, they also include accounts that are preset for equipment such as network devices and computer applications, whether they are internal, open source, or commercial. Appliances that come preset with a username and password combination pose a serious threat to organizations that do not change it post installation, as they are easy targets for an adversary. Similarly, adversaries may also utilize publicly disclosed or stolenPrivate Keysor credential materials to legitimately connect to remote environments viaRemote Services.[4]Default accounts may be created on a system after initial setup by connecting or integrating it with another application. For example, when an ESXi server is connected to a vCenter server, a default privileged account calledvpxuseris created on the ESXi server. If a threat actor is able to compromise this account’s credentials (for example, viaExploitation for Credential Accesson the vCenter host), they will then have access to the ESXi server.[5][6]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Valid Accounts",
    "parent_technique_id": "T1078",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:50:48.300102"
  },
  {
    "technique_id": "T1078.003",
    "name": "Local Accounts",
    "description": "Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.Local Accounts may also be abused to elevate privileges and harvest credentials throughOS Credential Dumping. Password reuse may allow the abuse of local accounts across a set of machines on a network for the purposes of Privilege Escalation and Lateral Movement.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Valid Accounts",
    "parent_technique_id": "T1078",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:50:51.530512"
  },
  {
    "technique_id": "T1600",
    "name": "Weaken Encryption",
    "description": "Adversaries may compromise a network device’s encryption capability in order to bypass encryption that would otherwise protect data communications.[1]Encryption can be used to protect transmitted network traffic to maintain its confidentiality (protect against unauthorized disclosure) and integrity (protect against unauthorized changes). Encryption ciphers are used to convert a plaintext message to ciphertext and can be computationally intensive to decipher without the associated decryption key. Typically, longer keys increase the cost of cryptanalysis, or decryption without the key.Adversaries can compromise and manipulate devices that perform encryption of network traffic. For example, through behaviors such asModify System Image,Reduce Key Space, andDisable Crypto Hardware, an adversary can negatively effect and/or eliminate a device’s ability to securely encrypt network traffic. This poses a greater risk of unauthorized disclosure and may help facilitate data manipulation, Credential Access, or Collection efforts.[2]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:50:54.861534",
    "subtechniques": [
      {
        "id": "T1600.001",
        "name": "Reduce Key Space"
      },
      {
        "id": "T1600.002",
        "name": "Disable Crypto Hardware"
      }
    ]
  },
  {
    "technique_id": "T1600.001",
    "name": "Reduce Key Space",
    "description": "Adversaries may reduce the level of effort required to decrypt data transmitted over the network by reducing the cipher strength of encrypted communications.[1]Adversaries can weaken the encryption software on a compromised network device by reducing the key size used by the software to convert plaintext to ciphertext (e.g., from hundreds or thousands of bytes to just a couple of bytes). As a result, adversaries dramatically reduce the amount of effort needed to decrypt the protected information without the key.Adversaries may modify the key size used and other encryption parameters using specialized commands in aNetwork Device CLIintroduced to the system throughModify System Imageto change the configuration of the device.[2]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Weaken Encryption",
    "parent_technique_id": "T1600",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:50:58.195903"
  },
  {
    "technique_id": "T1600.002",
    "name": "Disable Crypto Hardware",
    "description": "Adversaries disable a network device’s dedicated hardware encryption, which may enable them to leverage weaknesses in software encryption in order to reduce the effort involved in collecting, manipulating, and exfiltrating transmitted data.Many network devices such as routers, switches, and firewalls, perform encryption on network traffic to secure transmission across networks. Often, these devices are equipped with special, dedicated encryption hardware to greatly increase the speed of the encryption process as well as to prevent malicious tampering. When an adversary takes control of such a device, they may disable the dedicated hardware, for example, through use ofModify System Image, forcing the use of software to perform encryption on general processors. This is typically used in conjunction with attacks to weaken the strength of the cipher in software (e.g.,Reduce Key Space).[1]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Weaken Encryption",
    "parent_technique_id": "T1600",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:51:01.524946"
  },
  {
    "technique_id": "T1557",
    "name": "Adversary-in-the-Middle",
    "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such asNetwork Sniffing,Transmitted Data Manipulation, or replay attacks (Exploitation for Credential Access). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.[1]For example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.[2][3][4]Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens (Steal Application Access Token) and session cookies (Steal Web Session Cookie).[5][6]Downgrade Attacks can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.[7][8][9]Adversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as inTransmitted Data Manipulation. Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially toImpair Defensesand/or in support of aNetwork Denial of Service.",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:51:04.877392",
    "subtechniques": [
      {
        "id": "T1557.004",
        "name": "Evil Twin"
      }
    ]
  },
  {
    "technique_id": "T1557.004",
    "name": "Evil Twin",
    "description": "Adversaries may host seemingly genuine Wi-Fi access points to deceive users into connecting to malicious networks as a way of supporting follow-on behaviors such asNetwork Sniffing,Transmitted Data Manipulation, orInput Capture.[1]By using a Service Set Identifier (SSID) of a legitimate Wi-Fi network, fraudulent Wi-Fi access points may trick devices or users into connecting to malicious Wi-Fi networks.[2][3]Adversaries may provide a stronger signal strength or block access to Wi-Fi access points to coerce or entice victim devices into connecting to malicious networks.[4]A Wi-Fi Pineapple – a network security auditing and penetration testing tool – may be deployed in Evil Twin attacks for ease of use and broader range. Custom certificates may be used in an attempt to intercept HTTPS traffic.Similarly, adversaries may also listen for client devices sending probe requests for known or previously connected networks (Preferred Network Lists or PNLs). When a malicious access point receives a probe request, adversaries can respond with the same SSID to imitate the trusted, known network.[4]Victim devices are led to believe the responding access point is from their PNL and initiate a connection to the fraudulent network.Upon logging into the malicious Wi-Fi access point, a user may be directed to a fake login page or captive portal webpage to capture the victim’s credentials. Once a user is logged into the fraudulent Wi-Fi network, the adversary may able to monitor network activity, manipulate data, or steal additional credentials. Locations with high concentrations of public Wi-Fi access, such as airports, coffee shops, or libraries, may be targets for adversaries to set up illegitimate Wi-Fi access points.",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Adversary-in-the-Middle",
    "parent_technique_id": "T1557",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:51:08.238311"
  },
  {
    "technique_id": "T1110",
    "name": "Brute Force",
    "description": "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained.[1]Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism.[2]Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.Brute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access toValid Accountswithin a victim environment leveraging knowledge gathered from other post-compromise behaviors such asOS Credential Dumping,Account Discovery, orPassword Policy Discovery. Adversaries may also combine brute forcing activity with behaviors such asExternal Remote Servicesas part of Initial Access.",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:51:11.578595",
    "subtechniques": [
      {
        "id": "T1110.001",
        "name": "Password Guessing"
      },
      {
        "id": "T1110.002",
        "name": "Password Cracking"
      },
      {
        "id": "T1110.003",
        "name": "Password Spraying"
      },
      {
        "id": "T1110.004",
        "name": "Credential Stuffing"
      }
    ]
  },
  {
    "technique_id": "T1110.001",
    "name": "Password Guessing",
    "description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.Guessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies.[1]Typically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:SSH (22/TCP)Telnet (23/TCP)FTP (21/TCP)NetBIOS / SMB / Samba (139/TCP & 445/TCP)LDAP (389/TCP)Kerberos (88/TCP)RDP / Terminal Services (3389/TCP)HTTP/HTTP Management Services (80/TCP & 443/TCP)MSSQL (1433/TCP)Oracle (1521/TCP)MySQL (3306/TCP)VNC (5900/TCP)SNMP (161/UDP and 162/TCP/UDP)In addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.[2]. Further, adversaries may abuse network device interfaces (such aswlanAPI) to brute force accessible wifi-router(s) via wireless authentication protocols.[3]In default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Brute Force",
    "parent_technique_id": "T1110",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:51:14.915021"
  },
  {
    "technique_id": "T1110.002",
    "name": "Password Cracking",
    "description": "Adversaries may use password cracking to attempt to recover usable credentials, such as plaintext passwords, when credential material such as password hashes are obtained.OS Credential Dumpingcan be used to obtain password hashes, this may only get an adversary so far whenPass the Hashis not an option. Further,  adversaries may leverageData from Configuration Repositoryin order to obtain hashed credentials for network devices.[1]Techniques to systematically guess the passwords used to compute hashes are available, or the adversary may use a pre-computed rainbow table to crack hashes. Cracking hashes is usually done on adversary-controlled systems outside of the target network.[2]The resulting plaintext password resulting from a successfully cracked hash may be used to log into systems, resources, and services in which the account has access.",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Brute Force",
    "parent_technique_id": "T1110",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:51:18.245415"
  },
  {
    "technique_id": "T1110.003",
    "name": "Password Spraying",
    "description": "Adversaries may use a single or small list of commonly used passwords against many different accounts to attempt to acquire valid account credentials. Password spraying uses one password (e.g. 'Password01'), or a small list of commonly used passwords, that may match the complexity policy of the domain. Logins are attempted with that password against many different accounts on a network to avoid account lockouts that would normally occur when brute forcing a single account with many passwords.[1]Typically, management services over commonly used ports are used when password spraying. Commonly targeted services include the following:SSH (22/TCP)Telnet (23/TCP)FTP (21/TCP)NetBIOS / SMB / Samba (139/TCP & 445/TCP)LDAP (389/TCP)Kerberos (88/TCP)RDP / Terminal Services (3389/TCP)HTTP/HTTP Management Services (80/TCP & 443/TCP)MSSQL (1433/TCP)Oracle (1521/TCP)MySQL (3306/TCP)VNC (5900/TCP)In addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.[2]In default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Brute Force",
    "parent_technique_id": "T1110",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:51:21.604158"
  },
  {
    "technique_id": "T1110.004",
    "name": "Credential Stuffing",
    "description": "Adversaries may use credentials obtained from breach dumps of unrelated accounts to gain access to target accounts through credential overlap. Occasionally, large numbers of username and password pairs are dumped online when a website or service is compromised and the user account credentials accessed. The information may be useful to an adversary attempting to compromise accounts by taking advantage of the tendency for users to use the same passwords across personal and business accounts.Credential stuffing is a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies.Typically, management services over commonly used ports are used when stuffing credentials. Commonly targeted services include the following:SSH (22/TCP)Telnet (23/TCP)FTP (21/TCP)NetBIOS / SMB / Samba (139/TCP & 445/TCP)LDAP (389/TCP)Kerberos (88/TCP)RDP / Terminal Services (3389/TCP)HTTP/HTTP Management Services (80/TCP & 443/TCP)MSSQL (1433/TCP)Oracle (1521/TCP)MySQL (3306/TCP)VNC (5900/TCP)In addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.[1]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Brute Force",
    "parent_technique_id": "T1110",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:51:24.862967"
  },
  {
    "technique_id": "T1056",
    "name": "Input Capture",
    "description": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g.Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g.Web Portal Capture).",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:51:28.236008",
    "subtechniques": [
      {
        "id": "T1056.001",
        "name": "Keylogging"
      }
    ]
  },
  {
    "technique_id": "T1056.001",
    "name": "Keylogging",
    "description": "Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities whenOS Credential Dumpingefforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.[1]Keylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes.[2]Some methods include:Hooking API callbacks used for processing keystrokes. UnlikeCredential API Hooking, this focuses solely on API functions intended for processing keystroke data.Reading raw keystroke data from the hardware buffer.Windows Registry modifications.Custom drivers.Modify System Imagemay provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.[3]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Input Capture",
    "parent_technique_id": "T1056",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:51:31.798337"
  },
  {
    "technique_id": "T1556",
    "name": "Modify Authentication Process",
    "description": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without usingValid Accounts.Adversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms. Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop.",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:51:35.035438",
    "subtechniques": [
      {
        "id": "T1556.004",
        "name": "Network Device Authentication"
      }
    ]
  },
  {
    "technique_id": "T1556.004",
    "name": "Network Device Authentication",
    "description": "Adversaries may usePatch System Imageto hard code a password in the operating system, thus bypassing of native authentication mechanisms for local accounts on network devices.Modify System Imagemay include implanted code to the operating system for network devices to provide access for adversaries using a specific password.  The modification includes a specific password which is implanted in the operating system image via the patch.  Upon authentication attempts, the inserted code will first check to see if the user input is the password. If so, access is granted. Otherwise, the implanted code will pass the credentials on for verification of potentially valid credentials.[1]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Modify Authentication Process",
    "parent_technique_id": "T1556",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:51:38.390197"
  },
  {
    "technique_id": "T1040",
    "name": "Network Sniffing",
    "description": "Adversaries may passively sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.Data captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such asLLMNR/NBT-NS Poisoning and SMB Relay, can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.Network sniffing may reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequentLateral Movementand/orDefense Evasionactivities. Adversaries may likely also utilize network sniffing duringAdversary-in-the-Middle(AiTM) to passively gain additional knowledge about the environment.In cloud-based environments, adversaries may still be able to use traffic mirroring services to sniff network traffic from virtual machines. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.[1][2][3]Often, much of this traffic will be in cleartext due to the use of TLS termination at the load balancer level to reduce the strain of encrypting and decrypting traffic.[4][5]The adversary can then use exfiltration techniques such as Transfer Data to Cloud Account in order to access the sniffed traffic.[4]On network devices, adversaries may perform network captures usingNetwork Device CLIcommands such asmonitor capture.[6][7]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:51:41.711969",
    "subtechniques": []
  },
  {
    "technique_id": "T1552",
    "name": "Unsecured Credentials",
    "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g.Bash History), operating system or application-specific repositories (e.g.Credentials in Registry),  or other specialized files/artifacts (e.g.Private Keys).[1]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:51:45.086320",
    "subtechniques": [
      {
        "id": "T1552.004",
        "name": "Private Keys"
      }
    ]
  },
  {
    "technique_id": "T1552.004",
    "name": "Private Keys",
    "description": "Adversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures.[1]Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc.Adversaries may also look in common key directories, such as~/.sshfor SSH keys on * nix-based systems orC:\\Users\\(username)\\.ssh\\on Windows. Adversary tools may also search compromised systems for file extensions relating to cryptographic keys and certificates.[2][3]When a device is registered to Entra ID, a device key and a transport key are generated and used to verify the device’s identity.[4]An adversary with access to the device may be able to export the keys in order to impersonate the device.[5]On network devices, private keys may be exported viaNetwork Device CLIcommands such ascrypto pki export.[6]Some private keys require a password or passphrase for operation, so an adversary may also useInput Capturefor keylogging or attempt toBrute Forcethe passphrase off-line. These private keys can be used to authenticate toRemote Serviceslike SSH or for use in decrypting other collected files such as email.",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Unsecured Credentials",
    "parent_technique_id": "T1552",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:51:48.459598"
  },
  {
    "technique_id": "T1083",
    "name": "File and Directory Discovery",
    "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information fromFile and Directory Discoveryduring automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Many command shell utilities can be used to obtain this information. Examples includedir,tree,ls,find, andlocate.[1]Custom tools may also be used to gather file and directory information and interact with theNative API. Adversaries may also leverage aNetwork Device CLIon network devices to gather file and directory information (e.g.dir,show flash, and/ornvram).[2]Some files and directories may require elevated or specific user permissions to access.",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:51:52.028653",
    "subtechniques": []
  },
  {
    "technique_id": "T1046",
    "name": "Network Service Discovery",
    "description": "Adversaries may attempt to get a listing of services running on remote hosts and local network infrastructure devices, including those that may be vulnerable to remote software exploitation. Common methods to acquire this information include port, vulnerability, and/or wordlist scans using tools that are brought onto a system.[1]Within cloud environments, adversaries may attempt to discover services running on other cloud hosts. Additionally, if the cloud environment is connected to a on-premises environment, adversaries may be able to identify services running on non-cloud systems as well.Within macOS environments, adversaries may use the native Bonjour application to discover services running on other macOS hosts within a network. The Bonjour mDNSResponder daemon automatically registers and advertises a host’s registered services on the network. For example, adversaries can use a mDNS query (such asdns-sd -B _ssh._tcp .) to find other systems broadcasting the ssh service.[2][3]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:51:55.368448",
    "subtechniques": []
  },
  {
    "technique_id": "T1040",
    "name": "Network Sniffing",
    "description": "Adversaries may passively sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.Data captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such asLLMNR/NBT-NS Poisoning and SMB Relay, can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.Network sniffing may reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequentLateral Movementand/orDefense Evasionactivities. Adversaries may likely also utilize network sniffing duringAdversary-in-the-Middle(AiTM) to passively gain additional knowledge about the environment.In cloud-based environments, adversaries may still be able to use traffic mirroring services to sniff network traffic from virtual machines. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.[1][2][3]Often, much of this traffic will be in cleartext due to the use of TLS termination at the load balancer level to reduce the strain of encrypting and decrypting traffic.[4][5]The adversary can then use exfiltration techniques such as Transfer Data to Cloud Account in order to access the sniffed traffic.[4]On network devices, adversaries may perform network captures usingNetwork Device CLIcommands such asmonitor capture.[6][7]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:51:58.673828",
    "subtechniques": []
  },
  {
    "technique_id": "T1201",
    "name": "Password Policy Discovery",
    "description": "Adversaries may attempt to access detailed information about the password policy used within an enterprise network or cloud environment. Password policies are a way to enforce complex passwords that are difficult to guess or crack throughBrute Force. This information may help the adversary to create a list of common passwords and launch dictionary and/or brute force attacks which adheres to the policy (e.g. if the minimum password length should be 8, then not trying passwords such as 'pass123'; not checking for more than 3-4 passwords per account if the lockout is set to 6 as to not lock out accounts).Password policies can be set and discovered on Windows, Linux, and macOS systems via various command shell utilities such asnet accounts (/domain),Get-ADDefaultDomainPasswordPolicy,chage -l,cat /etc/pam.d/common-password, andpwpolicy getaccountpolicies[1][2]. Adversaries may also leverage aNetwork Device CLIon network devices to discover password policy information (e.g.show aaa,show aaa common-criteria policy all).[3]Password policies can be discovered in cloud environments using available APIs such asGetAccountPasswordPolicyin AWS[4].",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:52:02.023540",
    "subtechniques": []
  },
  {
    "technique_id": "T1057",
    "name": "Process Discovery",
    "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information fromProcess Discoveryduring automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.In Windows environments, adversaries could obtain details on running processes using theTasklistutility viacmdorGet-ProcessviaPowerShell. Information about processes can also be extracted from the output ofNative APIcalls such asCreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with thepscommand. Adversaries may also opt to enumerate processes via/proc. ESXi also supports use of thepscommand, as well asesxcli system process list.[1][2]On network devices,Network Device CLIcommands such asshow processescan be used to display current running processes.[3][4]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:52:05.526236",
    "subtechniques": []
  },
  {
    "technique_id": "T1018",
    "name": "Remote System Discovery",
    "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such asPing,net viewusingNet, or, on ESXi servers,esxcli network diag ping.Adversaries may also analyze data from local host files (ex:C:\\Windows\\System32\\Drivers\\etc\\hostsor/etc/hosts) or other passive means (such as localArpcache entries) in order to discover the presence of remote systems in an environment.Adversaries may also target discovery of network infrastructure as well as leverageNetwork Device CLIcommands on network devices to gather detailed information about systems within a network (e.g.show cdp neighbors,show arp).[1][2]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:52:08.947111",
    "subtechniques": []
  },
  {
    "technique_id": "T1082",
    "name": "System Information Discovery",
    "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information fromSystem Information Discoveryduring automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Tools such asSysteminfocan be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through thesystemsetupconfiguration tool on macOS. As an example, adversaries with user-level access can execute thedf -aHcommand to obtain currently mounted disks and associated freely available space. Adversaries may also leverage aNetwork Device CLIon network devices to gather detailed system information (e.g.show version).[1]On ESXi servers, threat actors may gather system information from various esxcli utilities, such assystem hostname get,system version get, andstorage filesystem list(to list storage volumes).[2][3]Infrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.[4][5][6]System Information Discoverycombined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.[7][8]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:52:12.571973",
    "subtechniques": []
  },
  {
    "technique_id": "T1016",
    "name": "System Network Configuration Discovery",
    "description": "Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples includeArp,ipconfig/ifconfig,nbtstat, androute.Adversaries may also leverage aNetwork Device CLIon network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g.show ip route,show ip interface).[1][2]On ESXi, adversaries may leverage esxcli to gather network configuration information. For example, the commandesxcli network nic listwill retrieve the MAC address, whileesxcli network ip interface ipv4 getwill retrieve the local IPv4 address.[3]Adversaries may use the information fromSystem Network Configuration Discoveryduring automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:52:16.180680",
    "subtechniques": []
  },
  {
    "technique_id": "T1049",
    "name": "System Network Connections Discovery",
    "description": "Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network.An adversary who gains access to a system that is part of a cloud-based environment may map out Virtual Private Clouds or Virtual Networks in order to determine what systems and services are connected. The actions performed are likely the same types of discovery techniques depending on the operating system, but the resulting information may include details about the networked cloud environment relevant to the adversary's goals. Cloud providers may have different ways in which their virtual networks operate.[1][2][3]Similarly, adversaries who gain access to network devices may also perform similar discovery activities to gather information about connected systems and services.Utilities and commands that acquire this information includenetstat, \"net use,\" and \"net session\" withNet. In Mac and Linux,netstatandlsofcan be used to list current connections.who -aandwcan be used to show which users are currently logged in, similar to \"net session\". Additionally, built-in features native to network devices andNetwork Device CLImay be used (e.g.show ip sockets,show tcp brief).[4]On ESXi servers, the commandesxi network ip connection listcan be used to list active network connections.[5]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:52:19.579869",
    "subtechniques": []
  },
  {
    "technique_id": "T1033",
    "name": "System Owner/User Discovery",
    "description": "Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by usingOS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information fromSystem Owner/User Discoveryduring automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Various utilities and commands may acquire this information, includingwhoami. In macOS and Linux, the currently logged in user can be identified withwandwho. On macOS thedscl . list /Users | grep -v '_'command can also be used to enumerate user accounts. Environment variables, such as%USERNAME%and$USER, may also be used to access this information.On network devices,Network Device CLIcommands such asshow usersandshow sshcan be used to display users currently logged into the device.[1][2]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:52:23.072004",
    "subtechniques": []
  },
  {
    "technique_id": "T1124",
    "name": "System Time Discovery",
    "description": "An adversary may gather the system time and/or time zone settings from a local or remote system. The system time is set and stored by services, such as the Windows Time Service on Windows orsystemsetupon macOS.[1][2][3]These time settings may also be synchronized between systems and services in an enterprise network, typically accomplished with a network time server within a domain.[4][5]System time information may be gathered in a number of ways, such as withNeton Windows by performingnet time \\hostnameto gather the system time on a remote system. The victim's time zone may also be inferred from the current system time or gathered by usingw32tm /tz.[2]In addition, adversaries can discover device uptime through functions such asGetTickCount()to determine how long it has been since the system booted up.[6]On network devices,Network Device CLIcommands such asshow clock detailcan be used to see the current time configuration.[7]On ESXi servers,esxcli system clock getcan be used for the same purpose.In addition, system calls – such astime()– have been used to collect the current time on Linux devices.[8]On macOS systems, adversaries may use commands such assystemsetup -gettimezoneortimeIntervalSinceNowto gather current time zone information or current date and time.[9][10]This information could be useful for performing other techniques, such as executing a file with aScheduled Task/Job[11], or to discover locality information based on time zone to assist in victim targeting (i.e.System Location Discovery). Adversaries may also use knowledge of system time as part of a time bomb, or delaying execution until a specified date/time.[12]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:52:26.566175",
    "subtechniques": []
  },
  {
    "technique_id": "T1072",
    "name": "Software Deployment Tools",
    "description": "Adversaries may gain access to and use centralized software suites installed within an enterprise to execute commands and move laterally through the network. Configuration management and software deployment applications may be used in an enterprise network or cloud environment for routine administration purposes. These systems may also be integrated into CI/CD pipelines. Examples of such solutions include: SCCM, HBSS, Altiris, AWS Systems Manager, Microsoft Intune, Azure Arc, and GCP Deployment Manager.Access to network-wide or enterprise-wide endpoint management software may enable an adversary to achieve remote code execution on all connected systems. The access may be used to laterally move to other systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints.SaaS-based configuration management services may allow for broadCloud Administration Commandon cloud-hosted instances, as well as the execution of arbitrary commands on on-premises endpoints. For example, Microsoft Configuration Manager allows Global or Intune Administrators to run scripts as SYSTEM on on-premises devices joined to Entra ID.[1]Such services may also utilizeWeb Protocolsto communicate back to adversary owned infrastructure.[2]Network infrastructure devices may also have configuration management tools that can be similarly abused by adversaries.[3]The permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the third-party system, or specific domain credentials may be required. However, the system may require an administrative account to log in or to access specific functionality.",
    "tactic": "Lateral Movement",
    "tactics": [
      "Lateral Movement"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:52:29.844875",
    "subtechniques": []
  },
  {
    "technique_id": "T1557",
    "name": "Adversary-in-the-Middle",
    "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such asNetwork Sniffing,Transmitted Data Manipulation, or replay attacks (Exploitation for Credential Access). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.[1]For example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.[2][3][4]Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens (Steal Application Access Token) and session cookies (Steal Web Session Cookie).[5][6]Downgrade Attacks can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.[7][8][9]Adversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as inTransmitted Data Manipulation. Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially toImpair Defensesand/or in support of aNetwork Denial of Service.",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:52:33.089494",
    "subtechniques": [
      {
        "id": "T1557.004",
        "name": "Evil Twin"
      }
    ]
  },
  {
    "technique_id": "T1557.004",
    "name": "Evil Twin",
    "description": "Adversaries may host seemingly genuine Wi-Fi access points to deceive users into connecting to malicious networks as a way of supporting follow-on behaviors such asNetwork Sniffing,Transmitted Data Manipulation, orInput Capture.[1]By using a Service Set Identifier (SSID) of a legitimate Wi-Fi network, fraudulent Wi-Fi access points may trick devices or users into connecting to malicious Wi-Fi networks.[2][3]Adversaries may provide a stronger signal strength or block access to Wi-Fi access points to coerce or entice victim devices into connecting to malicious networks.[4]A Wi-Fi Pineapple – a network security auditing and penetration testing tool – may be deployed in Evil Twin attacks for ease of use and broader range. Custom certificates may be used in an attempt to intercept HTTPS traffic.Similarly, adversaries may also listen for client devices sending probe requests for known or previously connected networks (Preferred Network Lists or PNLs). When a malicious access point receives a probe request, adversaries can respond with the same SSID to imitate the trusted, known network.[4]Victim devices are led to believe the responding access point is from their PNL and initiate a connection to the fraudulent network.Upon logging into the malicious Wi-Fi access point, a user may be directed to a fake login page or captive portal webpage to capture the victim’s credentials. Once a user is logged into the fraudulent Wi-Fi network, the adversary may able to monitor network activity, manipulate data, or steal additional credentials. Locations with high concentrations of public Wi-Fi access, such as airports, coffee shops, or libraries, may be targets for adversaries to set up illegitimate Wi-Fi access points.",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Adversary-in-the-Middle",
    "parent_technique_id": "T1557",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:52:36.456591"
  },
  {
    "technique_id": "T1602",
    "name": "Data from Configuration Repository",
    "description": "Adversaries may collect data related to managed devices from configuration repositories. Configuration repositories are used by management systems in order to configure, manage, and control data on remote systems. Configuration repositories may also facilitate remote access and administration of devices.Adversaries may target these repositories in order to collect large quantities of sensitive system administration data. Data from configuration repositories may be exposed by various protocols and software and can store a wide variety of data, much of which may align with adversary Discovery objectives.[1][2]",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:52:39.815243",
    "subtechniques": [
      {
        "id": "T1602.001",
        "name": "SNMP (MIB Dump)"
      },
      {
        "id": "T1602.002",
        "name": "Network Device Configuration Dump"
      }
    ]
  },
  {
    "technique_id": "T1602.001",
    "name": "SNMP (MIB Dump)",
    "description": "Adversaries may target the Management Information Base (MIB) to collect and/or mine valuable information in a network managed using Simple Network Management Protocol (SNMP).The MIB is a configuration repository that stores variable information accessible via SNMP in the form of object identifiers (OID). Each OID identifies a variable that can be read or set and permits active management tasks, such as configuration changes, through remote modification of these variables. SNMP can give administrators great insight in their systems, such as, system information, description of hardware, physical location, and software packages[1]. The MIB may also contain device operational information, including running configuration, routing table, and interface details.Adversaries may use SNMP queries to collect MIB content directly from SNMP-managed devices in order to collect network information that allows the adversary to build network maps and facilitate future targeted exploitation.[2][3]",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Data from Configuration Repository",
    "parent_technique_id": "T1602",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:52:43.172413"
  },
  {
    "technique_id": "T1602.002",
    "name": "Network Device Configuration Dump",
    "description": "Adversaries may access network configuration files to collect sensitive data about the device and the network. The network configuration is a file containing parameters that determine the operation of the device. The device typically stores an in-memory copy of the configuration while operating, and a separate configuration on non-volatile storage to load after device reset. Adversaries can inspect the configuration files to reveal information about the target network and its layout, the network device and its software, or identifying legitimate accounts and credentials for later use.Adversaries can use common management tools and protocols, such as Simple Network Management Protocol (SNMP) and Smart Install (SMI), to access network configuration files.[1][2]These tools may be used to query specific data from a configuration repository or configure the device to export the configuration for later analysis.",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Data from Configuration Repository",
    "parent_technique_id": "T1602",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:52:46.547306"
  },
  {
    "technique_id": "T1005",
    "name": "Data from Local System",
    "description": "Adversaries may search local system sources, such as file systems, configuration files, local databases, or virtual machine files, to find files of interest and sensitive data prior to Exfiltration.Adversaries may do this using aCommand and Scripting Interpreter, such ascmdas well as aNetwork Device CLI, which have functionality to interact with the file system to gather information.[1]Adversaries may also useAutomated Collectionon the local system.",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:52:50.042247",
    "subtechniques": []
  },
  {
    "technique_id": "T1056",
    "name": "Input Capture",
    "description": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g.Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g.Web Portal Capture).",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:52:53.340569",
    "subtechniques": [
      {
        "id": "T1056.001",
        "name": "Keylogging"
      }
    ]
  },
  {
    "technique_id": "T1056.001",
    "name": "Keylogging",
    "description": "Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities whenOS Credential Dumpingefforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.[1]Keylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes.[2]Some methods include:Hooking API callbacks used for processing keystrokes. UnlikeCredential API Hooking, this focuses solely on API functions intended for processing keystroke data.Reading raw keystroke data from the hardware buffer.Windows Registry modifications.Custom drivers.Modify System Imagemay provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.[3]",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Input Capture",
    "parent_technique_id": "T1056",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:52:56.736273"
  },
  {
    "technique_id": "T1071",
    "name": "Application Layer Protocol",
    "description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.Adversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, DNS, or publishing/subscribing. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP.[1]",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:53:00.088374",
    "subtechniques": [
      {
        "id": "T1071.001",
        "name": "Web Protocols"
      },
      {
        "id": "T1071.002",
        "name": "File Transfer Protocols"
      },
      {
        "id": "T1071.003",
        "name": "Mail Protocols"
      },
      {
        "id": "T1071.004",
        "name": "DNS"
      },
      {
        "id": "T1071.005",
        "name": "Publish/Subscribe Protocols"
      }
    ]
  },
  {
    "technique_id": "T1071.001",
    "name": "Web Protocols",
    "description": "Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.Protocols such as HTTP/S[1]and WebSocket[2]that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Application Layer Protocol",
    "parent_technique_id": "T1071",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:53:03.689316"
  },
  {
    "technique_id": "T1071.002",
    "name": "File Transfer Protocols",
    "description": "Adversaries may communicate using application layer protocols associated with transferring files to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.Protocols such as SMB[1], FTP[2], FTPS, and TFTP that transfer files may be very common in environments.  Packets produced from these protocols may have many fields and headers in which data can be concealed. Data could also be concealed within the transferred files. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Application Layer Protocol",
    "parent_technique_id": "T1071",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:53:07.066937"
  },
  {
    "technique_id": "T1071.003",
    "name": "Mail Protocols",
    "description": "Adversaries may communicate using application layer protocols associated with electronic mail delivery to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.Protocols such as SMTP/S, POP3/S, and IMAP that carry electronic mail may be very common in environments.  Packets produced from these protocols may have many fields and headers in which data can be concealed. Data could also be concealed within the email messages themselves. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.[1]",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Application Layer Protocol",
    "parent_technique_id": "T1071",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:53:10.443841"
  },
  {
    "technique_id": "T1071.004",
    "name": "DNS",
    "description": "Adversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.The DNS protocol serves an administrative function in computer networking and thus may be very common in environments. DNS traffic may also be allowed even before network authentication is completed. DNS packets contain many fields and headers in which data can be concealed. Often known as DNS tunneling, adversaries may abuse DNS to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.[1][2]",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Application Layer Protocol",
    "parent_technique_id": "T1071",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:53:13.866196"
  },
  {
    "technique_id": "T1071.005",
    "name": "Publish/Subscribe Protocols",
    "description": "Adversaries may communicate using publish/subscribe (pub/sub) application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.Protocols such asMQTT,XMPP,AMQP, andSTOMPuse a publish/subscribe design, with message distribution managed by a centralized broker.[1][2]Publishers categorize their messages by topics, while subscribers receive messages according to their subscribed topics.[1]An adversary may abuse publish/subscribe protocols to communicate with systems under their control from behind a message broker while also mimicking normal, expected traffic.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Application Layer Protocol",
    "parent_technique_id": "T1071",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:53:17.237836"
  },
  {
    "technique_id": "T1573",
    "name": "Encrypted Channel",
    "description": "Adversaries may employ an encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:53:20.597855",
    "subtechniques": [
      {
        "id": "T1573.001",
        "name": "Symmetric Cryptography"
      },
      {
        "id": "T1573.002",
        "name": "Asymmetric Cryptography"
      }
    ]
  },
  {
    "technique_id": "T1573.001",
    "name": "Symmetric Cryptography",
    "description": "Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Encrypted Channel",
    "parent_technique_id": "T1573",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:53:24.088545"
  },
  {
    "technique_id": "T1573.002",
    "name": "Asymmetric Cryptography",
    "description": "Adversaries may employ a known asymmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Asymmetric cryptography, also known as public key cryptography, uses a keypair per party: one public that can be freely distributed, and one private. Due to how the keys are generated, the sender encrypts data with the receiver’s public key and the receiver decrypts the data with their private key. This ensures that only the intended recipient can read the encrypted data. Common public key encryption algorithms include RSA and ElGamal.For efficiency, many protocols (including SSL/TLS) use symmetric cryptography once a connection is established, but use asymmetric cryptography to establish or transmit a key. As such, these protocols are classified asAsymmetric Cryptography.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Encrypted Channel",
    "parent_technique_id": "T1573",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:53:27.570769"
  },
  {
    "technique_id": "T1665",
    "name": "Hide Infrastructure",
    "description": "Adversaries may manipulate network traffic in order to hide and evade detection of their C2 infrastructure. This can be accomplished in various ways including by identifying and filtering traffic from defensive tools,[1]masking malicious domains to obfuscate the true destination from both automated scanning tools and security researchers,[2][3][4]and otherwise hiding malicious artifacts to delay discovery and prolong the effectiveness of adversary infrastructure that could otherwise be identified, blocked, or taken down entirely.C2 networks may include the use ofProxyor VPNs to disguise IP addresses, which can allow adversaries to blend in with normal network traffic and bypass conditional access policies or anti-abuse protections. For example, an adversary may use a virtual private cloud to spoof their IP address to closer align with a victim's IP address ranges. This may also bypass security measures relying on geolocation of the source IP address.[5][6]Adversaries may also attempt to filter network traffic in order to evade defensive tools in numerous ways, including blocking/redirecting common incident responder or security appliance user agents.[7][8]Filtering traffic based on IP and geo-fencing may also avoid automated sandboxing or researcher activity (i.e.,Virtualization/Sandbox Evasion).[1][7]Hiding C2 infrastructure may also be supported byResource Developmentactivities such asAcquire InfrastructureandCompromise Infrastructure. For example, using widely trusted hosting services or domains such as prominent URL shortening providers or marketing services for C2 networks may enable adversaries to present benign content that later redirects victims to malicious web pages or infrastructure once specific conditions are met.[9][10]",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:53:30.946537",
    "subtechniques": []
  },
  {
    "technique_id": "T1105",
    "name": "Ingress Tool Transfer",
    "description": "Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such asftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e.Lateral Tool Transfer).On Windows, adversaries may use various utilities to download tools, such ascopy,finger,certutil, andPowerShellcommands such asIEX(New-Object Net.WebClient).downloadString()andInvoke-WebRequest. On Linux and macOS systems, a variety of utilities also exist, such ascurl,scp,sftp,tftp,rsync,finger, andwget.[1]A number of these tools, such aswget,curl, andscp, also exist on ESXi. After downloading a file, a threat actor may attempt to verify its integrity by checking its hash value (e.g., viacertutil -hashfile).[2]Adversaries may also abuse installers and package managers, such asyumorwinget, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windowssearch-msprotocol handler, to deliver malicious files to victims through remote file searches invoked byUser Execution(typically after interacting withPhishinglures).[3]Files can also be transferred using variousWeb Services as well as native or otherwise present tools on the victim system.[4]In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.[5]",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:53:34.567881",
    "subtechniques": []
  },
  {
    "technique_id": "T1095",
    "name": "Non-Application Layer Protocol",
    "description": "Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive.[1]Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).ICMP communication between hosts is one example.[2]Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts.[3]However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.In ESXi environments, adversaries may leverage the Virtual Machine Communication Interface (VMCI) for communication between guest virtual machines and the ESXi host. This traffic is similar to client-server communications on traditional network sockets but is localized to the physical machine running the ESXi host, meaning it does not traverse external networks (routers, switches). This results in communications that are invisible to external monitoring and standard networking tools like tcpdump, netstat, nmap, and Wireshark. By adding a VMCI backdoor to a compromised ESXi host, adversaries may persistently regain access from any guest VM to the compromised ESXi host’s backdoor, regardless of network segmentation or firewall rules in place.[4]",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:53:37.972595",
    "subtechniques": []
  },
  {
    "technique_id": "T1090",
    "name": "Proxy",
    "description": "Adversaries may use a connection proxy to direct network traffic between systems or act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, includingHTRAN, ZXProxy, and ZXPortMap.[1]Adversaries use these types of proxies to manage command and control communications, reduce the number of simultaneous outbound network connections, provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion. Adversaries may chain together multiple proxies to further disguise the source of malicious traffic.Adversaries can also take advantage of routing schemes in Content Delivery Networks (CDNs) to proxy command and control traffic.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:53:41.359078",
    "subtechniques": [
      {
        "id": "T1090.001",
        "name": "Internal Proxy"
      },
      {
        "id": "T1090.002",
        "name": "External Proxy"
      },
      {
        "id": "T1090.003",
        "name": "Multi-hop Proxy"
      }
    ]
  },
  {
    "technique_id": "T1090.001",
    "name": "Internal Proxy",
    "description": "Adversaries may use an internal proxy to direct command and control traffic between two or more systems in a compromised environment. Many tools exist that enable traffic redirection through proxies or port redirection, includingHTRAN, ZXProxy, and ZXPortMap.[1]Adversaries use internal proxies to manage command and control communications inside a compromised environment, to reduce the number of simultaneous outbound network connections, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between infected systems to avoid suspicion. Internal proxy connections may use common peer-to-peer (p2p) networking protocols, such as SMB, to better blend in with the environment.By using a compromised internal system as a proxy, adversaries may conceal the true destination of C2 traffic while reducing the need for numerous connections to external systems.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Proxy",
    "parent_technique_id": "T1090",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:53:44.748249"
  },
  {
    "technique_id": "T1090.002",
    "name": "External Proxy",
    "description": "Adversaries may use an external proxy to act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, includingHTRAN, ZXProxy, and ZXPortMap.[1]Adversaries use these types of proxies to manage command and control communications, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths to avoid suspicion.External connection proxies are used to mask the destination of C2 traffic and are typically implemented with port redirectors. Compromised systems outside of the victim environment may be used for these purposes, as well as purchased infrastructure such as cloud-based resources or virtual private servers. Proxies may be chosen based on the low likelihood that a connection to them from a compromised system would be investigated. Victim systems would communicate directly with the external proxy on the Internet and then the proxy would forward communications to the C2 server.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Proxy",
    "parent_technique_id": "T1090",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:53:48.122801"
  },
  {
    "technique_id": "T1090.003",
    "name": "Multi-hop Proxy",
    "description": "Adversaries may chain together multiple proxies to disguise the source of malicious traffic. Typically, a defender will be able to identify the last proxy traffic traversed before it enters their network; the defender may or may not be able to identify any previous proxies before the last-hop proxy. This technique makes identifying the original source of the malicious traffic even more difficult by requiring the defender to trace malicious traffic through several proxies to identify its source.For example, adversaries may construct or use onion routing networks – such as the publicly availableTornetwork – to transport encrypted C2 traffic through a compromised population, allowing communication with any device within the network.[1]Adversaries may also use operational relay box (ORB) networks composed of virtual private servers (VPS), Internet of Things (IoT) devices, smart devices, and end-of-life routers to obfuscate their operations.[2]In the case of network infrastructure, it is possible for an adversary to leverage multiple compromised devices to create a multi-hop proxy chain (i.e.,Network Devices). By leveragingPatch System Imageon routers, adversaries can add custom code to the affected network devices that will implement onion routing between those nodes. This method is dependent upon theNetwork Boundary Bridgingmethod allowing the adversaries to cross the protected network boundary of the Internet perimeter and into the organization’s Wide-Area Network (WAN).  Protocols such as ICMP may be used as a transport.Similarly, adversaries may abuse peer-to-peer (P2P) and blockchain-oriented infrastructure to implement routing between a decentralized network of peers.[3]",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Proxy",
    "parent_technique_id": "T1090",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:53:51.472891"
  },
  {
    "technique_id": "T1205",
    "name": "Traffic Signaling",
    "description": "Adversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e.Port Knocking), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software.Adversaries may also communicate with an already open port, but the service listening on that port will only respond to commands or trigger other malicious functionality if passed the appropriate magic value(s).The observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r[1], is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.On network devices, adversaries may use crafted packets to enableNetwork Device Authenticationfor standard services offered by the device such as telnet.  Such signaling may also be used to open a closed service port such as telnet, or to trigger module modification of malware implants on the device, adding, removing, or changing malicious capabilities.  Adversaries may use crafted packets to attempt to connect to one or more (open or closed) ports, but may also attempt to connect to a router interface, broadcast, and network address IP on the same port in order to achieve their goals and objectives.[2][3][4]To enable this traffic signaling on embedded devices, adversaries must first achieve and leveragePatch System Imagedue to the monolithic nature of the architecture.Adversaries may also use the Wake-on-LAN feature to turn on powered off systems. Wake-on-LAN is a hardware feature that allows a powered down system to be powered on, or woken up, by sending a magic packet to it. Once the system is powered on, it may become a target for lateral movement.[5][6]",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:53:54.761905",
    "subtechniques": [
      {
        "id": "T1205.001",
        "name": "Port Knocking"
      }
    ]
  },
  {
    "technique_id": "T1205.001",
    "name": "Port Knocking",
    "description": "Adversaries may use port knocking to hide open ports used for persistence or command and control. To enable a port, an adversary sends a series of attempted connections to a predefined sequence of closed ports. After the sequence is completed, opening a port is often accomplished by the host based firewall, but could also be implemented by custom software.This technique has been observed both for the dynamic opening of a listening port as well as the initiating of a connection to a listening server on a different system.The observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r[1], is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Traffic Signaling",
    "parent_technique_id": "T1205",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:53:58.046245"
  },
  {
    "technique_id": "T1020",
    "name": "Automated Exfiltration",
    "description": "Adversaries may exfiltrate data, such as sensitive documents, through the use of automated processing after being gathered during Collection.[1]When automated exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such asExfiltration Over C2 ChannelandExfiltration Over Alternative Protocol.",
    "tactic": "Exfiltration",
    "tactics": [
      "Exfiltration"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:54:01.422327",
    "subtechniques": [
      {
        "id": "T1020.001",
        "name": "Traffic Duplication"
      }
    ]
  },
  {
    "technique_id": "T1020.001",
    "name": "Traffic Duplication",
    "description": "Adversaries may leverage traffic mirroring in order to automate data exfiltration over compromised infrastructure. Traffic mirroring is a native feature for some devices, often used for network analysis. For example, devices may be configured to forward network traffic to one or more destinations for analysis by a network analyzer or other monitoring device.[1][2]Adversaries may abuse traffic mirroring to mirror or redirect network traffic through other infrastructure they control. Malicious modifications to network devices to enable traffic redirection may be possible throughROMMONkitorPatch System Image.[3][4]Many cloud-based environments also support traffic mirroring. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.[5][6][7]Adversaries may use traffic duplication in conjunction withNetwork Sniffing,Input Capture, orAdversary-in-the-Middledepending on the goals and objectives of the adversary.",
    "tactic": "Exfiltration",
    "tactics": [
      "Exfiltration"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Automated Exfiltration",
    "parent_technique_id": "T1020",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:54:04.789429"
  },
  {
    "technique_id": "T1048",
    "name": "Exfiltration Over Alternative Protocol",
    "description": "Adversaries may steal data by exfiltrating it over a different protocol than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.Alternate protocols include FTP, SMTP, HTTP/S, DNS, SMB, or any other network protocol not being used as the main command and control channel. Adversaries may also opt to encrypt and/or obfuscate these alternate channels.Exfiltration Over Alternative Protocolcan be done using various common operating system utilities such asNet/SMB or FTP.[1]On macOS and Linuxcurlmay be used to invoke protocols such as HTTP/S or FTP/S to exfiltrate data from a system.[2]Many IaaS and SaaS platforms (such as Microsoft Exchange, Microsoft SharePoint, GitHub, and AWS S3) support the direct download of files, emails, source code, and other sensitive information via the web console orCloud API.",
    "tactic": "Exfiltration",
    "tactics": [
      "Exfiltration"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:54:08.208741",
    "subtechniques": [
      {
        "id": "T1048.003",
        "name": "Exfiltration Over Unencrypted Non-C2 Protocol"
      }
    ]
  },
  {
    "technique_id": "T1048.003",
    "name": "Exfiltration Over Unencrypted Non-C2 Protocol",
    "description": "Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.[1]Adversaries may opt to obfuscate this data, without the use of encryption, within network protocols that are natively unencrypted (such as HTTP, FTP, or DNS). This may include custom or publicly available encoding/compression algorithms (such as base64) as well as embedding data within protocol headers and fields.",
    "tactic": "Exfiltration",
    "tactics": [
      "Exfiltration"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Exfiltration Over Alternative Protocol",
    "parent_technique_id": "T1048",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:54:11.575506"
  },
  {
    "technique_id": "T1561",
    "name": "Disk Wipe",
    "description": "Adversaries may wipe or corrupt raw disk data on specific systems or in large numbers in a network to interrupt availability to system and network resources. With direct write access to a disk, adversaries may attempt to overwrite portions of disk data. Adversaries may opt to wipe arbitrary portions of disk data and/or wipe disk structures like the master boot record (MBR). A complete wipe of all disk sectors may be attempted.To maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware used for wiping disks may have worm-like features to propagate across a network by leveraging additional techniques likeValid Accounts,OS Credential Dumping, andSMB/Windows Admin Shares.[1]On network devices, adversaries may wipe configuration files and other data from the device usingNetwork Device CLIcommands such aserase.[2]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:54:14.934854",
    "subtechniques": [
      {
        "id": "T1561.001",
        "name": "Disk Content Wipe"
      },
      {
        "id": "T1561.002",
        "name": "Disk Structure Wipe"
      }
    ]
  },
  {
    "technique_id": "T1561.001",
    "name": "Disk Content Wipe",
    "description": "Adversaries may erase the contents of storage devices on specific systems or in large numbers in a network to interrupt availability to system and network resources.Adversaries may partially or completely overwrite the contents of a storage device rendering the data irrecoverable through the storage interface.[1][2][3]Instead of wiping specific disk structures or files, adversaries with destructive intent may wipe arbitrary portions of disk content. To wipe disk content, adversaries may acquire direct access to the hard drive in order to overwrite arbitrarily sized portions of disk with random data.[2]Adversaries have also been observed leveraging third-party drivers likeRawDiskto directly access disk content.[1][2]This behavior is distinct fromData Destructionbecause sections of the disk are erased instead of individual files.To maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware used for wiping disk content may have worm-like features to propagate across a network by leveraging additional techniques likeValid Accounts,OS Credential Dumping, andSMB/Windows Admin Shares.[2]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Disk Wipe",
    "parent_technique_id": "T1561",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:54:18.312138"
  },
  {
    "technique_id": "T1561.002",
    "name": "Disk Structure Wipe",
    "description": "Adversaries may corrupt or wipe the disk data structures on a hard drive necessary to boot a system; targeting specific critical systems or in large numbers in a network to interrupt availability to system and network resources.Adversaries may attempt to render the system unable to boot by overwriting critical data located in structures such as the master boot record (MBR) or partition table.[1][2][3][4][5]The data contained in disk structures may include the initial executable code for loading an operating system or the location of the file system partitions on disk. If this information is not present, the computer will not be able to load an operating system during the boot process, leaving the computer unavailable.Disk Structure Wipemay be performed in isolation, or along withDisk Content Wipeif all sectors of a disk are wiped.On a network devices, adversaries may reformat the file system usingNetwork Device CLIcommands such asformat.[6]To maximize impact on the target organization, malware designed for destroying disk structures may have worm-like features to propagate across a network by leveraging other techniques likeValid Accounts,OS Credential Dumping, andSMB/Windows Admin Shares.[1][2][3][4]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Disk Wipe",
    "parent_technique_id": "T1561",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:54:21.691833"
  },
  {
    "technique_id": "T1495",
    "name": "Firmware Corruption",
    "description": "Adversaries may overwrite or corrupt the flash memory contents of system BIOS or other firmware in devices attached to a system in order to render them inoperable or unable to boot, thus denying the availability to use the devices and/or the system.[1]Firmware is software that is loaded and executed from non-volatile memory on hardware devices in order to initialize and manage device functionality. These devices may include the motherboard, hard drive, or video cards.In general, adversaries may manipulate, overwrite, or corrupt firmware in order to deny the use of the system or devices. For example, corruption of firmware responsible for loading the operating system for network devices may render the network devices inoperable.[2][3]Depending on the device, this attack may also result inData Destruction.",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:54:25.088474",
    "subtechniques": []
  },
  {
    "technique_id": "T1490",
    "name": "Inhibit System Recovery",
    "description": "Adversaries may delete or remove built-in data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery.[1][2]This may deny access to available backups and recovery options.Operating systems may contain features that can help fix corrupted systems, such as a backup catalog, volume shadow copies, and automatic repair features. Adversaries may disable or delete system recovery features to augment the effects ofData DestructionandData Encrypted for Impact.[1][2]Furthermore, adversaries may disable recovery notifications, then corrupt backups.[3]A number of native Windows utilities have been used by adversaries to disable or delete system recovery features:vssadmin.execan be used to delete all volume shadow copies on a system -vssadmin.exe delete shadows /all /quietWindows Management Instrumentationcan be used to delete volume shadow copies -wmic shadowcopy deletewbadmin.execan be used to delete the Windows Backup Catalog -wbadmin.exe delete catalog -quietbcdedit.execan be used to disable automatic Windows recovery features by modifying boot configuration data -bcdedit.exe /set {default} bootstatuspolicy ignoreallfailures & bcdedit /set {default} recoveryenabled noREAgentC.execan be used to disable Windows Recovery Environment (WinRE) repair/recovery options of an infected systemdiskshadow.execan be used to delete all volume shadow copies on a system -diskshadow delete shadows all[4][5]On network devices, adversaries may leverageDisk Wipeto delete backup firmware images and reformat the file system, thenSystem Shutdown/Rebootto reload the device. Together this activity may leave network devices completely inoperable and inhibit recovery operations.On ESXi servers, adversaries may delete or encrypt snapshots of virtual machines to supportData Encrypted for Impact, preventing them from being leveraged as backups (e.g., viavim-cmd vmsvc/snapshot.removeall).[6]Adversaries may also delete \"online\" backups that are connected to their network – whether via network storage media or through folders that sync to cloud services.[7]In cloud environments, adversaries may disable versioning and backup policies and delete snapshots, database backups, machine images, and prior versions of objects designed to be used in disaster recovery scenarios.[8][9]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:54:28.439683",
    "subtechniques": []
  },
  {
    "technique_id": "T1529",
    "name": "System Shutdown/Reboot",
    "description": "Adversaries may shutdown/reboot systems to interrupt access to, or aid in the destruction of, those systems. Operating systems may contain commands to initiate a shutdown/reboot of a machine or network device. In some cases, these commands may also be used to initiate a shutdown/reboot of a remote computer or network device viaNetwork Device CLI(e.g.reload).[1][2]They may also include shutdown/reboot of a virtual machine via hypervisor / cloud consoles or command line tools.Shutting down or rebooting systems may disrupt access to computer resources for legitimate users while also impeding incident response/recovery.Adversaries may attempt to shutdown/reboot a system after impacting it in other ways, such asDisk Structure WipeorInhibit System Recovery, to hasten the intended effects on system availability.[3][4]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "Network Devices"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T14:54:31.801680",
    "subtechniques": []
  }
]