[
  {
    "technique_id": "T1659",
    "name": "Content Injection",
    "description": "Adversaries may gain access and continuously communicate with victims by injecting malicious content into systems through online network traffic. Rather than luring victims to malicious payloads hosted on a compromised website (i.e.,Drive-by Targetfollowed byDrive-by Compromise), adversaries may initially access victims through compromised data-transfer channels where they can manipulate traffic and/or inject their own content. These compromised online network channels may also be used to deliver additional payloads (i.e.,Ingress Tool Transfer) and other data to already compromised systems.[1]Adversaries may inject content to victim systems in various ways, including:From the middle, where the adversary is in-between legitimate online client-server communications (Note:this is similar but distinct fromAdversary-in-the-Middle, which describes AiTM activity solely within an enterprise environment)[2]From the side, where malicious content is injected and races to the client as a fake response to requests of a legitimate online server[3]Content injection is often the result of compromised upstream communication channels, for example at the level of an internet service provider (ISP) as is the case with \"lawful interception.\"[3][1][4]",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:28:04.973264",
    "subtechniques": []
  },
  {
    "technique_id": "T1189",
    "name": "Drive-by Compromise",
    "description": "Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. Multiple ways of delivering exploit code to a browser exist (i.e.,Drive-by Target), including:A legitimate website is compromised, allowing adversaries to inject malicious codeScript files served to a legitimate website from a publicly writeable cloud storage bucket are modified by an adversaryMalicious ads are paid for and served through legitimate ad providers (i.e.,Malvertising)Built-in web application interfaces that allow user-controllable content are leveraged for the insertion of malicious scripts or iFrames (e.g., cross-site scripting)Browser push notifications may also be abused by adversaries and leveraged for malicious code injection viaUser Execution. By clicking \"allow\" on browser push notifications, users may be granting a website permission to run JavaScript code on their browser.[1][2][3]Often the website used by an adversary is one visited by a specific community, such as government, a particular industry, or a particular region, where the goal is to compromise a specific user or set of users based on a shared interest. This kind of targeted campaign is often referred to a strategic web compromise or watering hole attack. There are several known examples of this occurring.[4]Typical drive-by compromise process:A user visits a website that is used to host the adversary controlled content.Scripts automatically execute, typically searching versions of the browser and plugins for a potentially vulnerable version. The user may be required to assist in this process by enabling scripting, notifications, or active website components and ignoring warning dialog boxes.Upon finding a vulnerable version, exploit code is delivered to the browser.If exploitation is successful, the adversary will gain code execution on the user's system unless other protections are in place. In some cases, a second visit to the website after the initial scan is required before exploit code is delivered.UnlikeExploit Public-Facing Application, the focus of this technique is to exploit software on a client endpoint upon visiting a website. This will commonly give an adversary access to systems on the internal network instead of external systems that may be in a DMZ.",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:28:09.019981",
    "subtechniques": []
  },
  {
    "technique_id": "T1190",
    "name": "Exploit Public-Facing Application",
    "description": "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.Exploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet-accessible open sockets.[1][2][3][4][5]On ESXi infrastructure, adversaries may exploit exposed OpenSLP services; they may alternatively exploit exposed VMware vCenter servers.[6][7]Depending on the flaw being exploited, this may also involveExploitation for Defense EvasionorExploitation for Client Execution.If an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs (e.g., via theCloud Instance Metadata API), exploit container host access viaEscape to Host, or take advantage of weak identity and access management policies.Adversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.[8][9]For websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.[10][11]",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:28:13.142578",
    "subtechniques": []
  },
  {
    "technique_id": "T1133",
    "name": "External Remote Services",
    "description": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such asWindows Remote ManagementandVNCcan also be used externally.[1]Access toValid Accountsto use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network.[2]Access to remote services may be used as a redundant or persistent access mechanism during an operation.Access may also be gained through an exposed service that doesnâ€™t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard.[3][4]",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:28:17.305759",
    "subtechniques": []
  },
  {
    "technique_id": "T1200",
    "name": "Hardware Additions",
    "description": "Adversaries may physically introduce computer accessories, networking hardware, or other computing devices into a system or network that can be used as a vector to gain access. Rather than just connecting and distributing payloads via removable storage (i.e.Replication Through Removable Media), more robust hardware additions can be used to introduce new functionalities and/or features into a system that can then be abused.While public references of usage by threat actors are scarce, many red teams/penetration testers leverage hardware additions for initial access. Commercial and open source products can be leveraged with capabilities such as passive network tapping, network traffic modification (i.e.Adversary-in-the-Middle), keystroke injection, kernel memory reading via DMA, addition of new wireless access points to an existing network, and others.[1][2][3][4]",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:28:20.661856",
    "subtechniques": []
  },
  {
    "technique_id": "T1566",
    "name": "Phishing",
    "description": "Adversaries may send phishing messages to gain access to victim systems. All forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass malware spam campaigns.Adversaries may send victims emails containing malicious attachments or links, typically to execute malicious code on victim systems. Phishing may also be conducted via third-party services, like social media platforms. Phishing may also involve social engineering techniques, such as posing as a trusted source, as well as evasive techniques such as removing or manipulating emails or metadata/headers from compromised accounts being abused to send messages (e.g.,Email Hiding Rules).[1][2]Another way to accomplish this is byEmail Spoofing[3]the identity of the sender, which can be used to fool both the human recipient as well as automated security tools,[4]or by including the intended target as a party to an existing email thread that includes malicious files or links (i.e., \"thread hijacking\").[5]Victims may also receive phishing messages that instruct them to call a phone number where they are directed to visit a malicious URL, download malware,[6][7]or install adversary-accessible remote management tools onto their computer (i.e.,User Execution).[8]",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:28:24.033310",
    "subtechniques": [
      {
        "id": "T1566.001",
        "name": "Spearphishing Attachment"
      },
      {
        "id": "T1566.002",
        "name": "Spearphishing Link"
      },
      {
        "id": "T1566.003",
        "name": "Spearphishing via Service"
      },
      {
        "id": "T1566.004",
        "name": "Spearphishing Voice"
      }
    ]
  },
  {
    "technique_id": "T1566.001",
    "name": "Spearphishing Attachment",
    "description": "Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely uponUser Executionto gain execution.[1]Spearphishing may also involve social engineering techniques, such as posing as a trusted source.There are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Phishing",
    "parent_technique_id": "T1566",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:28:27.529228"
  },
  {
    "technique_id": "T1566.002",
    "name": "Spearphishing Link",
    "description": "Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveragingUser Execution. The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place.Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly. Additionally, adversaries may use seemingly benign links that abuse special characters to mimic legitimate websites (known as an \"IDN homograph attack\").[1]URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \"@\" symbol: for example,hxxp://google.com@1157586937.[2]Adversaries may also utilize links to perform consent phishing, typically with OAuth 2.0 request URLs that when accepted by the user provide permissions/access for malicious applications, allowing adversaries toSteal Application Access Tokens.[3]These stolen access tokens allow the adversary to perform various actions on behalf of the user via API calls.[4]Adversaries may also utilize spearphishing links toSteal Application Access Tokens that grant immediate access to the victim environment. For example, a user may be lured through \"consent phishing\" into granting adversaries permissions/access via a malicious OAuth 2.0 request URL .[3][4]Similarly, malicious links may also target device-based authorization, such as OAuth 2.0 device authorization grant flow which is typically used to authenticate devices without UIs/browsers. Known as \"device code phishing,\" an adversary may send a link that directs the victim to a malicious authorization page where the user is tricked into entering a code/credentials that produces a device token.[5][6][7]",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Phishing",
    "parent_technique_id": "T1566",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:28:31.009885"
  },
  {
    "technique_id": "T1566.003",
    "name": "Spearphishing via Service",
    "description": "Adversaries may send spearphishing messages via third-party services in an attempt to gain access to victim systems. Spearphishing via service is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of third party services rather than directly via enterprise email channels.All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries send messages through various social media services, personal webmail, and other non-enterprise controlled services.[1]These services are more likely to have a less-strict security policy than an enterprise. As with most kinds of spearphishing, the goal is to generate rapport with the target or get the target's interest in some way. Adversaries will create fake social media accounts and message employees for potential job opportunities. Doing so allows a plausible reason for asking about services, policies, and software that's running in an environment. The adversary can then send malicious links or attachments through these services.A common example is to build rapport with a target via social media, then send content to a personal webmail service that the target uses on their work computer. This allows an adversary to bypass some email restrictions on the work account, and the target is more likely to open the file since it's something they were expecting. If the payload doesn't work as expected, the adversary can continue normal communications and troubleshoot with the target on how to get it working.",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Phishing",
    "parent_technique_id": "T1566",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:28:34.372278"
  },
  {
    "technique_id": "T1566.004",
    "name": "Spearphishing Voice",
    "description": "Adversaries may use voice communications to ultimately gain access to victim systems. Spearphishing voice is a specific variant of spearphishing. It is different from other forms of spearphishing in that is employs the use of manipulating a user into providing access to systems through a phone call or other forms of voice communications. Spearphishing frequently involves social engineering techniques, such as posing as a trusted source (ex:Impersonation) and/or creating a sense of urgency or alarm for the recipient.All forms of phishing are electronically delivered social engineering. In this scenario, adversaries are not directly sending malware to a victim vice relying onUser Executionfor delivery and execution. For example, victims may receive phishing messages that instruct them to call a phone number where they are directed to visit a malicious URL, download malware,[1][2]or install adversary-accessible remote management tools (Remote Access Tools) onto their computer.[3]Adversaries may also combine voice phishing withMulti-Factor Authentication Request Generationin order to trick users into divulging MFA credentials or accepting authentication prompts.[4]",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Phishing",
    "parent_technique_id": "T1566",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:28:37.734361"
  },
  {
    "technique_id": "T1195",
    "name": "Supply Chain Compromise",
    "description": "Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.Supply chain compromise can take place at any stage of the supply chain including:Manipulation of development toolsManipulation of a development environmentManipulation of source code repositories (public or private)Manipulation of source code in open-source dependenciesManipulation of software update/distribution mechanismsCompromised/infected system images (multiple cases of removable media infected at the factory)[1][2]Replacement of legitimate software with modified versionsSales of modified/counterfeit products to legitimate distributorsShipment interdictionWhile supply chain compromise can impact any component of hardware or software, adversaries looking to gain execution have often focused on malicious additions to legitimate software in software distribution or update channels.[3][4][5]Targeting may be specific to a desired victim set or malicious software may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.[6][3][5]Popular open source projects that are used as dependencies in many applications may also be targeted as a means to add malicious code to users of the dependency.[7]",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:28:41.101680",
    "subtechniques": [
      {
        "id": "T1195.001",
        "name": "Compromise Software Dependencies and Development Tools"
      },
      {
        "id": "T1195.002",
        "name": "Compromise Software Supply Chain"
      },
      {
        "id": "T1195.003",
        "name": "Compromise Hardware Supply Chain"
      }
    ]
  },
  {
    "technique_id": "T1195.001",
    "name": "Compromise Software Dependencies and Development Tools",
    "description": "Adversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency.[1]Targeting may be specific to a desired victim set or may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Supply Chain Compromise",
    "parent_technique_id": "T1195",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:28:44.458185"
  },
  {
    "technique_id": "T1195.002",
    "name": "Compromise Software Supply Chain",
    "description": "Adversaries may manipulate application software prior to receipt by a final consumer for the purpose of data or system compromise. Supply chain compromise of software can take place in a number of ways, including manipulation of the application source code, manipulation of the update/distribution mechanism for that software, or replacing compiled releases with a modified version.Targeting may be specific to a desired victim set or may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.[1][2]",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Supply Chain Compromise",
    "parent_technique_id": "T1195",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:28:47.830036"
  },
  {
    "technique_id": "T1195.003",
    "name": "Compromise Hardware Supply Chain",
    "description": "Adversaries may manipulate hardware components in products prior to receipt by a final consumer for the purpose of data or system compromise. By modifying hardware or firmware in the supply chain, adversaries can insert a backdoor into consumer networks that may be difficult to detect and give the adversary a high degree of control over the system. Hardware backdoors may be inserted into various devices, such as servers, workstations, network infrastructure, or peripherals.",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Supply Chain Compromise",
    "parent_technique_id": "T1195",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:28:51.181635"
  },
  {
    "technique_id": "T1199",
    "name": "Trusted Relationship",
    "description": "Adversaries may breach or otherwise leverage organizations who have access to intended victims. Access through trusted third party relationship abuses an existing connection that may not be protected or receives less scrutiny than standard mechanisms of gaining access to a network.Organizations often grant elevated access to second or third-party external providers in order to allow them to manage internal systems as well as cloud-based environments. Some examples of these relationships include IT services contractors, managed security providers, infrastructure contractors (e.g. HVAC, elevators, physical security). The third-party provider's access may be intended to be limited to the infrastructure being maintained, but may exist on the same network as the rest of the enterprise. As such,Valid Accountsused by the other party for access to internal network systems may be compromised and used.[1]In Office 365 environments, organizations may grant Microsoft partners or resellers delegated administrator permissions. By compromising a partner or reseller account, an adversary may be able to leverage existing delegated administrator relationships or send new delegated administrator offers to clients in order to gain administrative control over the victim tenant.[2]",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:28:54.557286",
    "subtechniques": []
  },
  {
    "technique_id": "T1078",
    "name": "Valid Accounts",
    "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.[1]Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.In some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.[2]The overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.[3]",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:28:57.959044",
    "subtechniques": [
      {
        "id": "T1078.001",
        "name": "Default Accounts"
      },
      {
        "id": "T1078.002",
        "name": "Domain Accounts"
      },
      {
        "id": "T1078.003",
        "name": "Local Accounts"
      }
    ]
  },
  {
    "technique_id": "T1078.001",
    "name": "Default Accounts",
    "description": "Adversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems. Default accounts also include default factory/provider set accounts on other types of systems, software, or devices, including the root user account in AWS, the root user account in ESXi, and the default service account in Kubernetes.[1][2][3]Default accounts are not limited to client machines; rather, they also include accounts that are preset for equipment such as network devices and computer applications, whether they are internal, open source, or commercial. Appliances that come preset with a username and password combination pose a serious threat to organizations that do not change it post installation, as they are easy targets for an adversary. Similarly, adversaries may also utilize publicly disclosed or stolenPrivate Keysor credential materials to legitimately connect to remote environments viaRemote Services.[4]Default accounts may be created on a system after initial setup by connecting or integrating it with another application. For example, when an ESXi server is connected to a vCenter server, a default privileged account calledvpxuseris created on the ESXi server. If a threat actor is able to compromise this accountâ€™s credentials (for example, viaExploitation for Credential Accesson the vCenter host), they will then have access to the ESXi server.[5][6]",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Valid Accounts",
    "parent_technique_id": "T1078",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:29:01.315084"
  },
  {
    "technique_id": "T1078.002",
    "name": "Domain Accounts",
    "description": "Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion.[1]Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.[2]Adversaries may compromise domain accounts, some with a high level of privileges, through various means such asOS Credential Dumpingor password reuse, allowing access to privileged resources of the domain.",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Valid Accounts",
    "parent_technique_id": "T1078",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:29:04.694313"
  },
  {
    "technique_id": "T1078.003",
    "name": "Local Accounts",
    "description": "Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.Local Accounts may also be abused to elevate privileges and harvest credentials throughOS Credential Dumping. Password reuse may allow the abuse of local accounts across a set of machines on a network for the purposes of Privilege Escalation and Lateral Movement.",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Valid Accounts",
    "parent_technique_id": "T1078",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:29:08.065882"
  },
  {
    "technique_id": "T1669",
    "name": "Wi-Fi Networks",
    "description": "Adversaries may gain initial access to target systems by connecting to wireless networks. They may accomplish this by exploiting open Wi-Fi networks used by target devices or by accessing secured Wi-Fi networks â€” requiringValid Accountsâ€” belonging to a target organization.[1][2]Establishing a connection to a Wi-Fi access point requires a certain level of proximity to both discover and maintain a stable network connection.Adversaries may establish a wireless connection through various methods, such as by physically positioning themselves near a Wi-Fi network to conduct close access operations. To bypass the need for physical proximity, adversaries may attempt to remotely compromise nearby third-party systems that have both wired and wireless network connections available (i.e., dual-homed systems). These third-party compromised devices can then serve as a bridge to connect to a targetâ€™s Wi-Fi network.[2]Once an initial wireless connection is achieved, adversaries may leverage this access for follow-on activities in the victim network or further targeting of specific devices on the network. Adversaries may performNetwork SniffingorAdversary-in-the-Middleactivities forCredential AccessorDiscovery.",
    "tactic": "Initial Access",
    "tactics": [
      "Initial Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:29:11.430068",
    "subtechniques": []
  },
  {
    "technique_id": "T1059",
    "name": "Command and Scripting Interpreter",
    "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor ofUnix Shellwhile Windows installations include theWindows Command ShellandPowerShell.There are also cross-platform interpreters such asPython, as well as those commonly associated with client applications such asJavaScriptandVisual Basic.Adversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded inInitial Accesspayloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize variousRemote Servicesin order to achieve remote Execution.[1][2][3]",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:29:14.832290",
    "subtechniques": [
      {
        "id": "T1059.002",
        "name": "AppleScript"
      },
      {
        "id": "T1059.004",
        "name": "Unix Shell"
      },
      {
        "id": "T1059.005",
        "name": "Visual Basic"
      },
      {
        "id": "T1059.006",
        "name": "Python"
      },
      {
        "id": "T1059.007",
        "name": "JavaScript"
      },
      {
        "id": "T1059.011",
        "name": "Lua"
      }
    ]
  },
  {
    "technique_id": "T1059.002",
    "name": "AppleScript",
    "description": "Adversaries may abuse AppleScript for execution. AppleScript is a macOS scripting language designed to control applications and parts of the OS via inter-application messages called AppleEvents.[1]These AppleEvent messages can be sent independently or easily scripted with AppleScript. These events can locate open windows, send keystrokes, and interact with almost any open application locally or remotely.Scripts can be run from the command-line viaosascript /path/to/scriptorosascript -e \"script here\". Aside from the command line, scripts can be executed in numerous ways including Mail rules, Calendar.app alarms, and Automator workflows. AppleScripts can also be executed as plain text shell scripts by adding#!/usr/bin/osascriptto the start of the script file.[2]AppleScripts do not need to callosascriptto execute. However, they may be executed from within mach-O binaries by using the macOSNative APIsNSAppleScriptorOSAScript, both of which execute code independent of the/usr/bin/osascriptcommand line utility.Adversaries may abuse AppleScript to execute various behaviors, such as interacting with an open SSH connection, moving to remote machines, and even presenting users with fake dialog boxes. These events cannot start applications remotely (they can start them locally), but they can interact with applications if they're already running remotely. On macOS 10.10 Yosemite and higher, AppleScript has the ability to executeNative APIs, which otherwise would require compilation and execution in a mach-O binary file format.[3]Since this is a scripting language, it can be used to launch more common techniques as well such as a reverse shell viaPython.[4]",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Command and Scripting Interpreter",
    "parent_technique_id": "T1059",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:29:18.203159"
  },
  {
    "technique_id": "T1059.004",
    "name": "Unix Shell",
    "description": "Adversaries may abuse Unix shell commands and scripts for execution. Unix shells are the primary command prompt on Linux, macOS, and ESXi systems, though many variations of the Unix shell exist (e.g. sh, ash, bash, zsh, etc.) depending on the specific OS or distribution.[1][2]Unix shells can control every aspect of a system, with certain commands requiring elevated privileges.Unix shells also support scripts that enable sequential execution of commands as well as other typical programming operations such as conditionals and loops. Common uses of shell scripts include long or repetitive tasks, or the need to run the same set of commands on multiple systems.Adversaries may abuse Unix shells to execute various commands or payloads. Interactive shells may be accessed through command and control channels or during lateral movement such as withSSH. Adversaries may also leverage shell scripts to deliver and execute multiple commands on victims or as part of payloads used for persistence.Some systems, such as embedded devices, lightweight Linux distributions, and ESXi servers, may leverage stripped-down Unix shells via Busybox, a small executable that contains a variety of tools, including a simple shell.",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Command and Scripting Interpreter",
    "parent_technique_id": "T1059",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:29:21.627841"
  },
  {
    "technique_id": "T1059.005",
    "name": "Visual Basic",
    "description": "Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such asComponent Object Modeland theNative APIthrough the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.[1][2]Derivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications.[3][4]VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place ofJavaScripton HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).[5]Adversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content intoSpearphishing Attachmentpayloads (which may also involveMark-of-the-Web Bypassto enable execution).[6]",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Command and Scripting Interpreter",
    "parent_technique_id": "T1059",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:29:25.100107"
  },
  {
    "technique_id": "T1059.006",
    "name": "Python",
    "description": "Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via thepython.exeinterpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.[1]Python comes with many built-in packages to interact with the underlying system, such as file operations and device I/O. Adversaries can use these libraries to download and execute commands or other scripts as well as perform various malicious behaviors.",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Command and Scripting Interpreter",
    "parent_technique_id": "T1059",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:29:28.500530"
  },
  {
    "technique_id": "T1059.007",
    "name": "JavaScript",
    "description": "Adversaries may abuse various implementations of JavaScript for execution. JavaScript (JS) is a platform-independent scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser.[1]JScript is the Microsoft implementation of the same scripting standard. JScript is interpreted via the Windows Script engine and thus integrated with many components of Windows such as theComponent Object Modeland Internet Explorer HTML Application (HTA) pages.[2][3][4]JavaScript for Automation (JXA) is a macOS scripting language based on JavaScript, included as part of Appleâ€™s Open Scripting Architecture (OSA), that was introduced in OSX 10.10. Appleâ€™s OSA provides scripting capabilities to control applications, interface with the operating system, and bridge access into the rest of Appleâ€™s internal APIs. As of OSX 10.10, OSA only supports two languages, JXA andAppleScript. Scripts can be executed via the command line utilityosascript, they can be compiled into applications or script files viaosacompile, and they can be compiled and executed in memory of other programs by leveraging the OSAKit Framework.[5][6][7][8][9]Adversaries may abuse various implementations of JavaScript to execute various behaviors. Common uses include hosting malicious scripts on websites as part of aDrive-by Compromiseor downloading and executing these script files as secondary payloads. Since these payloads are text-based, it is also very common for adversaries to obfuscate their content as part ofObfuscated Files or Information.",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Command and Scripting Interpreter",
    "parent_technique_id": "T1059",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:29:31.963977"
  },
  {
    "technique_id": "T1059.011",
    "name": "Lua",
    "description": "Adversaries may abuse Lua commands and scripts for execution. Lua is a cross-platform scripting and programming language primarily designed for embedded use in applications. Lua can be executed on the command-line (through the stand-alone lua interpreter), via scripts (.lua), or from Lua-embedded programs (through thestruct lua_State).[1][2]Lua scripts may be executed by adversaries for malicious purposes. Adversaries may incorporate, abuse, or replace existing Lua interpreters to allow for malicious Lua command execution at runtime.[3][4][5][6]",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Command and Scripting Interpreter",
    "parent_technique_id": "T1059",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:29:35.331177"
  },
  {
    "technique_id": "T1203",
    "name": "Exploitation for Client Execution",
    "description": "Adversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.Several types exist:Browser-based ExploitationWeb browsers are a common target throughDrive-by CompromiseandSpearphishing Link. Endpoint systems may be compromised through normal web browsing or from certain users being targeted by links in spearphishing emails to adversary controlled sites used to exploit the web browser. These often do not require an action by the user for the exploit to be executed.Office ApplicationsCommon office and productivity applications such as Microsoft Office are also targeted throughPhishing. Malicious files will be transmitted directly as attachments or through links to download them. These require the user to open the document or file for the exploit to run.Common Third-party ApplicationsOther applications that are commonly seen or are part of the software deployed in a target network may also be used for exploitation. Applications such as Adobe Reader and Flash, which are common in enterprise environments, have been routinely targeted by adversaries attempting to gain access to systems. Depending on the software and nature of the vulnerability, some may be exploited in the browser or require the user to open a file. For instance, some Flash exploits have been delivered as objects within Microsoft Office documents.",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:29:38.757822",
    "subtechniques": []
  },
  {
    "technique_id": "T1674",
    "name": "Input Injection",
    "description": "Adversaries may simulate keystrokes on a victimâ€™s computer by various means to perform any type of action on behalf of the user, such as launching the command interpreter using keyboard shortcuts,  typing an inline script to be executed, or interacting directly with a GUI-based application.  These actions can be preprogrammed into adversary tooling or executed through physical devices such as Human Interface Devices (HIDs).For example, adversaries have used tooling that monitors the Windows message loop to detect when a user visits bank-specific URLs. If detected, the tool then simulates keystrokes to open the developer console or select the address bar, pastes malicious JavaScript from the clipboard, and executes it - enabling manipulation of content within the browser, such as replacing bank account numbers during transactions.[1][2]Adversaries have also used malicious USB devices to emulate keystrokes that launch PowerShell, leading to the download and execution of malware from adversary-controlled servers.[3]",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:29:42.116235",
    "subtechniques": []
  },
  {
    "technique_id": "T1559",
    "name": "Inter-Process Communication",
    "description": "Adversaries may abuse inter-process communication (IPC) mechanisms for local code or command execution. IPC is typically used by processes to share data, communicate with each other, or synchronize execution. IPC is also commonly used to avoid situations such as deadlocks, which occurs when processes are stuck in a cyclic waiting pattern.Adversaries may abuse IPC to execute arbitrary code or commands. IPC mechanisms may differ depending on OS, but typically exists in a form accessible through programming languages/libraries or native interfaces such as WindowsDynamic Data ExchangeorComponent Object Model. Linux environments support several different IPC mechanisms, two of which being sockets and pipes.[1]Higher level execution mediums, such as those ofCommand and Scripting Interpreters, may also leverage underlying IPC mechanisms. Adversaries may also useRemote Servicessuch asDistributed Component Object Modelto facilitate remote IPC execution.[2]",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:29:45.469217",
    "subtechniques": [
      {
        "id": "T1559.003",
        "name": "XPC Services"
      }
    ]
  },
  {
    "technique_id": "T1559.003",
    "name": "XPC Services",
    "description": "Adversaries can provide malicious content to an XPC service daemon for local code execution. macOS uses XPC services for basic inter-process communication between various processes, such as between the XPC Service daemon and third-party application privileged helper tools. Applications can send messages to the XPC Service daemon, which runs as root, using the low-level XPC ServiceC APIor the high levelNSXPCConnection APIin order to handle tasks that require elevated privileges (such as network connections). Applications are responsible for providing the protocol definition which serves as a blueprint of the XPC services. Developers typically use XPC Services to provide applications stability and privilege separation between the application client and the daemon.[1][2]Adversaries can abuse XPC services to execute malicious content. Requests for malicious execution can be passed through the application's XPC Services handler.[3][4]This may also include identifying and abusing improper XPC client validation and/or poor sanitization of input parameters to conductExploitation for Privilege Escalation.",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Inter-Process Communication",
    "parent_technique_id": "T1559",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:29:48.806728"
  },
  {
    "technique_id": "T1106",
    "name": "Native API",
    "description": "Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes.[1][2]These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.Adversaries may abuse these OS API functions as a means of executing behaviors. Similar toCommand and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.Native API functions (such asNtCreateProcess) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries.[3][4][5]For example, functions such as the Windows APICreateProcess()or GNUfork()will allow programs and scripts to start other processes.[6][7]This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.[8][9][10]Higher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.[11][12][13][14]Adversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks.[15]Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions viaDisable or Modify Tools.",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:29:52.441958",
    "subtechniques": []
  },
  {
    "technique_id": "T1053",
    "name": "Scheduled Task/Job",
    "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically may require being a member of an admin or otherwise privileged group on the remote system.[1]Adversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges). Similar toSystem Binary Proxy Execution, adversaries have also abused task scheduling to potentially mask one-time execution under a trusted system process.[2]",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:29:55.801739",
    "subtechniques": [
      {
        "id": "T1053.002",
        "name": "At"
      },
      {
        "id": "T1053.003",
        "name": "Cron"
      }
    ]
  },
  {
    "technique_id": "T1053.002",
    "name": "At",
    "description": "Adversaries may abuse theatutility to perform task scheduling for initial or recurring execution of malicious code. Theatutility exists as an executable within Windows, Linux, and macOS for scheduling tasks at a specified time and date. Although deprecated in favor ofScheduled Task'sschtasksin Windows environments, usingatrequires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group. In addition to explicitly running theatcommand, adversaries may also schedule a task withatby directly leveraging theWindows Management InstrumentationWin32_ScheduledJobWMI class.[1]On Linux and macOS,atmay be invoked by the superuser as well as any users added to theat.allowfile. If theat.allowfile does not exist, theat.denyfile is checked. Every username not listed inat.denyis allowed to invokeat. If theat.denyexists and is empty, global use ofatis permitted. If neither file exists (which is often the baseline) only the superuser is allowed to useat.[2]Adversaries may useatto execute programs at system startup or on a scheduled basis forPersistence.atcan also be abused to conduct remoteExecutionas part ofLateral Movementand/or to run a process under the context of a specified account (such as SYSTEM).In Linux environments, adversaries may also abuseatto break out of restricted environments by using a task to spawn an interactive system shell or to run system commands. Similarly,atmay also be used forPrivilege Escalationif the binary is allowed to run as superuser viasudo.[3]",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Scheduled Task/Job",
    "parent_technique_id": "T1053",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:29:59.173547"
  },
  {
    "technique_id": "T1053.003",
    "name": "Cron",
    "description": "Adversaries may abuse thecronutility to perform task scheduling for initial or recurring execution of malicious code.[1]Thecronutility is a time-based job scheduler for Unix-like operating systems.  Thecrontabfile contains the schedule of cron entries to be run and the specified times for execution. Anycrontabfiles are stored in operating system-specific file paths.An adversary may usecronin Linux or Unix environments to execute programs at system startup or on a scheduled basis forPersistence. In ESXi environments, cron jobs must be created directly via the crontab file (e.g.,/var/spool/cron/crontabs/root).[2]",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Scheduled Task/Job",
    "parent_technique_id": "T1053",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:30:02.538331"
  },
  {
    "technique_id": "T1129",
    "name": "Shared Modules",
    "description": "Adversaries may execute malicious payloads via loading shared modules. Shared modules are executable files that are loaded into processes to provide access to reusable code, such as specific custom functions or invoking OS API functions (i.e.,Native API).Adversaries may use this functionality as a way to execute arbitrary payloads on a victim system. For example, adversaries can modularize functionality of their malware into shared objects that perform various functions such as managing C2 network communications or execution of specific actions on objective.The Linux & macOS module loader can load and execute shared objects from arbitrary local paths. This functionality resides indlfcn.hin functions such asdlopenanddlsym. Although macOS can execute.sofiles, common practice uses.dylibfiles.[1][2][3][4]The Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides inNTDLL.dlland is part of the WindowsNative APIwhich is called from functions likeLoadLibraryat run time.[5]",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:30:05.909126",
    "subtechniques": []
  },
  {
    "technique_id": "T1072",
    "name": "Software Deployment Tools",
    "description": "Adversaries may gain access to and use centralized software suites installed within an enterprise to execute commands and move laterally through the network. Configuration management and software deployment applications may be used in an enterprise network or cloud environment for routine administration purposes. These systems may also be integrated into CI/CD pipelines. Examples of such solutions include: SCCM, HBSS, Altiris, AWS Systems Manager, Microsoft Intune, Azure Arc, and GCP Deployment Manager.Access to network-wide or enterprise-wide endpoint management software may enable an adversary to achieve remote code execution on all connected systems. The access may be used to laterally move to other systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints.SaaS-based configuration management services may allow for broadCloud Administration Commandon cloud-hosted instances, as well as the execution of arbitrary commands on on-premises endpoints. For example, Microsoft Configuration Manager allows Global or Intune Administrators to run scripts as SYSTEM on on-premises devices joined to Entra ID.[1]Such services may also utilizeWeb Protocolsto communicate back to adversary owned infrastructure.[2]Network infrastructure devices may also have configuration management tools that can be similarly abused by adversaries.[3]The permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the third-party system, or specific domain credentials may be required. However, the system may require an administrative account to log in or to access specific functionality.",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:30:09.149583",
    "subtechniques": []
  },
  {
    "technique_id": "T1569",
    "name": "System Services",
    "description": "Adversaries may abuse system services or daemons to execute commands or programs. Adversaries can execute malicious content by interacting with or creating services either locally or remotely. Many services are set to run at boot, which can aid in achieving persistence (Create or Modify System Process), but adversaries can also abuse services for one-time or temporary execution.",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:30:12.497500",
    "subtechniques": [
      {
        "id": "T1569.001",
        "name": "Launchctl"
      }
    ]
  },
  {
    "technique_id": "T1569.001",
    "name": "Launchctl",
    "description": "Adversaries may abuse launchctl to execute commands or programs. Launchctl interfaces with launchd, the service management framework for macOS. Launchctl supports taking subcommands on the command-line, interactively, or even redirected from standard input.[1]Adversaries use launchctl to execute commands and programs asLaunch Agents orLaunch Daemons. Common subcommands include:launchctl load,launchctl unload, andlaunchctl start. Adversaries can use scripts or manually run the commandslaunchctl load -w \"%s/Library/LaunchAgents/%s\"or/bin/launchctl loadto executeLaunch Agents orLaunch Daemons.[2][3]",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "System Services",
    "parent_technique_id": "T1569",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:30:15.845219"
  },
  {
    "technique_id": "T1204",
    "name": "User Execution",
    "description": "An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms ofPhishing.WhileUser Executionfrequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly afterInternal Spearphishing.Adversaries may also deceive users into performing actions such as:EnablingRemote Access Tools, allowing direct control of the system to the adversaryRunning malicious JavaScript in their browser, allowing adversaries toSteal Web Session Cookies[1][2]Downloading and executing malware forUser ExecutionCoerceing users to copy, paste, and execute malicious code manually[3][4]For example, tech support scams can be facilitated throughPhishing, vishing, or various forms of user interaction. Adversaries can use a combination of these methods, such as spoofing and promoting toll-free numbers or call centers that are used to direct victims to malicious websites, to deliver and execute payloads containing malware orRemote Access Tools.[5]",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:30:19.209566",
    "subtechniques": [
      {
        "id": "T1204.001",
        "name": "Malicious Link"
      },
      {
        "id": "T1204.002",
        "name": "Malicious File"
      },
      {
        "id": "T1204.004",
        "name": "Malicious Copy and Paste"
      }
    ]
  },
  {
    "technique_id": "T1204.001",
    "name": "Malicious Link",
    "description": "An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior fromSpearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability viaExploitation for Client Execution. Links may also lead users to download files that require execution viaMalicious File.",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "User Execution",
    "parent_technique_id": "T1204",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:30:22.633260"
  },
  {
    "technique_id": "T1204.002",
    "name": "Malicious File",
    "description": "An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior fromSpearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, .cpl, and .reg.Adversaries may employ various forms ofMasqueradingandObfuscated Files or Informationto increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it.[1]WhileMalicious Filefrequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly afterInternal Spearphishing.",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "User Execution",
    "parent_technique_id": "T1204",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:30:26.168656"
  },
  {
    "technique_id": "T1204.004",
    "name": "Malicious Copy and Paste",
    "description": "An adversary may rely upon a user copying and pasting code in order to gain execution. Users may be subjected to social engineering to get them to copy and paste code directly into aCommand and Scripting Interpreter.Malicious websites, such as those used inDrive-by Compromise, may present fake error messages or CAPTCHA prompts that instruct users to open a terminal or the Windows Run Dialog box and execute an arbitrary command. These commands may be obfuscated using encoding or other techniques to conceal malicious intent. Once executed, the adversary will typically be able to establish a foothold on the victim's machine.[1][2][3][4]Adversaries may also leverage phishing emails for this purpose. When a user attempts to open an attachment, they may be presented with a fake error and offered a malicious command to paste as a solution.[5][6]Tricking a user into executing a command themselves may help to bypass email filtering, browser sandboxing, or other mitigations designed to protect users against malicious downloaded files.",
    "tactic": "Execution",
    "tactics": [
      "Execution"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "User Execution",
    "parent_technique_id": "T1204",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:30:29.530104"
  },
  {
    "technique_id": "T1098",
    "name": "Account Manipulation",
    "description": "Adversaries may manipulate accounts to maintain and/or elevate access to victim systems. Account manipulation may consist of any action that preserves or modifies adversary access to a compromised account, such as modifying credentials or permission groups.[1]These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials.In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain. However, account manipulation may also lead to privilege escalation where modifications grant access to additional roles, permissions, or higher-privilegedValid Accounts.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:30:32.910112",
    "subtechniques": [
      {
        "id": "T1098.004",
        "name": "SSH Authorized Keys"
      },
      {
        "id": "T1098.007",
        "name": "Additional Local or Domain Groups"
      }
    ]
  },
  {
    "technique_id": "T1098.004",
    "name": "SSH Authorized Keys",
    "description": "Adversaries may modify the SSHauthorized_keysfile to maintain persistence on a victim host. Linux distributions, macOS, and ESXi hypervisors commonly use key-based authentication to secure the authentication process of SSH sessions for remote management. Theauthorized_keysfile in SSH specifies the SSH keys that can be used for logging into the user account for which the file is configured. This file is usually found in the user's home directory under<user-home>/.ssh/authorized_keys(or, on ESXi,/etc/ssh/keys-<username>/authorized_keys).[1]Users may edit the systemâ€™s SSH config file to modify the directivesPubkeyAuthenticationandRSAAuthenticationto the valueyesto ensure public key and RSA authentication are enabled, as well as modify the directivePermitRootLoginto the valueyesto enable root authentication via SSH.[2]The SSH config file is usually located under/etc/ssh/sshd_config.Adversaries may modify SSHauthorized_keysfiles directly with scripts or shell commands to add their own adversary-supplied public keys. In cloud environments, adversaries may be able to modify the SSH authorized_keys file of a particular virtual machine via the command line interface or rest API. For example, by using the Google Cloud CLIâ€™s \"add-metadata\" command an adversary may add SSH keys to a user account.[3][4]Similarly, in Azure, an adversary may update the authorized_keys file of a virtual machine via a PATCH request to the API.[5]This ensures that an adversary possessing the corresponding private key may log in as an existing user via SSH.[6][7]It may also lead to privilege escalation where the virtual machine or instance has distinct permissions from the requesting user.Where authorized_keys files are modified via cloud APIs or command line interfaces, an adversary may achieve privilege escalation on the target virtual machine if they add a key to a higher-privileged user.SSH keys can also be added to accounts on network devices, such as with theip ssh pubkey-chainNetwork Device CLIcommand.[8]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Account Manipulation",
    "parent_technique_id": "T1098",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:30:36.268790"
  },
  {
    "technique_id": "T1098.007",
    "name": "Additional Local or Domain Groups",
    "description": "An adversary may add additional local or domain groups to an adversary-controlled account to maintain persistent access to a system or domain.On Windows, accounts may use thenet localgroupandnet groupcommands to add existing users to local and domain groups.[1][2]On Linux, adversaries may use theusermodcommand for the same purpose.[3]For example, accounts may be added to the local administrators group on Windows devices to maintain elevated privileges. They may also be added to the Remote Desktop Users group, which allows them to leverageRemote Desktop Protocolto log into the endpoints in the future.[4]On Linux, accounts may be added to the sudoers group, allowing them to persistently leverageSudo and Sudo Cachingfor elevated privileges.In Windows environments, machine accounts may also be added to domain groups. This allows the local SYSTEM account to gain privileges on the domain.[5]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Account Manipulation",
    "parent_technique_id": "T1098",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:30:39.630463"
  },
  {
    "technique_id": "T1547",
    "name": "Boot or Logon Autostart Execution",
    "description": "Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon.[1][2][3][4][5]These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel.Since some boot or logon autostart programs run with higher privileges, an adversary may leverage these to elevate privileges.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:30:43.031229",
    "subtechniques": [
      {
        "id": "T1547.006",
        "name": "Kernel Modules and Extensions"
      },
      {
        "id": "T1547.007",
        "name": "Re-opened Applications"
      },
      {
        "id": "T1547.015",
        "name": "Login Items"
      }
    ]
  },
  {
    "technique_id": "T1547.006",
    "name": "Kernel Modules and Extensions",
    "description": "Adversaries may modify the kernel to automatically execute programs on system boot. Loadable Kernel Modules (LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system.[1]When used maliciously, LKMs can be a type of kernel-modeRootkitthat run with the highest operating system privilege (Ring 0).[2]Common features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors, and enabling root access to non-privileged users.[3]Kernel extensions, also called kext, are used in macOS to load functionality onto a system similar to LKMs for Linux. Since the kernel is responsible for enforcing security and the kernel extensions run as apart of the kernel, kexts are not governed by macOS security policies. Kexts are loaded and unloaded throughkextloadandkextunloadcommands. Kexts need to be signed with a developer ID that is granted privileges by Apple allowing it to sign Kernel extensions. Developers without these privileges may still sign kexts but they will not load unless SIP is disabled. If SIP is enabled, the kext signature is verified before being added to the AuxKC.[4]Since macOS Catalina 10.15, kernel extensions have been deprecated in favor of System Extensions. However, kexts are still allowed as \"Legacy System Extensions\" since there is no System Extension for Kernel Programming Interfaces.[5]Adversaries can use LKMs and kexts to conductPersistenceand/orPrivilege Escalationon a system. Examples have been found in the wild, and there are some relevant open source projects as well.[6][7][8][9][10][11][12][13]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Boot or Logon Autostart Execution",
    "parent_technique_id": "T1547",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:30:46.407640"
  },
  {
    "technique_id": "T1547.007",
    "name": "Re-opened Applications",
    "description": "Adversaries may modify plist files to automatically run an application when a user logs in. When a user logs out or restarts via the macOS Graphical User Interface (GUI), a prompt is provided to the user with a checkbox to \"Reopen windows when logging back in\".[1]When selected, all applications currently open are added to a property list file namedcom.apple.loginwindow.[UUID].plistwithin the~/Library/Preferences/ByHostdirectory.[2][3]Applications listed in this file are automatically reopened upon the userâ€™s next logon.Adversaries can establishPersistenceby adding a malicious application path to thecom.apple.loginwindow.[UUID].plistfile to execute payloads when a user logs in.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Boot or Logon Autostart Execution",
    "parent_technique_id": "T1547",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:30:49.775523"
  },
  {
    "technique_id": "T1547.015",
    "name": "Login Items",
    "description": "Adversaries may add login items to execute upon user login to gain persistence or escalate privileges. Login items are applications, documents, folders, or server connections that are automatically launched when a user logs in.[1]Login items can be added via a shared file list or Service Management Framework.[2]Shared file list login items can be set using scripting languages such asAppleScript, whereas the Service Management Framework uses the API callSMLoginItemSetEnabled.Login items installed using the Service Management Framework leveragelaunchd, are not visible in the System Preferences, and can only be removed by the application that created them.[2][3]Login items created using a shared file list are visible in System Preferences, can hide the application when it launches, and are executed through LaunchServices, not launchd, to open applications, documents, or URLs without using Finder.[4]Users and applications use login items to configure their user environment to launch commonly used services or applications, such as email, chat, and music applications.Adversaries can utilizeAppleScriptandNative APIcalls to create a login item to spawn malicious executables.[5]Prior to version 10.5 on macOS, adversaries can add login items by usingAppleScriptto send an Apple events to the \"System Events\" process, which has an AppleScript dictionary for manipulating login items.[6]Adversaries can use a command such astell application \"System Events\" to make login item at end with properties /path/to/executable.[7][8][9]This command adds the path of the malicious executable to the login item file list located in~/Library/Application Support/com.apple.backgroundtaskmanagementagent/backgrounditems.btm.[7]Adversaries can also use login items to launch executables that can be used to control the victim system remotely or as a means to gain privilege escalation by prompting for user credentials.[10][11][12]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Boot or Logon Autostart Execution",
    "parent_technique_id": "T1547",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:30:53.157809"
  },
  {
    "technique_id": "T1037",
    "name": "Boot or Logon Initialization Scripts",
    "description": "Adversaries may use scripts automatically executed at boot or logon initialization to establish persistence.[1][2]Initialization scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server. These scripts can vary based on operating system and whether applied locally or remotely.Adversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.An adversary may also be able to escalate their privileges since some boot or logon initialization scripts run with higher privileges.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:30:56.512043",
    "subtechniques": [
      {
        "id": "T1037.002",
        "name": "Login Hook"
      },
      {
        "id": "T1037.004",
        "name": "RC Scripts"
      },
      {
        "id": "T1037.005",
        "name": "Startup Items"
      }
    ]
  },
  {
    "technique_id": "T1037.002",
    "name": "Login Hook",
    "description": "Adversaries may use a Login Hook to establish persistence executed upon user logon. A login hook is a plist file that points to a specific script to execute with root privileges upon user logon. The plist file is located in the/Library/Preferences/com.apple.loginwindow.plistfile and can be modified using thedefaultscommand-line utility. This behavior is the same for logout hooks where a script can be executed upon user logout. All hooks require administrator permissions to modify or create hooks.[1][2]Adversaries can add or insert a path to a malicious script in thecom.apple.loginwindow.plistfile, using theLoginHookorLogoutHookkey-value pair. The malicious script is executed upon the next user login. If a login hook already exists, adversaries can add additional commands to an existing login hook. There can be only one login and logout hook on a system at a time.[3][4]Note:Login hooks were deprecated in 10.11 version of macOS in favor ofLaunch DaemonandLaunch Agent",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Boot or Logon Initialization Scripts",
    "parent_technique_id": "T1037",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:30:59.883710"
  },
  {
    "technique_id": "T1037.004",
    "name": "RC Scripts",
    "description": "Adversaries may establish persistence by modifying RC scripts, which are executed during a Unix-like systemâ€™s startup. These files allow system administrators to map and start custom services at startup for different run levels. RC scripts require root privileges to modify.Adversaries may establish persistence by adding a malicious binary path or shell commands torc.local,rc.common, and other RC scripts specific to the Unix-like distribution.[1][2]Upon reboot, the system executes the script's contents as root, resulting in persistence.Adversary abuse of RC scripts is especially effective for lightweight Unix-like distributions using the root user as default, such as ESXi hypervisors, IoT, or embedded systems.[3]As ESXi servers store most system files in memory and therefore discard changes on shutdown, leveraging/etc/rc.local.d/local.shis one of the few mechanisms for enabling persistence across reboots.[4]Several Unix-like systems have moved to Systemd and deprecated the use of RC scripts. This is now a deprecated mechanism in macOS in favor ofLaunchd.[5][6]This technique can be used on Mac OS X Panther v10.3 and earlier versions which still execute the RC scripts.[7]To maintain backwards compatibility some systems, such as Ubuntu, will execute the RC scripts if they exist with the correct file permissions.[8]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Boot or Logon Initialization Scripts",
    "parent_technique_id": "T1037",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:31:03.252498"
  },
  {
    "technique_id": "T1037.005",
    "name": "Startup Items",
    "description": "Adversaries may use startup items automatically executed at boot initialization to establish persistence. Startup items execute during the final phase of the boot process and contain shell scripts or other executable files along with configuration information used by the system to determine the execution order for all startup items.[1]This is technically a deprecated technology (superseded byLaunch Daemon), and thus the appropriate folder,/Library/StartupItemsisnâ€™t guaranteed to exist on the system by default, but does appear to exist by default on macOS Sierra. A startup item is a directory whose executable and configuration property list (plist),StartupParameters.plist, reside in the top-level directory.An adversary can create the appropriate folders/files in the StartupItems directory to register their own persistence mechanism.[2]Additionally, since StartupItems run during the bootup phase of macOS, they will run as the elevated root user.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Boot or Logon Initialization Scripts",
    "parent_technique_id": "T1037",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:31:06.618450"
  },
  {
    "technique_id": "T1554",
    "name": "Compromise Host Software Binary",
    "description": "Adversaries may modify host software binaries to establish persistent access to systems. Software binaries/executables provide a wide range of system commands or services, programs, and libraries. Common software binaries are SSH clients, FTP clients, email clients, web browsers, and many other user or server applications.Adversaries may establish persistence though modifications to host software binaries. For example, an adversary may replace or otherwise infect a legitimate application binary (or support files) with a backdoor. Since these binaries may be routinely executed by applications or the user, the adversary can leverage this for persistent access to the host. An adversary may also modify a software binary such as an SSH client in order to persistently collect credentials during logins (i.e.,Modify Authentication Process).[1]An adversary may also modify an existing binary by patching in malicious functionality (e.g., IAT Hooking/Entry point patching)[2]prior to the binaryâ€™s legitimate execution. For example, an adversary may modify the entry point of a binary to point to malicious code patched in by the adversary before resuming normal execution flow.[3]After modifying a binary, an adversary may attempt toImpair Defensesby preventing it from updating (e.g., via theyum-versionlockcommand orversionlock.listfile in Linux systems that use the yum package manager).[1]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:31:09.927027",
    "subtechniques": []
  },
  {
    "technique_id": "T1136",
    "name": "Create Account",
    "description": "Adversaries may create an account to maintain access to victim systems.[1]With a sufficient level of access, creating such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.Accounts may be created on the local system or within a domain or cloud tenant. In cloud environments, adversaries may create accounts that only have access to specific services, which can reduce the chance of detection.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:31:13.288336",
    "subtechniques": [
      {
        "id": "T1136.001",
        "name": "Local Account"
      },
      {
        "id": "T1136.002",
        "name": "Domain Account"
      }
    ]
  },
  {
    "technique_id": "T1136.001",
    "name": "Local Account",
    "description": "Adversaries may create a local account to maintain access to victim systems. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.For example, with a sufficient level of access, the Windowsnet user /addcommand can be used to create a local account.  In Linux, theuseraddcommand can be used, while on macOS systems, thedscl -createcommand can be used. Local accounts may also be added to network devices, often via commonNetwork Device CLIcommands such asusername, to ESXi servers viaesxcli system account add, or to Kubernetes clusters using thekubectlutility.[1][2]Such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Create Account",
    "parent_technique_id": "T1136",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:31:16.684818"
  },
  {
    "technique_id": "T1136.002",
    "name": "Domain Account",
    "description": "Adversaries may create a domain account to maintain access to victim systems. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover user, administrator, and service accounts. With a sufficient level of access, thenet user /add /domaincommand can be used to create a domain account.[1]Such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Create Account",
    "parent_technique_id": "T1136",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:31:20.048897"
  },
  {
    "technique_id": "T1543",
    "name": "Create or Modify System Process",
    "description": "Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services.[1]On macOS, launchd processes known asLaunch DaemonandLaunch Agentare run to finish system initialization and load user specific parameters.[2]Adversaries may install new services, daemons, or agents that can be configured to execute at startup or a repeatable interval in order to establish persistence. Similarly, adversaries may modify existing services, daemons, or agents to achieve the same effect.Services, daemons, or agents may be created with administrator privileges but executed under root/SYSTEM privileges. Adversaries may leverage this functionality to create or modify system processes in order to escalate privileges.[3]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:31:23.406921",
    "subtechniques": [
      {
        "id": "T1543.001",
        "name": "Launch Agent"
      },
      {
        "id": "T1543.004",
        "name": "Launch Daemon"
      }
    ]
  },
  {
    "technique_id": "T1543.001",
    "name": "Launch Agent",
    "description": "Adversaries may create or modify launch agents to repeatedly execute malicious payloads as part of persistence. When a user logs in, a per-user launchd process is started which loads the parameters for each launch-on-demand user agent from the property list (.plist) file found in/System/Library/LaunchAgents,/Library/LaunchAgents, and~/Library/LaunchAgents.[1][2][3]Property list files use theLabel,ProgramArguments, andRunAtLoadkeys to identify the Launch Agent's name, executable location, and execution time.[4]Launch Agents are often installed to perform updates to programs, launch user specified programs at login, or to conduct other developer tasks.Launch Agents can also be executed using theLaunchctlcommand.Adversaries may install a new Launch Agent that executes at login by placing a .plist file into the appropriate folders with theRunAtLoadorKeepAlivekeys set totrue.[5][6]The Launch Agent name may be disguised by using a name from the related operating system or benign software. Launch Agents are created with user level privileges and execute with user level permissions.[7][8]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Create or Modify System Process",
    "parent_technique_id": "T1543",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:31:26.798564"
  },
  {
    "technique_id": "T1543.004",
    "name": "Launch Daemon",
    "description": "Adversaries may create or modify Launch Daemons to execute malicious payloads as part of persistence. Launch Daemons are plist files used to interact with Launchd, the service management framework used by macOS. Launch Daemons require elevated privileges to install, are executed for every user on a system prior to login, and run in the background without the need for user interaction. During the macOS initialization startup, the launchd process loads the parameters for launch-on-demand system-level daemons from plist files found in/System/Library/LaunchDaemons/and/Library/LaunchDaemons/. Required Launch Daemons parameters include aLabelto identify the task,Programto provide a path to the executable, andRunAtLoadto specify when the task is run. Launch Daemons are often used to provide access to shared resources, updates to software, or conduct automation tasks.[1][2][3]Adversaries may install a Launch Daemon configured to execute at startup by using theRunAtLoadparameter set totrueand theProgramparameter set to the malicious executable path. The daemon name may be disguised by using a name from a related operating system or benign software (i.e.Masquerading). When the Launch Daemon is executed, the program inherits administrative permissions.[4][5]Additionally, system configuration changes (such as the installation of third party package managing software) may cause folders such asusr/local/binto become globally writeable. So, it is possible for poor configurations to allow an adversary to modify executables referenced by current Launch Daemon's plist files.[6][7]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Create or Modify System Process",
    "parent_technique_id": "T1543",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:31:30.176915"
  },
  {
    "technique_id": "T1546",
    "name": "Event Triggered Execution",
    "description": "Adversaries may establish persistence and/or elevate privileges using system mechanisms that trigger execution based on specific events. Various operating systems have means to monitor and subscribe to events such as logons or other user activity such as running specific applications/binaries. Cloud environments may also support various functions and services that monitor and can be invoked in response to specific cloud events.[1][2][3]Adversaries may abuse these mechanisms as a means of maintaining persistent access to a victim via repeatedly executing malicious code. After gaining access to a victim system, adversaries may create/modify event triggers to point to malicious content that will be executed whenever the event trigger is invoked.[4][5][6]Since the execution can be proxied by an account with higher permissions, such as SYSTEM or service accounts, an adversary may be able to abuse these triggered execution mechanisms to escalate their privileges.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:31:33.537697",
    "subtechniques": [
      {
        "id": "T1546.004",
        "name": "Unix Shell Configuration Modification"
      },
      {
        "id": "T1546.005",
        "name": "Trap"
      },
      {
        "id": "T1546.006",
        "name": "LC_LOAD_DYLIB Addition"
      },
      {
        "id": "T1546.014",
        "name": "Emond"
      },
      {
        "id": "T1546.016",
        "name": "Installer Packages"
      }
    ]
  },
  {
    "technique_id": "T1546.004",
    "name": "Unix Shell Configuration Modification",
    "description": "Adversaries may establish persistence through executing malicious commands triggered by a userâ€™s shell. UserUnix Shells execute several configuration scripts at different points throughout the session based on events. For example, when a user opens a command-line interface or remotely logs in (such as via SSH) a login shell is initiated. The login shell executes scripts from the system (/etc) and the userâ€™s home directory (~/) to configure the environment. All login shells on a system use /etc/profile when initiated. These configuration scripts run at the permission level of their directory and are often used to set environment variables, create aliases, and customize the userâ€™s environment. When the shell exits or terminates, additional shell scripts are executed to ensure the shell exits appropriately.Adversaries may attempt to establish persistence by inserting commands into scripts automatically executed by shells. Using bash as an example, the default shell for most GNU/Linux systems, adversaries may add commands that launch malicious binaries into the/etc/profileand/etc/profile.dfiles.[1][2]These files typically require root permissions to modify and are executed each time any shell on a system launches. For user level permissions, adversaries can insert malicious commands into~/.bash_profile,~/.bash_login, or~/.profilewhich are sourced when a user opens a command-line interface or connects remotely.[3][4]Since the system only executes the first existing file in the listed order, adversaries have used~/.bash_profileto ensure execution. Adversaries have also leveraged the~/.bashrcfile which is additionally executed if the connection is established remotely or an additional interactive shell is opened, such as a new tab in the command-line interface.[5][3][6][7]Some malware targets the termination of a program to trigger execution, adversaries can use the~/.bash_logoutfile to execute malicious commands at the end of a session.For macOS, the functionality of this technique is similar but may leverage zsh, the default shell for macOS 10.15+. When the Terminal.app is opened, the application launches a zsh login shell and a zsh interactive shell. The login shell configures the system environment using/etc/profile,/etc/zshenv,/etc/zprofile, and/etc/zlogin.[8][9][10][11]The login shell then configures the user environment with~/.zprofileand~/.zlogin. The interactive shell uses the~/.zshrcto configure the user environment. Upon exiting,/etc/zlogoutand~/.zlogoutare executed. For legacy programs, macOS executes/etc/bashrcon startup.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Event Triggered Execution",
    "parent_technique_id": "T1546",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:31:36.991064"
  },
  {
    "technique_id": "T1546.005",
    "name": "Trap",
    "description": "Adversaries may establish persistence by executing malicious content triggered by an interrupt signal. Thetrapcommand allows programs and shells to specify commands that will be executed upon receiving interrupt signals. A common situation is a script allowing for graceful termination and handling of common keyboard interrupts likectrl+candctrl+d.Adversaries can use this to register code to be executed when the shell encounters specific interrupts as a persistence mechanism. Trap commands are of the following formattrap 'command list' signalswhere \"command list\" will be executed when \"signals\" are received.[1][2]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Event Triggered Execution",
    "parent_technique_id": "T1546",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:31:40.354997"
  },
  {
    "technique_id": "T1546.006",
    "name": "LC_LOAD_DYLIB Addition",
    "description": "Adversaries may establish persistence by executing malicious content triggered by the execution of tainted binaries. Mach-O binaries have a series of headers that are used to perform certain operations when a binary is loaded. The LC_LOAD_DYLIB header in a Mach-O binary tells macOS and OS X which dynamic libraries (dylibs) to load during execution time. These can be added ad-hoc to the compiled binary as long as adjustments are made to the rest of the fields and dependencies.[1]There are tools available to perform these changes.Adversaries may modify Mach-O binary headers to load and execute malicious dylibs every time the binary is executed. Although any changes will invalidate digital signatures on binaries because the binary is being modified, this can be remediated by simply removing the LC_CODE_SIGNATURE command from the binary so that the signature isnâ€™t checked at load time.[2]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Event Triggered Execution",
    "parent_technique_id": "T1546",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:31:43.740009"
  },
  {
    "technique_id": "T1546.014",
    "name": "Emond",
    "description": "Adversaries may gain persistence and elevate privileges by executing malicious content triggered by the Event Monitor Daemon (emond). Emond is aLaunch Daemonthat accepts events from various services, runs them through a simple rules engine, and takes action. The emond binary at/sbin/emondwill load any rules from the/etc/emond.d/rules/directory and take action once an explicitly defined event takes place.The rule files are in the plist format and define the name, event type, and action to take. Some examples of event types include system startup and user authentication. Examples of actions are to run a system command or send an email. The emond service will not launch if there is no file present in the QueueDirectories path/private/var/db/emondClients, specified in theLaunch Daemonconfiguration file at/System/Library/LaunchDaemons/com.apple.emond.plist.[1][2][3]Adversaries may abuse this service by writing a rule to execute commands when a defined event occurs, such as system start up or user authentication.[1][2][3]Adversaries may also be able to escalate privileges from administrator to root as the emond service is executed with root privileges by theLaunch Daemonservice.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Event Triggered Execution",
    "parent_technique_id": "T1546",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:31:47.109553"
  },
  {
    "technique_id": "T1546.016",
    "name": "Installer Packages",
    "description": "Adversaries may establish persistence and elevate privileges by using an installer to trigger the execution of malicious content. Installer packages are OS specific and contain the resources an operating system needs to install applications on a system. Installer packages can include scripts that run prior to installation as well as after installation is complete. Installer scripts may inherit elevated permissions when executed. Developers often use these scripts to prepare the environment for installation, check requirements, download dependencies, and remove files after installation.[1]Using legitimate applications, adversaries have distributed applications with modified installer scripts to execute malicious content. When a user installs the application, they may be required to grant administrative permissions to allow the installation. At the end of the installation process of the legitimate application, content such as macOSpostinstallscripts can be executed with the inherited elevated permissions. Adversaries can use these scripts to execute a malicious executable or install other malicious components (such as aLaunch Daemon) with the elevated permissions.[2][3][4][5]Depending on the distribution, Linux versions of package installer scripts are sometimes called maintainer scripts or post installation scripts. These scripts can includepreinst,postinst,prerm,postrmscripts and run as root when executed.For Windows, the Microsoft Installer services uses.msifiles to manage the installing, updating, and uninstalling of applications. These installation routines may also include instructions to perform additional actions that may be abused by adversaries.[6]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Event Triggered Execution",
    "parent_technique_id": "T1546",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:31:50.466361"
  },
  {
    "technique_id": "T1668",
    "name": "Exclusive Control",
    "description": "Adversaries who successfully compromise a system may attempt to maintain persistence by \"closing the door\" behind them  â€“ in other words, by preventing other threat actors from initially accessing or maintaining a foothold on the same system.For example, adversaries may patch a vulnerable, compromised system[1][2]to prevent other threat actors from leveraging that vulnerability in the future. They may \"close the door\" in other ways, such as disabling vulnerable services[3], stripping privileges from accounts[4], or removing other malware already on the compromised device.[5]Hindering other threat actors may allow an adversary to maintain sole access to a compromised system or network. This prevents the threat actor from needing to compete with or even being removed themselves by other threat actors. It also reduces the \"noise\" in the environment, lowering the possibility of being caught and evicted by defenders. Finally, in the case ofResource Hijacking, leveraging a compromised deviceâ€™s full power allows the threat actor to maximize profit.[3]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:31:53.826790",
    "subtechniques": []
  },
  {
    "technique_id": "T1133",
    "name": "External Remote Services",
    "description": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such asWindows Remote ManagementandVNCcan also be used externally.[1]Access toValid Accountsto use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network.[2]Access to remote services may be used as a redundant or persistent access mechanism during an operation.Access may also be gained through an exposed service that doesnâ€™t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard.[3][4]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:31:57.226760",
    "subtechniques": []
  },
  {
    "technique_id": "T1574",
    "name": "Hijack Execution Flow",
    "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.There are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:32:00.578199",
    "subtechniques": [
      {
        "id": "T1574.004",
        "name": "Dylib Hijacking"
      },
      {
        "id": "T1574.006",
        "name": "Dynamic Linker Hijacking"
      },
      {
        "id": "T1574.007",
        "name": "Path Interception by PATH Environment Variable"
      }
    ]
  },
  {
    "technique_id": "T1574.004",
    "name": "Dylib Hijacking",
    "description": "Adversaries may execute their own payloads by placing a malicious dynamic library (dylib) with an expected name in a path a victim application searches at runtime. The dynamic loader will try to find the dylibs based on the sequential order of the search paths. Paths to dylibs may be prefixed with@rpath, which allows developers to use relative paths to specify an array of search paths used at runtime based on the location of the executable.  Additionally, if weak linking is used, such as theLC_LOAD_WEAK_DYLIBfunction, an application will still execute even if an expected dylib is not present. Weak linking enables developers to run an application on multiple macOS versions as new APIs are added.Adversaries may gain execution by inserting malicious dylibs with the name of the missing dylib in the identified path.[1][2][3][4]Dylibs are loaded into an application's address space allowing the malicious dylib to inherit the application's privilege level and resources. Based on the application, this could result in privilege escalation and uninhibited network access. This method may also evade detection from security products since the execution is masked under a legitimate process.[5][6][7]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hijack Execution Flow",
    "parent_technique_id": "T1574",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:32:03.938078"
  },
  {
    "technique_id": "T1574.006",
    "name": "Dynamic Linker Hijacking",
    "description": "Adversaries may execute their own malicious payloads by hijacking environment variables the dynamic linker uses to load shared libraries. During the execution preparation phase of a program, the dynamic linker loads specified absolute paths of shared libraries from various environment variables and files, such asLD_PRELOADon Linux orDYLD_INSERT_LIBRARIESon macOS.[1][2][3]Libraries specified in environment variables are loaded first, taking precedence over system libraries with the same function name.[4][5][6]Each platform's linker uses an extensive list of environment variables at different points in execution. These variables are often used by developers to debug binaries without needing to recompile, deconflict mapped symbols, and implement custom functions in the original library.[7]Hijacking dynamic linker variables may grant access to the victim process's memory, system/network resources, and possibly elevated privileges. On Linux, adversaries may setLD_PRELOADto point to malicious libraries that match the name of legitimate libraries which are requested by a victim program, causing the operating system to load the adversary's malicious code upon execution of the victim program. For example, adversaries have usedLD_PRELOADto inject a malicious library into every descendant process of thesshddaemon, resulting in execution under a legitimate process. When the executing sub-process calls theexecvefunction, for example, the malicious libraryâ€™sexecvefunction is executed rather than the system functionexecvecontained in the system library on disk. This allows adversaries toHide Artifactsfrom detection, as hooking system functions such asexecveandreaddirenables malware to scrub its own artifacts from the results of commands such asls,ldd,iptables, anddmesg.[8][9][10]Hijacking dynamic linker variables may grant access to the victim process's memory, system/network resources, and possibly elevated privileges.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hijack Execution Flow",
    "parent_technique_id": "T1574",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:32:07.307423"
  },
  {
    "technique_id": "T1574.007",
    "name": "Path Interception by PATH Environment Variable",
    "description": "Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. The PATH environment variable contains a list of directories (User and System) that the OS searches sequentially through in search of the binary that was called from a script or the command line.Adversaries can place a malicious program in an earlier entry in the list of directories stored in the PATH environment variable, resulting in the operating system executing the malicious binary rather than the legitimate binary when it searches sequentially through that PATH listing.For example, on Windows if an adversary places a malicious program named \"net.exe\" inC:\\example path, which by default precedesC:\\Windows\\system32\\net.exein the PATH environment variable, when \"net\" is executed from the command-line theC:\\example pathwill be called instead of the system's legitimate executable atC:\\Windows\\system32\\net.exe. Some methods of executing a program rely on the PATH environment variable to determine the locations that are searched when the path for the program is not given, such as executing programs from aCommand and Scripting Interpreter.[1]Adversaries may also directly modify the $PATH variable specifying the directories to be searched.  An adversary can modify the$PATHvariable to point to a directory they have write access. When a program using the $PATH variable is called, the OS searches the specified directory and executes the malicious binary. On macOS, this can also be performed through modifying the $HOME variable. These variables can be modified using the command-line, launchctl,Unix Shell Configuration Modification, or modifying the/etc/paths.dfolder contents.[2][3][4]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hijack Execution Flow",
    "parent_technique_id": "T1574",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:32:10.626096"
  },
  {
    "technique_id": "T1556",
    "name": "Modify Authentication Process",
    "description": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without usingValid Accounts.Adversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms. Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:32:14.014435",
    "subtechniques": [
      {
        "id": "T1556.003",
        "name": "Pluggable Authentication Modules"
      },
      {
        "id": "T1556.006",
        "name": "Multi-Factor Authentication"
      }
    ]
  },
  {
    "technique_id": "T1556.003",
    "name": "Pluggable Authentication Modules",
    "description": "Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module ispam_unix.so, which retrieves, sets, and verifies account authentication information in/etc/passwdand/etc/shadow.[1][2][3]Adversaries may modify components of the PAM system to create backdoors. PAM components, such aspam_unix.so, can be patched to accept arbitrary adversary supplied values as legitimate credentials.[4]Malicious modifications to the PAM system may also be abused to steal credentials. Adversaries may infect PAM resources with code to harvest user credentials, since the values exchanged with PAM components may be plain-text since PAM does not store passwords.[5][1]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Modify Authentication Process",
    "parent_technique_id": "T1556",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:32:17.352242"
  },
  {
    "technique_id": "T1556.006",
    "name": "Multi-Factor Authentication",
    "description": "Adversaries may disable or modify multi-factor authentication (MFA) mechanisms to enable persistent access to compromised accounts.Once adversaries have gained access to a network by either compromising an account lacking MFA or by employing an MFA bypass method such asMulti-Factor Authentication Request Generation, adversaries may leverage their access to modify or completely disable MFA defenses. This can be accomplished by abusing legitimate features, such as excluding users from Azure AD Conditional Access Policies, registering a new yet vulnerable/adversary-controlled MFA method, or by manually patching MFA programs and configuration files to bypass expected functionality.[1][2]For example, modifying the Windows hosts file (C:\\windows\\system32\\drivers\\etc\\hosts) to redirect MFA calls to localhost instead of an MFA server may cause the MFA process to fail. If a \"fail open\" policy is in place, any otherwise successful authentication attempt may be granted access without enforcing MFA.[3]Depending on the scope, goals, and privileges of the adversary, MFA defenses may be disabled for individual accounts or for all accounts tied to a larger group, such as all domain accounts in a victim's network environment.[3]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Modify Authentication Process",
    "parent_technique_id": "T1556",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:32:20.715856"
  },
  {
    "technique_id": "T1653",
    "name": "Power Settings",
    "description": "Adversaries may impair a system's ability to hibernate, reboot, or shut down in order to extend access to infected machines. When a computer enters a dormant state, some or all software and hardware may cease to operate which can disrupt malicious activity.[1]Adversaries may abuse system utilities and configuration settings to maintain access by preventing machines from entering a state, such as standby, that can terminate malicious activity.[2][3]For example,powercfgcontrols all configurable power system settings on a Windows system and can be abused to prevent an infected host from locking or shutting down.[4]Adversaries may also extend system lock screen timeout settings.[5]Other relevant settings, such as disk and hibernate timeout, can be similarly abused to keep the infected machine running even if no user is active.[6]Aware that some malware cannot survive system reboots, adversaries may entirely delete files used to invoke system shut down or reboot.[7]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:32:24.069319",
    "subtechniques": []
  },
  {
    "technique_id": "T1542",
    "name": "Pre-OS Boot",
    "description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.[1]Adversaries may overwrite data in boot drivers or firmware such as BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) to persist on systems at a layer below the operating system. This can be particularly difficult to detect as malware at this level will not be detected by host software-based defenses.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:32:27.432725",
    "subtechniques": [
      {
        "id": "T1542.002",
        "name": "Component Firmware"
      }
    ]
  },
  {
    "technique_id": "T1542.002",
    "name": "Component Firmware",
    "description": "Adversaries may modify component firmware to persist on systems. Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar toSystem Firmwarebut conducted upon other system components/devices that may not have the same capability or level of integrity checking.Malicious component firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Pre-OS Boot",
    "parent_technique_id": "T1542",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:32:30.792580"
  },
  {
    "technique_id": "T1053",
    "name": "Scheduled Task/Job",
    "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically may require being a member of an admin or otherwise privileged group on the remote system.[1]Adversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges). Similar toSystem Binary Proxy Execution, adversaries have also abused task scheduling to potentially mask one-time execution under a trusted system process.[2]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:32:34.165410",
    "subtechniques": [
      {
        "id": "T1053.002",
        "name": "At"
      },
      {
        "id": "T1053.003",
        "name": "Cron"
      }
    ]
  },
  {
    "technique_id": "T1053.002",
    "name": "At",
    "description": "Adversaries may abuse theatutility to perform task scheduling for initial or recurring execution of malicious code. Theatutility exists as an executable within Windows, Linux, and macOS for scheduling tasks at a specified time and date. Although deprecated in favor ofScheduled Task'sschtasksin Windows environments, usingatrequires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group. In addition to explicitly running theatcommand, adversaries may also schedule a task withatby directly leveraging theWindows Management InstrumentationWin32_ScheduledJobWMI class.[1]On Linux and macOS,atmay be invoked by the superuser as well as any users added to theat.allowfile. If theat.allowfile does not exist, theat.denyfile is checked. Every username not listed inat.denyis allowed to invokeat. If theat.denyexists and is empty, global use ofatis permitted. If neither file exists (which is often the baseline) only the superuser is allowed to useat.[2]Adversaries may useatto execute programs at system startup or on a scheduled basis forPersistence.atcan also be abused to conduct remoteExecutionas part ofLateral Movementand/or to run a process under the context of a specified account (such as SYSTEM).In Linux environments, adversaries may also abuseatto break out of restricted environments by using a task to spawn an interactive system shell or to run system commands. Similarly,atmay also be used forPrivilege Escalationif the binary is allowed to run as superuser viasudo.[3]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Scheduled Task/Job",
    "parent_technique_id": "T1053",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:32:37.442362"
  },
  {
    "technique_id": "T1053.003",
    "name": "Cron",
    "description": "Adversaries may abuse thecronutility to perform task scheduling for initial or recurring execution of malicious code.[1]Thecronutility is a time-based job scheduler for Unix-like operating systems.  Thecrontabfile contains the schedule of cron entries to be run and the specified times for execution. Anycrontabfiles are stored in operating system-specific file paths.An adversary may usecronin Linux or Unix environments to execute programs at system startup or on a scheduled basis forPersistence. In ESXi environments, cron jobs must be created directly via the crontab file (e.g.,/var/spool/cron/crontabs/root).[2]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Scheduled Task/Job",
    "parent_technique_id": "T1053",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:32:40.832047"
  },
  {
    "technique_id": "T1505",
    "name": "Server Software Component",
    "description": "Adversaries may abuse legitimate extensible development features of servers to establish persistent access to systems. Enterprise server applications may include features that allow developers to write and install software or scripts to extend the functionality of the main application. Adversaries may install malicious components to extend and abuse server applications.[1]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:32:44.207117",
    "subtechniques": [
      {
        "id": "T1505.003",
        "name": "Web Shell"
      }
    ]
  },
  {
    "technique_id": "T1505.003",
    "name": "Web Shell",
    "description": "Adversaries may backdoor web servers with web shells to establish persistent access to systems. A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to access the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server.[1]In addition to a server-side script, a Web shell may have a client interface program that is used to talk to the Web server (e.g.China ChopperWeb shell client).[2]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Server Software Component",
    "parent_technique_id": "T1505",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:32:47.610556"
  },
  {
    "technique_id": "T1176",
    "name": "Software Extensions",
    "description": "Adversaries may abuse software extensions to establish persistent access to victim systems. Software extensions are modular components that enhance or customize the functionality of software applications, including web browsers, Integrated Development Environments (IDEs), and other platforms.[1][2]Extensions are typically installed via official marketplaces, app stores, or manually loaded by users, and they often inherit the permissions and access levels of the host application.Malicious extensions can be introduced through various methods, including social engineering, compromised marketplaces, or direct installation by users or by adversaries who have already gained access to a system. Malicious extensions can be named similarly or identically to benign extensions in marketplaces. Security mechanisms in extension marketplaces may be insufficient to detect malicious components, allowing adversaries to bypass automated scanners or exploit trust established during the installation process. Adversaries may also abuse benign extensions to achieve their objectives, such as using legitimate functionality to tunnel data or bypass security controls.The modular nature of extensions and their integration with host applications make them an attractive target for adversaries seeking to exploit trusted software ecosystems. Detection can be challenging due to the inherent trust placed in extensions during installation and their ability to blend into normal application workflows.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:32:50.994237",
    "subtechniques": [
      {
        "id": "T1176.001",
        "name": "Browser Extensions"
      },
      {
        "id": "T1176.002",
        "name": "IDE Extensions"
      }
    ]
  },
  {
    "technique_id": "T1176.001",
    "name": "Browser Extensions",
    "description": "Adversaries may abuse internet browser extensions to establish persistent access to victim systems. Browser extensions or plugins are small programs that can add functionality to and customize aspects of internet browsers. They can be installed directly via a local file or custom URL or through a browser's app store - an official online platform where users can browse, install, and manage extensions for a specific web browser. Extensions generally inherit the web browser's permissions previously granted.[1][2]Malicious extensions can be installed into a browser through malicious app store downloads masquerading as legitimate extensions, through social engineering, or by an adversary that has already compromised a system. Security can be limited on browser app stores, so it may not be difficult for malicious extensions to defeat automated scanners.[3]Depending on the browser, adversaries may also manipulate an extension's update url to install updates from an adversary-controlled server or manipulate the mobile configuration file to silently install additional extensions.Previous to macOS 11, adversaries could silently install browser extensions via the command line using theprofilestool to install malicious.mobileconfigfiles. In macOS 11+, the use of theprofilestool can no longer install configuration profiles; however,.mobileconfigfiles can be planted and installed with user interaction.[4]Once the extension is installed, it can browse to websites in the background, steal all information that a user enters into a browser (including credentials), and be used as an installer for a RAT for persistence.[5][6][7][8]There have also been instances of botnets using a persistent backdoor through malicious Chrome extensions forCommand and Control.[9][10]Adversaries may also use browser extensions to modify browser permissions and components, privacy settings, and other security controls forDefense Evasion.[11][12]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Software Extensions",
    "parent_technique_id": "T1176",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:32:54.371647"
  },
  {
    "technique_id": "T1176.002",
    "name": "IDE Extensions",
    "description": "Adversaries may abuse an integrated development environment (IDE) extension to establish persistent access to victim systems.[1]IDEs such as Visual Studio Code, IntelliJ IDEA, and Eclipse support extensions - software components that add features like code linting, auto-completion, task automation, or integration with tools like Git and Docker. A malicious extension can be installed through an extension marketplace (i.e.,Compromise Software Dependencies and Development Tools) or side-loaded directly into the IDE.[2][3]In addition to installing malicious extensions, adversaries may also leverage benign ones. For example, adversaries may establish persistent SSH tunnels via the use of the VSCode Remote SSH extension (i.e.,IDE Tunneling).Trust is typically established through the installation process; once installed, the malicious extension is run every time that the IDE is launched. The extension can then be used to execute arbitrary code, establish a backdoor, mine cryptocurrency, or exfiltrate data.[4]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Software Extensions",
    "parent_technique_id": "T1176",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:32:57.738060"
  },
  {
    "technique_id": "T1205",
    "name": "Traffic Signaling",
    "description": "Adversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e.Port Knocking), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software.Adversaries may also communicate with an already open port, but the service listening on that port will only respond to commands or trigger other malicious functionality if passed the appropriate magic value(s).The observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r[1], is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.On network devices, adversaries may use crafted packets to enableNetwork Device Authenticationfor standard services offered by the device such as telnet.  Such signaling may also be used to open a closed service port such as telnet, or to trigger module modification of malware implants on the device, adding, removing, or changing malicious capabilities.  Adversaries may use crafted packets to attempt to connect to one or more (open or closed) ports, but may also attempt to connect to a router interface, broadcast, and network address IP on the same port in order to achieve their goals and objectives.[2][3][4]To enable this traffic signaling on embedded devices, adversaries must first achieve and leveragePatch System Imagedue to the monolithic nature of the architecture.Adversaries may also use the Wake-on-LAN feature to turn on powered off systems. Wake-on-LAN is a hardware feature that allows a powered down system to be powered on, or woken up, by sending a magic packet to it. Once the system is powered on, it may become a target for lateral movement.[5][6]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:33:01.045962",
    "subtechniques": [
      {
        "id": "T1205.001",
        "name": "Port Knocking"
      },
      {
        "id": "T1205.002",
        "name": "Socket Filters"
      }
    ]
  },
  {
    "technique_id": "T1205.001",
    "name": "Port Knocking",
    "description": "Adversaries may use port knocking to hide open ports used for persistence or command and control. To enable a port, an adversary sends a series of attempted connections to a predefined sequence of closed ports. After the sequence is completed, opening a port is often accomplished by the host based firewall, but could also be implemented by custom software.This technique has been observed both for the dynamic opening of a listening port as well as the initiating of a connection to a listening server on a different system.The observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r[1], is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Traffic Signaling",
    "parent_technique_id": "T1205",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:33:04.321181"
  },
  {
    "technique_id": "T1205.002",
    "name": "Socket Filters",
    "description": "Adversaries may attach filters to a network socket to monitor then activate backdoors used for persistence or command and control. With elevated permissions, adversaries can use features such as thelibpcaplibrary to open sockets and install filters to allow or disallow certain types of data to come through the socket. The filter may apply to all traffic passing through the specified network interface (or every interface if not specified). When the network interface receives a packet matching the filter criteria, additional actions can be triggered on the host, such as activation of a reverse shell.To establish a connection, an adversary sends a crafted packet to the targeted host that matches the installed filter criteria.[1]Adversaries have used these socket filters to trigger the installation of implants, conduct ping backs, and to invoke command shells. Communication with these socket filters may also be used in conjunction withProtocol Tunneling.[2][3]Filters can be installed on any Unix-like platform withlibpcapinstalled or on Windows hosts usingWinpcap.  Adversaries may use eitherlibpcapwithpcap_setfilteror the standard library functionsetsockoptwithSO_ATTACH_FILTERoptions. Since the socket connection is not active until the packet is received, this behavior may be difficult to detect due to the lack of activity on a host, low CPU overhead, and limited visibility into raw socket usage.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Traffic Signaling",
    "parent_technique_id": "T1205",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:33:07.593852"
  },
  {
    "technique_id": "T1078",
    "name": "Valid Accounts",
    "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.[1]Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.In some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.[2]The overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.[3]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:33:10.873362",
    "subtechniques": [
      {
        "id": "T1078.001",
        "name": "Default Accounts"
      },
      {
        "id": "T1078.002",
        "name": "Domain Accounts"
      },
      {
        "id": "T1078.003",
        "name": "Local Accounts"
      }
    ]
  },
  {
    "technique_id": "T1078.001",
    "name": "Default Accounts",
    "description": "Adversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems. Default accounts also include default factory/provider set accounts on other types of systems, software, or devices, including the root user account in AWS, the root user account in ESXi, and the default service account in Kubernetes.[1][2][3]Default accounts are not limited to client machines; rather, they also include accounts that are preset for equipment such as network devices and computer applications, whether they are internal, open source, or commercial. Appliances that come preset with a username and password combination pose a serious threat to organizations that do not change it post installation, as they are easy targets for an adversary. Similarly, adversaries may also utilize publicly disclosed or stolenPrivate Keysor credential materials to legitimately connect to remote environments viaRemote Services.[4]Default accounts may be created on a system after initial setup by connecting or integrating it with another application. For example, when an ESXi server is connected to a vCenter server, a default privileged account calledvpxuseris created on the ESXi server. If a threat actor is able to compromise this accountâ€™s credentials (for example, viaExploitation for Credential Accesson the vCenter host), they will then have access to the ESXi server.[5][6]",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Valid Accounts",
    "parent_technique_id": "T1078",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:33:14.197247"
  },
  {
    "technique_id": "T1078.002",
    "name": "Domain Accounts",
    "description": "Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion.[1]Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.[2]Adversaries may compromise domain accounts, some with a high level of privileges, through various means such asOS Credential Dumpingor password reuse, allowing access to privileged resources of the domain.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Valid Accounts",
    "parent_technique_id": "T1078",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:33:17.537071"
  },
  {
    "technique_id": "T1078.003",
    "name": "Local Accounts",
    "description": "Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.Local Accounts may also be abused to elevate privileges and harvest credentials throughOS Credential Dumping. Password reuse may allow the abuse of local accounts across a set of machines on a network for the purposes of Privilege Escalation and Lateral Movement.",
    "tactic": "Persistence",
    "tactics": [
      "Persistence"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Valid Accounts",
    "parent_technique_id": "T1078",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:33:20.772273"
  },
  {
    "technique_id": "T1548",
    "name": "Abuse Elevation Control Mechanism",
    "description": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk.[1][2]An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.[3][4]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:33:24.129148",
    "subtechniques": [
      {
        "id": "T1548.001",
        "name": "Setuid and Setgid"
      },
      {
        "id": "T1548.003",
        "name": "Sudo and Sudo Caching"
      },
      {
        "id": "T1548.004",
        "name": "Elevated Execution with Prompt"
      },
      {
        "id": "T1548.006",
        "name": "TCC Manipulation"
      }
    ]
  },
  {
    "technique_id": "T1548.001",
    "name": "Setuid and Setgid",
    "description": "An adversary may abuse configurations where an application has the setuid or setgid bits set in order to get code running in a different (and possibly more privileged) userâ€™s context. On Linux or macOS, when the setuid or setgid bits are set for an application binary, the application will run with the privileges of the owning user or group respectively.[1]Normally an application is run in the current userâ€™s context, regardless of which user or group owns the application. However, there are instances where programs need to be executed in an elevated context to function properly, but the user running them may not have the specific required privileges.Instead of creating an entry in the sudoers file, which must be done by root, any user can specify the setuid or setgid flag to be set for their own applications (i.e.Linux and Mac File and Directory Permissions Modification). Thechmodcommand can set these bits with bitmasking,chmod 4777 [file]or via shorthand naming,chmod u+s [file]. This will enable the setuid bit. To enable the setgid bit,chmod 2775andchmod g+scan be used.Adversaries can use this mechanism on their own malware to make sure they're able to execute in elevated contexts in the future.[2]This abuse is often part of a \"shell escape\" or other actions to bypass an execution environment with restricted permissions.Alternatively, adversaries may choose to find and target vulnerable binaries with the setuid or setgid bits already enabled (i.e.File and Directory Discovery). The setuid and setguid bits are indicated with an \"s\" instead of an \"x\" when viewing a file's attributes vials -l. Thefindcommand can also be used to search for such files. For example,find / -perm +4000 2>/dev/nullcan be used to find files with setuid set andfind / -perm +2000 2>/dev/nullmay be used for setgid. Binaries that have these bits set may then be abused by adversaries.[3]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Abuse Elevation Control Mechanism",
    "parent_technique_id": "T1548",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:33:27.466823"
  },
  {
    "technique_id": "T1548.003",
    "name": "Sudo and Sudo Caching",
    "description": "Adversaries may perform sudo caching and/or use the sudoers file to elevate privileges. Adversaries may do this to execute commands as other users or spawn processes with higher privileges.Within Linux and MacOS systems, sudo (sometimes referred to as \"superuser do\") allows users to perform commands from terminals with elevated privileges and to control who can perform these commands on the system. Thesudocommand \"allows a system administrator to delegate authority to give certain users (or groups of users) the ability to run some (or all) commands as root or another user while providing an audit trail of the commands and their arguments.\"[1]Since sudo was made for the system administrator, it has some useful configuration features such as atimestamp_timeout, which is the amount of time in minutes between instances ofsudobefore it will re-prompt for a password. This is becausesudohas the ability to cache credentials for a period of time. Sudo creates (or touches) a file at/var/db/sudowith a timestamp of when sudo was last run to determine this timeout. Additionally, there is atty_ticketsvariable that treats each new tty (terminal session) in isolation. This means that, for example, the sudo timeout of one tty will not affect another tty (you will have to type the password again).The sudoers file,/etc/sudoers, describes which users can run which commands and from which terminals. This also describes which commands users can run as other users or groups. This provides the principle of least privilege such that users are running in their lowest possible permissions for most of the time and only elevate to other users or permissions as needed, typically by prompting for a password. However, the sudoers file can also specify when to not prompt users for passwords with a line likeuser1 ALL=(ALL) NOPASSWD: ALL.[2]Elevated privileges are required to edit this file though.Adversaries can also abuse poor configurations of these mechanisms to escalate privileges without needing the user's password. For example,/var/db/sudo's timestamp can be monitored to see if it falls within thetimestamp_timeoutrange. If it does, then malware can execute sudo commands without needing to supply the user's password. Additional, iftty_ticketsis disabled, adversaries can do this from any tty for that user.In the wild, malware has disabledtty_ticketsto potentially make scripting easier by issuingecho \\'Defaults !tty_tickets\\' >> /etc/sudoers.[3]In order for this change to be reflected, the malware also issuedkillall Terminal. As of macOS Sierra, the sudoers file hastty_ticketsenabled by default.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Abuse Elevation Control Mechanism",
    "parent_technique_id": "T1548",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:33:30.813510"
  },
  {
    "technique_id": "T1548.004",
    "name": "Elevated Execution with Prompt",
    "description": "Adversaries may leverage theAuthorizationExecuteWithPrivilegesAPI to escalate privileges by prompting the user for credentials.[1]The purpose of this API is to give application developers an easy way to perform operations with root privileges, such as for application installation or updating. This API does not validate that the program requesting root privileges comes from a reputable source or has been maliciously modified.Although this API is deprecated, it still fully functions in the latest releases of macOS. When calling this API, the user will be prompted to enter their credentials but no checks on the origin or integrity of the program are made. The program calling the API may also load world writable files which can be modified to perform malicious behavior with elevated privileges.Adversaries may abuseAuthorizationExecuteWithPrivilegesto obtain root privileges in order to install malicious software on victims and install persistence mechanisms.[2][3][4]This technique may be combined withMasqueradingto trick the user into granting escalated privileges to malicious code.[2][3]This technique has also been shown to work by modifying legitimate programs present on the machine that make use of this API.[2]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Abuse Elevation Control Mechanism",
    "parent_technique_id": "T1548",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:33:34.172991"
  },
  {
    "technique_id": "T1548.006",
    "name": "TCC Manipulation",
    "description": "Adversaries can manipulate or abuse the Transparency, Consent, & Control (TCC) service or database to grant malicious executables elevated permissions. TCC is a Privacy & Security macOS control mechanism used to determine if the running process has permission to access the data or services protected by TCC, such as screen sharing, camera, microphone, or Full Disk Access (FDA).When an application requests to access data or a service protected by TCC, the TCC daemon (tccd) checks the TCC database, located at/Library/Application Support/com.apple.TCC/TCC.db(and~/equivalent), and an overwrites file (if connected to an MDM) for existing permissions. If permissions do not exist, then the user is prompted to grant permission. Once permissions are granted, the database stores the application's permissions and will not prompt the user again unless reset. For example, when a web browser requests permissions to the user's webcam, once granted the web browser may not explicitly prompt the user again.[1]Adversaries may access restricted data or services protected by TCC through abusing applications previously granted permissions throughProcess Injectionor executing a malicious binary using another application. For example, adversaries can use Finder, a macOS native app with FDA permissions, to execute a maliciousAppleScript. When executing under the Finder App, the maliciousAppleScriptinherits access to all files on the system without requiring a user prompt. When System Integrity Protection (SIP) is disabled, TCC protections are also disabled. For a system without SIP enabled, adversaries can manipulate the TCC database to add permissions to their malicious executable through loading an adversary controlled TCC database using environment variables andLaunchctl.[2][3]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Abuse Elevation Control Mechanism",
    "parent_technique_id": "T1548",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:33:37.526299"
  },
  {
    "technique_id": "T1098",
    "name": "Account Manipulation",
    "description": "Adversaries may manipulate accounts to maintain and/or elevate access to victim systems. Account manipulation may consist of any action that preserves or modifies adversary access to a compromised account, such as modifying credentials or permission groups.[1]These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials.In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain. However, account manipulation may also lead to privilege escalation where modifications grant access to additional roles, permissions, or higher-privilegedValid Accounts.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:33:40.768247",
    "subtechniques": [
      {
        "id": "T1098.004",
        "name": "SSH Authorized Keys"
      },
      {
        "id": "T1098.007",
        "name": "Additional Local or Domain Groups"
      }
    ]
  },
  {
    "technique_id": "T1098.004",
    "name": "SSH Authorized Keys",
    "description": "Adversaries may modify the SSHauthorized_keysfile to maintain persistence on a victim host. Linux distributions, macOS, and ESXi hypervisors commonly use key-based authentication to secure the authentication process of SSH sessions for remote management. Theauthorized_keysfile in SSH specifies the SSH keys that can be used for logging into the user account for which the file is configured. This file is usually found in the user's home directory under<user-home>/.ssh/authorized_keys(or, on ESXi,/etc/ssh/keys-<username>/authorized_keys).[1]Users may edit the systemâ€™s SSH config file to modify the directivesPubkeyAuthenticationandRSAAuthenticationto the valueyesto ensure public key and RSA authentication are enabled, as well as modify the directivePermitRootLoginto the valueyesto enable root authentication via SSH.[2]The SSH config file is usually located under/etc/ssh/sshd_config.Adversaries may modify SSHauthorized_keysfiles directly with scripts or shell commands to add their own adversary-supplied public keys. In cloud environments, adversaries may be able to modify the SSH authorized_keys file of a particular virtual machine via the command line interface or rest API. For example, by using the Google Cloud CLIâ€™s \"add-metadata\" command an adversary may add SSH keys to a user account.[3][4]Similarly, in Azure, an adversary may update the authorized_keys file of a virtual machine via a PATCH request to the API.[5]This ensures that an adversary possessing the corresponding private key may log in as an existing user via SSH.[6][7]It may also lead to privilege escalation where the virtual machine or instance has distinct permissions from the requesting user.Where authorized_keys files are modified via cloud APIs or command line interfaces, an adversary may achieve privilege escalation on the target virtual machine if they add a key to a higher-privileged user.SSH keys can also be added to accounts on network devices, such as with theip ssh pubkey-chainNetwork Device CLIcommand.[8]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Account Manipulation",
    "parent_technique_id": "T1098",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:33:44.134348"
  },
  {
    "technique_id": "T1098.007",
    "name": "Additional Local or Domain Groups",
    "description": "An adversary may add additional local or domain groups to an adversary-controlled account to maintain persistent access to a system or domain.On Windows, accounts may use thenet localgroupandnet groupcommands to add existing users to local and domain groups.[1][2]On Linux, adversaries may use theusermodcommand for the same purpose.[3]For example, accounts may be added to the local administrators group on Windows devices to maintain elevated privileges. They may also be added to the Remote Desktop Users group, which allows them to leverageRemote Desktop Protocolto log into the endpoints in the future.[4]On Linux, accounts may be added to the sudoers group, allowing them to persistently leverageSudo and Sudo Cachingfor elevated privileges.In Windows environments, machine accounts may also be added to domain groups. This allows the local SYSTEM account to gain privileges on the domain.[5]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Account Manipulation",
    "parent_technique_id": "T1098",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:33:47.494998"
  },
  {
    "technique_id": "T1547",
    "name": "Boot or Logon Autostart Execution",
    "description": "Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon.[1][2][3][4][5]These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel.Since some boot or logon autostart programs run with higher privileges, an adversary may leverage these to elevate privileges.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:33:50.736585",
    "subtechniques": [
      {
        "id": "T1547.006",
        "name": "Kernel Modules and Extensions"
      },
      {
        "id": "T1547.007",
        "name": "Re-opened Applications"
      },
      {
        "id": "T1547.015",
        "name": "Login Items"
      }
    ]
  },
  {
    "technique_id": "T1547.006",
    "name": "Kernel Modules and Extensions",
    "description": "Adversaries may modify the kernel to automatically execute programs on system boot. Loadable Kernel Modules (LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system.[1]When used maliciously, LKMs can be a type of kernel-modeRootkitthat run with the highest operating system privilege (Ring 0).[2]Common features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors, and enabling root access to non-privileged users.[3]Kernel extensions, also called kext, are used in macOS to load functionality onto a system similar to LKMs for Linux. Since the kernel is responsible for enforcing security and the kernel extensions run as apart of the kernel, kexts are not governed by macOS security policies. Kexts are loaded and unloaded throughkextloadandkextunloadcommands. Kexts need to be signed with a developer ID that is granted privileges by Apple allowing it to sign Kernel extensions. Developers without these privileges may still sign kexts but they will not load unless SIP is disabled. If SIP is enabled, the kext signature is verified before being added to the AuxKC.[4]Since macOS Catalina 10.15, kernel extensions have been deprecated in favor of System Extensions. However, kexts are still allowed as \"Legacy System Extensions\" since there is no System Extension for Kernel Programming Interfaces.[5]Adversaries can use LKMs and kexts to conductPersistenceand/orPrivilege Escalationon a system. Examples have been found in the wild, and there are some relevant open source projects as well.[6][7][8][9][10][11][12][13]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Boot or Logon Autostart Execution",
    "parent_technique_id": "T1547",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:33:54.002740"
  },
  {
    "technique_id": "T1547.007",
    "name": "Re-opened Applications",
    "description": "Adversaries may modify plist files to automatically run an application when a user logs in. When a user logs out or restarts via the macOS Graphical User Interface (GUI), a prompt is provided to the user with a checkbox to \"Reopen windows when logging back in\".[1]When selected, all applications currently open are added to a property list file namedcom.apple.loginwindow.[UUID].plistwithin the~/Library/Preferences/ByHostdirectory.[2][3]Applications listed in this file are automatically reopened upon the userâ€™s next logon.Adversaries can establishPersistenceby adding a malicious application path to thecom.apple.loginwindow.[UUID].plistfile to execute payloads when a user logs in.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Boot or Logon Autostart Execution",
    "parent_technique_id": "T1547",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:33:57.374672"
  },
  {
    "technique_id": "T1547.015",
    "name": "Login Items",
    "description": "Adversaries may add login items to execute upon user login to gain persistence or escalate privileges. Login items are applications, documents, folders, or server connections that are automatically launched when a user logs in.[1]Login items can be added via a shared file list or Service Management Framework.[2]Shared file list login items can be set using scripting languages such asAppleScript, whereas the Service Management Framework uses the API callSMLoginItemSetEnabled.Login items installed using the Service Management Framework leveragelaunchd, are not visible in the System Preferences, and can only be removed by the application that created them.[2][3]Login items created using a shared file list are visible in System Preferences, can hide the application when it launches, and are executed through LaunchServices, not launchd, to open applications, documents, or URLs without using Finder.[4]Users and applications use login items to configure their user environment to launch commonly used services or applications, such as email, chat, and music applications.Adversaries can utilizeAppleScriptandNative APIcalls to create a login item to spawn malicious executables.[5]Prior to version 10.5 on macOS, adversaries can add login items by usingAppleScriptto send an Apple events to the \"System Events\" process, which has an AppleScript dictionary for manipulating login items.[6]Adversaries can use a command such astell application \"System Events\" to make login item at end with properties /path/to/executable.[7][8][9]This command adds the path of the malicious executable to the login item file list located in~/Library/Application Support/com.apple.backgroundtaskmanagementagent/backgrounditems.btm.[7]Adversaries can also use login items to launch executables that can be used to control the victim system remotely or as a means to gain privilege escalation by prompting for user credentials.[10][11][12]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Boot or Logon Autostart Execution",
    "parent_technique_id": "T1547",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:34:00.704994"
  },
  {
    "technique_id": "T1037",
    "name": "Boot or Logon Initialization Scripts",
    "description": "Adversaries may use scripts automatically executed at boot or logon initialization to establish persistence.[1][2]Initialization scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server. These scripts can vary based on operating system and whether applied locally or remotely.Adversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.An adversary may also be able to escalate their privileges since some boot or logon initialization scripts run with higher privileges.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:34:03.966677",
    "subtechniques": [
      {
        "id": "T1037.002",
        "name": "Login Hook"
      },
      {
        "id": "T1037.004",
        "name": "RC Scripts"
      },
      {
        "id": "T1037.005",
        "name": "Startup Items"
      }
    ]
  },
  {
    "technique_id": "T1037.002",
    "name": "Login Hook",
    "description": "Adversaries may use a Login Hook to establish persistence executed upon user logon. A login hook is a plist file that points to a specific script to execute with root privileges upon user logon. The plist file is located in the/Library/Preferences/com.apple.loginwindow.plistfile and can be modified using thedefaultscommand-line utility. This behavior is the same for logout hooks where a script can be executed upon user logout. All hooks require administrator permissions to modify or create hooks.[1][2]Adversaries can add or insert a path to a malicious script in thecom.apple.loginwindow.plistfile, using theLoginHookorLogoutHookkey-value pair. The malicious script is executed upon the next user login. If a login hook already exists, adversaries can add additional commands to an existing login hook. There can be only one login and logout hook on a system at a time.[3][4]Note:Login hooks were deprecated in 10.11 version of macOS in favor ofLaunch DaemonandLaunch Agent",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Boot or Logon Initialization Scripts",
    "parent_technique_id": "T1037",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:34:07.290625"
  },
  {
    "technique_id": "T1037.004",
    "name": "RC Scripts",
    "description": "Adversaries may establish persistence by modifying RC scripts, which are executed during a Unix-like systemâ€™s startup. These files allow system administrators to map and start custom services at startup for different run levels. RC scripts require root privileges to modify.Adversaries may establish persistence by adding a malicious binary path or shell commands torc.local,rc.common, and other RC scripts specific to the Unix-like distribution.[1][2]Upon reboot, the system executes the script's contents as root, resulting in persistence.Adversary abuse of RC scripts is especially effective for lightweight Unix-like distributions using the root user as default, such as ESXi hypervisors, IoT, or embedded systems.[3]As ESXi servers store most system files in memory and therefore discard changes on shutdown, leveraging/etc/rc.local.d/local.shis one of the few mechanisms for enabling persistence across reboots.[4]Several Unix-like systems have moved to Systemd and deprecated the use of RC scripts. This is now a deprecated mechanism in macOS in favor ofLaunchd.[5][6]This technique can be used on Mac OS X Panther v10.3 and earlier versions which still execute the RC scripts.[7]To maintain backwards compatibility some systems, such as Ubuntu, will execute the RC scripts if they exist with the correct file permissions.[8]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Boot or Logon Initialization Scripts",
    "parent_technique_id": "T1037",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:34:10.611922"
  },
  {
    "technique_id": "T1037.005",
    "name": "Startup Items",
    "description": "Adversaries may use startup items automatically executed at boot initialization to establish persistence. Startup items execute during the final phase of the boot process and contain shell scripts or other executable files along with configuration information used by the system to determine the execution order for all startup items.[1]This is technically a deprecated technology (superseded byLaunch Daemon), and thus the appropriate folder,/Library/StartupItemsisnâ€™t guaranteed to exist on the system by default, but does appear to exist by default on macOS Sierra. A startup item is a directory whose executable and configuration property list (plist),StartupParameters.plist, reside in the top-level directory.An adversary can create the appropriate folders/files in the StartupItems directory to register their own persistence mechanism.[2]Additionally, since StartupItems run during the bootup phase of macOS, they will run as the elevated root user.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Boot or Logon Initialization Scripts",
    "parent_technique_id": "T1037",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:34:13.957672"
  },
  {
    "technique_id": "T1543",
    "name": "Create or Modify System Process",
    "description": "Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services.[1]On macOS, launchd processes known asLaunch DaemonandLaunch Agentare run to finish system initialization and load user specific parameters.[2]Adversaries may install new services, daemons, or agents that can be configured to execute at startup or a repeatable interval in order to establish persistence. Similarly, adversaries may modify existing services, daemons, or agents to achieve the same effect.Services, daemons, or agents may be created with administrator privileges but executed under root/SYSTEM privileges. Adversaries may leverage this functionality to create or modify system processes in order to escalate privileges.[3]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:34:17.290643",
    "subtechniques": [
      {
        "id": "T1543.001",
        "name": "Launch Agent"
      },
      {
        "id": "T1543.004",
        "name": "Launch Daemon"
      }
    ]
  },
  {
    "technique_id": "T1543.001",
    "name": "Launch Agent",
    "description": "Adversaries may create or modify launch agents to repeatedly execute malicious payloads as part of persistence. When a user logs in, a per-user launchd process is started which loads the parameters for each launch-on-demand user agent from the property list (.plist) file found in/System/Library/LaunchAgents,/Library/LaunchAgents, and~/Library/LaunchAgents.[1][2][3]Property list files use theLabel,ProgramArguments, andRunAtLoadkeys to identify the Launch Agent's name, executable location, and execution time.[4]Launch Agents are often installed to perform updates to programs, launch user specified programs at login, or to conduct other developer tasks.Launch Agents can also be executed using theLaunchctlcommand.Adversaries may install a new Launch Agent that executes at login by placing a .plist file into the appropriate folders with theRunAtLoadorKeepAlivekeys set totrue.[5][6]The Launch Agent name may be disguised by using a name from the related operating system or benign software. Launch Agents are created with user level privileges and execute with user level permissions.[7][8]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Create or Modify System Process",
    "parent_technique_id": "T1543",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:34:20.630406"
  },
  {
    "technique_id": "T1543.004",
    "name": "Launch Daemon",
    "description": "Adversaries may create or modify Launch Daemons to execute malicious payloads as part of persistence. Launch Daemons are plist files used to interact with Launchd, the service management framework used by macOS. Launch Daemons require elevated privileges to install, are executed for every user on a system prior to login, and run in the background without the need for user interaction. During the macOS initialization startup, the launchd process loads the parameters for launch-on-demand system-level daemons from plist files found in/System/Library/LaunchDaemons/and/Library/LaunchDaemons/. Required Launch Daemons parameters include aLabelto identify the task,Programto provide a path to the executable, andRunAtLoadto specify when the task is run. Launch Daemons are often used to provide access to shared resources, updates to software, or conduct automation tasks.[1][2][3]Adversaries may install a Launch Daemon configured to execute at startup by using theRunAtLoadparameter set totrueand theProgramparameter set to the malicious executable path. The daemon name may be disguised by using a name from a related operating system or benign software (i.e.Masquerading). When the Launch Daemon is executed, the program inherits administrative permissions.[4][5]Additionally, system configuration changes (such as the installation of third party package managing software) may cause folders such asusr/local/binto become globally writeable. So, it is possible for poor configurations to allow an adversary to modify executables referenced by current Launch Daemon's plist files.[6][7]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Create or Modify System Process",
    "parent_technique_id": "T1543",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:34:23.993331"
  },
  {
    "technique_id": "T1546",
    "name": "Event Triggered Execution",
    "description": "Adversaries may establish persistence and/or elevate privileges using system mechanisms that trigger execution based on specific events. Various operating systems have means to monitor and subscribe to events such as logons or other user activity such as running specific applications/binaries. Cloud environments may also support various functions and services that monitor and can be invoked in response to specific cloud events.[1][2][3]Adversaries may abuse these mechanisms as a means of maintaining persistent access to a victim via repeatedly executing malicious code. After gaining access to a victim system, adversaries may create/modify event triggers to point to malicious content that will be executed whenever the event trigger is invoked.[4][5][6]Since the execution can be proxied by an account with higher permissions, such as SYSTEM or service accounts, an adversary may be able to abuse these triggered execution mechanisms to escalate their privileges.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:34:27.226245",
    "subtechniques": [
      {
        "id": "T1546.004",
        "name": "Unix Shell Configuration Modification"
      },
      {
        "id": "T1546.005",
        "name": "Trap"
      },
      {
        "id": "T1546.006",
        "name": "LC_LOAD_DYLIB Addition"
      },
      {
        "id": "T1546.014",
        "name": "Emond"
      },
      {
        "id": "T1546.016",
        "name": "Installer Packages"
      }
    ]
  },
  {
    "technique_id": "T1546.004",
    "name": "Unix Shell Configuration Modification",
    "description": "Adversaries may establish persistence through executing malicious commands triggered by a userâ€™s shell. UserUnix Shells execute several configuration scripts at different points throughout the session based on events. For example, when a user opens a command-line interface or remotely logs in (such as via SSH) a login shell is initiated. The login shell executes scripts from the system (/etc) and the userâ€™s home directory (~/) to configure the environment. All login shells on a system use /etc/profile when initiated. These configuration scripts run at the permission level of their directory and are often used to set environment variables, create aliases, and customize the userâ€™s environment. When the shell exits or terminates, additional shell scripts are executed to ensure the shell exits appropriately.Adversaries may attempt to establish persistence by inserting commands into scripts automatically executed by shells. Using bash as an example, the default shell for most GNU/Linux systems, adversaries may add commands that launch malicious binaries into the/etc/profileand/etc/profile.dfiles.[1][2]These files typically require root permissions to modify and are executed each time any shell on a system launches. For user level permissions, adversaries can insert malicious commands into~/.bash_profile,~/.bash_login, or~/.profilewhich are sourced when a user opens a command-line interface or connects remotely.[3][4]Since the system only executes the first existing file in the listed order, adversaries have used~/.bash_profileto ensure execution. Adversaries have also leveraged the~/.bashrcfile which is additionally executed if the connection is established remotely or an additional interactive shell is opened, such as a new tab in the command-line interface.[5][3][6][7]Some malware targets the termination of a program to trigger execution, adversaries can use the~/.bash_logoutfile to execute malicious commands at the end of a session.For macOS, the functionality of this technique is similar but may leverage zsh, the default shell for macOS 10.15+. When the Terminal.app is opened, the application launches a zsh login shell and a zsh interactive shell. The login shell configures the system environment using/etc/profile,/etc/zshenv,/etc/zprofile, and/etc/zlogin.[8][9][10][11]The login shell then configures the user environment with~/.zprofileand~/.zlogin. The interactive shell uses the~/.zshrcto configure the user environment. Upon exiting,/etc/zlogoutand~/.zlogoutare executed. For legacy programs, macOS executes/etc/bashrcon startup.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Event Triggered Execution",
    "parent_technique_id": "T1546",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:34:30.563175"
  },
  {
    "technique_id": "T1546.005",
    "name": "Trap",
    "description": "Adversaries may establish persistence by executing malicious content triggered by an interrupt signal. Thetrapcommand allows programs and shells to specify commands that will be executed upon receiving interrupt signals. A common situation is a script allowing for graceful termination and handling of common keyboard interrupts likectrl+candctrl+d.Adversaries can use this to register code to be executed when the shell encounters specific interrupts as a persistence mechanism. Trap commands are of the following formattrap 'command list' signalswhere \"command list\" will be executed when \"signals\" are received.[1][2]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Event Triggered Execution",
    "parent_technique_id": "T1546",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:34:33.915301"
  },
  {
    "technique_id": "T1546.006",
    "name": "LC_LOAD_DYLIB Addition",
    "description": "Adversaries may establish persistence by executing malicious content triggered by the execution of tainted binaries. Mach-O binaries have a series of headers that are used to perform certain operations when a binary is loaded. The LC_LOAD_DYLIB header in a Mach-O binary tells macOS and OS X which dynamic libraries (dylibs) to load during execution time. These can be added ad-hoc to the compiled binary as long as adjustments are made to the rest of the fields and dependencies.[1]There are tools available to perform these changes.Adversaries may modify Mach-O binary headers to load and execute malicious dylibs every time the binary is executed. Although any changes will invalidate digital signatures on binaries because the binary is being modified, this can be remediated by simply removing the LC_CODE_SIGNATURE command from the binary so that the signature isnâ€™t checked at load time.[2]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Event Triggered Execution",
    "parent_technique_id": "T1546",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:34:37.299814"
  },
  {
    "technique_id": "T1546.014",
    "name": "Emond",
    "description": "Adversaries may gain persistence and elevate privileges by executing malicious content triggered by the Event Monitor Daemon (emond). Emond is aLaunch Daemonthat accepts events from various services, runs them through a simple rules engine, and takes action. The emond binary at/sbin/emondwill load any rules from the/etc/emond.d/rules/directory and take action once an explicitly defined event takes place.The rule files are in the plist format and define the name, event type, and action to take. Some examples of event types include system startup and user authentication. Examples of actions are to run a system command or send an email. The emond service will not launch if there is no file present in the QueueDirectories path/private/var/db/emondClients, specified in theLaunch Daemonconfiguration file at/System/Library/LaunchDaemons/com.apple.emond.plist.[1][2][3]Adversaries may abuse this service by writing a rule to execute commands when a defined event occurs, such as system start up or user authentication.[1][2][3]Adversaries may also be able to escalate privileges from administrator to root as the emond service is executed with root privileges by theLaunch Daemonservice.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Event Triggered Execution",
    "parent_technique_id": "T1546",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:34:40.658493"
  },
  {
    "technique_id": "T1546.016",
    "name": "Installer Packages",
    "description": "Adversaries may establish persistence and elevate privileges by using an installer to trigger the execution of malicious content. Installer packages are OS specific and contain the resources an operating system needs to install applications on a system. Installer packages can include scripts that run prior to installation as well as after installation is complete. Installer scripts may inherit elevated permissions when executed. Developers often use these scripts to prepare the environment for installation, check requirements, download dependencies, and remove files after installation.[1]Using legitimate applications, adversaries have distributed applications with modified installer scripts to execute malicious content. When a user installs the application, they may be required to grant administrative permissions to allow the installation. At the end of the installation process of the legitimate application, content such as macOSpostinstallscripts can be executed with the inherited elevated permissions. Adversaries can use these scripts to execute a malicious executable or install other malicious components (such as aLaunch Daemon) with the elevated permissions.[2][3][4][5]Depending on the distribution, Linux versions of package installer scripts are sometimes called maintainer scripts or post installation scripts. These scripts can includepreinst,postinst,prerm,postrmscripts and run as root when executed.For Windows, the Microsoft Installer services uses.msifiles to manage the installing, updating, and uninstalling of applications. These installation routines may also include instructions to perform additional actions that may be abused by adversaries.[6]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Event Triggered Execution",
    "parent_technique_id": "T1546",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:34:43.947750"
  },
  {
    "technique_id": "T1068",
    "name": "Exploitation for Privilege Escalation",
    "description": "Adversaries may exploit software vulnerabilities in an attempt to elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.When initially gaining access to a system, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and software commonly running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user level permissions to SYSTEM or root permissions depending on the component that is vulnerable. This could also enable an adversary to move from a virtualized environment, such as within a virtual machine or container, onto the underlying host. This may be a necessary step for an adversary compromising an endpoint system that has been properly configured and limits other privilege escalation methods.Adversaries may bring a signed vulnerable driver onto a compromised machine so that they can exploit the vulnerability to execute code in kernel mode. This process is sometimes referred to as Bring Your Own Vulnerable Driver (BYOVD).[1][2]Adversaries may include the vulnerable driver with files delivered during Initial Access or download it to a compromised system viaIngress Tool TransferorLateral Tool Transfer.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:34:47.344728",
    "subtechniques": []
  },
  {
    "technique_id": "T1574",
    "name": "Hijack Execution Flow",
    "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.There are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:34:50.619938",
    "subtechniques": [
      {
        "id": "T1574.004",
        "name": "Dylib Hijacking"
      },
      {
        "id": "T1574.006",
        "name": "Dynamic Linker Hijacking"
      },
      {
        "id": "T1574.007",
        "name": "Path Interception by PATH Environment Variable"
      }
    ]
  },
  {
    "technique_id": "T1574.004",
    "name": "Dylib Hijacking",
    "description": "Adversaries may execute their own payloads by placing a malicious dynamic library (dylib) with an expected name in a path a victim application searches at runtime. The dynamic loader will try to find the dylibs based on the sequential order of the search paths. Paths to dylibs may be prefixed with@rpath, which allows developers to use relative paths to specify an array of search paths used at runtime based on the location of the executable.  Additionally, if weak linking is used, such as theLC_LOAD_WEAK_DYLIBfunction, an application will still execute even if an expected dylib is not present. Weak linking enables developers to run an application on multiple macOS versions as new APIs are added.Adversaries may gain execution by inserting malicious dylibs with the name of the missing dylib in the identified path.[1][2][3][4]Dylibs are loaded into an application's address space allowing the malicious dylib to inherit the application's privilege level and resources. Based on the application, this could result in privilege escalation and uninhibited network access. This method may also evade detection from security products since the execution is masked under a legitimate process.[5][6][7]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hijack Execution Flow",
    "parent_technique_id": "T1574",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:34:53.961948"
  },
  {
    "technique_id": "T1574.006",
    "name": "Dynamic Linker Hijacking",
    "description": "Adversaries may execute their own malicious payloads by hijacking environment variables the dynamic linker uses to load shared libraries. During the execution preparation phase of a program, the dynamic linker loads specified absolute paths of shared libraries from various environment variables and files, such asLD_PRELOADon Linux orDYLD_INSERT_LIBRARIESon macOS.[1][2][3]Libraries specified in environment variables are loaded first, taking precedence over system libraries with the same function name.[4][5][6]Each platform's linker uses an extensive list of environment variables at different points in execution. These variables are often used by developers to debug binaries without needing to recompile, deconflict mapped symbols, and implement custom functions in the original library.[7]Hijacking dynamic linker variables may grant access to the victim process's memory, system/network resources, and possibly elevated privileges. On Linux, adversaries may setLD_PRELOADto point to malicious libraries that match the name of legitimate libraries which are requested by a victim program, causing the operating system to load the adversary's malicious code upon execution of the victim program. For example, adversaries have usedLD_PRELOADto inject a malicious library into every descendant process of thesshddaemon, resulting in execution under a legitimate process. When the executing sub-process calls theexecvefunction, for example, the malicious libraryâ€™sexecvefunction is executed rather than the system functionexecvecontained in the system library on disk. This allows adversaries toHide Artifactsfrom detection, as hooking system functions such asexecveandreaddirenables malware to scrub its own artifacts from the results of commands such asls,ldd,iptables, anddmesg.[8][9][10]Hijacking dynamic linker variables may grant access to the victim process's memory, system/network resources, and possibly elevated privileges.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hijack Execution Flow",
    "parent_technique_id": "T1574",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:34:57.341550"
  },
  {
    "technique_id": "T1574.007",
    "name": "Path Interception by PATH Environment Variable",
    "description": "Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. The PATH environment variable contains a list of directories (User and System) that the OS searches sequentially through in search of the binary that was called from a script or the command line.Adversaries can place a malicious program in an earlier entry in the list of directories stored in the PATH environment variable, resulting in the operating system executing the malicious binary rather than the legitimate binary when it searches sequentially through that PATH listing.For example, on Windows if an adversary places a malicious program named \"net.exe\" inC:\\example path, which by default precedesC:\\Windows\\system32\\net.exein the PATH environment variable, when \"net\" is executed from the command-line theC:\\example pathwill be called instead of the system's legitimate executable atC:\\Windows\\system32\\net.exe. Some methods of executing a program rely on the PATH environment variable to determine the locations that are searched when the path for the program is not given, such as executing programs from aCommand and Scripting Interpreter.[1]Adversaries may also directly modify the $PATH variable specifying the directories to be searched.  An adversary can modify the$PATHvariable to point to a directory they have write access. When a program using the $PATH variable is called, the OS searches the specified directory and executes the malicious binary. On macOS, this can also be performed through modifying the $HOME variable. These variables can be modified using the command-line, launchctl,Unix Shell Configuration Modification, or modifying the/etc/paths.dfolder contents.[2][3][4]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hijack Execution Flow",
    "parent_technique_id": "T1574",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:35:00.597241"
  },
  {
    "technique_id": "T1055",
    "name": "Process Injection",
    "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process.There are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific.More sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:35:04.034209",
    "subtechniques": []
  },
  {
    "technique_id": "T1053",
    "name": "Scheduled Task/Job",
    "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically may require being a member of an admin or otherwise privileged group on the remote system.[1]Adversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges). Similar toSystem Binary Proxy Execution, adversaries have also abused task scheduling to potentially mask one-time execution under a trusted system process.[2]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:35:07.313000",
    "subtechniques": [
      {
        "id": "T1053.002",
        "name": "At"
      },
      {
        "id": "T1053.003",
        "name": "Cron"
      }
    ]
  },
  {
    "technique_id": "T1053.002",
    "name": "At",
    "description": "Adversaries may abuse theatutility to perform task scheduling for initial or recurring execution of malicious code. Theatutility exists as an executable within Windows, Linux, and macOS for scheduling tasks at a specified time and date. Although deprecated in favor ofScheduled Task'sschtasksin Windows environments, usingatrequires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group. In addition to explicitly running theatcommand, adversaries may also schedule a task withatby directly leveraging theWindows Management InstrumentationWin32_ScheduledJobWMI class.[1]On Linux and macOS,atmay be invoked by the superuser as well as any users added to theat.allowfile. If theat.allowfile does not exist, theat.denyfile is checked. Every username not listed inat.denyis allowed to invokeat. If theat.denyexists and is empty, global use ofatis permitted. If neither file exists (which is often the baseline) only the superuser is allowed to useat.[2]Adversaries may useatto execute programs at system startup or on a scheduled basis forPersistence.atcan also be abused to conduct remoteExecutionas part ofLateral Movementand/or to run a process under the context of a specified account (such as SYSTEM).In Linux environments, adversaries may also abuseatto break out of restricted environments by using a task to spawn an interactive system shell or to run system commands. Similarly,atmay also be used forPrivilege Escalationif the binary is allowed to run as superuser viasudo.[3]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Scheduled Task/Job",
    "parent_technique_id": "T1053",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:35:10.570406"
  },
  {
    "technique_id": "T1053.003",
    "name": "Cron",
    "description": "Adversaries may abuse thecronutility to perform task scheduling for initial or recurring execution of malicious code.[1]Thecronutility is a time-based job scheduler for Unix-like operating systems.  Thecrontabfile contains the schedule of cron entries to be run and the specified times for execution. Anycrontabfiles are stored in operating system-specific file paths.An adversary may usecronin Linux or Unix environments to execute programs at system startup or on a scheduled basis forPersistence. In ESXi environments, cron jobs must be created directly via the crontab file (e.g.,/var/spool/cron/crontabs/root).[2]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Scheduled Task/Job",
    "parent_technique_id": "T1053",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:35:13.853218"
  },
  {
    "technique_id": "T1078",
    "name": "Valid Accounts",
    "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.[1]Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.In some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.[2]The overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.[3]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:35:17.167957",
    "subtechniques": [
      {
        "id": "T1078.001",
        "name": "Default Accounts"
      },
      {
        "id": "T1078.002",
        "name": "Domain Accounts"
      },
      {
        "id": "T1078.003",
        "name": "Local Accounts"
      }
    ]
  },
  {
    "technique_id": "T1078.001",
    "name": "Default Accounts",
    "description": "Adversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems. Default accounts also include default factory/provider set accounts on other types of systems, software, or devices, including the root user account in AWS, the root user account in ESXi, and the default service account in Kubernetes.[1][2][3]Default accounts are not limited to client machines; rather, they also include accounts that are preset for equipment such as network devices and computer applications, whether they are internal, open source, or commercial. Appliances that come preset with a username and password combination pose a serious threat to organizations that do not change it post installation, as they are easy targets for an adversary. Similarly, adversaries may also utilize publicly disclosed or stolenPrivate Keysor credential materials to legitimately connect to remote environments viaRemote Services.[4]Default accounts may be created on a system after initial setup by connecting or integrating it with another application. For example, when an ESXi server is connected to a vCenter server, a default privileged account calledvpxuseris created on the ESXi server. If a threat actor is able to compromise this accountâ€™s credentials (for example, viaExploitation for Credential Accesson the vCenter host), they will then have access to the ESXi server.[5][6]",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Valid Accounts",
    "parent_technique_id": "T1078",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:35:20.541123"
  },
  {
    "technique_id": "T1078.002",
    "name": "Domain Accounts",
    "description": "Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion.[1]Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.[2]Adversaries may compromise domain accounts, some with a high level of privileges, through various means such asOS Credential Dumpingor password reuse, allowing access to privileged resources of the domain.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Valid Accounts",
    "parent_technique_id": "T1078",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:35:23.936689"
  },
  {
    "technique_id": "T1078.003",
    "name": "Local Accounts",
    "description": "Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.Local Accounts may also be abused to elevate privileges and harvest credentials throughOS Credential Dumping. Password reuse may allow the abuse of local accounts across a set of machines on a network for the purposes of Privilege Escalation and Lateral Movement.",
    "tactic": "Privilege Escalation",
    "tactics": [
      "Privilege Escalation"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Valid Accounts",
    "parent_technique_id": "T1078",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:35:27.226959"
  },
  {
    "technique_id": "T1548",
    "name": "Abuse Elevation Control Mechanism",
    "description": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk.[1][2]An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.[3][4]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:35:30.491733",
    "subtechniques": [
      {
        "id": "T1548.001",
        "name": "Setuid and Setgid"
      },
      {
        "id": "T1548.003",
        "name": "Sudo and Sudo Caching"
      },
      {
        "id": "T1548.004",
        "name": "Elevated Execution with Prompt"
      },
      {
        "id": "T1548.006",
        "name": "TCC Manipulation"
      }
    ]
  },
  {
    "technique_id": "T1548.001",
    "name": "Setuid and Setgid",
    "description": "An adversary may abuse configurations where an application has the setuid or setgid bits set in order to get code running in a different (and possibly more privileged) userâ€™s context. On Linux or macOS, when the setuid or setgid bits are set for an application binary, the application will run with the privileges of the owning user or group respectively.[1]Normally an application is run in the current userâ€™s context, regardless of which user or group owns the application. However, there are instances where programs need to be executed in an elevated context to function properly, but the user running them may not have the specific required privileges.Instead of creating an entry in the sudoers file, which must be done by root, any user can specify the setuid or setgid flag to be set for their own applications (i.e.Linux and Mac File and Directory Permissions Modification). Thechmodcommand can set these bits with bitmasking,chmod 4777 [file]or via shorthand naming,chmod u+s [file]. This will enable the setuid bit. To enable the setgid bit,chmod 2775andchmod g+scan be used.Adversaries can use this mechanism on their own malware to make sure they're able to execute in elevated contexts in the future.[2]This abuse is often part of a \"shell escape\" or other actions to bypass an execution environment with restricted permissions.Alternatively, adversaries may choose to find and target vulnerable binaries with the setuid or setgid bits already enabled (i.e.File and Directory Discovery). The setuid and setguid bits are indicated with an \"s\" instead of an \"x\" when viewing a file's attributes vials -l. Thefindcommand can also be used to search for such files. For example,find / -perm +4000 2>/dev/nullcan be used to find files with setuid set andfind / -perm +2000 2>/dev/nullmay be used for setgid. Binaries that have these bits set may then be abused by adversaries.[3]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Abuse Elevation Control Mechanism",
    "parent_technique_id": "T1548",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:35:33.860183"
  },
  {
    "technique_id": "T1548.003",
    "name": "Sudo and Sudo Caching",
    "description": "Adversaries may perform sudo caching and/or use the sudoers file to elevate privileges. Adversaries may do this to execute commands as other users or spawn processes with higher privileges.Within Linux and MacOS systems, sudo (sometimes referred to as \"superuser do\") allows users to perform commands from terminals with elevated privileges and to control who can perform these commands on the system. Thesudocommand \"allows a system administrator to delegate authority to give certain users (or groups of users) the ability to run some (or all) commands as root or another user while providing an audit trail of the commands and their arguments.\"[1]Since sudo was made for the system administrator, it has some useful configuration features such as atimestamp_timeout, which is the amount of time in minutes between instances ofsudobefore it will re-prompt for a password. This is becausesudohas the ability to cache credentials for a period of time. Sudo creates (or touches) a file at/var/db/sudowith a timestamp of when sudo was last run to determine this timeout. Additionally, there is atty_ticketsvariable that treats each new tty (terminal session) in isolation. This means that, for example, the sudo timeout of one tty will not affect another tty (you will have to type the password again).The sudoers file,/etc/sudoers, describes which users can run which commands and from which terminals. This also describes which commands users can run as other users or groups. This provides the principle of least privilege such that users are running in their lowest possible permissions for most of the time and only elevate to other users or permissions as needed, typically by prompting for a password. However, the sudoers file can also specify when to not prompt users for passwords with a line likeuser1 ALL=(ALL) NOPASSWD: ALL.[2]Elevated privileges are required to edit this file though.Adversaries can also abuse poor configurations of these mechanisms to escalate privileges without needing the user's password. For example,/var/db/sudo's timestamp can be monitored to see if it falls within thetimestamp_timeoutrange. If it does, then malware can execute sudo commands without needing to supply the user's password. Additional, iftty_ticketsis disabled, adversaries can do this from any tty for that user.In the wild, malware has disabledtty_ticketsto potentially make scripting easier by issuingecho \\'Defaults !tty_tickets\\' >> /etc/sudoers.[3]In order for this change to be reflected, the malware also issuedkillall Terminal. As of macOS Sierra, the sudoers file hastty_ticketsenabled by default.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Abuse Elevation Control Mechanism",
    "parent_technique_id": "T1548",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:35:37.222745"
  },
  {
    "technique_id": "T1548.004",
    "name": "Elevated Execution with Prompt",
    "description": "Adversaries may leverage theAuthorizationExecuteWithPrivilegesAPI to escalate privileges by prompting the user for credentials.[1]The purpose of this API is to give application developers an easy way to perform operations with root privileges, such as for application installation or updating. This API does not validate that the program requesting root privileges comes from a reputable source or has been maliciously modified.Although this API is deprecated, it still fully functions in the latest releases of macOS. When calling this API, the user will be prompted to enter their credentials but no checks on the origin or integrity of the program are made. The program calling the API may also load world writable files which can be modified to perform malicious behavior with elevated privileges.Adversaries may abuseAuthorizationExecuteWithPrivilegesto obtain root privileges in order to install malicious software on victims and install persistence mechanisms.[2][3][4]This technique may be combined withMasqueradingto trick the user into granting escalated privileges to malicious code.[2][3]This technique has also been shown to work by modifying legitimate programs present on the machine that make use of this API.[2]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Abuse Elevation Control Mechanism",
    "parent_technique_id": "T1548",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:35:40.579176"
  },
  {
    "technique_id": "T1548.006",
    "name": "TCC Manipulation",
    "description": "Adversaries can manipulate or abuse the Transparency, Consent, & Control (TCC) service or database to grant malicious executables elevated permissions. TCC is a Privacy & Security macOS control mechanism used to determine if the running process has permission to access the data or services protected by TCC, such as screen sharing, camera, microphone, or Full Disk Access (FDA).When an application requests to access data or a service protected by TCC, the TCC daemon (tccd) checks the TCC database, located at/Library/Application Support/com.apple.TCC/TCC.db(and~/equivalent), and an overwrites file (if connected to an MDM) for existing permissions. If permissions do not exist, then the user is prompted to grant permission. Once permissions are granted, the database stores the application's permissions and will not prompt the user again unless reset. For example, when a web browser requests permissions to the user's webcam, once granted the web browser may not explicitly prompt the user again.[1]Adversaries may access restricted data or services protected by TCC through abusing applications previously granted permissions throughProcess Injectionor executing a malicious binary using another application. For example, adversaries can use Finder, a macOS native app with FDA permissions, to execute a maliciousAppleScript. When executing under the Finder App, the maliciousAppleScriptinherits access to all files on the system without requiring a user prompt. When System Integrity Protection (SIP) is disabled, TCC protections are also disabled. For a system without SIP enabled, adversaries can manipulate the TCC database to add permissions to their malicious executable through loading an adversary controlled TCC database using environment variables andLaunchctl.[2][3]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Abuse Elevation Control Mechanism",
    "parent_technique_id": "T1548",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:35:43.946537"
  },
  {
    "technique_id": "T1622",
    "name": "Debugger Evasion",
    "description": "Adversaries may employ various means to detect and avoid debuggers. Debuggers are typically used by defenders to trace and/or analyze the execution of potential malware payloads.[1]Debugger evasion may include changing behaviors based on the results of the checks for the presence of artifacts indicative of a debugged environment. Similar toVirtualization/Sandbox Evasion, if the adversary detects a debugger, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for debugger artifacts before dropping secondary or additional payloads.Specific checks will vary based on the target and/or adversary. On Windows, this may involveNative APIfunction calls such asIsDebuggerPresent()andNtQueryInformationProcess(), or manually checking theBeingDebuggedflag of the Process Environment Block (PEB). On Linux, this may involve querying/proc/self/statusfor theTracerPIDfield, which indicates whether or not the process is being traced by dynamic analysis tools.[2][3]Other checks for debugging artifacts may also seek to enumerate hardware breakpoints, interrupt assembly opcodes, time checks, or measurements if exceptions are raised in the current process (assuming a present debugger would \"swallow\" or handle the potential error).[4][5][6]Malware may also leverage Structured Exception Handling (SEH) to detect debuggers by throwing an exception and detecting whether the process is suspended. SEH handles both hardware and software expectations, providing control over the exceptions including support for debugging. If a debugger is present, the programâ€™s control will be transferred to the debugger, and the execution of the code will be suspended. If the debugger is not present, control will be transferred to the SEH handler, which will automatically handle the exception and allow the programâ€™s execution to continue.[7]Adversaries may use the information learned from these debugger checks during automated discovery to shape follow-on behaviors. Debuggers can also be evaded by detaching the process or flooding debug logs with meaningless data via messages produced by loopingNative APIfunction calls such asOutputDebugStringW().[8][9]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:35:47.309789",
    "subtechniques": []
  },
  {
    "technique_id": "T1140",
    "name": "Deobfuscate/Decode Files or Information",
    "description": "Adversaries may useObfuscated Files or Informationto hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.One such example is the use ofcertutilto decode a remote access tool portable executable file that has been hidden inside a certificate file.[1]Another example is using the Windowscopy /bortypecommand to reassemble binary fragments into a malicious payload.[2][3]Sometimes a user's action may be required to open it for deobfuscation or decryption as part ofUser Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.[4]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:35:50.839728",
    "subtechniques": []
  },
  {
    "technique_id": "T1672",
    "name": "Email Spoofing",
    "description": "Adversaries may fake, or spoof, a senderâ€™s identity by modifying the value of relevant email headers in order to establish contact with victims under false pretenses.[1]In addition to actual email content, email headers (such as the FROM header, which contains the email address of the sender) may also be modified. Email clients display these headers when emails appear in a victim's inbox, which may cause modified emails to appear as if they were from the spoofed entity.This behavior may succeed when the spoofed entity either does not enable or enforce identity authentication tools such as Sender Policy Framework (SPF), DomainKeys Identified Mail (DKIM), and/or Domain-based Message Authentication, Reporting and Conformance (DMARC).[2][3][4]Even if SPF and DKIM are configured properly, spoofing may still succeed when a domain sets a weak DMARC policy such asv=DMARC1; p=none; fo=1;. This means that while DMARC is technically present, email servers are not instructed to take any filtering action when emails fail authentication checks.[1][5]Adversaries may abuse absent or weakly configured SPF, SKIM, and/or DMARC policies to conceal social engineering attempts[5]such asPhishing. They may also leverage email spoofing forImpersonationof legitimate external individuals and organizations, such as journalists and academics.[5]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:35:54.189235",
    "subtechniques": []
  },
  {
    "technique_id": "T1480",
    "name": "Execution Guardrails",
    "description": "Adversaries may use execution guardrails to constrain execution or actions based on adversary supplied and environment specific conditions that are expected to be present on the target. Guardrails ensure that a payload only executes against an intended target and reduces collateral damage from an adversaryâ€™s campaign.[1]Values an adversary can provide about a target system or environment to use as guardrails may include specific network share names, attached physical devices, files, joined Active Directory (AD) domains, and local/external IP addresses.[2]Guardrails can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. This use of guardrails is distinct from typicalVirtualization/Sandbox Evasion. While use ofVirtualization/Sandbox Evasionmay involve checking for known sandbox values and continuing with execution only if there is no match, the use of guardrails will involve checking for an expected target-specific value and only continuing with execution if there is such a match.Adversaries may identify and block certain user-agents to evade defenses and narrow the scope of their attack to victims and platforms on which it will be most effective. A user-agent self-identifies data such as a user's software application, operating system, vendor, and version. Adversaries may check user-agents for operating system identification and then only serve malware for the exploitable software while ignoring all other operating systems.[3]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:35:57.565242",
    "subtechniques": [
      {
        "id": "T1480.001",
        "name": "Environmental Keying"
      },
      {
        "id": "T1480.002",
        "name": "Mutual Exclusion"
      }
    ]
  },
  {
    "technique_id": "T1480.001",
    "name": "Environmental Keying",
    "description": "Adversaries may environmentally key payloads or other features of malware to evade defenses and constraint execution to a specific target environment. Environmental keying uses cryptography to constrain execution or actions based on adversary supplied environment specific conditions that are expected to be present on the target. Environmental keying is an implementation ofExecution Guardrailsthat utilizes cryptographic techniques for deriving encryption/decryption keys from specific types of values in a given computing environment.[1]Values can be derived from target-specific elements and used to generate a decryption key for an encrypted payload. Target-specific values can be derived from specific network shares, physical devices, software/software versions, files, joined AD domains, system time, and local/external IP addresses.[2][3][4][5][6]By generating the decryption keys from target-specific environmental values, environmental keying can make sandbox detection, anti-virus detection, crowdsourcing of information, and reverse engineering difficult.[2][6]These difficulties can slow down the incident response process and help adversaries hide their tactics, techniques, and procedures (TTPs).Similar toObfuscated Files or Information, adversaries may use environmental keying to help protect their TTPs and evade detection. Environmental keying may be used to deliver an encrypted payload to the target that will use target-specific values to decrypt the payload before execution.[2][4][5][6][7]By utilizing target-specific values to decrypt the payload the adversary can avoid packaging the decryption key with the payload or sending it over a potentially monitored network connection. Depending on the technique for gathering target-specific values, reverse engineering of the encrypted payload can be exceptionally difficult.[2]This can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within.Like otherExecution Guardrails, environmental keying can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. This activity is distinct from typicalVirtualization/Sandbox Evasion. While use ofVirtualization/Sandbox Evasionmay involve checking for known sandbox values and continuing with execution only if there is no match, the use of environmental keying will involve checking for an expected target-specific value that must match for decryption and subsequent execution to be successful.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Execution Guardrails",
    "parent_technique_id": "T1480",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:36:00.945389"
  },
  {
    "technique_id": "T1480.002",
    "name": "Mutual Exclusion",
    "description": "Adversaries may constrain execution or actions based on the presence of a mutex associated with malware. A mutex is a locking mechanism used to synchronize access to a resource. Only one thread or process can acquire a mutex at a given time.[1]While local mutexes only exist within a given process, allowing multiple threads to synchronize access to a resource, system mutexes can be used to synchronize the activities of multiple processes.[1]By creating a unique system mutex associated with a particular malware, adversaries can verify whether or not a system has already been compromised.[2]In Linux environments, malware may instead attempt to acquire a lock on a mutex file. If the malware is able to acquire the lock, it continues to execute; if it fails, it exits to avoid creating a second instance of itself.[3][4]Mutex names may be hard-coded or dynamically generated using a predictable algorithm.[5]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Execution Guardrails",
    "parent_technique_id": "T1480",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:36:04.310129"
  },
  {
    "technique_id": "T1211",
    "name": "Exploitation for Defense Evasion",
    "description": "Adversaries may exploit a system or application vulnerability to bypass security features. Exploitation of a vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.Â Vulnerabilities may exist in defensive security software that can be used to disable or circumvent them.Adversaries may have prior knowledge through reconnaissance that security software exists within an environment or they may perform checks during or shortly after the system is compromised forSecurity Software Discovery. The security software will likely be targeted directly for exploitation. There are examples of antivirus software being targeted by persistent threat groups to avoid detection.There have also been examples of vulnerabilities in public cloud infrastructure of SaaS applications that may bypass defense boundaries[1], evade security logs[2], or deploy hidden infrastructure.[3]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:36:07.674128",
    "subtechniques": []
  },
  {
    "technique_id": "T1222",
    "name": "File and Directory Permissions Modification",
    "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.[1][2]File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).Modifications may include changing specific access rights, which may require taking ownership of a file or directory and/or elevated permissions depending on the file or directoryâ€™s existing permissions. This may enable malicious activity such as modifying, replacing, or deleting specific files or directories. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence viaAccessibility Features,Boot or Logon Initialization Scripts,Unix Shell Configuration Modification, or tainting/hijacking other instrumental binary/configuration files viaHijack Execution Flow.Adversaries may also change permissions of symbolic links. For example, malware (particularly ransomware) may modify symbolic links and associated settings to enable access to files from local shortcuts with remote paths.[3][4][5][6][7]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:36:11.054413",
    "subtechniques": [
      {
        "id": "T1222.002",
        "name": "Linux and Mac File and Directory Permissions Modification"
      }
    ]
  },
  {
    "technique_id": "T1222.002",
    "name": "Linux and Mac File and Directory Permissions Modification",
    "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.[1][2]File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).Most Linux and Linux-based platforms provide a standard set of permission groups (user, group, and other) and a standard set of permissions (read, write, and execute) that are applied to each group. While nuances of each platformâ€™s permissions implementation may vary, most of the platforms provide two primary commands used to manipulate file and directory ACLs:chown(short for change owner), andchmod(short for change mode).Adversarial may use these commands to make themselves the owner of files and directories or change the mode if current permissions allow it. They could subsequently lock others out of the file. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence viaUnix Shell Configuration Modificationor tainting/hijacking other instrumental binary/configuration files viaHijack Execution Flow.[3]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "File and Directory Permissions Modification",
    "parent_technique_id": "T1222",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:36:14.424104"
  },
  {
    "technique_id": "T1564",
    "name": "Hide Artifacts",
    "description": "Adversaries may attempt to hide artifacts associated with their behaviors to evade detection. Operating systems may have features to hide various artifacts, such as important system files and administrative task execution, to avoid disrupting user work environments and prevent users from changing files or features on the system. Adversaries may abuse these features to hide artifacts such as files, directories, user accounts, or other system activity to evade detection.[1][2][3]Adversaries may also attempt to hide artifacts associated with malicious behavior by creating computing regions that are isolated from common security instrumentation, such as through the use of virtualization technology.[4]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:36:17.793606",
    "subtechniques": [
      {
        "id": "T1564.001",
        "name": "Hidden Files and Directories"
      },
      {
        "id": "T1564.002",
        "name": "Hidden Users"
      },
      {
        "id": "T1564.003",
        "name": "Hidden Window"
      },
      {
        "id": "T1564.005",
        "name": "Hidden File System"
      },
      {
        "id": "T1564.006",
        "name": "Run Virtual Instance"
      },
      {
        "id": "T1564.007",
        "name": "VBA Stomping"
      },
      {
        "id": "T1564.008",
        "name": "Email Hiding Rules"
      },
      {
        "id": "T1564.009",
        "name": "Resource Forking"
      },
      {
        "id": "T1564.011",
        "name": "Ignore Process Interrupts"
      },
      {
        "id": "T1564.012",
        "name": "File/Path Exclusions"
      },
      {
        "id": "T1564.014",
        "name": "Extended Attributes"
      }
    ]
  },
  {
    "technique_id": "T1564.001",
    "name": "Hidden Files and Directories",
    "description": "Adversaries may set files and directories to be hidden to evade detection mechanisms. To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a â€˜hiddenâ€™ file. These files donâ€™t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches (dir /afor Windows andls â€“afor Linux and macOS).On Linux and Mac, users can mark specific files as hidden simply by putting a \".\" as the first character in the file or folder name[1][2]. Files and folders that start with a period, â€˜.â€™, are by default hidden from being viewed in the Finder application and standard command-line utilities like \"ls\". Users must specifically change settings to have these files viewable.Files on macOS can also be marked with the UF_HIDDEN flag which prevents them from being seen in Finder.app, but still allows them to be seen in Terminal.app[3]. On Windows, users can mark specific files as hidden by using the attrib.exe binary. Many applications create these hidden files and folders to store information so that it doesnâ€™t clutter up the userâ€™s workspace. For example, SSH utilities create a .ssh folder thatâ€™s hidden and contains the userâ€™s known hosts and keys.Adversaries can use this to their advantage to hide files and folders anywhere on the system and evading a typical user or system analysis that does not incorporate investigation of hidden files.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hide Artifacts",
    "parent_technique_id": "T1564",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:36:21.195839"
  },
  {
    "technique_id": "T1564.002",
    "name": "Hidden Users",
    "description": "Adversaries may use hidden users to hide the presence of user accounts they create or modify. Administrators may want to hide users when there are many user accounts on a given system or if they want to hide their administrative or other management accounts from other users.In macOS, adversaries can create or modify a user to be hidden through manipulating plist files, folder attributes, and user attributes. To prevent a user from being shown on the login screen and in System Preferences, adversaries can set the userID to be under 500 and set the key valueHide500UserstoTRUEin the/Library/Preferences/com.apple.loginwindowplist file.[1]Every user has a userID associated with it. When theHide500Userskey value is set toTRUE, users with a userID under 500 do not appear on the login screen and in System Preferences. Using the command line, adversaries can use thedsclutility to create hidden user accounts by setting theIsHiddenattribute to1. Adversaries can also hide a userâ€™s home folder by changing thechflagsto hidden.[2]Adversaries may similarly hide user accounts in Windows. Adversaries can set theHKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserListRegistry key value to0for a specific user to prevent that user from being listed on the logon screen.[3][4]On Linux systems, adversaries may hide user accounts from the login screen, also referred to as the greeter. The method an adversary may use depends on which Display Manager the distribution is currently using. For example, on an Ubuntu system using the GNOME Display Manger (GDM), accounts may be hidden from the greeter using thegsettingscommand (ex:sudo -u gdm gsettings set org.gnome.login-screen disable-user-list true).[5]Display Managers are not anchored to specific distributions and may be changed by a user or adversary.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hide Artifacts",
    "parent_technique_id": "T1564",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:36:24.676786"
  },
  {
    "technique_id": "T1564.003",
    "name": "Hidden Window",
    "description": "Adversaries may use hidden windows to conceal malicious activity from the plain sight of users. In some cases, windows that would typically be displayed when an application carries out an operation can be hidden. This may be utilized by system administrators to avoid disrupting user work environments when carrying out administrative tasks.Adversaries may abuse these functionalities to hide otherwise visible windows from users so as not to alert the user to adversary activity on the system.[1]On macOS, the configurations for how applications run are listed in property list (plist) files. One of the tags in these files can beapple.awt.UIElement, which allows for Java applications to prevent the application's icon from appearing in the Dock. A common use for this is when applications run in the system tray, but don't also want to show up in the Dock.Similarly, on Windows there are a variety of features in scripting languages, such asPowerShell, Jscript, andVisual Basicto make windows hidden. One example of this ispowershell.exe -WindowStyle Hidden.[2]The Windows Registry can also be edited to hide application windows from the current user. For example, by setting theWindowPositionsubkey in theHKEY_CURRENT_USER\\Console\\%SystemRoot%_System32_WindowsPowerShell_v1.0_PowerShell.exeRegistry key to a maximum value, PowerShell windows will open off screen and be hidden.[3]In addition, Windows supports theCreateDesktop()API that can create a hidden desktop window with its own correspondingexplorer.exeprocess.[4][5]All applications running on the hidden desktop window, such as a hidden VNC (hVNC) session,[4]will be invisible to other desktops windows.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hide Artifacts",
    "parent_technique_id": "T1564",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:36:28.055711"
  },
  {
    "technique_id": "T1564.005",
    "name": "Hidden File System",
    "description": "Adversaries may use a hidden file system to conceal malicious activity from users and security tools. File systems provide a structure to store and access data from physical storage. Typically, a user engages with a file system through applications that allow them to access files and directories, which are an abstraction from their physical location (ex: disk sector). Standard file systems include FAT, NTFS, ext4, and APFS. File systems can also contain other structures, such as the Volume Boot Record (VBR) and Master File Table (MFT) in NTFS.[1]Adversaries may use their own abstracted file system, separate from the standard file system present on the infected system. In doing so, adversaries can hide the presence of malicious components and file input/output from security tools. Hidden file systems, sometimes referred to as virtual file systems, can be implemented in numerous ways. One implementation would be to store a file system in reserved disk space unused by disk structures or standard file system partitions.[1][2]Another implementation could be for an adversary to drop their own portable partition image as a file on top of the standard file system.[3]Adversaries may also fragment files across the existing file system structure in non-standard ways.[4]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hide Artifacts",
    "parent_technique_id": "T1564",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:36:31.429189"
  },
  {
    "technique_id": "T1564.006",
    "name": "Run Virtual Instance",
    "description": "Adversaries may carry out malicious operations using a virtual instance to avoid detection. A wide variety of virtualization technologies exist that allow for the emulation of a computer or computing environment. By running malicious code inside of a virtual instance, adversaries can hide artifacts associated with their behavior from security tools that are unable to monitor activity inside the virtual instance.[1]Additionally, depending on the virtual networking implementation (ex: bridged adapter), network traffic generated by the virtual instance can be difficult to trace back to the compromised host as the IP address and hostname might not match known values.[2]Adversaries may utilize native support for virtualization (ex: Hyper-V) or drop the necessary files to run a virtual instance (ex: VirtualBox binaries). After running a virtual instance, adversaries may create a shared folder between the guest and host with permissions that enable the virtual instance to interact with the host file system.[3]In VMWare environments, adversaries may leverage the vCenter console to create new virtual machines. However, they may also create virtual machines directly on ESXi servers by running a valid.vmxfile with the/bin/vmxutility. Adding this command to/etc/rc.local.d/local.sh(i.e.,RC Scripts) will cause the VM to persistently restart.[4]Creating a VM this way prevents it from appearing in the vCenter console or in the output to thevim-cmd vmsvc/getallvmscommand on the ESXi server, thereby hiding it from typical administrative activities.[5]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hide Artifacts",
    "parent_technique_id": "T1564",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:36:34.797630"
  },
  {
    "technique_id": "T1564.007",
    "name": "VBA Stomping",
    "description": "Adversaries may hide malicious Visual Basic for Applications (VBA) payloads embedded within MS Office documents by replacing the VBA source code with benign data.[1]MS Office documents with embedded VBA content store source code inside of module streams. Each module stream has aPerformanceCachethat stores a separate compiled version of the VBA source code known as p-code. The p-code is executed when the MS Office version specified in the_VBA_PROJECTstream (which contains the version-dependent description of the VBA project) matches the version of the host MS Office application.[2][3]An adversary may hide malicious VBA code by overwriting the VBA source code location with zeroâ€™s, benign code, or random bytes while leaving the previously compiled malicious p-code. Tools that scan for malicious VBA source code may be bypassed as the unwanted code is hidden in the compiled p-code. If the VBA source code is removed, some tools might even think that there are no macros present. If there is a version match between the_VBA_PROJECTstream and host MS Office application, the p-code will be executed, otherwise the benign VBA source code will be decompressed and recompiled to p-code, thus removing malicious p-code and potentially bypassing dynamic analysis.[4][1][5]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hide Artifacts",
    "parent_technique_id": "T1564",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:36:38.154247"
  },
  {
    "technique_id": "T1564.008",
    "name": "Email Hiding Rules",
    "description": "Adversaries may use email rules to hide inbound emails in a compromised user's mailbox. Many email clients allow users to create inbox rules for various email functions, including moving emails to other folders, marking emails as read, or deleting emails. Rules may be created or modified within email clients or through external features such as theNew-InboxRuleorSet-InboxRulePowerShellcmdlets on Windows systems.[1][2][3][4]Adversaries may utilize email rules within a compromised user's mailbox to delete and/or move emails to less noticeable folders. Adversaries may do this to hide security alerts, C2 communication, or responses toInternal Spearphishingemails sent from the compromised account.Any user or administrator within the organization (or adversary with valid credentials) may be able to create rules to automatically move or delete emails. These rules can be abused to impair/delay detection had the email content been immediately seen by a user or defender. Malicious rules commonly filter out emails based on key words (such asmalware,suspicious,phish, andhack) found in message bodies and subject lines.[5]In some environments, administrators may be able to enable email rules that operate organization-wide rather than on individual inboxes. For example, Microsoft Exchange supports transport rules that evaluate all mail an organization receives against user-specified conditions, then performs a user-specified action on mail that adheres to those conditions.[6]Adversaries that abuse such features may be able to automatically modify or delete all emails related to specific topics (such as internal security incident notifications).",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hide Artifacts",
    "parent_technique_id": "T1564",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:36:41.552738"
  },
  {
    "technique_id": "T1564.009",
    "name": "Resource Forking",
    "description": "Adversaries may abuse resource forks to hide malicious code or executables to evade detection and bypass security applications. A resource fork provides applications a structured way to store resources such as thumbnail images, menu definitions, icons, dialog boxes, and code.[1]Usage of a resource fork is identifiable when displaying a fileâ€™s extended attributes, usingls -l@orxattr -lcommands. Resource forks have been deprecated and replaced with the application bundle structure. Non-localized resources are placed at the top level directory of an application bundle, while localized resources are placed in the/Resourcesfolder.[2][3]Adversaries can use resource forks to hide malicious data that may otherwise be stored directly in files. Adversaries can execute content with an attached resource fork, at a specified offset, that is moved to an executable location then invoked. Resource fork content may also be obfuscated/encrypted until execution.[4][5]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hide Artifacts",
    "parent_technique_id": "T1564",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:36:44.921395"
  },
  {
    "technique_id": "T1564.011",
    "name": "Ignore Process Interrupts",
    "description": "Adversaries may evade defensive mechanisms by executing commands that hide from process interrupt signals. Many operating systems use signals to deliver messages to control process behavior. Command interpreters often include specific commands/flags that ignore errors and other hangups, such as when the user of the active session logs off.[1]These interrupt signals may also be used by defensive tools and/or analysts to pause or terminate specified running processes.Adversaries may invoke processes usingnohup,PowerShell-ErrorAction SilentlyContinue, or similar commands that may be immune to hangups.[2][3]This may enable malicious commands and malware to continue execution through system events that would otherwise terminate its execution, such as users logging off or the termination of its C2 network connection.Hiding from process interrupt signals may allow malware to continue execution, but unlikeTrapthis does not establishPersistencesince the process will not be re-invoked once actually terminated.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hide Artifacts",
    "parent_technique_id": "T1564",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:36:48.437655"
  },
  {
    "technique_id": "T1564.012",
    "name": "File/Path Exclusions",
    "description": "Adversaries may attempt to hide their file-based artifacts by writing them to specific folders or file names excluded from antivirus (AV) scanning and other defensive capabilities. AV and other file-based scanners often include exclusions to optimize performance as well as ease installation and legitimate use of applications. These exclusions may be contextual (e.g., scans are only initiated in response to specific triggering events/alerts), but are also often hardcoded strings referencing specific folders and/or files assumed to be trusted and legitimate.[1]Adversaries may abuse these exclusions to hide their file-based artifacts. For example, rather than  tampering with tool settings to add a new exclusion (i.e.,Disable or Modify Tools), adversaries may drop their file-based payloads in default or otherwise well-known exclusions. Adversaries may also useSecurity Software Discoveryand otherDiscovery/Reconnaissanceactivities to both discover and verify existing exclusions in a victim environment.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hide Artifacts",
    "parent_technique_id": "T1564",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:36:51.786046"
  },
  {
    "technique_id": "T1564.014",
    "name": "Extended Attributes",
    "description": "Adversaries may abuse extended attributes (xattrs) on macOS and Linux to hide their malicious data in order to evade detection. Extended attributes are key-value pairs of file and directory metadata used by both macOS and Linux. They are not visible through standard tools likeFinder,ls, orcatand require utilities such asxattr(macOS) orgetfattr(Linux) for inspection. Operating systems and applications use xattrs for tagging, integrity checks, and access control. On Linux, xattrs are organized into namespaces such asuser.(user permissions),trusted.(root permissions),security., andsystem., each with specific permissions. On macOS, xattrs are flat strings without namespace prefixes, commonly prefixed withcom.apple.*(e.g.,com.apple.quarantine,com.apple.metadata:_kMDItemUserTags) and used by system features like Gatekeeper and Spotlight.[1]An adversary may leverage xattrs by embedding a second-stage payload into the extended attribute of a legitimate file. On macOS, a payload can be embedded into a custom attribute using thexattrcommand. A separate loader can retrieve the attribute withxattr -p, decode the content, and execute it using a scripting interpreter. On Linux, an adversary may usesetfattrto write a payload into theuser.namespace of a legitimate file. A loader script can later extract the payload withgetfattr --only-values, decode it, and execute it using bash or another interpreter. In both cases, because the primary file content remains unchanged, security tools and integrity checks that do not inspect extended attributes will observe the original file hash, allowing the malicious payload to evade detection.[2]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hide Artifacts",
    "parent_technique_id": "T1564",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:36:55.148140"
  },
  {
    "technique_id": "T1574",
    "name": "Hijack Execution Flow",
    "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.There are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:36:58.440256",
    "subtechniques": [
      {
        "id": "T1574.004",
        "name": "Dylib Hijacking"
      },
      {
        "id": "T1574.006",
        "name": "Dynamic Linker Hijacking"
      },
      {
        "id": "T1574.007",
        "name": "Path Interception by PATH Environment Variable"
      }
    ]
  },
  {
    "technique_id": "T1574.004",
    "name": "Dylib Hijacking",
    "description": "Adversaries may execute their own payloads by placing a malicious dynamic library (dylib) with an expected name in a path a victim application searches at runtime. The dynamic loader will try to find the dylibs based on the sequential order of the search paths. Paths to dylibs may be prefixed with@rpath, which allows developers to use relative paths to specify an array of search paths used at runtime based on the location of the executable.  Additionally, if weak linking is used, such as theLC_LOAD_WEAK_DYLIBfunction, an application will still execute even if an expected dylib is not present. Weak linking enables developers to run an application on multiple macOS versions as new APIs are added.Adversaries may gain execution by inserting malicious dylibs with the name of the missing dylib in the identified path.[1][2][3][4]Dylibs are loaded into an application's address space allowing the malicious dylib to inherit the application's privilege level and resources. Based on the application, this could result in privilege escalation and uninhibited network access. This method may also evade detection from security products since the execution is masked under a legitimate process.[5][6][7]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hijack Execution Flow",
    "parent_technique_id": "T1574",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:37:01.729326"
  },
  {
    "technique_id": "T1574.006",
    "name": "Dynamic Linker Hijacking",
    "description": "Adversaries may execute their own malicious payloads by hijacking environment variables the dynamic linker uses to load shared libraries. During the execution preparation phase of a program, the dynamic linker loads specified absolute paths of shared libraries from various environment variables and files, such asLD_PRELOADon Linux orDYLD_INSERT_LIBRARIESon macOS.[1][2][3]Libraries specified in environment variables are loaded first, taking precedence over system libraries with the same function name.[4][5][6]Each platform's linker uses an extensive list of environment variables at different points in execution. These variables are often used by developers to debug binaries without needing to recompile, deconflict mapped symbols, and implement custom functions in the original library.[7]Hijacking dynamic linker variables may grant access to the victim process's memory, system/network resources, and possibly elevated privileges. On Linux, adversaries may setLD_PRELOADto point to malicious libraries that match the name of legitimate libraries which are requested by a victim program, causing the operating system to load the adversary's malicious code upon execution of the victim program. For example, adversaries have usedLD_PRELOADto inject a malicious library into every descendant process of thesshddaemon, resulting in execution under a legitimate process. When the executing sub-process calls theexecvefunction, for example, the malicious libraryâ€™sexecvefunction is executed rather than the system functionexecvecontained in the system library on disk. This allows adversaries toHide Artifactsfrom detection, as hooking system functions such asexecveandreaddirenables malware to scrub its own artifacts from the results of commands such asls,ldd,iptables, anddmesg.[8][9][10]Hijacking dynamic linker variables may grant access to the victim process's memory, system/network resources, and possibly elevated privileges.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hijack Execution Flow",
    "parent_technique_id": "T1574",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:37:05.075347"
  },
  {
    "technique_id": "T1574.007",
    "name": "Path Interception by PATH Environment Variable",
    "description": "Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. The PATH environment variable contains a list of directories (User and System) that the OS searches sequentially through in search of the binary that was called from a script or the command line.Adversaries can place a malicious program in an earlier entry in the list of directories stored in the PATH environment variable, resulting in the operating system executing the malicious binary rather than the legitimate binary when it searches sequentially through that PATH listing.For example, on Windows if an adversary places a malicious program named \"net.exe\" inC:\\example path, which by default precedesC:\\Windows\\system32\\net.exein the PATH environment variable, when \"net\" is executed from the command-line theC:\\example pathwill be called instead of the system's legitimate executable atC:\\Windows\\system32\\net.exe. Some methods of executing a program rely on the PATH environment variable to determine the locations that are searched when the path for the program is not given, such as executing programs from aCommand and Scripting Interpreter.[1]Adversaries may also directly modify the $PATH variable specifying the directories to be searched.  An adversary can modify the$PATHvariable to point to a directory they have write access. When a program using the $PATH variable is called, the OS searches the specified directory and executes the malicious binary. On macOS, this can also be performed through modifying the $HOME variable. These variables can be modified using the command-line, launchctl,Unix Shell Configuration Modification, or modifying the/etc/paths.dfolder contents.[2][3][4]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Hijack Execution Flow",
    "parent_technique_id": "T1574",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:37:08.371067"
  },
  {
    "technique_id": "T1562",
    "name": "Impair Defenses",
    "description": "Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.Adversaries may also impair routine operations that contribute to defensive hygiene, such as blocking users from logging out, preventing a system from shutting down, or disabling or modifying the update process. Adversaries could also target event aggregation and analysis mechanisms, or otherwise disrupt these procedures by altering other system components. These restrictions can further enable malicious operations as well as the continued propagation of incidents.[1][2]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:37:11.751601",
    "subtechniques": [
      {
        "id": "T1562.001",
        "name": "Disable or Modify Tools"
      },
      {
        "id": "T1562.003",
        "name": "Impair Command History Logging"
      },
      {
        "id": "T1562.004",
        "name": "Disable or Modify System Firewall"
      },
      {
        "id": "T1562.006",
        "name": "Indicator Blocking"
      },
      {
        "id": "T1562.010",
        "name": "Downgrade Attack"
      },
      {
        "id": "T1562.011",
        "name": "Spoof Security Alerting"
      }
    ]
  },
  {
    "technique_id": "T1562.001",
    "name": "Disable or Modify Tools",
    "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.[1]Adversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar toIndicator Blocking, adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.[2][3]Alternatively, they may add new directories to an endpoint detection and response (EDR) toolâ€™s exclusion list, enabling them to hide malicious files viaFile/Path Exclusions.[4][5]Adversaries may also focus on specific applications such as Sysmon. For example, the \"Start\" and \"Enable\" values inHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operationalmay be modified to tamper with and potentially disable Sysmon logging.[6]On network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.[7][8]In cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.Furthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools.[9][10][11][12]For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.[11]Additionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e.Exploitation for Privilege Escalation), which may lead to bypassing anti-tampering features.[13]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Impair Defenses",
    "parent_technique_id": "T1562",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:37:15.230745"
  },
  {
    "technique_id": "T1562.003",
    "name": "Impair Command History Logging",
    "description": "Adversaries may impair command history logging to hide commands they run on a compromised system. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.On Linux and macOS, command history is tracked in a file pointed to by the environment variableHISTFILE. When a user logs off a system, this information is flushed to a file in the user's home directory called~/.bash_history. TheHISTCONTROLenvironment variable keeps track of what should be saved by thehistorycommand and eventually into the~/.bash_historyfile when a user logs out.HISTCONTROLdoes not exist by default on macOS, but can be set by the user and will be respected. TheHISTFILEenvironment variable is also used in some ESXi systems.[1]Adversaries may clear the history environment variable (unset HISTFILE) or set the command history size to zero (export HISTFILESIZE=0) to prevent logging of commands. Additionally,HISTCONTROLcan be configured to ignore commands that start with a space by simply setting it to \"ignorespace\".HISTCONTROLcan also be set to ignore duplicate commands by setting it to \"ignoredups\". In some Linux systems, this is set by default to \"ignoreboth\" which covers both of the previous examples. This means that \" ls\" will not be saved, but \"ls\" would be saved by history. Adversaries can abuse this to operate without leaving traces by simply prepending a space to all of their terminal commands.On Windows systems, thePSReadLinemodule tracks commands used in all PowerShell sessions and writes them to a file ($env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txtby default). Adversaries may change where these logs are saved usingSet-PSReadLineOption -HistorySavePath {File Path}. This will causeConsoleHost_history.txtto stop receiving logs. Additionally, it is possible to turn off logging to this file using the PowerShell commandSet-PSReadlineOption -HistorySaveStyle SaveNothing.[2][3][4]Adversaries may also leverage aNetwork Device CLIon network devices to disable historical command logging (e.g.no logging).",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Impair Defenses",
    "parent_technique_id": "T1562",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:37:18.593897"
  },
  {
    "technique_id": "T1562.004",
    "name": "Disable or Modify System Firewall",
    "description": "Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage. Changes could be disabling the entire mechanism as well as adding, deleting, or modifying particular rules. This can be done numerous ways depending on the operating system, including via command-line, editing Windows Registry keys, and Windows Control Panel.Modifying or disabling a system firewall may enable adversary C2 communications, lateral movement, and/or data exfiltration that would otherwise not be allowed. For example, adversaries may add a new firewall rule for a well-known protocol (such as RDP) using a non-traditional and potentially less securitized port (i.e.Non-Standard Port).[1]Adversaries may also modify host networking settings that indirectly manipulate system firewalls, such as interface bandwidth or network connection request thresholds.[2]Settings related to enabling abuse of variousRemote Servicesmay also indirectly modify firewall rules.In ESXi, firewall rules may be modified directly via the esxcli command line interface (e.g., viaesxcli network firewall set) or via the vCenter user interface.[3][4]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Impair Defenses",
    "parent_technique_id": "T1562",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:37:21.965142"
  },
  {
    "technique_id": "T1562.006",
    "name": "Indicator Blocking",
    "description": "An adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting[1]or even disabling host-based sensors, such as Event Tracing for Windows (ETW)[2], by tampering settings that control the collection and flow of event telemetry.[3]These settings may be stored on the system in configuration files and/or in the Registry as well as being accessible via administrative utilities such asPowerShellorWindows Management Instrumentation.For example, adversaries may modify theFilevalue inHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\Securityto hide their malicious actions in a new or different .evtx log file. This action does not require a system reboot and takes effect immediately.[4]ETW interruption can be achieved multiple ways, however most directly by defining conditions using thePowerShellSet-EtwTraceProvidercmdlet or by interfacing directly with the Registry to make alterations.In the case of network-based reporting of indicators, an adversary may block traffic associated with reporting to prevent central analysis. This may be accomplished by many means, such as stopping a local process responsible for forwarding telemetry and/or creating a host-based firewall rule to block traffic to specific hosts responsible for aggregating events, such as security information and event management (SIEM) products.In Linux environments, adversaries may disable or reconfigure log processing tools such as syslog or nxlog to inhibit detection and monitoring capabilities to facilitate follow on behaviors.[5]ESXi also leverages syslog, which can be reconfigured via commands such asesxcli system syslog config setandesxcli system syslog config reload.[6][7]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Impair Defenses",
    "parent_technique_id": "T1562",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:37:25.329016"
  },
  {
    "technique_id": "T1562.010",
    "name": "Downgrade Attack",
    "description": "Adversaries may downgrade or use a version of system features that may be outdated, vulnerable, and/or does not support updated security controls. Downgrade attacks typically take advantage of a systemâ€™s backward compatibility to force it into less secure modes of operation.Adversaries may downgrade and use various less-secure versions of features of a system, such asCommand and Scripting Interpreters or even network protocols that can be abused to enableAdversary-in-the-MiddleorNetwork Sniffing.[1]For example,PowerShellversions 5+ includes Script Block Logging (SBL), which can record executed script content. However, adversaries may attempt to execute a previous version of PowerShell that does not support SBL with the intent toImpair Defenseswhile running malicious scripts that may have otherwise been detected.[2][3][4]Adversaries may similarly target network traffic to downgrade from an encrypted HTTPS connection to an unsecured HTTP connection that exposes network data in clear text.[5][6]On Windows systems, adversaries may downgrade the boot manager to a vulnerable version that bypasses Secure Boot, granting the ability to disable various operating system security mechanisms.[7]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Impair Defenses",
    "parent_technique_id": "T1562",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:37:28.696938"
  },
  {
    "technique_id": "T1562.011",
    "name": "Spoof Security Alerting",
    "description": "Adversaries may spoof security alerting from tools, presenting false evidence to impair defendersâ€™ awareness of malicious activity.[1]Messages produced by defensive tools contain information about potential security events as well as the functioning status of security software and the system. Security reporting messages are important for monitoring the normal operation of a system and identifying important events that can signal a security incident.Rather than or in addition toIndicator Blocking, an adversary can spoof positive affirmations that security tools are continuing to function even after legitimate security tools have been disabled (e.g.,Disable or Modify Tools). An adversary can also present a \"healthy\" system status even after infection. This can be abused to enable further malicious activity by delaying defender responses.For example, adversaries may show a fake Windows Security GUI and tray icon with a \"healthy\" system status after Windows Defender and other system tools have been disabled.[1]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Impair Defenses",
    "parent_technique_id": "T1562",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:37:32.050938"
  },
  {
    "technique_id": "T1656",
    "name": "Impersonation",
    "description": "Adversaries may impersonate a trusted person or organization in order to persuade and trick a target into performing some action on their behalf. For example, adversaries may communicate with victims (viaPhishing for Information,Phishing, orInternal Spearphishing) while impersonating a known sender such as an executive, colleague, or third-party vendor. Established trust can then be leveraged to accomplish an adversaryâ€™s ultimate goals, possibly against multiple victims.In many cases of business email compromise or email fraud campaigns, adversaries use impersonation to defraud victims -- deceiving them into sending money or divulging information that ultimately enablesFinancial Theft.Adversaries will often also use social engineering techniques such as manipulative and persuasive language in email subject lines and body text such aspayment,request, orurgentto push the victim to act quickly before malicious activity is detected. These campaigns are often specifically targeted against people who, due to job roles and/or accesses, can carry out the adversaryâ€™s goal.Impersonation is typically preceded by reconnaissance techniques such asGather Victim Identity InformationandGather Victim Org Informationas well as acquiring infrastructure such as email domains (i.e.Domains) to substantiate their false identity.[1]There is the potential for multiple victims in campaigns involving impersonation. For example, an adversary mayCompromise Accountstargeting one organization which can then be used to support impersonation against other entities.[2]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:37:35.444419",
    "subtechniques": []
  },
  {
    "technique_id": "T1070",
    "name": "Indicator Removal",
    "description": "Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversaryâ€™s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.Removal of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:37:38.862483",
    "subtechniques": [
      {
        "id": "T1070.002",
        "name": "Clear Linux or Mac System Logs"
      },
      {
        "id": "T1070.003",
        "name": "Clear Command History"
      },
      {
        "id": "T1070.004",
        "name": "File Deletion"
      },
      {
        "id": "T1070.006",
        "name": "Timestomp"
      },
      {
        "id": "T1070.007",
        "name": "Clear Network Connection History and Configurations"
      },
      {
        "id": "T1070.008",
        "name": "Clear Mailbox Data"
      },
      {
        "id": "T1070.009",
        "name": "Clear Persistence"
      },
      {
        "id": "T1070.010",
        "name": "Relocate Malware"
      }
    ]
  },
  {
    "technique_id": "T1070.002",
    "name": "Clear Linux or Mac System Logs",
    "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the/var/log/directory. Subfolders in this directory categorize logs by their related functions, such as:[1]/var/log/messages:: General and system-related messages/var/log/secureor/var/log/auth.log: Authentication logs/var/log/utmpor/var/log/wtmp: Login records/var/log/kern.log: Kernel logs/var/log/cron.log: Crond logs/var/log/maillog: Mail server logs/var/log/httpd/: Web server access and error logs",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Indicator Removal",
    "parent_technique_id": "T1070",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:37:42.231247"
  },
  {
    "technique_id": "T1070.003",
    "name": "Clear Command History",
    "description": "In addition to clearing system logs, an adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.On Linux and macOS, these command histories can be accessed in a few different ways. While logged in, this command history is tracked in a file pointed to by the environment variableHISTFILE. When a user logs off a system, this information is flushed to a file in the user's home directory called~/.bash_history. The benefit of this is that it allows users to go back to commands they've used before in different sessions. Adversaries may delete their commands from these logs by manually clearing the history (history -c) or deleting the bash history filerm ~/.bash_history.Adversaries may also leverage aNetwork Device CLIon network devices to clear command history data (clear loggingand/orclear history).[1]On ESXi servers, command history may be manually removed from the/var/log/shell.logfile.[2]On Windows hosts, PowerShell has two different command history providers: the built-in history and the command history managed by thePSReadLinemodule. The built-in history only tracks the commands used in the current session. This command history is not available to other sessions and is deleted when the session ends.ThePSReadLinecommand history tracks the commands used in all PowerShell sessions and writes them to a file ($env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txtby default). This history file is available to all sessions and contains all past history since the file is not deleted when the session ends.[3]Adversaries may run the PowerShell commandClear-Historyto flush the entire command history from a current PowerShell session. This, however, will not delete/flush theConsoleHost_history.txtfile. Adversaries may also delete theConsoleHost_history.txtfile or edit its contents to hide PowerShell commands they have run.[4][5]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Indicator Removal",
    "parent_technique_id": "T1070",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:37:45.603483"
  },
  {
    "technique_id": "T1070.004",
    "name": "File Deletion",
    "description": "Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex:Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.There are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well.[1]Examples of built-inCommand and Scripting Interpreterfunctions includedelon Windows,rmorunlinkon Linux and macOS, andrmon ESXi.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Indicator Removal",
    "parent_technique_id": "T1070",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:37:49.134646"
  },
  {
    "technique_id": "T1070.006",
    "name": "Timestomp",
    "description": "Adversaries may modify file time attributes to hide new files or changes to existing files. Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder and blend malicious files with legitimate files.In Windows systems, both the$STANDARD_INFORMATION($SI) and$FILE_NAME($FN) attributes record times in a Master File Table (MFT) file.[1]$SI(dates/time stamps) is displayed to the end user, including in the File System view, while$FNis dealt with by the kernel.[2]Modifying the$SIattribute is the most common method of timestomping because it can be modified at the user level using API calls.$FNtimestomping, however, typically requires interacting with the system kernel or moving or renaming a file.[1]Adversaries modify timestamps on files so that they do not appear conspicuous to forensic investigators or file analysis tools. In order to evade detections that rely on identifying discrepancies between the$SIand$FNattributes, adversaries may also engage in \"double timestomping\" by modifying times on both attributes simultaneously.[3]In Linux systems and on ESXi servers, threat actors may attempt to perform timestomping using commands such astouch -a -m -t <timestamp> <filename>(which sets access and modification times to a specific value) ortouch -r <filename> <filename>(which sets access and modification times to match those of another file).[4][5]Timestomping may be used along with file nameMasqueradingto hide malware and tools.[6]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Indicator Removal",
    "parent_technique_id": "T1070",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:37:52.537146"
  },
  {
    "technique_id": "T1070.007",
    "name": "Clear Network Connection History and Configurations",
    "description": "Adversaries may clear or remove evidence of malicious network connections in order to clean up traces of their operations. Configuration settings as well as various artifacts that highlight connection history may be created on a system and/or in application logs from behaviors that require network connections, such asRemote ServicesorExternal Remote Services. Defenders may use these artifacts to monitor or otherwise analyze network connections created by adversaries.Network connection history may be stored in various locations. For example, RDP connection history may be stored in Windows Registry values under[1]:HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\DefaultHKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\ServersWindows may also store information about recent RDP connections in files such asC:\\Users\\%username%\\Documents\\Default.rdpandC:\\Users\\%username%\\AppData\\Local\\Microsoft\\TerminalServer Client\\Cache\\.[2]Similarly, macOS and Linux hosts may store information highlighting connection history in system logs (such as those stored in/Library/Logsand/or/var/log/).[3][4][5]Malicious network connections may also require changes to third-party applications or network configuration settings, such asDisable or Modify System Firewallor tampering to enableProxy. Adversaries may delete or modify this data to conceal indicators and/or impede defensive analysis.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Indicator Removal",
    "parent_technique_id": "T1070",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:37:55.882890"
  },
  {
    "technique_id": "T1070.008",
    "name": "Clear Mailbox Data",
    "description": "Adversaries may modify mail and mail application data to remove evidence of their activity. Email applications allow users and other programs to export and delete mailbox data via command line tools or use of APIs. Mail application data can be emails, email metadata, or logs generated by the application or operating system, such as export requests.Adversaries may manipulate emails and mailbox data to remove logs, artifacts, and metadata, such as evidence ofPhishing/Internal Spearphishing,Email Collection,Mail Protocolsfor command and control, or email-based exfiltration such asExfiltration Over Alternative Protocol. For example, to remove evidence on Exchange servers adversaries have used theExchangePowerShellPowerShellmodule, includingRemove-MailboxExportRequestto remove evidence of mailbox exports.[1][2]On Linux and macOS, adversaries may also delete emails through a command line utility calledmailor useAppleScriptto interact with APIs on macOS.[3][4]Adversaries may also remove emails and metadata/headers indicative of spam or suspicious activity (for example, through the use of organization-wide transport rules) to reduce the likelihood of malicious emails being detected by security products.[5]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Indicator Removal",
    "parent_technique_id": "T1070",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:37:59.252489"
  },
  {
    "technique_id": "T1070.009",
    "name": "Clear Persistence",
    "description": "Adversaries may clear artifacts associated with previously established persistence on a host system to remove evidence of their activity. This may involve various actions, such as removing services, deleting executables,Modify Registry,Plist File Modification, or other methods of cleanup to prevent defenders from collecting evidence of their persistent presence.[1]Adversaries may also delete accounts previously created to maintain persistence (i.e.Create Account).[2]In some instances, artifacts of persistence may also be removed once an adversaryâ€™s persistence is executed in order to prevent errors with the new instance of the malware.[3]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Indicator Removal",
    "parent_technique_id": "T1070",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:38:02.610668"
  },
  {
    "technique_id": "T1070.010",
    "name": "Relocate Malware",
    "description": "Once a payload is delivered, adversaries may reproduce copies of the same malware on the victim system to remove evidence of their presence and/or avoid defenses. Copying malware payloads to new locations may also be combined withFile Deletionto cleanup older artifacts.Relocating malware may be a part of many actions intended to evade defenses. For example, adversaries may copy and rename payloads to better blend into the local environment (i.e.,Match Legitimate Resource Name or Location).[1]Payloads may also be repositioned to targetFile/Path Exclusionsas well as specific locations associated with establishingPersistence.[2]Relocating malicious payloads may also hinder defensive analysis, especially to separate these payloads from earlier events (such asUser ExecutionandPhishing) that may have generated alerts or otherwise drawn attention from defenders.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Indicator Removal",
    "parent_technique_id": "T1070",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:38:05.966950"
  },
  {
    "technique_id": "T1036",
    "name": "Masquerading",
    "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.Renaming abusable system utilities to evade security monitoring is also a form ofMasquerading.[1]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:38:09.378583",
    "subtechniques": [
      {
        "id": "T1036.001",
        "name": "Invalid Code Signature"
      },
      {
        "id": "T1036.002",
        "name": "Right-to-Left Override"
      },
      {
        "id": "T1036.003",
        "name": "Rename Legitimate Utilities"
      },
      {
        "id": "T1036.004",
        "name": "Masquerade Task or Service"
      },
      {
        "id": "T1036.005",
        "name": "Match Legitimate Resource Name or Location"
      },
      {
        "id": "T1036.006",
        "name": "Space after Filename"
      },
      {
        "id": "T1036.008",
        "name": "Masquerade File Type"
      },
      {
        "id": "T1036.009",
        "name": "Break Process Trees"
      },
      {
        "id": "T1036.010",
        "name": "Masquerade Account Name"
      }
    ]
  },
  {
    "technique_id": "T1036.001",
    "name": "Invalid Code Signature",
    "description": "Adversaries may attempt to mimic features of valid code signatures to increase the chance of deceiving a user, analyst, or tool. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with. Adversaries can copy the metadata and signature information from a signed program, then use it as a template for an unsigned program. Files with invalid code signatures will fail digital signature validation checks, but they may appear more legitimate to users and security tools may improperly handle these files.[1]UnlikeCode Signing, this activity will not result in a valid signature.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Masquerading",
    "parent_technique_id": "T1036",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:38:12.732258"
  },
  {
    "technique_id": "T1036.002",
    "name": "Right-to-Left Override",
    "description": "Adversaries may abuse the right-to-left override (RTLO or RLO) character (U+202E) to disguise a string and/or file name to make it appear benign. RTLO is a non-printing Unicode character that causes the text that follows it to be displayed in reverse. For example, a Windows screensaver executable namedMarch 25 \\u202Excod.scrwill display asMarch 25 rcs.docx. A JavaScript file namedphoto_high_re\\u202Egnp.jswill be displayed asphoto_high_resj.png.[1]Adversaries may abuse the RTLO character as a means of tricking a user into executing what they think is a benign file type. A common use of this technique is withSpearphishing Attachment/Malicious Filesince it can trick both end users and defenders if they are not aware of how their tools display and render the RTLO character. Use of the RTLO character has been seen in many targeted intrusion attempts and criminal activity.[2][3]RTLO can be used in the Windows Registry as well, where regedit.exe displays the reversed characters but the command line tool reg.exe does not by default.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Masquerading",
    "parent_technique_id": "T1036",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:38:16.099932"
  },
  {
    "technique_id": "T1036.003",
    "name": "Rename Legitimate Utilities",
    "description": "Adversaries may rename legitimate / system utilities to try to evade security mechanisms concerning the usage of those utilities. Security monitoring and control mechanisms may be in place for legitimate utilities adversaries are capable of abusing, including both built-in binaries and tools such as PSExec, AutoHotKey, and IronPython.[1][2][3][4]It may be possible to bypass those security mechanisms by renaming the utility prior to utilization (ex: renamerundll32.exe).[5]An alternative case occurs when a legitimate utility is copied or moved to a different directory and renamed to avoid detections based on these utilities executing from non-standard paths.[6]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Masquerading",
    "parent_technique_id": "T1036",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:38:19.461775"
  },
  {
    "technique_id": "T1036.004",
    "name": "Masquerade Task or Service",
    "description": "Adversaries may attempt to manipulate the name of a task or service to make it appear legitimate or benign. Tasks/services executed by the Task Scheduler or systemd will typically be given a name and/or description.[1][2]Windows services will have a service name as well as a display name. Many benign tasks and services exist that have commonly associated names. Adversaries may give tasks or services names that are similar or identical to those of legitimate ones.Tasks or services contain other fields, such as a description, that adversaries may attempt to make appear legitimate.[3][4]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Masquerading",
    "parent_technique_id": "T1036",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:38:22.870457"
  },
  {
    "technique_id": "T1036.005",
    "name": "Match Legitimate Resource Name or Location",
    "description": "Adversaries may match or approximate the name or location of legitimate files, Registry keys, or other resources when naming/placing them. This is done for the sake of evading defenses and observation.This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex:svchost.exe). Alternatively, a Windows Registry key may be given a close approximation to a key used by a legitimate program. In containerized environments, a threat actor may create a resource in a trusted namespace or one that matches the naming convention of a container pod or cluster.[1]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Masquerading",
    "parent_technique_id": "T1036",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:38:26.385218"
  },
  {
    "technique_id": "T1036.006",
    "name": "Space after Filename",
    "description": "Adversaries can hide a program's true filetype by changing the extension of a file. With certain file types (specifically this does not work with .app extensions), appending a space to the end of a filename will change how the file is processed by the operating system.For example, if there is a Mach-O executable file calledevil.bin, when it is double clicked by a user, it will launch Terminal.app and execute. If this file is renamed toevil.txt, then when double clicked by a user, it will launch with the default text editing application (not executing the binary). However, if the file is renamed toevil.txt(note the space at the end), then when double clicked by a user, the true file type is determined by the OS and handled appropriately and the binary will be executed[1].Adversaries can use this feature to trick users into double clicking benign-looking files of any format and ultimately executing something malicious.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Masquerading",
    "parent_technique_id": "T1036",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:38:29.736434"
  },
  {
    "technique_id": "T1036.008",
    "name": "Masquerade File Type",
    "description": "Adversaries may masquerade malicious payloads as legitimate files through changes to the payload's formatting, including the fileâ€™s signature, extension, icon, and contents. Various file types have a typical standard format, including how they are encoded and organized. For example, a fileâ€™s signature (also known as header or magic bytes) is the beginning bytes of a file and is often used to identify the fileâ€™s type. For example, the header of a JPEG file,  is0xFF 0xD8and the file extension is either.JPE,.JPEGor.JPG.Adversaries may edit the headerâ€™s hex code and/or the file extension of a malicious payload in order to bypass file validation checks and/or input sanitization. This behavior is commonly used when payload files are transferred (e.g.,Ingress Tool Transfer) and stored (e.g.,Upload Malware) so that adversaries may move their malware without triggering detections.Common non-executable file types and extensions, such as text files (.txt) and image files (.jpg,.gif, etc.) may be typically treated as benign.  Based on this, adversaries may use a file extension to disguise malware, such as naming a PHP backdoor code with a file name oftest.gif. A user may not know that a file is malicious due to the benign appearance and file extension.Polygot files, which are files that have multiple different file types and that function differently based on the application that will execute them, may also be used to disguise malicious malware and capabilities.[1]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Masquerading",
    "parent_technique_id": "T1036",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:38:33.106267"
  },
  {
    "technique_id": "T1036.009",
    "name": "Break Process Trees",
    "description": "An adversary may attempt to evade process tree-based analysis by modifying executed malware's parent process ID (PPID). If endpoint protection software leverages the \"parent-child\" relationship for detection, breaking this relationship could result in the adversaryâ€™s behavior not being associated with previous process tree activity. On Unix-based systems breaking this process tree is common practice for administrators to execute software using scripts and programs.[1]On Linux systems, adversaries may execute a series ofNative APIcalls to alter malware's process tree. For example, adversaries can execute their payload without any arguments, call thefork()API call twice, then have the parent process exit. This creates a grandchild process with no parent process that is immediately adopted by theinitsystem process (PID 1), which successfully disconnects the execution of the adversary's payload from its previous process tree.Another example is using the \"daemon\" syscall to detach from the current parent process and run in the background.[2][3]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Masquerading",
    "parent_technique_id": "T1036",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:38:36.515410"
  },
  {
    "technique_id": "T1036.010",
    "name": "Masquerade Account Name",
    "description": "Adversaries may match or approximate the names of legitimate accounts to make newly created ones appear benign. This will typically occur duringCreate Account, although accounts may also be renamed at a later date. This may also coincide withAccount Access Removalif the actor first deletes an account before re-creating one with the same name.[1]Often, adversaries will attempt to masquerade as service accounts, such as those associated with legitimate software, data backups, or container cluster management.[2][3]They may also give accounts generic, trustworthy names, such as \"admin\", \"help\", or \"root.\"[4]Sometimes adversaries may model account names off of those already existing in the system, as a follow-on behavior toAccount Discovery.Note that this is distinct fromImpersonation, which describes impersonating specific trusted individuals or organizations, rather than user or service account names.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Masquerading",
    "parent_technique_id": "T1036",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:38:39.873801"
  },
  {
    "technique_id": "T1556",
    "name": "Modify Authentication Process",
    "description": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without usingValid Accounts.Adversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms. Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:38:43.224802",
    "subtechniques": [
      {
        "id": "T1556.003",
        "name": "Pluggable Authentication Modules"
      },
      {
        "id": "T1556.006",
        "name": "Multi-Factor Authentication"
      }
    ]
  },
  {
    "technique_id": "T1556.003",
    "name": "Pluggable Authentication Modules",
    "description": "Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module ispam_unix.so, which retrieves, sets, and verifies account authentication information in/etc/passwdand/etc/shadow.[1][2][3]Adversaries may modify components of the PAM system to create backdoors. PAM components, such aspam_unix.so, can be patched to accept arbitrary adversary supplied values as legitimate credentials.[4]Malicious modifications to the PAM system may also be abused to steal credentials. Adversaries may infect PAM resources with code to harvest user credentials, since the values exchanged with PAM components may be plain-text since PAM does not store passwords.[5][1]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Modify Authentication Process",
    "parent_technique_id": "T1556",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:38:46.583544"
  },
  {
    "technique_id": "T1556.006",
    "name": "Multi-Factor Authentication",
    "description": "Adversaries may disable or modify multi-factor authentication (MFA) mechanisms to enable persistent access to compromised accounts.Once adversaries have gained access to a network by either compromising an account lacking MFA or by employing an MFA bypass method such asMulti-Factor Authentication Request Generation, adversaries may leverage their access to modify or completely disable MFA defenses. This can be accomplished by abusing legitimate features, such as excluding users from Azure AD Conditional Access Policies, registering a new yet vulnerable/adversary-controlled MFA method, or by manually patching MFA programs and configuration files to bypass expected functionality.[1][2]For example, modifying the Windows hosts file (C:\\windows\\system32\\drivers\\etc\\hosts) to redirect MFA calls to localhost instead of an MFA server may cause the MFA process to fail. If a \"fail open\" policy is in place, any otherwise successful authentication attempt may be granted access without enforcing MFA.[3]Depending on the scope, goals, and privileges of the adversary, MFA defenses may be disabled for individual accounts or for all accounts tied to a larger group, such as all domain accounts in a victim's network environment.[3]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Modify Authentication Process",
    "parent_technique_id": "T1556",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:38:49.869926"
  },
  {
    "technique_id": "T1027",
    "name": "Obfuscated Files or Information",
    "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses.Payloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open andDeobfuscate/Decode Files or InformationforUser Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.[1]Adversaries may also use compressed or archived scripts, such as JavaScript.Portions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.[2]Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled.[3]Adversaries may also abuseCommand Obfuscationto obscure commands executed from payloads or directly viaCommand and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.[4][5][6]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:38:53.410820",
    "subtechniques": [
      {
        "id": "T1027.001",
        "name": "Binary Padding"
      },
      {
        "id": "T1027.002",
        "name": "Software Packing"
      },
      {
        "id": "T1027.003",
        "name": "Steganography"
      },
      {
        "id": "T1027.004",
        "name": "Compile After Delivery"
      },
      {
        "id": "T1027.005",
        "name": "Indicator Removal from Tools"
      },
      {
        "id": "T1027.006",
        "name": "HTML Smuggling"
      },
      {
        "id": "T1027.008",
        "name": "Stripped Payloads"
      },
      {
        "id": "T1027.009",
        "name": "Embedded Payloads"
      },
      {
        "id": "T1027.010",
        "name": "Command Obfuscation"
      },
      {
        "id": "T1027.013",
        "name": "Encrypted/Encoded File"
      },
      {
        "id": "T1027.014",
        "name": "Polymorphic Code"
      },
      {
        "id": "T1027.015",
        "name": "Compression"
      },
      {
        "id": "T1027.016",
        "name": "Junk Code Insertion"
      },
      {
        "id": "T1027.017",
        "name": "SVG Smuggling"
      }
    ]
  },
  {
    "technique_id": "T1027.001",
    "name": "Binary Padding",
    "description": "Adversaries may use binary padding to add junk data and change the on-disk representation of malware. This can be done without affecting the functionality or behavior of a binary, but can increase the size of the binary beyond what some security tools are capable of handling due to file size limitations.Binary padding effectively changes the checksum of the file and can also be used to avoid hash-based blocklists and static anti-virus signatures.[1]The padding used is commonly generated by a function to create junk data and then appended to the end or applied to sections of malware.[2]Increasing the file size may decrease the effectiveness of certain tools and detection capabilities that are not designed or configured to scan large files. This may also reduce the likelihood of being collected for analysis. Public file scanning services, such as VirusTotal, limits the maximum size of an uploaded file to be analyzed.[3]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Obfuscated Files or Information",
    "parent_technique_id": "T1027",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:38:56.792634"
  },
  {
    "technique_id": "T1027.002",
    "name": "Software Packing",
    "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code.[1]Utilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.[2]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Obfuscated Files or Information",
    "parent_technique_id": "T1027",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:39:00.215552"
  },
  {
    "technique_id": "T1027.003",
    "name": "Steganography",
    "description": "Adversaries may use steganography techniques in order to prevent the detection of hidden information. Steganographic techniques can be used to hide data in digital media such as images, audio tracks, video clips, or text files.Duquwas an early example of malware that used steganography. It encrypted the gathered information from a victim's system and hid it within an image before exfiltrating the image to a C2 server.[1]By the end of 2017, a threat group usedInvoke-PSImageto hidePowerShellcommands in an image file (.png) and execute the code on a victim's system. In this particular case thePowerShellcode downloaded another obfuscated script to gather intelligence from the victim's machine and communicate it back to the adversary.[2]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Obfuscated Files or Information",
    "parent_technique_id": "T1027",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:39:03.592613"
  },
  {
    "technique_id": "T1027.004",
    "name": "Compile After Delivery",
    "description": "Adversaries may attempt to make payloads difficult to discover and analyze by delivering files to victims as uncompiled code. Text-based source code files may subvert analysis and scrutiny from protections targeting executables/binaries. These payloads will need to be compiled before execution; typically via native utilities such as ilasm.exe[1], csc.exe, or GCC/MinGW.[2]Source code payloads may also be encrypted, encoded, and/or embedded within other files, such as those delivered as aPhishing. Payloads may also be delivered in formats unrecognizable and inherently benign to the native OS (ex: EXEs on macOS/Linux) before later being (re)compiled into a proper executable binary with a bundled compiler and execution framework.[3]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Obfuscated Files or Information",
    "parent_technique_id": "T1027",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:39:06.966498"
  },
  {
    "technique_id": "T1027.005",
    "name": "Indicator Removal from Tools",
    "description": "Adversaries may remove indicators from tools if they believe their malicious tool was detected, quarantined, or otherwise curtailed. They can modify the tool by removing the indicator and using the updated version that is no longer detected by the target's defensive systems or subsequent targets that may use similar systems.A good example of this is when malware is detected with a file signature and quarantined by anti-virus software. An adversary who can determine that the malware was quarantined because of its file signature may modify the file to explicitly avoid that signature, and then re-use the malware.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Obfuscated Files or Information",
    "parent_technique_id": "T1027",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:39:10.341863"
  },
  {
    "technique_id": "T1027.006",
    "name": "HTML Smuggling",
    "description": "Adversaries may smuggle data and files past content filters by hiding malicious payloads inside of seemingly benign HTML files. HTML documents can store large binary objects known as JavaScript Blobs (immutable data that represents raw bytes) that can later be constructed into file-like objects. Data may also be stored in Data URLs, which enable embedding media type or MIME files inline of HTML documents. HTML5 also introduced a download attribute that may be used to initiate file downloads.[1][2]Adversaries may deliver payloads to victims that bypass security controls through HTML Smuggling by abusing JavaScript Blobs and/or HTML5 download attributes. Security controls such as web content filters may not identify smuggled malicious files inside of HTML/JS files, as the content may be based on typically benign MIME types such astext/plainand/ortext/html. Malicious files or data can be obfuscated and hidden inside of HTML files through Data URLs and/or JavaScript Blobs and can be deobfuscated when they reach the victim (i.e.Deobfuscate/Decode Files or Information), potentially bypassing content filters.For example, JavaScript Blobs can be abused to dynamically generate malicious files in the victim machine and may be dropped to disk by abusing JavaScript functions such asmsSaveBlob.[1][3][2][4]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Obfuscated Files or Information",
    "parent_technique_id": "T1027",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:39:13.682233"
  },
  {
    "technique_id": "T1027.008",
    "name": "Stripped Payloads",
    "description": "Adversaries may attempt to make a payload difficult to analyze by removing symbols, strings, and other human readable information. Scripts and executables may contain variables names and other strings that help developers document code functionality. Symbols are often created by an operating systemâ€™slinkerwhen executable payloads are compiled. Reverse engineers use these symbols and strings to analyze code and to identify functionality in payloads.[1][2]Adversaries may use stripped payloads in order to make malware analysis more difficult. For example, compilers and other tools may provide features to remove or obfuscate strings and symbols. Adversaries have also used stripped payload formats, such as run-only AppleScripts, a compiled and stripped version ofAppleScript, to evade detection and analysis. The lack of human-readable information may directly hinder detection and analysis of payloads.[3]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Obfuscated Files or Information",
    "parent_technique_id": "T1027",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:39:17.047763"
  },
  {
    "technique_id": "T1027.009",
    "name": "Embedded Payloads",
    "description": "Adversaries may embed payloads within other files to conceal malicious content from defenses. Otherwise seemingly benign files (such as scripts and executables) may be abused to carry and obfuscate malicious payloads and content. In some cases, embedded payloads may also enable adversaries toSubvert Trust Controlsby not impacting execution controls such as digital signatures and notarization tickets.[1]Adversaries may embed payloads in various file formats to hide payloads.[2]This is similar toSteganography, though does not involve weaving malicious content into specific bytes and patterns related to legitimate digital media formats.[3]For example, adversaries have been observed embedding payloads within or as an overlay of an otherwise benign binary.[4]Adversaries have also been observed nesting payloads (such as executables and run-only scripts) inside a file of the same format.[5]Embedded content may also be used asProcess Injectionpayloads used to infect benign system processes.[6]These embedded then injected payloads may be used as part of the modules of malware designed to provide specific features such as encrypting C2 communications in support of an orchestrator module. For example, an embedded module may be injected into default browsers, allowing adversaries to then communicate via the network.[7]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Obfuscated Files or Information",
    "parent_technique_id": "T1027",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:39:20.432372"
  },
  {
    "technique_id": "T1027.010",
    "name": "Command Obfuscation",
    "description": "Adversaries may obfuscate content during command execution to impede detection. Command-line obfuscation is a method of making strings and patterns within commands and scripts more difficult to signature and analyze. This type of obfuscation can be included within commands executed by delivered payloads (e.g.,PhishingandDrive-by Compromise) or interactively viaCommand and Scripting Interpreter.[1][2]For example, adversaries may abuse syntax that utilizes various symbols and escape characters (such as spacing,^,+.$, and%) to make commands difficult to analyze while maintaining the same intended functionality.[3]Many languages support built-in obfuscation in the form of base64 or URL encoding.[4]Adversaries may also manually implement command obfuscation via string splitting (\"Wor\"+\"d.Application\"), order and casing of characters (rev <<<'dwssap/cte/ tac'), globing (mkdir -p '/tmp/:&$NiA'), as well as various tricks involving passing strings through tokens/environment variables/input streams.[5][6]Adversaries may also use tricks such as directory traversals to obfuscate references to the binary being invoked by a command (C:\\voi\\pcw\\..\\..\\Windows\\tei\\qs\\k\\..\\..\\..\\system32\\erool\\..\\wbem\\wg\\je\\..\\..\\wmic.exe shadowcopy delete).[7]Tools such asInvoke-ObfuscationandInvoke-DOSfucationhave also been used to obfuscate commands.[8][9]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Obfuscated Files or Information",
    "parent_technique_id": "T1027",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:39:23.830644"
  },
  {
    "technique_id": "T1027.013",
    "name": "Encrypted/Encoded File",
    "description": "Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such asSoftware Packing,Steganography, andEmbedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e.,Deobfuscate/Decode Files or Information) at the time of execution/use.This type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files.[1]Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding schemes such as Base64.The entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.For example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as aPhishingpayload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g.,User Execution).[2]Adversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content untilCommand and Scripting Interpreterexecution.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Obfuscated Files or Information",
    "parent_technique_id": "T1027",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:39:27.375829"
  },
  {
    "technique_id": "T1027.014",
    "name": "Polymorphic Code",
    "description": "Adversaries may utilize polymorphic code (also known as metamorphic or mutating code) to evade detection. Polymorphic code is a type of software capable of changing its runtime footprint during code execution.[1]With each execution of the software, the code is mutated into a different version of itself that achieves the same purpose or objective as the original. This functionality enables the malware to evade traditional signature-based defenses, such as antivirus and antimalware tools.[2]Other obfuscation techniques can be used in conjunction with polymorphic code to accomplish the intended effects, including using mutation engines to conduct actions such asSoftware Packing,Command Obfuscation, orEncrypted/Encoded File.[3][4]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Obfuscated Files or Information",
    "parent_technique_id": "T1027",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:39:30.743868"
  },
  {
    "technique_id": "T1027.015",
    "name": "Compression",
    "description": "Adversaries may use compression to obfuscate their payloads or files. Compressed file formats such as ZIP, gzip, 7z, and RAR can compress and archive multiple files together to make it easier and faster to transfer files. In addition to compressing files, adversaries may also compress shellcode directly - for example, in order to store it in a Windows Registry key (i.e.,Fileless Storage).[1]In order to further evade detection, adversaries may combine multiple ZIP files into one archive. This process of concatenation creates an archive that appears to be a single archive but in fact contains the central directories of the embedded archives. Some ZIP readers, such as 7zip, may not be able to identify concatenated ZIP files and miss the presence of the malicious payload.[2]File archives may be sent as oneSpearphishing Attachmentthrough email. Adversaries have sent malicious payloads as archived files to encourage the user to interact with and extract the malicious payload onto their system (i.e.,Malicious File).[3]However, some file compression tools, such as 7zip, can be used to produce self-extracting archives. Adversaries may send self-extracting archives to hide the functionality of their payload and launch it without requiring multiple actions from the user.[4]Compressionmay be used in combination withEncrypted/Encoded Filewhere compressed files are encrypted and password-protected.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Obfuscated Files or Information",
    "parent_technique_id": "T1027",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:39:34.132545"
  },
  {
    "technique_id": "T1027.016",
    "name": "Junk Code Insertion",
    "description": "Adversaries may use junk code / dead code to obfuscate a malwareâ€™s functionality. Junk code is code that either does not execute, or if it does execute, does not change the functionality of the code. Junk code makes analysis more difficult and time-consuming, as the analyst steps through non-functional code instead of analyzing the main code. It also may hinder detections that rely on static code analysis due to the use of benign functionality, especially when combined withCompressionorSoftware Packing.[1][2]No-Operation (NOP) instructions are an example of dead code commonly used in x86 assembly language. They are commonly used as the 0x90 opcode. When NOPs are added to malware, the disassembler may show the NOP instructions, leading to the analyst needing to step through them.[1]The use of junk / dead code insertion is distinct fromBinary Paddingbecause the purpose is to obfuscate the functionality of the code, rather than simply to change the malwareâ€™s signature.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Obfuscated Files or Information",
    "parent_technique_id": "T1027",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:39:37.537084"
  },
  {
    "technique_id": "T1027.017",
    "name": "SVG Smuggling",
    "description": "Adversaries may smuggle data and files past content filters by hiding malicious payloads inside of seemingly benign SVG files.[1]SVGs, or Scalable Vector Graphics, are vector-based image files constructed using XML. As such, they can legitimately include<script>tags that enable adversaries to include malicious JavaScript payloads. However, SVGs may appear less suspicious to users than other types of executable files, as they are often treated as image files.SVG smuggling can take a number of forms. For example, threat actors may include content that:Assembles malicious payloads[2]Downloads malicious payloads[3]Redirects users to malicious websites[4]Displays interactive content to users, such as fake login forms and download buttons.[4]SVG Smuggling may be used in conjunction withHTML Smugglingwhere an SVG with a malicious payload is included inside an HTML file.[2]SVGs may also be included in other types of documents, such as PDFs.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Obfuscated Files or Information",
    "parent_technique_id": "T1027",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:39:40.923128"
  },
  {
    "technique_id": "T1647",
    "name": "Plist File Modification",
    "description": "Adversaries may modify property list files (plist files) to enable other malicious activity, while also potentially evading and bypassing system defenses. macOS applications use plist files, such as theinfo.plistfile, to store properties and configuration settings that inform the operating system how to handle the application at runtime. Plist files are structured metadata in key-value pairs formatted in XML based on Apple's Core Foundation DTD. Plist files can be saved in text or binary format.[1]Adversaries can modify key-value pairs in plist files to influence system behaviors, such as hiding the execution of an application (i.e.Hidden Window) or running additional commands for persistence (ex:Launch Agent/Launch DaemonorRe-opened Applications).For example, adversaries can add a malicious application path to the~/Library/Preferences/com.apple.dock.plistfile, which controls apps that appear in the Dock. Adversaries can also modify theLSUIElementkey in an applicationâ€™sinfo.plistfile  to run the app in the background. Adversaries can also insert key-value pairs to insert environment variables, such asLSEnvironment, to enable persistence viaDynamic Linker Hijacking.[2][3]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:39:44.293456",
    "subtechniques": []
  },
  {
    "technique_id": "T1542",
    "name": "Pre-OS Boot",
    "description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.[1]Adversaries may overwrite data in boot drivers or firmware such as BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) to persist on systems at a layer below the operating system. This can be particularly difficult to detect as malware at this level will not be detected by host software-based defenses.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:39:47.575889",
    "subtechniques": [
      {
        "id": "T1542.002",
        "name": "Component Firmware"
      }
    ]
  },
  {
    "technique_id": "T1542.002",
    "name": "Component Firmware",
    "description": "Adversaries may modify component firmware to persist on systems. Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar toSystem Firmwarebut conducted upon other system components/devices that may not have the same capability or level of integrity checking.Malicious component firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Pre-OS Boot",
    "parent_technique_id": "T1542",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:39:50.926945"
  },
  {
    "technique_id": "T1055",
    "name": "Process Injection",
    "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process.There are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific.More sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:39:54.247441",
    "subtechniques": []
  },
  {
    "technique_id": "T1620",
    "name": "Reflective Code Loading",
    "description": "Adversaries may reflectively load code into a process in order to conceal the execution of malicious payloads. Reflective loading involves allocating then executing payloads directly within the memory of the process, vice creating a thread or process backed by a file path on disk (e.g.,Shared Modules).Reflectively loaded payloads may be compiled binaries, anonymous files (only present in RAM), or just snubs of fileless executable code (ex: position-independent shellcode).[1][2][3][4][5]For example, theAssembly.Load()method executed byPowerShellmay be abused to load raw code into the running process.[6]Reflective code injection is very similar toProcess Injectionexcept that the \"injection\" loads code into the processesâ€™ own memory instead of that of a separate process. Reflective loading may evade process-based detections since the execution of the arbitrary code may be masked within a legitimate or otherwise benign process. Reflectively loading payloads directly into memory may also avoid creating files or other artifacts on disk, while also enabling malware to keep these payloads encrypted (or otherwise obfuscated) until execution.[3][4][7][8]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:39:57.626860",
    "subtechniques": []
  },
  {
    "technique_id": "T1014",
    "name": "Rootkit",
    "description": "Adversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits are programs that hide the existence of malware by intercepting/hooking and modifying operating system API calls that supply system information.[1]Rootkits or rootkit enabling functionality may reside at the user or kernel level in the operating system or lower, to include a hypervisor, Master Boot Record, orSystem Firmware.[2]Rootkits have been seen for Windows, Linux, and Mac OS X systems.[3][4]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:40:00.986093",
    "subtechniques": []
  },
  {
    "technique_id": "T1553",
    "name": "Subvert Trust Controls",
    "description": "Adversaries may undermine security controls that will either warn users of untrusted activity or prevent execution of untrusted programs. Operating systems and security products may contain mechanisms to identify programs or websites as possessing some level of trust. Examples of such features would include a program being allowed to run because it is signed by a valid code signing certificate, a program prompting the user with a warning because it has an attribute set from being downloaded from the Internet, or getting an indication that you are about to connect to an untrusted site.Adversaries may attempt to subvert these trust mechanisms. The method adversaries use will depend on the specific mechanism they seek to subvert. Adversaries may conductFile and Directory Permissions ModificationorModify Registryin support of subverting these controls.[1]Adversaries may also create or steal code signing certificates to acquire trust on target systems.[2][3]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:40:04.333693",
    "subtechniques": [
      {
        "id": "T1553.001",
        "name": "Gatekeeper Bypass"
      },
      {
        "id": "T1553.002",
        "name": "Code Signing"
      },
      {
        "id": "T1553.004",
        "name": "Install Root Certificate"
      },
      {
        "id": "T1553.006",
        "name": "Code Signing Policy Modification"
      }
    ]
  },
  {
    "technique_id": "T1553.001",
    "name": "Gatekeeper Bypass",
    "description": "Adversaries may modify file attributes and subvert Gatekeeper functionality to evade user prompts and execute untrusted programs. Gatekeeper is a set of technologies that act as layer of Appleâ€™s security model to ensure only trusted applications are executed on a host. Gatekeeper was built on top of File Quarantine in Snow Leopard (10.6, 2009) and has grown to include Code Signing, security policy compliance, Notarization, and more. Gatekeeper also treats applications running for the first time differently than reopened applications.[1][2]Based on an opt-in system, when files are downloaded an extended attribute (xattr) calledcom.apple.quarantine(also known as a quarantine flag) can be set on the file by the application performing the download. Launch Services opens the application in a suspended state. For first run applications with the quarantine flag set, Gatekeeper executes the following functions:Checks extended attribute â€“ Gatekeeper checks for the quarantine flag, then provides an alert prompt to the user to allow or deny execution.[3][4]Checks System Policies - Gatekeeper checks the system security policy, allowing execution of apps downloaded from either just the App Store or the App Store and identified developers.Code Signing â€“ Gatekeeper checks for a valid code signature from an Apple Developer ID.Notarization - Using theapi.apple-cloudkit.comAPI, Gatekeeper reaches out to Apple servers to verify or pull down the notarization ticket and ensure the ticket is not revoked. Users can override notarization, which will result in a prompt of executing an \"unauthorized app\" and the security policy will be modified.Adversaries can subvert one or multiple security controls within Gatekeeper checks through logic errors (e.g.Exploitation for Defense Evasion), unchecked file types, and external libraries. For example, prior to macOS 13 Ventura, code signing and notarization checks were only conducted on first launch, allowing adversaries to write malicious executables to previously opened applications in order to bypass Gatekeeper security checks.[5][6]Applications and files loaded onto the system from a USB flash drive, optical disk, external hard drive, from a drive shared over the local network, or using the curl command may not set the quarantine flag. Additionally, it is possible to avoid setting the quarantine flag usingDrive-by Compromise.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Subvert Trust Controls",
    "parent_technique_id": "T1553",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:40:07.713463"
  },
  {
    "technique_id": "T1553.002",
    "name": "Code Signing",
    "description": "Adversaries may create, acquire, or steal code signing materials to sign their malware or tools. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with.[1]The certificates used during an operation may be created, acquired, or stolen by the adversary.[2][3]UnlikeInvalid Code Signature, this activity will result in a valid signature.Code signing to verify software on first run can be used on modern Windows and macOS systems. It is not used on Linux due to the decentralized nature of the platform.[1][4]Code signing certificates may be used to bypass security policies that require signed code to execute on a system.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Subvert Trust Controls",
    "parent_technique_id": "T1553",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:40:11.128506"
  },
  {
    "technique_id": "T1553.004",
    "name": "Install Root Certificate",
    "description": "Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers. Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate.[1]Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.Installation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials.[2]Atypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provideAdversary-in-the-Middlecapability for intercepting information transmitted over secure TLS/SSL communications.[3]Root certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of Persistence.[4]In macOS, the Ay MaMi malware uses/usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/certto install a malicious certificate as a trusted root certificate into the system keychain.[5]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Subvert Trust Controls",
    "parent_technique_id": "T1553",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:40:14.505874"
  },
  {
    "technique_id": "T1553.006",
    "name": "Code Signing Policy Modification",
    "description": "Adversaries may modify code signing policies to enable execution of unsigned or self-signed code. Code signing provides a level of authenticity on a program from a developer and a guarantee that the program has not been tampered with. Security controls can include enforcement mechanisms to ensure that only valid, signed code can be run on an operating system.Some of these security controls may be enabled by default, such as Driver Signature Enforcement (DSE) on Windows or System Integrity Protection (SIP) on macOS.[1][2]Other such controls may be disabled by default but are configurable through application controls, such as only allowing signed Dynamic-Link Libraries (DLLs) to execute on a system. Since it can be useful for developers to modify default signature enforcement policies during the development and testing of applications, disabling of these features may be possible with elevated permissions.[3][2]Adversaries may modify code signing policies in a number of ways, including through use of command-line or GUI utilities,Modify Registry, rebooting the computer in a debug/recovery mode, or by altering the value of variables in kernel memory.[4][2][5][6]Examples of commands that can modify the code signing policy of a system includebcdedit.exe -set TESTSIGNING ONon Windows andcsrutil disableon macOS.[4][2]Depending on the implementation, successful modification of a signing policy may require reboot of the compromised system. Additionally, some implementations can introduce visible artifacts for the user (ex: a watermark in the corner of the screen stating the system is in Test Mode). Adversaries may attempt to remove such artifacts.[7]To gain access to kernel memory to modify variables related to signature checks, such as modifyingg_CiOptionsto disable Driver Signature Enforcement, adversaries may conductExploitation for Privilege Escalationusing a signed, but vulnerable driver.[8][6]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Subvert Trust Controls",
    "parent_technique_id": "T1553",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:40:17.874040"
  },
  {
    "technique_id": "T1218",
    "name": "System Binary Proxy Execution",
    "description": "Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed, or otherwise trusted, binaries. Binaries used in this technique are often Microsoft-signed files, indicating that they have been either downloaded from Microsoft or are already native in the operating system.[1]Binaries signed with trusted digital certificates can typically execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files or commands.Similarly, on Linux systems adversaries may abuse trusted binaries such assplitto proxy execution of malicious commands.[2][3]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:40:21.270813",
    "subtechniques": [
      {
        "id": "T1218.015",
        "name": "Electron Applications"
      }
    ]
  },
  {
    "technique_id": "T1218.015",
    "name": "Electron Applications",
    "description": "Adversaries may abuse components of the Electron framework to execute malicious code. The Electron framework hosts many common applications such as Signal, Slack, and Microsoft Teams.[1]Originally developed by GitHub, Electron is a cross-platform desktop application development framework that employs web technologies like JavaScript, HTML, and CSS.[2]The Chromium engine is used to display web content and Node.js runs the backend code.[3]Due to the functional mechanics of Electron (such as allowing apps to run arbitrary commands), adversaries may also be able to perform malicious functions in the background potentially disguised as legitimate tools within the framework.[3]For example, the abuse ofteams.exeandchrome.exemay allow adversaries to execute malicious commands as child processes of the legitimate application (e.g.,chrome.exe --disable-gpu-sandbox --gpu-launcher=\"C:\\Windows\\system32\\cmd.exe /c calc.exe).[4]Adversaries may also execute malicious content by planting maliciousJavaScriptwithin Electron applications.[5]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "System Binary Proxy Execution",
    "parent_technique_id": "T1218",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:40:24.651157"
  },
  {
    "technique_id": "T1205",
    "name": "Traffic Signaling",
    "description": "Adversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e.Port Knocking), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software.Adversaries may also communicate with an already open port, but the service listening on that port will only respond to commands or trigger other malicious functionality if passed the appropriate magic value(s).The observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r[1], is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.On network devices, adversaries may use crafted packets to enableNetwork Device Authenticationfor standard services offered by the device such as telnet.  Such signaling may also be used to open a closed service port such as telnet, or to trigger module modification of malware implants on the device, adding, removing, or changing malicious capabilities.  Adversaries may use crafted packets to attempt to connect to one or more (open or closed) ports, but may also attempt to connect to a router interface, broadcast, and network address IP on the same port in order to achieve their goals and objectives.[2][3][4]To enable this traffic signaling on embedded devices, adversaries must first achieve and leveragePatch System Imagedue to the monolithic nature of the architecture.Adversaries may also use the Wake-on-LAN feature to turn on powered off systems. Wake-on-LAN is a hardware feature that allows a powered down system to be powered on, or woken up, by sending a magic packet to it. Once the system is powered on, it may become a target for lateral movement.[5][6]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:40:28.015775",
    "subtechniques": [
      {
        "id": "T1205.001",
        "name": "Port Knocking"
      },
      {
        "id": "T1205.002",
        "name": "Socket Filters"
      }
    ]
  },
  {
    "technique_id": "T1205.001",
    "name": "Port Knocking",
    "description": "Adversaries may use port knocking to hide open ports used for persistence or command and control. To enable a port, an adversary sends a series of attempted connections to a predefined sequence of closed ports. After the sequence is completed, opening a port is often accomplished by the host based firewall, but could also be implemented by custom software.This technique has been observed both for the dynamic opening of a listening port as well as the initiating of a connection to a listening server on a different system.The observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r[1], is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Traffic Signaling",
    "parent_technique_id": "T1205",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:40:31.384103"
  },
  {
    "technique_id": "T1205.002",
    "name": "Socket Filters",
    "description": "Adversaries may attach filters to a network socket to monitor then activate backdoors used for persistence or command and control. With elevated permissions, adversaries can use features such as thelibpcaplibrary to open sockets and install filters to allow or disallow certain types of data to come through the socket. The filter may apply to all traffic passing through the specified network interface (or every interface if not specified). When the network interface receives a packet matching the filter criteria, additional actions can be triggered on the host, such as activation of a reverse shell.To establish a connection, an adversary sends a crafted packet to the targeted host that matches the installed filter criteria.[1]Adversaries have used these socket filters to trigger the installation of implants, conduct ping backs, and to invoke command shells. Communication with these socket filters may also be used in conjunction withProtocol Tunneling.[2][3]Filters can be installed on any Unix-like platform withlibpcapinstalled or on Windows hosts usingWinpcap.  Adversaries may use eitherlibpcapwithpcap_setfilteror the standard library functionsetsockoptwithSO_ATTACH_FILTERoptions. Since the socket connection is not active until the packet is received, this behavior may be difficult to detect due to the lack of activity on a host, low CPU overhead, and limited visibility into raw socket usage.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Traffic Signaling",
    "parent_technique_id": "T1205",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:40:34.749224"
  },
  {
    "technique_id": "T1078",
    "name": "Valid Accounts",
    "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.[1]Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.In some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.[2]The overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.[3]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:40:38.148680",
    "subtechniques": [
      {
        "id": "T1078.001",
        "name": "Default Accounts"
      },
      {
        "id": "T1078.002",
        "name": "Domain Accounts"
      },
      {
        "id": "T1078.003",
        "name": "Local Accounts"
      }
    ]
  },
  {
    "technique_id": "T1078.001",
    "name": "Default Accounts",
    "description": "Adversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems. Default accounts also include default factory/provider set accounts on other types of systems, software, or devices, including the root user account in AWS, the root user account in ESXi, and the default service account in Kubernetes.[1][2][3]Default accounts are not limited to client machines; rather, they also include accounts that are preset for equipment such as network devices and computer applications, whether they are internal, open source, or commercial. Appliances that come preset with a username and password combination pose a serious threat to organizations that do not change it post installation, as they are easy targets for an adversary. Similarly, adversaries may also utilize publicly disclosed or stolenPrivate Keysor credential materials to legitimately connect to remote environments viaRemote Services.[4]Default accounts may be created on a system after initial setup by connecting or integrating it with another application. For example, when an ESXi server is connected to a vCenter server, a default privileged account calledvpxuseris created on the ESXi server. If a threat actor is able to compromise this accountâ€™s credentials (for example, viaExploitation for Credential Accesson the vCenter host), they will then have access to the ESXi server.[5][6]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Valid Accounts",
    "parent_technique_id": "T1078",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:40:41.420868"
  },
  {
    "technique_id": "T1078.002",
    "name": "Domain Accounts",
    "description": "Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion.[1]Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.[2]Adversaries may compromise domain accounts, some with a high level of privileges, through various means such asOS Credential Dumpingor password reuse, allowing access to privileged resources of the domain.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Valid Accounts",
    "parent_technique_id": "T1078",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:40:44.718875"
  },
  {
    "technique_id": "T1078.003",
    "name": "Local Accounts",
    "description": "Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.Local Accounts may also be abused to elevate privileges and harvest credentials throughOS Credential Dumping. Password reuse may allow the abuse of local accounts across a set of machines on a network for the purposes of Privilege Escalation and Lateral Movement.",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Valid Accounts",
    "parent_technique_id": "T1078",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:40:48.108826"
  },
  {
    "technique_id": "T1497",
    "name": "Virtualization/Sandbox Evasion",
    "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned fromVirtualization/Sandbox Evasionduring automated discovery to shape follow-on behaviors.[1]Adversaries may use several methods to accomplishVirtualization/Sandbox Evasionsuch as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.[2]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:40:51.482281",
    "subtechniques": [
      {
        "id": "T1497.001",
        "name": "System Checks"
      },
      {
        "id": "T1497.002",
        "name": "User Activity Based Checks"
      },
      {
        "id": "T1497.003",
        "name": "Time Based Evasion"
      }
    ]
  },
  {
    "technique_id": "T1497.001",
    "name": "System Checks",
    "description": "Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned fromVirtualization/Sandbox Evasionduring automated discovery to shape follow-on behaviors.[1]Specific checks will vary based on the target and/or adversary, but may involve behaviors such asWindows Management Instrumentation,PowerShell,System Information Discovery, andQuery Registryto obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment.Checks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. Once executed, malware may also useFile and Directory Discoveryto check if it was saved in a folder or file with unexpected or even analysis-related naming artifacts such asmalware,sample, orhash.Other common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions.[2]In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output.Hardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.[3]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Virtualization/Sandbox Evasion",
    "parent_technique_id": "T1497",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:40:54.900056"
  },
  {
    "technique_id": "T1497.002",
    "name": "User Activity Based Checks",
    "description": "Adversaries may employ various user activity checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned fromVirtualization/Sandbox Evasionduring automated discovery to shape follow-on behaviors.[1]Adversaries may search for user activity on the host based on variables such as the speed/frequency of mouse movements and clicks[2], browser history, cache, bookmarks, or number of files in common directories such as home or the desktop. Other methods may rely on specific user interaction with the system before the malicious code is activated, such as waiting for a document to close before activating a macro[3]or waiting for a user to double click on an embedded image to activate.[4]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Virtualization/Sandbox Evasion",
    "parent_technique_id": "T1497",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:40:58.282096"
  },
  {
    "technique_id": "T1497.003",
    "name": "Time Based Evasion",
    "description": "Adversaries may employ various time-based methods to detect and avoid virtualization and analysis environments. This may include enumerating time-based properties, such as uptime or the system clock, as well as the use of timers or other triggers to avoid a virtual machine environment (VME) or sandbox, specifically those that are automated or only operate for a limited amount of time.Adversaries may employ various time-based evasions, such as delaying malware functionality upon initial execution using programmatic sleep commands or native system scheduling functionality (ex:Scheduled Task/Job). Delays may also be based on waiting for specific victim conditions to be met (ex: system time, events, etc.) or employ scheduledMulti-Stage Channelsto avoid analysis and scrutiny.[1]Benign commands or other operations may also be used to delay malware execution. Loops or otherwise needless repetitions of commands, such asPings, may be used to delay malware execution and potentially exceed time thresholds of automated analysis environments.[2][3]Another variation, commonly referred to as API hammering, involves making various calls toNative APIfunctions in order to delay execution (while also potentially overloading analysis environments with junk data).[4][5]Adversaries may also use time as a metric to detect sandboxes and analysis environments, particularly those that attempt to manipulate time mechanisms to simulate longer elapses of time. For example, an adversary may be able to identify a sandbox accelerating time by sampling and calculating the expected value for an environment's timestamp before and after execution of a sleep function.[6]",
    "tactic": "Defense Evasion",
    "tactics": [
      "Defense Evasion"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Virtualization/Sandbox Evasion",
    "parent_technique_id": "T1497",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:41:01.652133"
  },
  {
    "technique_id": "T1557",
    "name": "Adversary-in-the-Middle",
    "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such asNetwork Sniffing,Transmitted Data Manipulation, or replay attacks (Exploitation for Credential Access). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.[1]For example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.[2][3][4]Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens (Steal Application Access Token) and session cookies (Steal Web Session Cookie).[5][6]Downgrade Attacks can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.[7][8][9]Adversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as inTransmitted Data Manipulation. Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially toImpair Defensesand/or in support of aNetwork Denial of Service.",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:41:05.010407",
    "subtechniques": [
      {
        "id": "T1557.002",
        "name": "ARP Cache Poisoning"
      },
      {
        "id": "T1557.003",
        "name": "DHCP Spoofing"
      }
    ]
  },
  {
    "technique_id": "T1557.002",
    "name": "ARP Cache Poisoning",
    "description": "Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such asNetwork SniffingorTransmitted Data Manipulation.The ARP protocol is used to resolve IPv4 addresses to link layer addresses, such as a media access control (MAC) address.[1]Devices in a local network segment communicate with each other by using link layer addresses. If a networked device does not have the link layer address of a particular networked device, it may send out a broadcast ARP request to the local network to translate the IP address to a MAC address. The device with the associated IP address directly replies with its MAC address. The networked device that made the ARP request will then use as well as store that information in its ARP cache.An adversary may passively wait for an ARP request to poison the ARP cache of the requesting device. The adversary may reply with their MAC address, thus deceiving the victim by making them believe that they are communicating with the intended networked device. For the adversary to poison the ARP cache, their reply must be faster than the one made by the legitimate IP address owner. Adversaries may also send a gratuitous ARP reply that maliciously announces the ownership of a particular IP address to all the devices in the local network segment.The ARP protocol is stateless and does not require authentication. Therefore, devices may wrongly add or update the MAC address of the IP address in their ARP cache.[2][3]Adversaries may use ARP cache poisoning as a means to intercept network traffic. This activity may be used to collect and/or relay data such as credentials, especially those sent over an insecure, unencrypted protocol.[2]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Adversary-in-the-Middle",
    "parent_technique_id": "T1557",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:41:08.372154"
  },
  {
    "technique_id": "T1557.003",
    "name": "DHCP Spoofing",
    "description": "Adversaries may redirect network traffic to adversary-owned systems by spoofing Dynamic Host Configuration Protocol (DHCP) traffic and acting as a malicious DHCP server on the victim network. By achieving the adversary-in-the-middle (AiTM) position, adversaries may collect network communications, including passed credentials, especially those sent over insecure, unencrypted protocols. This may also enable follow-on behaviors such asNetwork SniffingorTransmitted Data Manipulation.DHCP is based on a client-server model and has two functionalities: a protocol for providing network configuration settings from a DHCP server to a client and a mechanism for allocating network addresses to clients.[1]The typical server-client interaction is as follows:The client broadcasts aDISCOVERmessage.The server responds with anOFFERmessage, which includes an available network address.The client broadcasts aREQUESTmessage, which includes the network address offered.The server acknowledges with anACKmessage and the client receives the network configuration parameters.Adversaries may spoof as a rogue DHCP server on the victim network, from which legitimate hosts may receive malicious network configurations. For example, malware can act as a DHCP server and provide adversary-owned DNS servers to the victimized computers.[2][3]Through the malicious network configurations, an adversary may achieve the AiTM position, route client traffic through adversary-controlled systems, and collect information from the client network.DHCPv6 clients can receive network configuration information without being assigned an IP address by sending aINFORMATION-REQUEST (code 11)message to theAll_DHCP_Relay_Agents_and_Serversmulticast address.[4]Adversaries may use their rogue DHCP server to respond to this request message with malicious network configurations.Rather than establishing an AiTM position, adversaries may also abuse DHCP spoofing to perform a DHCP exhaustion attack (i.e,Service Exhaustion Flood) by generating many broadcast DISCOVER messages to exhaust a networkâ€™s DHCP allocation pool.",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Adversary-in-the-Middle",
    "parent_technique_id": "T1557",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:41:11.732566"
  },
  {
    "technique_id": "T1110",
    "name": "Brute Force",
    "description": "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained.[1]Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism.[2]Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.Brute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access toValid Accountswithin a victim environment leveraging knowledge gathered from other post-compromise behaviors such asOS Credential Dumping,Account Discovery, orPassword Policy Discovery. Adversaries may also combine brute forcing activity with behaviors such asExternal Remote Servicesas part of Initial Access.",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:41:15.114427",
    "subtechniques": [
      {
        "id": "T1110.001",
        "name": "Password Guessing"
      },
      {
        "id": "T1110.002",
        "name": "Password Cracking"
      },
      {
        "id": "T1110.003",
        "name": "Password Spraying"
      },
      {
        "id": "T1110.004",
        "name": "Credential Stuffing"
      }
    ]
  },
  {
    "technique_id": "T1110.001",
    "name": "Password Guessing",
    "description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.Guessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies.[1]Typically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:SSH (22/TCP)Telnet (23/TCP)FTP (21/TCP)NetBIOS / SMB / Samba (139/TCP & 445/TCP)LDAP (389/TCP)Kerberos (88/TCP)RDP / Terminal Services (3389/TCP)HTTP/HTTP Management Services (80/TCP & 443/TCP)MSSQL (1433/TCP)Oracle (1521/TCP)MySQL (3306/TCP)VNC (5900/TCP)SNMP (161/UDP and 162/TCP/UDP)In addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.[2]. Further, adversaries may abuse network device interfaces (such aswlanAPI) to brute force accessible wifi-router(s) via wireless authentication protocols.[3]In default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Brute Force",
    "parent_technique_id": "T1110",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:41:18.494297"
  },
  {
    "technique_id": "T1110.002",
    "name": "Password Cracking",
    "description": "Adversaries may use password cracking to attempt to recover usable credentials, such as plaintext passwords, when credential material such as password hashes are obtained.OS Credential Dumpingcan be used to obtain password hashes, this may only get an adversary so far whenPass the Hashis not an option. Further,  adversaries may leverageData from Configuration Repositoryin order to obtain hashed credentials for network devices.[1]Techniques to systematically guess the passwords used to compute hashes are available, or the adversary may use a pre-computed rainbow table to crack hashes. Cracking hashes is usually done on adversary-controlled systems outside of the target network.[2]The resulting plaintext password resulting from a successfully cracked hash may be used to log into systems, resources, and services in which the account has access.",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Brute Force",
    "parent_technique_id": "T1110",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:41:21.868184"
  },
  {
    "technique_id": "T1110.003",
    "name": "Password Spraying",
    "description": "Adversaries may use a single or small list of commonly used passwords against many different accounts to attempt to acquire valid account credentials. Password spraying uses one password (e.g. 'Password01'), or a small list of commonly used passwords, that may match the complexity policy of the domain. Logins are attempted with that password against many different accounts on a network to avoid account lockouts that would normally occur when brute forcing a single account with many passwords.[1]Typically, management services over commonly used ports are used when password spraying. Commonly targeted services include the following:SSH (22/TCP)Telnet (23/TCP)FTP (21/TCP)NetBIOS / SMB / Samba (139/TCP & 445/TCP)LDAP (389/TCP)Kerberos (88/TCP)RDP / Terminal Services (3389/TCP)HTTP/HTTP Management Services (80/TCP & 443/TCP)MSSQL (1433/TCP)Oracle (1521/TCP)MySQL (3306/TCP)VNC (5900/TCP)In addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.[2]In default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Brute Force",
    "parent_technique_id": "T1110",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:41:25.250497"
  },
  {
    "technique_id": "T1110.004",
    "name": "Credential Stuffing",
    "description": "Adversaries may use credentials obtained from breach dumps of unrelated accounts to gain access to target accounts through credential overlap. Occasionally, large numbers of username and password pairs are dumped online when a website or service is compromised and the user account credentials accessed. The information may be useful to an adversary attempting to compromise accounts by taking advantage of the tendency for users to use the same passwords across personal and business accounts.Credential stuffing is a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies.Typically, management services over commonly used ports are used when stuffing credentials. Commonly targeted services include the following:SSH (22/TCP)Telnet (23/TCP)FTP (21/TCP)NetBIOS / SMB / Samba (139/TCP & 445/TCP)LDAP (389/TCP)Kerberos (88/TCP)RDP / Terminal Services (3389/TCP)HTTP/HTTP Management Services (80/TCP & 443/TCP)MSSQL (1433/TCP)Oracle (1521/TCP)MySQL (3306/TCP)VNC (5900/TCP)In addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.[1]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Brute Force",
    "parent_technique_id": "T1110",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:41:28.614821"
  },
  {
    "technique_id": "T1555",
    "name": "Credentials from Password Stores",
    "description": "Adversaries may search for common password storage locations to obtain user credentials.[1]Passwords are stored in several places on a system, depending on the operating system or application holding the credentials. There are also specific applications and services that store passwords to make them easier for users to manage and maintain, such as password managers and cloud secrets vaults. Once credentials are obtained, they can be used to perform lateral movement and access restricted information.",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:41:32.005512",
    "subtechniques": [
      {
        "id": "T1555.001",
        "name": "Keychain"
      },
      {
        "id": "T1555.002",
        "name": "Securityd Memory"
      },
      {
        "id": "T1555.003",
        "name": "Credentials from Web Browsers"
      },
      {
        "id": "T1555.005",
        "name": "Password Managers"
      }
    ]
  },
  {
    "technique_id": "T1555.001",
    "name": "Keychain",
    "description": "Adversaries may acquire credentials from Keychain. Keychain (or Keychain Services) is the macOS credential management system that stores account names, passwords, private keys, certificates, sensitive application data, payment data, and secure notes. There are three types of Keychains: Login Keychain, System Keychain, and Local Items (iCloud) Keychain. The default Keychain is the Login Keychain, which stores user passwords and information. The System Keychain stores items accessed by the operating system, such as items shared among users on a host. The Local Items (iCloud) Keychain is used for items synced with Appleâ€™s iCloud service.Keychains can be viewed and edited through the Keychain Access application or using the command-line utilitysecurity. Keychain files are located in~/Library/Keychains/,/Library/Keychains/, and/Network/Library/Keychains/.[1][2][3]Adversaries may gather user credentials from Keychain storage/memory. For example, the commandsecurity dump-keychain â€“dwill dump all Login Keychain credentials from~/Library/Keychains/login.keychain-db. Adversaries may also directly read Login Keychain credentials from the~/Library/Keychains/login.keychainfile. Both methods require a password, where the default password for the Login Keychain is the current userâ€™s password to login to the macOS host.[4][5]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Credentials from Password Stores",
    "parent_technique_id": "T1555",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:41:35.377773"
  },
  {
    "technique_id": "T1555.002",
    "name": "Securityd Memory",
    "description": "An adversary with root access may gather credentials by readingsecuritydâ€™s memory.securitydis a service/daemon responsible for implementing security protocols such as encryption and authorization.[1]A privileged adversary may be able to scan throughsecurityd's memory to find the correct sequence of keys to decrypt the userâ€™s logon keychain. This may provide the adversary with various plaintext passwords, such as those for users, WiFi, mail, browsers, certificates, secure notes, etc.[2][3]In OS X prior to El Capitan, users with root access can read plaintext keychain passwords of logged-in users because Appleâ€™s keychain implementation allows these credentials to be cached so that users are not repeatedly prompted for passwords.[2][4]Appleâ€™ssecuritydutility takes the userâ€™s logon password, encrypts it with PBKDF2, and stores this master key in memory. Apple also uses a set of keys and algorithms to encrypt the userâ€™s password, but once the master key is found, an adversary need only iterate over the other values to unlock the final password.[2]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Credentials from Password Stores",
    "parent_technique_id": "T1555",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:41:38.764314"
  },
  {
    "technique_id": "T1555.003",
    "name": "Credentials from Web Browsers",
    "description": "Adversaries may acquire credentials from web browsers by reading files specific to the target browser.[1]Web browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future. Web browsers typically store the credentials in an encrypted format within a credential store; however, methods exist to extract plaintext credentials from web browsers.For example, on Windows systems, encrypted credentials may be obtained from Google Chrome by reading a database file,AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Dataand executing a SQL query:SELECT action_url, username_value, password_value FROM logins;. The plaintext password can then be obtained by passing the encrypted credentials to the Windows API functionCryptUnprotectData, which uses the victimâ€™s cached logon credentials as the decryption key.[2]Adversaries have executed similar procedures for common web browsers such as FireFox, Safari, Edge, etc.[3][4]Windows stores Internet Explorer and Microsoft Edge credentials in Credential Lockers managed by theWindows Credential Manager.Adversaries may also acquire credentials by searching web browser process memory for patterns that commonly match credentials.[5]After acquiring credentials from web browsers, adversaries may attempt to recycle the credentials across different systems and/or accounts in order to expand access. This can result in significantly furthering an adversary's objective in cases where credentials gained from web browsers overlap with privileged accounts (e.g. domain administrator).",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Credentials from Password Stores",
    "parent_technique_id": "T1555",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:41:42.205344"
  },
  {
    "technique_id": "T1555.005",
    "name": "Password Managers",
    "description": "Adversaries may acquire user credentials from third-party password managers.[1]Password managers are applications designed to store user credentials, normally in an encrypted database. Credentials are typically accessible after a user provides a master password that unlocks the database. After the database is unlocked, these credentials may be copied to memory. These databases can be stored as files on disk.[1]Adversaries may acquire user credentials from password managers by extracting the master password and/or plain-text credentials from memory.[2][3]Adversaries may extract credentials from memory viaExploitation for Credential Access.[4]Adversaries may also try brute forcing viaPassword Guessingto obtain the master password of a password manager.[5]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Credentials from Password Stores",
    "parent_technique_id": "T1555",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:41:45.561422"
  },
  {
    "technique_id": "T1212",
    "name": "Exploitation for Credential Access",
    "description": "Adversaries may exploit software vulnerabilities in an attempt to collect credentials. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.Credentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain authenticated access to systems. One example of this isMS14-068, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions.[1][2]Another example of this is replay attacks, in which the adversary intercepts data packets sent between parties and then later replays these packets. If services don't properly validate authentication requests, these replayed packets may allow an adversary to impersonate one of the parties and gain unauthorized access or privileges.[3][4][5]Such exploitation has been demonstrated in cloud environments as well. For example, adversaries have exploited vulnerabilities in public cloud infrastructure that allowed for unintended authentication token creation and renewal.[6]Exploitation for credential access may also result in Privilege Escalation depending on the process targeted or credentials obtained.",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:41:49.177885",
    "subtechniques": []
  },
  {
    "technique_id": "T1606",
    "name": "Forge Web Credentials",
    "description": "Adversaries may forge credential materials that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies, tokens, or other materials to authenticate and authorize user access.Adversaries may generate these credential materials in order to gain access to web resources. This differs fromSteal Web Session Cookie,Steal Application Access Token, and other similar behaviors in that the credentials are new and forged by the adversary, rather than stolen or intercepted from legitimate users.The generation of web credentials often requires secret values, such as passwords,Private Keys, or other cryptographic seed values.[1]Adversaries may also forge tokens by taking advantage of features such as theAssumeRoleandGetFederationTokenAPIs in AWS, which allow users to request temporary security credentials (i.e.,Temporary Elevated Cloud Access), or thezmprov gdpakcommand in Zimbra, which generates a pre-authentication key that can be used to generate tokens for any user in the domain.[2][3]Once forged, adversaries may use these web credentials to access resources (ex:Use Alternate Authentication Material), which may bypass multi-factor and other authentication protection mechanisms.[4][5][6]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:41:52.515344",
    "subtechniques": [
      {
        "id": "T1606.001",
        "name": "Web Cookies"
      }
    ]
  },
  {
    "technique_id": "T1606.001",
    "name": "Web Cookies",
    "description": "Adversaries may forge web cookies that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies to authenticate and authorize user access.Adversaries may generate these cookies in order to gain access to web resources. This differs fromSteal Web Session Cookieand other similar behaviors in that the cookies are new and forged by the adversary, rather than stolen or intercepted from legitimate users. Most common web applications have standardized and documented cookie values that can be generated using provided tools or interfaces.[1]The generation of web cookies often requires secret values, such as passwords,Private Keys, or other cryptographic seed values.Once forged, adversaries may use these web cookies to access resources (Web Session Cookie), which may bypass multi-factor and other authentication protection mechanisms.[2][1][3]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Forge Web Credentials",
    "parent_technique_id": "T1606",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:41:55.887024"
  },
  {
    "technique_id": "T1056",
    "name": "Input Capture",
    "description": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g.Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g.Web Portal Capture).",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:41:59.252727",
    "subtechniques": [
      {
        "id": "T1056.001",
        "name": "Keylogging"
      },
      {
        "id": "T1056.002",
        "name": "GUI Input Capture"
      },
      {
        "id": "T1056.003",
        "name": "Web Portal Capture"
      },
      {
        "id": "T1056.004",
        "name": "Credential API Hooking"
      }
    ]
  },
  {
    "technique_id": "T1056.001",
    "name": "Keylogging",
    "description": "Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities whenOS Credential Dumpingefforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.[1]Keylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes.[2]Some methods include:Hooking API callbacks used for processing keystrokes. UnlikeCredential API Hooking, this focuses solely on API functions intended for processing keystroke data.Reading raw keystroke data from the hardware buffer.Windows Registry modifications.Custom drivers.Modify System Imagemay provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.[3]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Input Capture",
    "parent_technique_id": "T1056",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:42:02.708800"
  },
  {
    "technique_id": "T1056.002",
    "name": "GUI Input Capture",
    "description": "Adversaries may mimic common operating system GUI components to prompt users for credentials with a seemingly legitimate prompt. When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex:Bypass User Account Control).Adversaries may mimic this functionality to prompt users for credentials with a seemingly legitimate prompt for a number of reasons that mimic normal usage, such as a fake installer requiring additional access or a fake malware removal suite.[1]This type of prompt can be used to collect credentials via various languages such asAppleScript[2][3][4]andPowerShell.[2][5][4]On Linux systems adversaries may launch dialog boxes prompting users for credentials from malicious shell scripts or the command line (i.e.Unix Shell).[4]Adversaries may also mimic common software authentication requests, such as those from browsers or email clients. This may also be paired with user activity monitoring (i.e.,Browser Information Discoveryand/orApplication Window Discovery) to spoof prompts when users are naturally accessing sensitive sites/data.",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Input Capture",
    "parent_technique_id": "T1056",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:42:06.101324"
  },
  {
    "technique_id": "T1056.003",
    "name": "Web Portal Capture",
    "description": "Adversaries may install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. For example, a compromised login page may log provided user credentials before logging the user in to the service.This variation on input capture may be conducted post-compromise using legitimate administrative access as a backup measure to maintain network access throughExternal Remote ServicesandValid Accountsor as part of the initial compromise by exploitation of the externally facing web service.[1]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Input Capture",
    "parent_technique_id": "T1056",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:42:09.476334"
  },
  {
    "technique_id": "T1056.004",
    "name": "Credential API Hooking",
    "description": "Adversaries may hook into Windows application programming interface (API) functions and Linux system functions to collect user credentials. Malicious hooking mechanisms may capture API or function calls that include parameters that reveal user authentication credentials.[1]UnlikeKeylogging, this technique focuses specifically on API functions that include parameters that reveal user credentials.In Windows, hooking involves redirecting calls to these functions and can be implemented via:Hooks procedures, which intercept and execute designated code in response to events such as messages, keystrokes, and mouse inputs.[2][3]Import address table (IAT) hooking, which use modifications to a processâ€™s IAT, where pointers to imported API functions are stored.[3][4][5]Inline hooking, which overwrites the first bytes in an API function to redirect code flow.[3][6][5]In Linux and macOS, adversaries may hook into system functions via theLD_PRELOAD(Linux) orDYLD_INSERT_LIBRARIES(macOS) environment variables, which enables loading shared libraries into a programâ€™s address space. For example, an adversary may capture credentials by hooking into thelibc readfunction leveraged by SSH or SCP.[7]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Input Capture",
    "parent_technique_id": "T1056",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:42:12.863021"
  },
  {
    "technique_id": "T1556",
    "name": "Modify Authentication Process",
    "description": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without usingValid Accounts.Adversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms. Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop.",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:42:16.244642",
    "subtechniques": [
      {
        "id": "T1556.003",
        "name": "Pluggable Authentication Modules"
      },
      {
        "id": "T1556.006",
        "name": "Multi-Factor Authentication"
      }
    ]
  },
  {
    "technique_id": "T1556.003",
    "name": "Pluggable Authentication Modules",
    "description": "Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module ispam_unix.so, which retrieves, sets, and verifies account authentication information in/etc/passwdand/etc/shadow.[1][2][3]Adversaries may modify components of the PAM system to create backdoors. PAM components, such aspam_unix.so, can be patched to accept arbitrary adversary supplied values as legitimate credentials.[4]Malicious modifications to the PAM system may also be abused to steal credentials. Adversaries may infect PAM resources with code to harvest user credentials, since the values exchanged with PAM components may be plain-text since PAM does not store passwords.[5][1]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Modify Authentication Process",
    "parent_technique_id": "T1556",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:42:19.519984"
  },
  {
    "technique_id": "T1556.006",
    "name": "Multi-Factor Authentication",
    "description": "Adversaries may disable or modify multi-factor authentication (MFA) mechanisms to enable persistent access to compromised accounts.Once adversaries have gained access to a network by either compromising an account lacking MFA or by employing an MFA bypass method such asMulti-Factor Authentication Request Generation, adversaries may leverage their access to modify or completely disable MFA defenses. This can be accomplished by abusing legitimate features, such as excluding users from Azure AD Conditional Access Policies, registering a new yet vulnerable/adversary-controlled MFA method, or by manually patching MFA programs and configuration files to bypass expected functionality.[1][2]For example, modifying the Windows hosts file (C:\\windows\\system32\\drivers\\etc\\hosts) to redirect MFA calls to localhost instead of an MFA server may cause the MFA process to fail. If a \"fail open\" policy is in place, any otherwise successful authentication attempt may be granted access without enforcing MFA.[3]Depending on the scope, goals, and privileges of the adversary, MFA defenses may be disabled for individual accounts or for all accounts tied to a larger group, such as all domain accounts in a victim's network environment.[3]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Modify Authentication Process",
    "parent_technique_id": "T1556",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:42:22.882645"
  },
  {
    "technique_id": "T1111",
    "name": "Multi-Factor Authentication Interception",
    "description": "Adversaries may target multi-factor authentication (MFA) mechanisms, (i.e., smart cards, token generators, etc.) to gain access to credentials that can be used to access systems, services, and network resources. Use of MFA is recommended and provides a higher level of security than usernames and passwords alone, but organizations should be aware of techniques that could be used to intercept and bypass these security mechanisms.If a smart card is used for multi-factor authentication, then a keylogger will need to be used to obtain the password associated with a smart card during normal use. With both an inserted card and access to the smart card password, an adversary can connect to a network resource using the infected system to proxy the authentication with the inserted hardware token.[1]Adversaries may also employ a keylogger to similarly target other hardware tokens, such as RSA SecurID. Capturing token input (including a user's personal identification code) may provide temporary access (i.e. replay the one-time passcode until the next value rollover) as well as possibly enabling adversaries to reliably predict future authentication values (given access to both the algorithm and any seed values used to generate appended temporary codes).[2]Other methods of MFA may be intercepted and used by an adversary to authenticate. It is common for one-time codes to be sent via out-of-band communications (email, SMS). If the device and/or service is not secured, then it may be vulnerable to interception. Service providers can also be targeted: for example, an adversary may compromise an SMS messaging service in order to steal MFA codes sent to usersâ€™ phones.[3]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:42:26.239351",
    "subtechniques": []
  },
  {
    "technique_id": "T1621",
    "name": "Multi-Factor Authentication Request Generation",
    "description": "Adversaries may attempt to bypass multi-factor authentication (MFA) mechanisms and gain access to accounts by generating MFA requests sent to users.Adversaries in possession of credentials toValid Accountsmay be unable to complete the login process if they lack access to the 2FA or MFA mechanisms required as an additional credential and security control. To circumvent this, adversaries may abuse the automatic generation of push notifications to MFA services such as Duo Push, Microsoft Authenticator, Okta, or similar services to have the user grant access to their account. If adversaries lack credentials to victim accounts, they may also abuse automatic push notification generation when this option is configured for self-service password reset (SSPR).[1]In some cases, adversaries may continuously repeat login attempts in order to bombard users with MFA push notifications, SMS messages, and phone calls, potentially resulting in the user finally accepting the authentication request in response to \"MFA fatigue.\"[2][3][4]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:42:29.593111",
    "subtechniques": []
  },
  {
    "technique_id": "T1040",
    "name": "Network Sniffing",
    "description": "Adversaries may passively sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.Data captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such asLLMNR/NBT-NS Poisoning and SMB Relay, can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.Network sniffing may reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequentLateral Movementand/orDefense Evasionactivities. Adversaries may likely also utilize network sniffing duringAdversary-in-the-Middle(AiTM) to passively gain additional knowledge about the environment.In cloud-based environments, adversaries may still be able to use traffic mirroring services to sniff network traffic from virtual machines. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.[1][2][3]Often, much of this traffic will be in cleartext due to the use of TLS termination at the load balancer level to reduce the strain of encrypting and decrypting traffic.[4][5]The adversary can then use exfiltration techniques such as Transfer Data to Cloud Account in order to access the sniffed traffic.[4]On network devices, adversaries may perform network captures usingNetwork Device CLIcommands such asmonitor capture.[6][7]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:42:32.965837",
    "subtechniques": []
  },
  {
    "technique_id": "T1003",
    "name": "OS Credential Dumping",
    "description": "Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password. Credentials can be obtained from OS caches, memory, or structures.[1]Credentials can then be used to performLateral Movementand access restricted information.Several of the tools mentioned in associated sub-techniques may be used by both adversaries and professional security testers. Additional custom tools likely exist as well.",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:42:36.373339",
    "subtechniques": []
  },
  {
    "technique_id": "T1649",
    "name": "Steal or Forge Authentication Certificates",
    "description": "Adversaries may steal or forge certificates used for authentication to access remote systems or resources. Digital certificates are often used to sign and encrypt messages and/or files. Certificates are also used as authentication material. For example, Entra ID device certificates and Active Directory Certificate Services (AD CS) certificates bind to an identity and can be used as credentials for domain accounts.[1][2]Authentication certificates can be both stolen and forged. For example, AD CS certificates can be stolen from encrypted storage (in the Registry or files)[3], misplaced certificate files (i.e.Unsecured Credentials), or directly from the Windows certificate store via various crypto APIs.[4][5][6]With appropriate enrollment rights, users and/or machines within a domain can also request and/or manually renew certificates from enterprise certificate authorities (CA). This enrollment process defines various settings and permissions associated with the certificate. Of note, the certificateâ€™s extended key usage (EKU) values define signing, encryption, and authentication use cases, while the certificateâ€™s subject alternative name (SAN) values define the certificate ownerâ€™s alternate names.[7]Abusing certificates for authentication credentials may enable other behaviors such asLateral Movement. Certificate-related misconfigurations may also enable opportunities forPrivilege Escalation, by way of allowing users to impersonate or assume privileged accounts or permissions via the identities (SANs) associated with a certificate. These abuses may also enablePersistencevia stealing or forging certificates that can be used asValid Accountsfor the duration of the certificate's validity, despite user password resets. Authentication certificates can also be stolen and forged for machine accounts.Adversaries who have access to root (or subordinate) CA certificate private keys (or mechanisms protecting/managing these keys) may also establishPersistenceby forging arbitrary authentication certificates for the victim domain (known as \"golden\" certificates).[7]Adversaries may also target certificates and related services in order to access other forms of credentials, such asGolden Ticketticket-granting tickets (TGT) or NTLM plaintext.[7]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:42:39.735245",
    "subtechniques": []
  },
  {
    "technique_id": "T1558",
    "name": "Steal or Forge Kerberos Tickets",
    "description": "Adversaries may attempt to subvert Kerberos authentication by stealing or forging Kerberos tickets to enablePass the Ticket. Kerberos is an authentication protocol widely used in modern Windows domain environments. In Kerberos environments, referred to as \"realms\", there are three basic participants: client, service, and Key Distribution Center (KDC).[1]Clients request access to a service and through the exchange of Kerberos tickets, originating from KDC, they are granted access after having successfully authenticated. The KDC is responsible for both authentication and ticket granting.  Adversaries may attempt to abuse Kerberos by stealing tickets or forging tickets to enable unauthorized access.On Windows, the built-inklistutility can be used to list and analyze cached Kerberos tickets.[2]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:42:43.082723",
    "subtechniques": [
      {
        "id": "T1558.005",
        "name": "Ccache Files"
      }
    ]
  },
  {
    "technique_id": "T1558.005",
    "name": "Ccache Files",
    "description": "Adversaries may attempt to steal Kerberos tickets stored in credential cache files (or ccache). These files are used for short term storage of a user's active session credentials. The ccache file is created upon user authentication and allows for access to multiple services without the user having to re-enter credentials.The/etc/krb5.confconfiguration file and theKRB5CCNAMEenvironment variable are used to set the storage location for ccache entries. On Linux, credentials are typically stored in the/tmpdirectory with a naming format ofkrb5cc_%UID%orkrb5.ccache. On macOS, ccache entries are stored by default in memory with anAPI:{uuid}naming scheme. Typically, users interact with ticket storage usingkinit, which obtains a Ticket-Granting-Ticket (TGT) for the principal;klist, which lists obtained tickets currently held in the credentials cache; and other built-in binaries.[1][2]Adversaries can collect tickets from ccache files stored on disk and authenticate as the current user without their password to performPass the Ticketattacks. Adversaries can also use these tickets to impersonate legitimate users with elevated privileges to performPrivilege Escalation. Tools like Kekeo can also be used by adversaries to convert ccache files to Windows format for furtherLateral Movement. On macOS, adversaries may use open-source tools or the Kerberos framework to interact with ccache files and extract TGTs or Service Tickets via lower-level APIs.[3][4][5][6]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Steal or Forge Kerberos Tickets",
    "parent_technique_id": "T1558",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:42:46.445814"
  },
  {
    "technique_id": "T1539",
    "name": "Steal Web Session Cookie",
    "description": "An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.Cookies are often valid for an extended period of time, even if the web application is not actively used. Cookies can be found on disk, in the process memory of the browser, and in network traffic to remote systems. Additionally, other applications on the targets machine might store sensitive authentication cookies in memory (e.g. apps which authenticate to cloud services). Session cookies can be used to bypasses some multi-factor authentication protocols.[1]There are several examples of malware targeting cookies from web browsers on the local system.[2][3]Adversaries may also steal cookies by injecting malicious JavaScript content into websites or relying onUser Executionby tricking victims into running malicious JavaScript in their browser.[4][5]There are also open source frameworks such asEvilginx2andMuraenathat can gather session cookies through a malicious proxy (e.g.,Adversary-in-the-Middle) that can be set up by an adversary and used in phishing campaigns.[6][7]After an adversary acquires a valid cookie, they can then perform aWeb Session Cookietechnique to login to the corresponding web application.",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:42:49.823558",
    "subtechniques": []
  },
  {
    "technique_id": "T1552",
    "name": "Unsecured Credentials",
    "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g.Bash History), operating system or application-specific repositories (e.g.Credentials in Registry),  or other specialized files/artifacts (e.g.Private Keys).[1]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:42:53.175830",
    "subtechniques": [
      {
        "id": "T1552.001",
        "name": "Credentials In Files"
      },
      {
        "id": "T1552.003",
        "name": "Bash History"
      },
      {
        "id": "T1552.004",
        "name": "Private Keys"
      }
    ]
  },
  {
    "technique_id": "T1552.001",
    "name": "Credentials In Files",
    "description": "Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.It is possible to extract passwords from backups or saved virtual machines throughOS Credential Dumping.[1]Passwords may also be obtained from Group Policy Preferences stored on the Windows Domain Controller.[2]In cloud and/or containerized environments, authenticated user and service account credentials are often stored in local configuration and credential files.[3]They may also be found as parameters to deployment commands in container logs.[4]In some cases, these files can be copied and reused on another machine or the contents can be read and then used to authenticate without needing to copy any files.[5]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Unsecured Credentials",
    "parent_technique_id": "T1552",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:42:56.487077"
  },
  {
    "technique_id": "T1552.003",
    "name": "Bash History",
    "description": "Adversaries may search the bash command history on compromised systems for insecurely stored credentials. Bash keeps track of the commands users type on the command-line with the \"history\" utility. Once a user logs out, the history is flushed to the userâ€™s.bash_historyfile. For each user, this file resides at the same location:~/.bash_history. Typically, this file keeps track of the userâ€™s last 500 commands. Users often type usernames and passwords on the command-line as parameters to programs, which then get saved to this file when they log out. Adversaries can abuse this by looking through the file for potential credentials.[1]",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Unsecured Credentials",
    "parent_technique_id": "T1552",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:42:59.854947"
  },
  {
    "technique_id": "T1552.004",
    "name": "Private Keys",
    "description": "Adversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures.[1]Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc.Adversaries may also look in common key directories, such as~/.sshfor SSH keys on * nix-based systems orC:\\Users\\(username)\\.ssh\\on Windows. Adversary tools may also search compromised systems for file extensions relating to cryptographic keys and certificates.[2][3]When a device is registered to Entra ID, a device key and a transport key are generated and used to verify the deviceâ€™s identity.[4]An adversary with access to the device may be able to export the keys in order to impersonate the device.[5]On network devices, private keys may be exported viaNetwork Device CLIcommands such ascrypto pki export.[6]Some private keys require a password or passphrase for operation, so an adversary may also useInput Capturefor keylogging or attempt toBrute Forcethe passphrase off-line. These private keys can be used to authenticate toRemote Serviceslike SSH or for use in decrypting other collected files such as email.",
    "tactic": "Credential Access",
    "tactics": [
      "Credential Access"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Unsecured Credentials",
    "parent_technique_id": "T1552",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:43:03.224418"
  },
  {
    "technique_id": "T1087",
    "name": "Account Discovery",
    "description": "Adversaries may attempt to get a listing of valid accounts, usernames, or email addresses on a system or within a compromised environment. This information can help adversaries determine which accounts exist, which can aid in follow-on behavior such as brute-forcing, spear-phishing attacks, or account takeovers (e.g.,Valid Accounts).Adversaries may use several methods to enumerate accounts, including abuse of existing tools, built-in commands, and potential misconfigurations that leak account names and roles or permissions in the targeted environment.For examples, cloud environments typically provide easily accessible interfaces to obtain user lists.[1][2]On hosts, adversaries can use defaultPowerShelland other command line functionality to identify accounts. Information about email addresses and accounts may also be extracted by searching an infected systemâ€™s files.",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:43:06.598464",
    "subtechniques": [
      {
        "id": "T1087.001",
        "name": "Local Account"
      },
      {
        "id": "T1087.002",
        "name": "Domain Account"
      }
    ]
  },
  {
    "technique_id": "T1087.001",
    "name": "Local Account",
    "description": "Adversaries may attempt to get a listing of local system accounts. This information can help adversaries determine which local accounts exist on a system to aid in follow-on behavior.Commands such asnet userandnet localgroupof theNetutility andidandgroupson macOS and Linux can list local users and groups.[1][2][3]On Linux, local users can also be enumerated through the use of the/etc/passwdfile. On macOS, thedscl . list /Userscommand can be used to enumerate local accounts. On ESXi servers, theesxcli system account listcommand can list local user accounts.[4]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Account Discovery",
    "parent_technique_id": "T1087",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:43:10.019656"
  },
  {
    "technique_id": "T1087.002",
    "name": "Domain Account",
    "description": "Adversaries may attempt to get a listing of domain accounts. This information can help adversaries determine which domain accounts exist to aid in follow-on behavior such as targeting specific accounts which possess particular privileges.Commands such asnet user /domainandnet group /domainof theNetutility,dscacheutil -q groupon macOS, andldapsearchon Linux can list domain users and groups.PowerShellcmdlets includingGet-ADUserandGet-ADGroupMembermay enumerate members of Active Directory groups.[1]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Account Discovery",
    "parent_technique_id": "T1087",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:43:13.429732"
  },
  {
    "technique_id": "T1010",
    "name": "Application Window Discovery",
    "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used.[1]For example, information about application windows could be used identify potential data to collect as well as identifying security tooling (Security Software Discovery) to evade.[2]Adversaries typically abuse system features for this type of enumeration. For example, they may gather information through native system features such asCommand and Scripting Interpretercommands andNative APIfunctions.",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:43:16.820368",
    "subtechniques": []
  },
  {
    "technique_id": "T1217",
    "name": "Browser Information Discovery",
    "description": "Adversaries may enumerate information about browsers to learn more about compromised environments. Data saved by browsers (such as bookmarks, accounts, and browsing history) may reveal a variety of personal information about users (e.g., banking sites, relationships/interests, social media, etc.) as well as details about internal network resources such as servers, tools/dashboards, or other related infrastructure.[1]Browser information may also highlight additional targets after an adversary has access to valid credentials, especiallyCredentials In Filesassociated with logins cached by a browser.Specific storage locations vary based on platform and/or application, but browser information is typically stored in local files and databases (e.g.,%APPDATA%/Google/Chrome).[2]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:43:20.197131",
    "subtechniques": []
  },
  {
    "technique_id": "T1622",
    "name": "Debugger Evasion",
    "description": "Adversaries may employ various means to detect and avoid debuggers. Debuggers are typically used by defenders to trace and/or analyze the execution of potential malware payloads.[1]Debugger evasion may include changing behaviors based on the results of the checks for the presence of artifacts indicative of a debugged environment. Similar toVirtualization/Sandbox Evasion, if the adversary detects a debugger, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for debugger artifacts before dropping secondary or additional payloads.Specific checks will vary based on the target and/or adversary. On Windows, this may involveNative APIfunction calls such asIsDebuggerPresent()andNtQueryInformationProcess(), or manually checking theBeingDebuggedflag of the Process Environment Block (PEB). On Linux, this may involve querying/proc/self/statusfor theTracerPIDfield, which indicates whether or not the process is being traced by dynamic analysis tools.[2][3]Other checks for debugging artifacts may also seek to enumerate hardware breakpoints, interrupt assembly opcodes, time checks, or measurements if exceptions are raised in the current process (assuming a present debugger would \"swallow\" or handle the potential error).[4][5][6]Malware may also leverage Structured Exception Handling (SEH) to detect debuggers by throwing an exception and detecting whether the process is suspended. SEH handles both hardware and software expectations, providing control over the exceptions including support for debugging. If a debugger is present, the programâ€™s control will be transferred to the debugger, and the execution of the code will be suspended. If the debugger is not present, control will be transferred to the SEH handler, which will automatically handle the exception and allow the programâ€™s execution to continue.[7]Adversaries may use the information learned from these debugger checks during automated discovery to shape follow-on behaviors. Debuggers can also be evaded by detaching the process or flooding debug logs with meaningless data via messages produced by loopingNative APIfunction calls such asOutputDebugStringW().[8][9]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:43:23.480657",
    "subtechniques": []
  },
  {
    "technique_id": "T1652",
    "name": "Device Driver Discovery",
    "description": "Adversaries may attempt to enumerate local device drivers on a victim host. Information about device drivers may highlight various insights that shape follow-on behaviors, such as the function/purpose of the host, present security tools (i.e.Security Software Discovery) or other defenses (e.g.,Virtualization/Sandbox Evasion), as well as potential exploitable vulnerabilities (e.g.,Exploitation for Privilege Escalation).Many OS utilities may provide information about local device drivers, such asdriverquery.exeand theEnumDeviceDrivers()API function on Windows.[1][2]Information about device drivers (as well as associated services, i.e.,System Service Discovery) may also be available in the Registry.[3]On Linux/macOS, device drivers (in the form of kernel modules) may be visible within/devor using utilities such aslsmodandmodinfo.[4][5][6]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:43:26.852490",
    "subtechniques": []
  },
  {
    "technique_id": "T1083",
    "name": "File and Directory Discovery",
    "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information fromFile and Directory Discoveryduring automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Many command shell utilities can be used to obtain this information. Examples includedir,tree,ls,find, andlocate.[1]Custom tools may also be used to gather file and directory information and interact with theNative API. Adversaries may also leverage aNetwork Device CLIon network devices to gather file and directory information (e.g.dir,show flash, and/ornvram).[2]Some files and directories may require elevated or specific user permissions to access.",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:43:30.436502",
    "subtechniques": []
  },
  {
    "technique_id": "T1654",
    "name": "Log Enumeration",
    "description": "Adversaries may enumerate system and service logs to find useful data. These logs may highlight various types of valuable insights for an adversary, such as user authentication records (Account Discovery), security or vulnerable software (Software Discovery), or hosts within a compromised network (Remote System Discovery).Host binaries may be leveraged to collect system logs. Examples include usingwevtutil.exeorPowerShellon Windows to access and/or export security event information.[1][2]In cloud environments, adversaries may leverage utilities such as the Azure VM Agentâ€™sCollectGuestLogs.exeto collect security logs from cloud hosted infrastructure.[3]Adversaries may also target centralized logging infrastructure such as SIEMs. Logs may also be bulk exported and sent to adversary-controlled infrastructure for offline analysis.In addition to gaining a better understanding of the environment, adversaries may also monitor logs in real time to track incident response procedures. This may allow them to adjust their techniques in order to maintain persistence or evade defenses.[4]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:43:33.799562",
    "subtechniques": []
  },
  {
    "technique_id": "T1046",
    "name": "Network Service Discovery",
    "description": "Adversaries may attempt to get a listing of services running on remote hosts and local network infrastructure devices, including those that may be vulnerable to remote software exploitation. Common methods to acquire this information include port, vulnerability, and/or wordlist scans using tools that are brought onto a system.[1]Within cloud environments, adversaries may attempt to discover services running on other cloud hosts. Additionally, if the cloud environment is connected to a on-premises environment, adversaries may be able to identify services running on non-cloud systems as well.Within macOS environments, adversaries may use the native Bonjour application to discover services running on other macOS hosts within a network. The Bonjour mDNSResponder daemon automatically registers and advertises a hostâ€™s registered services on the network. For example, adversaries can use a mDNS query (such asdns-sd -B _ssh._tcp .) to find other systems broadcasting the ssh service.[2][3]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:43:37.229695",
    "subtechniques": []
  },
  {
    "technique_id": "T1135",
    "name": "Network Share Discovery",
    "description": "Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network.File sharing over a Windows network occurs over the SMB protocol.[1][2]Netcan be used to query a remote system for available shared drives using thenet view \\\\remotesystemcommand. It can also be used to query shared drives on the local system usingnet share. For macOS, thesharing -lcommand lists all shared points used for smb services.",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:43:40.645171",
    "subtechniques": []
  },
  {
    "technique_id": "T1040",
    "name": "Network Sniffing",
    "description": "Adversaries may passively sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.Data captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such asLLMNR/NBT-NS Poisoning and SMB Relay, can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.Network sniffing may reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequentLateral Movementand/orDefense Evasionactivities. Adversaries may likely also utilize network sniffing duringAdversary-in-the-Middle(AiTM) to passively gain additional knowledge about the environment.In cloud-based environments, adversaries may still be able to use traffic mirroring services to sniff network traffic from virtual machines. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.[1][2][3]Often, much of this traffic will be in cleartext due to the use of TLS termination at the load balancer level to reduce the strain of encrypting and decrypting traffic.[4][5]The adversary can then use exfiltration techniques such as Transfer Data to Cloud Account in order to access the sniffed traffic.[4]On network devices, adversaries may perform network captures usingNetwork Device CLIcommands such asmonitor capture.[6][7]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:43:43.947242",
    "subtechniques": []
  },
  {
    "technique_id": "T1201",
    "name": "Password Policy Discovery",
    "description": "Adversaries may attempt to access detailed information about the password policy used within an enterprise network or cloud environment. Password policies are a way to enforce complex passwords that are difficult to guess or crack throughBrute Force. This information may help the adversary to create a list of common passwords and launch dictionary and/or brute force attacks which adheres to the policy (e.g. if the minimum password length should be 8, then not trying passwords such as 'pass123'; not checking for more than 3-4 passwords per account if the lockout is set to 6 as to not lock out accounts).Password policies can be set and discovered on Windows, Linux, and macOS systems via various command shell utilities such asnet accounts (/domain),Get-ADDefaultDomainPasswordPolicy,chage -l,cat /etc/pam.d/common-password, andpwpolicy getaccountpolicies[1][2]. Adversaries may also leverage aNetwork Device CLIon network devices to discover password policy information (e.g.show aaa,show aaa common-criteria policy all).[3]Password policies can be discovered in cloud environments using available APIs such asGetAccountPasswordPolicyin AWS[4].",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:43:47.306120",
    "subtechniques": []
  },
  {
    "technique_id": "T1120",
    "name": "Peripheral Device Discovery",
    "description": "Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system.[1][2]Peripheral devices could include auxiliary resources that support a variety of functionalities such as keyboards, printers, cameras, smart card readers, or removable storage. The information may be used to enhance their awareness of the system and network environment or may be used for further actions.",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:43:50.687179",
    "subtechniques": []
  },
  {
    "technique_id": "T1069",
    "name": "Permission Groups Discovery",
    "description": "Adversaries may attempt to discover group and permission settings. This information can help adversaries determine which user accounts and groups are available, the membership of users in particular groups, and which users and groups have elevated permissions.Adversaries may attempt to discover group permission settings in many different ways. This data may provide the adversary with information about the compromised environment that can be used in follow-on activity and targeting.[1]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:43:54.048660",
    "subtechniques": [
      {
        "id": "T1069.001",
        "name": "Local Groups"
      },
      {
        "id": "T1069.002",
        "name": "Domain Groups"
      }
    ]
  },
  {
    "technique_id": "T1069.001",
    "name": "Local Groups",
    "description": "Adversaries may attempt to find local system groups and permission settings. The knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.Commands such asnet localgroupof theNetutility,dscl . -list /Groupson macOS, andgroupson Linux can list local groups.",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Permission Groups Discovery",
    "parent_technique_id": "T1069",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:43:57.430883"
  },
  {
    "technique_id": "T1069.002",
    "name": "Domain Groups",
    "description": "Adversaries may attempt to find domain-level groups and permission settings. The knowledge of domain-level permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as domain administrators.Commands such asnet group /domainof theNetutility,dscacheutil -q groupon macOS, andldapsearchon Linux can list domain-level groups.",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Permission Groups Discovery",
    "parent_technique_id": "T1069",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:44:00.847084"
  },
  {
    "technique_id": "T1057",
    "name": "Process Discovery",
    "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information fromProcess Discoveryduring automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.In Windows environments, adversaries could obtain details on running processes using theTasklistutility viacmdorGet-ProcessviaPowerShell. Information about processes can also be extracted from the output ofNative APIcalls such asCreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with thepscommand. Adversaries may also opt to enumerate processes via/proc. ESXi also supports use of thepscommand, as well asesxcli system process list.[1][2]On network devices,Network Device CLIcommands such asshow processescan be used to display current running processes.[3][4]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:44:04.398440",
    "subtechniques": []
  },
  {
    "technique_id": "T1018",
    "name": "Remote System Discovery",
    "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such asPing,net viewusingNet, or, on ESXi servers,esxcli network diag ping.Adversaries may also analyze data from local host files (ex:C:\\Windows\\System32\\Drivers\\etc\\hostsor/etc/hosts) or other passive means (such as localArpcache entries) in order to discover the presence of remote systems in an environment.Adversaries may also target discovery of network infrastructure as well as leverageNetwork Device CLIcommands on network devices to gather detailed information about systems within a network (e.g.show cdp neighbors,show arp).[1][2]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:44:07.818659",
    "subtechniques": []
  },
  {
    "technique_id": "T1518",
    "name": "Software Discovery",
    "description": "Adversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment. Adversaries may use the information fromSoftware Discoveryduring automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Such software may be deployed widely across the environment for configuration management or security reasons, such asSoftware Deployment Tools, and may allow adversaries broad access to infect devices or move laterally.Adversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable toExploitation for Privilege Escalation.",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:44:11.211643",
    "subtechniques": [
      {
        "id": "T1518.001",
        "name": "Security Software Discovery"
      }
    ]
  },
  {
    "technique_id": "T1518.001",
    "name": "Security Software Discovery",
    "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as cloud monitoring agents and anti-virus. Adversaries may use the information fromSecurity Software Discoveryduring automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Example commands that can be used to obtain security software information arenetsh,reg querywithReg,dirwithcmd, andTasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.Adversaries may also utilize theCloud APIto discover cloud-native security software installed on compute infrastructure, such as the AWS CloudWatch agent, Azure VM Agent, and Google Cloud Monitor agent. These agents  may collect  metrics and logs from the VM, which may be centrally aggregated in a cloud-based monitoring platform.",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Software Discovery",
    "parent_technique_id": "T1518",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:44:14.669886"
  },
  {
    "technique_id": "T1082",
    "name": "System Information Discovery",
    "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information fromSystem Information Discoveryduring automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Tools such asSysteminfocan be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through thesystemsetupconfiguration tool on macOS. As an example, adversaries with user-level access can execute thedf -aHcommand to obtain currently mounted disks and associated freely available space. Adversaries may also leverage aNetwork Device CLIon network devices to gather detailed system information (e.g.show version).[1]On ESXi servers, threat actors may gather system information from various esxcli utilities, such assystem hostname get,system version get, andstorage filesystem list(to list storage volumes).[2][3]Infrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.[4][5][6]System Information Discoverycombined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.[7][8]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:44:18.298145",
    "subtechniques": []
  },
  {
    "technique_id": "T1614",
    "name": "System Location Discovery",
    "description": "Adversaries may gather information in an attempt to calculate the geographical location of a victim host. Adversaries may use the information fromSystem Location Discoveryduring automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Adversaries may attempt to infer the location of a system using various system checks, such as time zone, keyboard layout, and/or language settings.[1][2][3]Windows API functions such asGetLocaleInfoWcan also be used to determine the locale of the host.[1]In cloud environments, an instance's availability zone may also be discovered by accessing the instance metadata service from the instance.[4][5]Adversaries may also attempt to infer the location of a victim host using IP addressing, such as via online geolocation IP-lookup services.[6][2]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:44:21.681015",
    "subtechniques": [
      {
        "id": "T1614.001",
        "name": "System Language Discovery"
      }
    ]
  },
  {
    "technique_id": "T1614.001",
    "name": "System Language Discovery",
    "description": "Adversaries may attempt to gather information about the system language of a victim in order to infer the geographical location of that host. This information may be used to shape follow-on behaviors, including whether the adversary infects the target and/or attempts specific actions. This decision may be employed by malware developers and operators to reduce their risk of attracting the attention of specific law enforcement agencies or prosecution/scrutiny from other entities.[1]There are various sources of data an adversary could use to infer system language, such as system defaults and keyboard layouts. Specific checks will vary based on the target and/or adversary, but may involve behaviors such asQuery Registryand calls toNative APIfunctions.[2]For example, on a Windows system adversaries may attempt to infer the language of a system by querying the registry keyHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Nls\\Languageor parsing the outputs of Windows API functionsGetUserDefaultUILanguage,GetSystemDefaultUILanguage,GetKeyboardLayoutListandGetUserDefaultLangID.[3][4][5]On a macOS or Linux system, adversaries may querylocaleto retrieve the value of the$LANGenvironment variable.",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "System Location Discovery",
    "parent_technique_id": "T1614",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:44:25.056108"
  },
  {
    "technique_id": "T1016",
    "name": "System Network Configuration Discovery",
    "description": "Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples includeArp,ipconfig/ifconfig,nbtstat, androute.Adversaries may also leverage aNetwork Device CLIon network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g.show ip route,show ip interface).[1][2]On ESXi, adversaries may leverage esxcli to gather network configuration information. For example, the commandesxcli network nic listwill retrieve the MAC address, whileesxcli network ip interface ipv4 getwill retrieve the local IPv4 address.[3]Adversaries may use the information fromSystem Network Configuration Discoveryduring automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:44:28.583450",
    "subtechniques": [
      {
        "id": "T1016.001",
        "name": "Internet Connection Discovery"
      },
      {
        "id": "T1016.002",
        "name": "Wi-Fi Discovery"
      }
    ]
  },
  {
    "technique_id": "T1016.001",
    "name": "Internet Connection Discovery",
    "description": "Adversaries may check for Internet connectivity on compromised systems. This may be performed during automated discovery and can be accomplished in numerous ways such as usingPing,tracert, and GET requests to websites.Adversaries may use the results and responses from these requests to determine if the system is capable of communicating with their C2 servers before attempting to connect to them. The results may also be used to identify routes, redirectors, and proxy servers.",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "System Network Configuration Discovery",
    "parent_technique_id": "T1016",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:44:31.948631"
  },
  {
    "technique_id": "T1016.002",
    "name": "Wi-Fi Discovery",
    "description": "Adversaries may search for information about Wi-Fi networks, such as network names and passwords, on compromised systems. Adversaries may use Wi-Fi information as part ofAccount Discovery,Remote System Discovery, and other discovery orCredential Accessactivity to support both ongoing and future campaigns.Adversaries may collect various types of information about Wi-Fi networks from hosts. For example, on Windows names and passwords of all Wi-Fi networks a device has previously connected to may be available throughnetsh wlan show profilesto enumerate Wi-Fi names and thennetsh wlan show profile \"Wi-Fi name\" key=clearto show a Wi-Fi networkâ€™s corresponding password.[1][2][3]Additionally, names and other details of locally reachable Wi-Fi networks can be discovered using calls towlanAPI.dllNative APIfunctions.[4]On Linux, names and passwords of all Wi-Fi-networks a device has previously connected to may be available in files under/etc/NetworkManager/system-connections/.[5]On macOS, the password of a known Wi-Fi may be identified withsecurity find-generic-password -wa wifiname(requires admin username/password).[6]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "System Network Configuration Discovery",
    "parent_technique_id": "T1016",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:44:35.306317"
  },
  {
    "technique_id": "T1049",
    "name": "System Network Connections Discovery",
    "description": "Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network.An adversary who gains access to a system that is part of a cloud-based environment may map out Virtual Private Clouds or Virtual Networks in order to determine what systems and services are connected. The actions performed are likely the same types of discovery techniques depending on the operating system, but the resulting information may include details about the networked cloud environment relevant to the adversary's goals. Cloud providers may have different ways in which their virtual networks operate.[1][2][3]Similarly, adversaries who gain access to network devices may also perform similar discovery activities to gather information about connected systems and services.Utilities and commands that acquire this information includenetstat, \"net use,\" and \"net session\" withNet. In Mac and Linux,netstatandlsofcan be used to list current connections.who -aandwcan be used to show which users are currently logged in, similar to \"net session\". Additionally, built-in features native to network devices andNetwork Device CLImay be used (e.g.show ip sockets,show tcp brief).[4]On ESXi servers, the commandesxi network ip connection listcan be used to list active network connections.[5]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:44:38.718977",
    "subtechniques": []
  },
  {
    "technique_id": "T1033",
    "name": "System Owner/User Discovery",
    "description": "Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by usingOS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information fromSystem Owner/User Discoveryduring automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Various utilities and commands may acquire this information, includingwhoami. In macOS and Linux, the currently logged in user can be identified withwandwho. On macOS thedscl . list /Users | grep -v '_'command can also be used to enumerate user accounts. Environment variables, such as%USERNAME%and$USER, may also be used to access this information.On network devices,Network Device CLIcommands such asshow usersandshow sshcan be used to display users currently logged into the device.[1][2]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:44:42.246906",
    "subtechniques": []
  },
  {
    "technique_id": "T1007",
    "name": "System Service Discovery",
    "description": "Adversaries may try to gather information about registered local system services. Adversaries may obtain information about services using tools as well as OS utility commands such assc query,tasklist /svc,systemctl --type=service, andnet start.Adversaries may use the information fromSystem Service Discoveryduring automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:44:45.654548",
    "subtechniques": []
  },
  {
    "technique_id": "T1124",
    "name": "System Time Discovery",
    "description": "An adversary may gather the system time and/or time zone settings from a local or remote system. The system time is set and stored by services, such as the Windows Time Service on Windows orsystemsetupon macOS.[1][2][3]These time settings may also be synchronized between systems and services in an enterprise network, typically accomplished with a network time server within a domain.[4][5]System time information may be gathered in a number of ways, such as withNeton Windows by performingnet time \\hostnameto gather the system time on a remote system. The victim's time zone may also be inferred from the current system time or gathered by usingw32tm /tz.[2]In addition, adversaries can discover device uptime through functions such asGetTickCount()to determine how long it has been since the system booted up.[6]On network devices,Network Device CLIcommands such asshow clock detailcan be used to see the current time configuration.[7]On ESXi servers,esxcli system clock getcan be used for the same purpose.In addition, system calls â€“ such astime()â€“ have been used to collect the current time on Linux devices.[8]On macOS systems, adversaries may use commands such assystemsetup -gettimezoneortimeIntervalSinceNowto gather current time zone information or current date and time.[9][10]This information could be useful for performing other techniques, such as executing a file with aScheduled Task/Job[11], or to discover locality information based on time zone to assist in victim targeting (i.e.System Location Discovery). Adversaries may also use knowledge of system time as part of a time bomb, or delaying execution until a specified date/time.[12]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:44:49.084187",
    "subtechniques": []
  },
  {
    "technique_id": "T1673",
    "name": "Virtual Machine Discovery",
    "description": "An adversary may attempt to enumerate running virtual machines (VMs) after gaining access to a host or hypervisor. For example, adversaries may enumerate a list of VMs on an ESXi hypervisor using aHypervisor CLIsuch asesxcliorvim-cmd(e.g.esxcli vm process list or vim-cmd vmsvc/getallvms).[1][2]Adversaries may also directly leverage a graphical user interface, such as VMware vCenter, in order to view virtual machines on a host.Adversaries may use the information fromVirtual Machine Discoveryduring discovery to shape follow-on behaviors. Subsequently discovered VMs may be leveraged for follow-on activities such asService StoporData Encrypted for Impact.[1]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:44:52.438450",
    "subtechniques": []
  },
  {
    "technique_id": "T1497",
    "name": "Virtualization/Sandbox Evasion",
    "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned fromVirtualization/Sandbox Evasionduring automated discovery to shape follow-on behaviors.[1]Adversaries may use several methods to accomplishVirtualization/Sandbox Evasionsuch as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.[2]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:44:55.717696",
    "subtechniques": [
      {
        "id": "T1497.001",
        "name": "System Checks"
      },
      {
        "id": "T1497.002",
        "name": "User Activity Based Checks"
      },
      {
        "id": "T1497.003",
        "name": "Time Based Evasion"
      }
    ]
  },
  {
    "technique_id": "T1497.001",
    "name": "System Checks",
    "description": "Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned fromVirtualization/Sandbox Evasionduring automated discovery to shape follow-on behaviors.[1]Specific checks will vary based on the target and/or adversary, but may involve behaviors such asWindows Management Instrumentation,PowerShell,System Information Discovery, andQuery Registryto obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment.Checks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. Once executed, malware may also useFile and Directory Discoveryto check if it was saved in a folder or file with unexpected or even analysis-related naming artifacts such asmalware,sample, orhash.Other common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions.[2]In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output.Hardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.[3]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Virtualization/Sandbox Evasion",
    "parent_technique_id": "T1497",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:44:59.042180"
  },
  {
    "technique_id": "T1497.002",
    "name": "User Activity Based Checks",
    "description": "Adversaries may employ various user activity checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned fromVirtualization/Sandbox Evasionduring automated discovery to shape follow-on behaviors.[1]Adversaries may search for user activity on the host based on variables such as the speed/frequency of mouse movements and clicks[2], browser history, cache, bookmarks, or number of files in common directories such as home or the desktop. Other methods may rely on specific user interaction with the system before the malicious code is activated, such as waiting for a document to close before activating a macro[3]or waiting for a user to double click on an embedded image to activate.[4]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Virtualization/Sandbox Evasion",
    "parent_technique_id": "T1497",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:45:02.303554"
  },
  {
    "technique_id": "T1497.003",
    "name": "Time Based Evasion",
    "description": "Adversaries may employ various time-based methods to detect and avoid virtualization and analysis environments. This may include enumerating time-based properties, such as uptime or the system clock, as well as the use of timers or other triggers to avoid a virtual machine environment (VME) or sandbox, specifically those that are automated or only operate for a limited amount of time.Adversaries may employ various time-based evasions, such as delaying malware functionality upon initial execution using programmatic sleep commands or native system scheduling functionality (ex:Scheduled Task/Job). Delays may also be based on waiting for specific victim conditions to be met (ex: system time, events, etc.) or employ scheduledMulti-Stage Channelsto avoid analysis and scrutiny.[1]Benign commands or other operations may also be used to delay malware execution. Loops or otherwise needless repetitions of commands, such asPings, may be used to delay malware execution and potentially exceed time thresholds of automated analysis environments.[2][3]Another variation, commonly referred to as API hammering, involves making various calls toNative APIfunctions in order to delay execution (while also potentially overloading analysis environments with junk data).[4][5]Adversaries may also use time as a metric to detect sandboxes and analysis environments, particularly those that attempt to manipulate time mechanisms to simulate longer elapses of time. For example, an adversary may be able to identify a sandbox accelerating time by sampling and calculating the expected value for an environment's timestamp before and after execution of a sleep function.[6]",
    "tactic": "Discovery",
    "tactics": [
      "Discovery"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Virtualization/Sandbox Evasion",
    "parent_technique_id": "T1497",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:45:05.605361"
  },
  {
    "technique_id": "T1210",
    "name": "Exploitation of Remote Services",
    "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.Â A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.An adversary may need to determine if the remote system is in a vulnerable state, which may be done throughNetwork Service Discoveryor other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.There are several well-known vulnerabilities that exist in common services such as SMB[1]and RDP[2]as well as applications that may be used within internal networks such as MySQL[3]and web server services.[4][5]Additionally, there have been a number of vulnerabilities in VMware vCenter installations, which may enable threat actors to move laterally from the compromised vCenter server to virtual machines or even to ESXi hypervisors.[6]Depending on the permissions level of the vulnerable remote service an adversary may achieveExploitation for Privilege Escalationas a result of lateral movement exploitation as well.",
    "tactic": "Lateral Movement",
    "tactics": [
      "Lateral Movement"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:45:08.988787",
    "subtechniques": []
  },
  {
    "technique_id": "T1534",
    "name": "Internal Spearphishing",
    "description": "After they already have access to accounts or systems within the environment, adversaries may use internal spearphishing to gain access to additional information or compromise other users within the same organization. Internal spearphishing is multi-staged campaign where a legitimate account is initially compromised either by controlling the user's device or by compromising the account credentials of the user. Adversaries may then attempt to take advantage of the trusted internal account to increase the likelihood of tricking more victims into falling for phish attempts, often incorporatingImpersonation.[1]For example, adversaries may leverageSpearphishing AttachmentorSpearphishing Linkas part of internal spearphishing to deliver a payload or redirect to an external site to capture credentials throughInput Captureon sites that mimic login interfaces.Adversaries may also leverage internal chat apps, such as Microsoft Teams, to spread malicious content or engage users in attempts to capture sensitive information and/or credentials.[2]",
    "tactic": "Lateral Movement",
    "tactics": [
      "Lateral Movement"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:45:12.344927",
    "subtechniques": []
  },
  {
    "technique_id": "T1570",
    "name": "Lateral Tool Transfer",
    "description": "Adversaries may transfer tools or other files between systems in a compromised environment. Once brought into the victim environment (i.e.,Ingress Tool Transfer) files may then be copied from one system to another to stage adversary tools or other files over the course of an operation.Adversaries may copy files between internal victim systems to support lateral movement using inherent file sharing protocols such as file sharing overSMB/Windows Admin Sharesto connected network shares or with authenticated connections viaRemote Desktop Protocol.[1]Files can also be transferred using native or otherwise present tools on the victim system, such as scp, rsync, curl, sftp, andftp. In some cases, adversaries may be able to leverageWeb Services such as Dropbox or OneDrive to copy files from one machine to another via shared, automatically synced folders.[2]",
    "tactic": "Lateral Movement",
    "tactics": [
      "Lateral Movement"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:45:15.716125",
    "subtechniques": []
  },
  {
    "technique_id": "T1563",
    "name": "Remote Service Session Hijacking",
    "description": "Adversaries may take control of preexisting sessions with remote services to move laterally in an environment. Users may use valid credentials to log into a service specifically designed to accept remote connections, such as telnet, SSH, and RDP. When a user logs into a service, a session will be established that will allow them to maintain a continuous interaction with that service.Adversaries may commandeer these sessions to carry out actions on remote systems.Remote Service Session Hijackingdiffers from use ofRemote Servicesbecause it hijacks an existing session rather than creating a new session usingValid Accounts.[1][2]",
    "tactic": "Lateral Movement",
    "tactics": [
      "Lateral Movement"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:45:19.081919",
    "subtechniques": [
      {
        "id": "T1563.001",
        "name": "SSH Hijacking"
      }
    ]
  },
  {
    "technique_id": "T1563.001",
    "name": "SSH Hijacking",
    "description": "Adversaries may hijack a legitimate user's SSH session to move laterally within an environment. Secure Shell (SSH) is a standard means of remote access on Linux and macOS systems. It allows a user to connect to another system via an encrypted tunnel, commonly authenticating through a password, certificate or the use of an asymmetric encryption key pair.In order to move laterally from a compromised host, adversaries may take advantage of trust relationships established with other systems via public key authentication in active SSH sessions by hijacking an existing connection to another system. This may occur through compromising the SSH agent itself or by having access to the agent's socket. If an adversary is able to obtain root access, then hijacking SSH sessions is likely trivial.[1][2][3][4]SSH Hijackingdiffers from use ofSSHbecause it hijacks an existing SSH session rather than creating a new session usingValid Accounts.",
    "tactic": "Lateral Movement",
    "tactics": [
      "Lateral Movement"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Remote Service Session Hijacking",
    "parent_technique_id": "T1563",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:45:22.472828"
  },
  {
    "technique_id": "T1021",
    "name": "Remote Services",
    "description": "Adversaries may useValid Accountsto log into a service that accepts remote connections, such as telnet, SSH, and VNC. The adversary may then perform actions as the logged-on user.In an enterprise environment, servers and workstations can be organized into domains. Domains provide centralized identity management, allowing users to login using one set of credentials across the entire network. If an adversary is able to obtain a set of valid domain credentials, they could login to many different machines using remote access protocols such as secure shell (SSH) or remote desktop protocol (RDP).[1][2]They could also login to accessible SaaS or IaaS services, such as those that federate their identities to the domain, or management platforms for internal virtualization environments such as VMware vCenter.Legitimate applications (such asSoftware Deployment Toolsand other administrative programs) may utilizeRemote Servicesto access remote hosts. For example, Apple Remote Desktop (ARD) on macOS is native software used for remote management. ARD leverages a blend of protocols, includingVNCto send the screen and control buffers andSSHfor secure file transfer.[3][4][5]Adversaries can abuse applications such as ARD to gain remote code execution and perform lateral movement. In versions of macOS prior to 10.14, an adversary can escalate an SSH session to an ARD session which enables an adversary to accept TCC (Transparency, Consent, and Control) prompts without user interaction and gain access to data.[6][7][4]",
    "tactic": "Lateral Movement",
    "tactics": [
      "Lateral Movement"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:45:25.826226",
    "subtechniques": [
      {
        "id": "T1021.004",
        "name": "SSH"
      },
      {
        "id": "T1021.005",
        "name": "VNC"
      }
    ]
  },
  {
    "technique_id": "T1021.004",
    "name": "SSH",
    "description": "Adversaries may useValid Accountsto log into remote machines using Secure Shell (SSH). The adversary may then perform actions as the logged-on user.SSH is a protocol that allows authorized users to open remote shells on other computers. Many Linux and macOS versions come with SSH installed by default, although typically disabled until the user enables it. On ESXi, SSH can be enabled either directly on the host (e.g., viavim-cmd hostsvc/enable_ssh) or via vCenter.[1][2][3]The SSH server can be configured to use standard password authentication or public-private keypairs in lieu of or in addition to a password. In this authentication scenario, the userâ€™s public key must be in a special file on the computer running the server that lists which keypairs are allowed to login as that user (i.e.,SSH Authorized Keys).",
    "tactic": "Lateral Movement",
    "tactics": [
      "Lateral Movement"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Remote Services",
    "parent_technique_id": "T1021",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:45:29.185907"
  },
  {
    "technique_id": "T1021.005",
    "name": "VNC",
    "description": "Adversaries may useValid Accountsto remotely control machines using Virtual Network Computing (VNC).  VNC is a platform-independent desktop sharing system that uses the RFB (\"remote framebuffer\") protocol to enable users to remotely control another computerâ€™s display by relaying the screen, mouse, and keyboard inputs over the network.[1]VNC differs fromRemote Desktop Protocolas VNC is screen-sharing software rather than resource-sharing software. By default, VNC uses the system's authentication, but it can be configured to use credentials specific to VNC.[2][3]Adversaries may abuse VNC to perform malicious actions as the logged-on user such as opening documents, downloading files, and running arbitrary commands. An adversary could use VNC to remotely control and monitor a system to collect data and information to pivot to other systems within the network. Specific VNC libraries/implementations have also been susceptible to brute force attacks and memory usage exploitation.[4][5][6][7][8][9]",
    "tactic": "Lateral Movement",
    "tactics": [
      "Lateral Movement"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Remote Services",
    "parent_technique_id": "T1021",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:45:32.551547"
  },
  {
    "technique_id": "T1072",
    "name": "Software Deployment Tools",
    "description": "Adversaries may gain access to and use centralized software suites installed within an enterprise to execute commands and move laterally through the network. Configuration management and software deployment applications may be used in an enterprise network or cloud environment for routine administration purposes. These systems may also be integrated into CI/CD pipelines. Examples of such solutions include: SCCM, HBSS, Altiris, AWS Systems Manager, Microsoft Intune, Azure Arc, and GCP Deployment Manager.Access to network-wide or enterprise-wide endpoint management software may enable an adversary to achieve remote code execution on all connected systems. The access may be used to laterally move to other systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints.SaaS-based configuration management services may allow for broadCloud Administration Commandon cloud-hosted instances, as well as the execution of arbitrary commands on on-premises endpoints. For example, Microsoft Configuration Manager allows Global or Intune Administrators to run scripts as SYSTEM on on-premises devices joined to Entra ID.[1]Such services may also utilizeWeb Protocolsto communicate back to adversary owned infrastructure.[2]Network infrastructure devices may also have configuration management tools that can be similarly abused by adversaries.[3]The permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the third-party system, or specific domain credentials may be required. However, the system may require an administrative account to log in or to access specific functionality.",
    "tactic": "Lateral Movement",
    "tactics": [
      "Lateral Movement"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:45:35.905835",
    "subtechniques": []
  },
  {
    "technique_id": "T1080",
    "name": "Taint Shared Content",
    "description": "Adversaries may deliver payloads to remote systems by adding content to shared storage locations, such as network drives or internal code repositories. Content stored on network drives or in other shared locations may be tainted by adding malicious programs, scripts, or exploit code to otherwise valid files. Once a user opens the shared tainted content, the malicious portion can be executed to run the adversary's code on a remote system. Adversaries may use tainted shared content to move laterally.A directory share pivot is a variation on this technique that uses several other techniques to propagate malware when users access a shared network directory. It usesShortcut Modificationof directory .LNK files that useMasqueradingto look like the real directories, which are hidden throughHidden Files and Directories. The malicious .LNK-based directories have an embedded command that executes the hidden malware file in the directory and then opens the real intended directory so that the user's expected action still occurs. When used with frequently used network directories, the technique may result in frequent reinfections and broad access to systems and potentially to new and higher privileged accounts.[1]Adversaries may also compromise shared network directories through binary infections by appending or prepending its code to the healthy binary on the shared network directory. The malware may modify the original entry point (OEP) of the healthy binary to ensure that it is executed before the legitimate code. The infection could continue to spread via the newly infected file when it is executed by a remote system. These infections may target both binary and non-binary formats that end with extensions including, but not limited to, .EXE, .DLL, .SCR, .BAT, and/or .VBS.",
    "tactic": "Lateral Movement",
    "tactics": [
      "Lateral Movement"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:45:39.384385",
    "subtechniques": []
  },
  {
    "technique_id": "T1557",
    "name": "Adversary-in-the-Middle",
    "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such asNetwork Sniffing,Transmitted Data Manipulation, or replay attacks (Exploitation for Credential Access). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.[1]For example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.[2][3][4]Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens (Steal Application Access Token) and session cookies (Steal Web Session Cookie).[5][6]Downgrade Attacks can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.[7][8][9]Adversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as inTransmitted Data Manipulation. Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially toImpair Defensesand/or in support of aNetwork Denial of Service.",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:45:42.669277",
    "subtechniques": [
      {
        "id": "T1557.002",
        "name": "ARP Cache Poisoning"
      },
      {
        "id": "T1557.003",
        "name": "DHCP Spoofing"
      }
    ]
  },
  {
    "technique_id": "T1557.002",
    "name": "ARP Cache Poisoning",
    "description": "Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such asNetwork SniffingorTransmitted Data Manipulation.The ARP protocol is used to resolve IPv4 addresses to link layer addresses, such as a media access control (MAC) address.[1]Devices in a local network segment communicate with each other by using link layer addresses. If a networked device does not have the link layer address of a particular networked device, it may send out a broadcast ARP request to the local network to translate the IP address to a MAC address. The device with the associated IP address directly replies with its MAC address. The networked device that made the ARP request will then use as well as store that information in its ARP cache.An adversary may passively wait for an ARP request to poison the ARP cache of the requesting device. The adversary may reply with their MAC address, thus deceiving the victim by making them believe that they are communicating with the intended networked device. For the adversary to poison the ARP cache, their reply must be faster than the one made by the legitimate IP address owner. Adversaries may also send a gratuitous ARP reply that maliciously announces the ownership of a particular IP address to all the devices in the local network segment.The ARP protocol is stateless and does not require authentication. Therefore, devices may wrongly add or update the MAC address of the IP address in their ARP cache.[2][3]Adversaries may use ARP cache poisoning as a means to intercept network traffic. This activity may be used to collect and/or relay data such as credentials, especially those sent over an insecure, unencrypted protocol.[2]",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Adversary-in-the-Middle",
    "parent_technique_id": "T1557",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:45:45.931452"
  },
  {
    "technique_id": "T1557.003",
    "name": "DHCP Spoofing",
    "description": "Adversaries may redirect network traffic to adversary-owned systems by spoofing Dynamic Host Configuration Protocol (DHCP) traffic and acting as a malicious DHCP server on the victim network. By achieving the adversary-in-the-middle (AiTM) position, adversaries may collect network communications, including passed credentials, especially those sent over insecure, unencrypted protocols. This may also enable follow-on behaviors such asNetwork SniffingorTransmitted Data Manipulation.DHCP is based on a client-server model and has two functionalities: a protocol for providing network configuration settings from a DHCP server to a client and a mechanism for allocating network addresses to clients.[1]The typical server-client interaction is as follows:The client broadcasts aDISCOVERmessage.The server responds with anOFFERmessage, which includes an available network address.The client broadcasts aREQUESTmessage, which includes the network address offered.The server acknowledges with anACKmessage and the client receives the network configuration parameters.Adversaries may spoof as a rogue DHCP server on the victim network, from which legitimate hosts may receive malicious network configurations. For example, malware can act as a DHCP server and provide adversary-owned DNS servers to the victimized computers.[2][3]Through the malicious network configurations, an adversary may achieve the AiTM position, route client traffic through adversary-controlled systems, and collect information from the client network.DHCPv6 clients can receive network configuration information without being assigned an IP address by sending aINFORMATION-REQUEST (code 11)message to theAll_DHCP_Relay_Agents_and_Serversmulticast address.[4]Adversaries may use their rogue DHCP server to respond to this request message with malicious network configurations.Rather than establishing an AiTM position, adversaries may also abuse DHCP spoofing to perform a DHCP exhaustion attack (i.e,Service Exhaustion Flood) by generating many broadcast DISCOVER messages to exhaust a networkâ€™s DHCP allocation pool.",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Adversary-in-the-Middle",
    "parent_technique_id": "T1557",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:45:49.296727"
  },
  {
    "technique_id": "T1560",
    "name": "Archive Collected Data",
    "description": "An adversary may compress and/or encrypt data that is collected prior to exfiltration. Compressing the data can help to obfuscate the collected data and minimize the amount of data sent over the network.[1]Encryption can be used to hide information that is being exfiltrated from detection or make exfiltration less conspicuous upon inspection by a defender.Both compression and encryption are done prior to exfiltration, and can be performed using a utility, 3rd party library, or custom method.",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:45:52.695241",
    "subtechniques": [
      {
        "id": "T1560.001",
        "name": "Archive via Utility"
      },
      {
        "id": "T1560.002",
        "name": "Archive via Library"
      },
      {
        "id": "T1560.003",
        "name": "Archive via Custom Method"
      }
    ]
  },
  {
    "technique_id": "T1560.001",
    "name": "Archive via Utility",
    "description": "Adversaries may use utilities to compress and/or encrypt collected data prior to exfiltration. Many utilities include functionalities to compress, encrypt, or otherwise package data into a format that is easier/more secure to transport.Adversaries may abuse various utilities to compress or encrypt data before exfiltration. Some third party utilities may be preinstalled, such astaron Linux and macOS orzipon Windows systems.On Windows,diantzormakecabmay be used to package collected files into a cabinet (.cab) file.diantzmay also be used to download and compress files from remote locations (i.e.Remote Data Staging).[1]xcopyon Windows can copy files and directories with a variety of options. Additionally, adversaries may usecertutilto Base64 encode collected data before exfiltration.Adversaries may use also third party utilities, such as 7-Zip, WinRAR, and WinZip, to perform similar activities.[2][3][4]",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Archive Collected Data",
    "parent_technique_id": "T1560",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:45:56.092057"
  },
  {
    "technique_id": "T1560.002",
    "name": "Archive via Library",
    "description": "An adversary may compress or encrypt data that is collected prior to exfiltration using 3rd party libraries. Many libraries exist that can archive data, includingPythonrarfile[1], libzip[2], and zlib[3]. Most libraries include functionality to encrypt and/or compress data.Some archival libraries are preinstalled on systems, such as bzip2 on macOS and Linux, and zip on Windows. Note that the libraries are different from the utilities. The libraries can be linked against when compiling, while the utilities require spawning a subshell, or a similar execution mechanism.",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Archive Collected Data",
    "parent_technique_id": "T1560",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:45:59.466906"
  },
  {
    "technique_id": "T1560.003",
    "name": "Archive via Custom Method",
    "description": "An adversary may compress or encrypt data that is collected prior to exfiltration using a custom method. Adversaries may choose to use custom archival methods, such as encryption with XOR or stream ciphers implemented with no external library or utility references. Custom implementations of well-known compression algorithms have also been used.[1]",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Archive Collected Data",
    "parent_technique_id": "T1560",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:46:02.838451"
  },
  {
    "technique_id": "T1123",
    "name": "Audio Capture",
    "description": "An adversary can leverage a computer's peripheral devices (e.g., microphones and webcams) or applications (e.g., voice and video call services) to capture audio recordings for the purpose of listening into sensitive conversations to gather information.[1]Malware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture audio. Audio files may be written to disk and exfiltrated later.",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:46:06.220242",
    "subtechniques": []
  },
  {
    "technique_id": "T1119",
    "name": "Automated Collection",
    "description": "Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of aCommand and Scripting Interpreterto search for and copy information fitting set criteria such as file type, location, or name at specific time intervals.In cloud-based environments, adversaries may also use cloud APIs, data pipelines, command line interfaces, or extract, transform, and load (ETL) services to automatically collect data.[1]This functionality could also be built into remote access tools.This technique may incorporate use of other techniques such asFile and Directory DiscoveryandLateral Tool Transferto identify and move files, as well asCloud Service DashboardandCloud Storage Object Discoveryto identify resources in cloud environments.",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:46:09.675943",
    "subtechniques": []
  },
  {
    "technique_id": "T1115",
    "name": "Clipboard Data",
    "description": "Adversaries may collect data stored in the clipboard from users copying information within or between applications.For example, on Windows adversaries can access clipboard data by usingclip.exeorGet-Clipboard.[1][2][3]Additionally, adversaries may monitor then replace usersâ€™ clipboard with their data (e.g.,Transmitted Data Manipulation).[4]macOS and Linux also have commands, such aspbpaste, to grab clipboard contents.[5]",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:46:13.165117",
    "subtechniques": []
  },
  {
    "technique_id": "T1213",
    "name": "Data from Information Repositories",
    "description": "Adversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, such as Credential Access, Lateral Movement, or Defense Evasion, or direct access to the target information. Adversaries may also abuse external sharing features to share sensitive documents with recipients outside of the organization (i.e.,Transfer Data to Cloud Account).The following is a brief list of example information that may hold potential value to an adversary and may also be found on an information repository:Policies, procedures, and standardsPhysical / logical network diagramsSystem architecture diagramsTechnical system documentationTesting / development credentials (i.e.,Unsecured Credentials)Work / project schedulesSource code snippetsLinks to network shares and other internal resourcesContact or other sensitive information about business partners and customers, including personally identifiable information (PII)Information stored in a repository may vary based on the specific instance or environment. Specific common information repositories include the following:Storage services such as IaaS databases, enterprise databases, and more specialized platforms such as customer relationship management (CRM) databasesCollaboration platforms such as SharePoint, Confluence, and code repositoriesMessaging platforms such as Slack and Microsoft TeamsIn some cases, information repositories have been improperly secured, typically by unintentionally allowing for overly-broad access by all users or even public access to unauthenticated users. This is particularly common with cloud-native or cloud-hosted services, such as AWS Relational Database Service (RDS), Redis, or ElasticSearch.[1][2][3]",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:46:16.541189",
    "subtechniques": []
  },
  {
    "technique_id": "T1005",
    "name": "Data from Local System",
    "description": "Adversaries may search local system sources, such as file systems, configuration files, local databases, or virtual machine files, to find files of interest and sensitive data prior to Exfiltration.Adversaries may do this using aCommand and Scripting Interpreter, such ascmdas well as aNetwork Device CLI, which have functionality to interact with the file system to gather information.[1]Adversaries may also useAutomated Collectionon the local system.",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:46:20.053194",
    "subtechniques": []
  },
  {
    "technique_id": "T1039",
    "name": "Data from Network Shared Drive",
    "description": "Adversaries may search network shares on computers they have compromised to find files of interest. Sensitive data can be collected from remote systems via shared network drives (host shared directory, network file server, etc.) that are accessible from the current system prior to Exfiltration. Interactive command shells may be in use, and common functionality withincmdmay be used to gather information.",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:46:23.412269",
    "subtechniques": []
  },
  {
    "technique_id": "T1025",
    "name": "Data from Removable Media",
    "description": "Adversaries may search connected removable media on computers they have compromised to find files of interest. Sensitive data can be collected from any removable media (optical disk drive, USB memory, etc.) connected to the compromised system prior to Exfiltration. Interactive command shells may be in use, and common functionality withincmdmay be used to gather information.Some adversaries may also useAutomated Collectionon removable media.",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:46:26.780823",
    "subtechniques": []
  },
  {
    "technique_id": "T1074",
    "name": "Data Staged",
    "description": "Adversaries may stage collected data in a central location or directory prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such asArchive Collected Data. Interactive command shells may be used, and common functionality withincmdand bash may be used to copy data into a staging location.[1]In cloud environments, adversaries may stage data within a particular instance or virtual machine before exfiltration. An adversary mayCreate Cloud Instanceand stage data in that instance.[2]Adversaries may choose to stage data from a victim network in a centralized location prior to Exfiltration to minimize the number of connections made to their C2 server and better evade detection.",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:46:30.162870",
    "subtechniques": [
      {
        "id": "T1074.001",
        "name": "Local Data Staging"
      },
      {
        "id": "T1074.002",
        "name": "Remote Data Staging"
      }
    ]
  },
  {
    "technique_id": "T1074.001",
    "name": "Local Data Staging",
    "description": "Adversaries may stage collected data in a central location or directory on the local system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such asArchive Collected Data. Interactive command shells may be used, and common functionality withincmdand bash may be used to copy data into a staging location.Adversaries may also stage collected data in various available formats/locations of a system, including local storage databases/repositories or the Windows Registry.[1]",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Data Staged",
    "parent_technique_id": "T1074",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:46:33.625173"
  },
  {
    "technique_id": "T1074.002",
    "name": "Remote Data Staging",
    "description": "Adversaries may stage data collected from multiple systems in a central location or directory on one system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such asArchive Collected Data. Interactive command shells may be used, and common functionality withincmdand bash may be used to copy data into a staging location.In cloud environments, adversaries may stage data within a particular instance or virtual machine before exfiltration. An adversary mayCreate Cloud Instanceand stage data in that instance.[1]By staging data on one system prior to Exfiltration, adversaries can minimize the number of connections made to their C2 server and better evade detection.",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Data Staged",
    "parent_technique_id": "T1074",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:46:36.984687"
  },
  {
    "technique_id": "T1114",
    "name": "Email Collection",
    "description": "Adversaries may target user email to collect sensitive information. Emails may contain sensitive data, including trade secrets or personal information, that can prove valuable to adversaries. Emails may also contain details of ongoing incident response operations, which may allow adversaries to adjust their techniques in order to maintain persistence or evade defenses.[1][2]Adversaries can collect or forward email from mail servers or clients.",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:46:40.344978",
    "subtechniques": [
      {
        "id": "T1114.003",
        "name": "Email Forwarding Rule"
      }
    ]
  },
  {
    "technique_id": "T1114.003",
    "name": "Email Forwarding Rule",
    "description": "Adversaries may setup email forwarding rules to collect sensitive information. Adversaries may abuse email forwarding rules to monitor the activities of a victim, steal information, and further gain intelligence on the victim or the victimâ€™s organization to use as part of further exploits or operations.[1]Furthermore, email forwarding rules can allow adversaries to maintain persistent access to victim's emails even after compromised credentials are reset by administrators.[2]Most email clients allow users to create inbox rules for various email functions, including forwarding to a different recipient. These rules may be created through a local email application, a web interface, or by command-line interface. Messages can be forwarded to internal or external recipients, and there are no restrictions limiting the extent of this rule. Administrators may also create forwarding rules for user accounts with the same considerations and outcomes.[3][4]Any user or administrator within the organization (or adversary with valid credentials) can create rules to automatically forward all received messages to another recipient, forward emails to different locations based on the sender, and more. Adversaries may also hide the rule by making use of the Microsoft Messaging API (MAPI) to modify the rule properties, making it hidden and not visible from Outlook, OWA or most Exchange Administration tools.[2]In some environments, administrators may be able to enable email forwarding rules that operate organization-wide rather than on individual inboxes. For example, Microsoft Exchange supports transport rules that evaluate all mail an organization receives against user-specified conditions, then performs a user-specified action on mail that adheres to those conditions.[5]Adversaries that abuse such features may be able to enable forwarding on all or specific mail an organization receives.",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Email Collection",
    "parent_technique_id": "T1114",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:46:43.699143"
  },
  {
    "technique_id": "T1056",
    "name": "Input Capture",
    "description": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g.Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g.Web Portal Capture).",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:46:46.978613",
    "subtechniques": [
      {
        "id": "T1056.001",
        "name": "Keylogging"
      },
      {
        "id": "T1056.002",
        "name": "GUI Input Capture"
      },
      {
        "id": "T1056.003",
        "name": "Web Portal Capture"
      },
      {
        "id": "T1056.004",
        "name": "Credential API Hooking"
      }
    ]
  },
  {
    "technique_id": "T1056.001",
    "name": "Keylogging",
    "description": "Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities whenOS Credential Dumpingefforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.[1]Keylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes.[2]Some methods include:Hooking API callbacks used for processing keystrokes. UnlikeCredential API Hooking, this focuses solely on API functions intended for processing keystroke data.Reading raw keystroke data from the hardware buffer.Windows Registry modifications.Custom drivers.Modify System Imagemay provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.[3]",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Input Capture",
    "parent_technique_id": "T1056",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:46:50.476878"
  },
  {
    "technique_id": "T1056.002",
    "name": "GUI Input Capture",
    "description": "Adversaries may mimic common operating system GUI components to prompt users for credentials with a seemingly legitimate prompt. When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex:Bypass User Account Control).Adversaries may mimic this functionality to prompt users for credentials with a seemingly legitimate prompt for a number of reasons that mimic normal usage, such as a fake installer requiring additional access or a fake malware removal suite.[1]This type of prompt can be used to collect credentials via various languages such asAppleScript[2][3][4]andPowerShell.[2][5][4]On Linux systems adversaries may launch dialog boxes prompting users for credentials from malicious shell scripts or the command line (i.e.Unix Shell).[4]Adversaries may also mimic common software authentication requests, such as those from browsers or email clients. This may also be paired with user activity monitoring (i.e.,Browser Information Discoveryand/orApplication Window Discovery) to spoof prompts when users are naturally accessing sensitive sites/data.",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Input Capture",
    "parent_technique_id": "T1056",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:46:53.757770"
  },
  {
    "technique_id": "T1056.003",
    "name": "Web Portal Capture",
    "description": "Adversaries may install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. For example, a compromised login page may log provided user credentials before logging the user in to the service.This variation on input capture may be conducted post-compromise using legitimate administrative access as a backup measure to maintain network access throughExternal Remote ServicesandValid Accountsor as part of the initial compromise by exploitation of the externally facing web service.[1]",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Input Capture",
    "parent_technique_id": "T1056",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:46:57.022523"
  },
  {
    "technique_id": "T1056.004",
    "name": "Credential API Hooking",
    "description": "Adversaries may hook into Windows application programming interface (API) functions and Linux system functions to collect user credentials. Malicious hooking mechanisms may capture API or function calls that include parameters that reveal user authentication credentials.[1]UnlikeKeylogging, this technique focuses specifically on API functions that include parameters that reveal user credentials.In Windows, hooking involves redirecting calls to these functions and can be implemented via:Hooks procedures, which intercept and execute designated code in response to events such as messages, keystrokes, and mouse inputs.[2][3]Import address table (IAT) hooking, which use modifications to a processâ€™s IAT, where pointers to imported API functions are stored.[3][4][5]Inline hooking, which overwrites the first bytes in an API function to redirect code flow.[3][6][5]In Linux and macOS, adversaries may hook into system functions via theLD_PRELOAD(Linux) orDYLD_INSERT_LIBRARIES(macOS) environment variables, which enables loading shared libraries into a programâ€™s address space. For example, an adversary may capture credentials by hooking into thelibc readfunction leveraged by SSH or SCP.[7]",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Input Capture",
    "parent_technique_id": "T1056",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:47:00.401265"
  },
  {
    "technique_id": "T1113",
    "name": "Screen Capture",
    "description": "Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such asCopyFromScreen,xwd, orscreencapture.[1][2]",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:47:03.918398",
    "subtechniques": []
  },
  {
    "technique_id": "T1125",
    "name": "Video Capture",
    "description": "An adversary can leverage a computer's peripheral devices (e.g., integrated cameras or webcams) or applications (e.g., video call services) to capture video recordings for the purpose of gathering information. Images may also be captured from devices or applications, potentially in specified intervals, in lieu of video files.Malware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture video or images. Video or image files may be written to disk and exfiltrated later. This technique differs fromScreen Capturedue to use of specific devices or applications for video recording rather than capturing the victim's screen.In macOS, there are a few different malware samples that record the user's webcam such as FruitFly and Proton.[1]",
    "tactic": "Collection",
    "tactics": [
      "Collection"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:47:07.308641",
    "subtechniques": []
  },
  {
    "technique_id": "T1071",
    "name": "Application Layer Protocol",
    "description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.Adversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, DNS, or publishing/subscribing. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP.[1]",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:47:10.691009",
    "subtechniques": [
      {
        "id": "T1071.001",
        "name": "Web Protocols"
      },
      {
        "id": "T1071.002",
        "name": "File Transfer Protocols"
      },
      {
        "id": "T1071.003",
        "name": "Mail Protocols"
      },
      {
        "id": "T1071.004",
        "name": "DNS"
      },
      {
        "id": "T1071.005",
        "name": "Publish/Subscribe Protocols"
      }
    ]
  },
  {
    "technique_id": "T1071.001",
    "name": "Web Protocols",
    "description": "Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.Protocols such as HTTP/S[1]and WebSocket[2]that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Application Layer Protocol",
    "parent_technique_id": "T1071",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:47:14.313226"
  },
  {
    "technique_id": "T1071.002",
    "name": "File Transfer Protocols",
    "description": "Adversaries may communicate using application layer protocols associated with transferring files to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.Protocols such as SMB[1], FTP[2], FTPS, and TFTP that transfer files may be very common in environments.  Packets produced from these protocols may have many fields and headers in which data can be concealed. Data could also be concealed within the transferred files. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Application Layer Protocol",
    "parent_technique_id": "T1071",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:47:17.734081"
  },
  {
    "technique_id": "T1071.003",
    "name": "Mail Protocols",
    "description": "",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Application Layer Protocol",
    "parent_technique_id": "T1071",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor",
    "last_updated": "2025-07-02T00:32:22.894435"
  },
  {
    "technique_id": "T1071.004",
    "name": "DNS",
    "description": "",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Application Layer Protocol",
    "parent_technique_id": "T1071",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor",
    "last_updated": "2025-07-02T00:32:22.894437"
  },
  {
    "technique_id": "T1071.005",
    "name": "Publish/Subscribe Protocols",
    "description": "",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Application Layer Protocol",
    "parent_technique_id": "T1071",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor",
    "last_updated": "2025-07-02T00:32:22.894440"
  },
  {
    "technique_id": "T1092",
    "name": "Communication Through Removable Media",
    "description": "",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor",
    "last_updated": "2025-07-02T00:32:22.894443",
    "subtechniques": []
  },
  {
    "technique_id": "T1659",
    "name": "Content Injection",
    "description": "",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor",
    "last_updated": "2025-07-02T00:32:22.894445",
    "subtechniques": []
  },
  {
    "technique_id": "T1132",
    "name": "Data Encoding",
    "description": "",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor",
    "last_updated": "2025-07-02T00:32:22.894447",
    "subtechniques": [
      {
        "id": "T1132.001",
        "name": "Standard Encoding"
      },
      {
        "id": "T1132.002",
        "name": "Non-Standard Encoding"
      }
    ]
  },
  {
    "technique_id": "T1132.001",
    "name": "Standard Encoding",
    "description": "",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Data Encoding",
    "parent_technique_id": "T1132",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor",
    "last_updated": "2025-07-02T00:32:22.894450"
  },
  {
    "technique_id": "T1132.002",
    "name": "Non-Standard Encoding",
    "description": "",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Data Encoding",
    "parent_technique_id": "T1132",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor",
    "last_updated": "2025-07-02T00:32:22.894453"
  },
  {
    "technique_id": "T1001",
    "name": "Data Obfuscation",
    "description": "",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor",
    "last_updated": "2025-07-02T00:32:22.894455",
    "subtechniques": [
      {
        "id": "T1001.001",
        "name": "Junk Data"
      },
      {
        "id": "T1001.002",
        "name": "Steganography"
      },
      {
        "id": "T1001.003",
        "name": "Protocol or Service Impersonation"
      }
    ]
  },
  {
    "technique_id": "T1001.001",
    "name": "Junk Data",
    "description": "",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Data Obfuscation",
    "parent_technique_id": "T1001",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor",
    "last_updated": "2025-07-02T00:32:22.894458"
  },
  {
    "technique_id": "T1001.002",
    "name": "Steganography",
    "description": "",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Data Obfuscation",
    "parent_technique_id": "T1001",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor",
    "last_updated": "2025-07-02T00:32:22.894460"
  },
  {
    "technique_id": "T1001.003",
    "name": "Protocol or Service Impersonation",
    "description": "",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Data Obfuscation",
    "parent_technique_id": "T1001",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor",
    "last_updated": "2025-07-02T00:32:22.894462"
  },
  {
    "technique_id": "T1568",
    "name": "Dynamic Resolution",
    "description": "",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor",
    "last_updated": "2025-07-02T00:32:22.894467",
    "subtechniques": [
      {
        "id": "T1568.001",
        "name": "Fast Flux DNS"
      },
      {
        "id": "T1568.002",
        "name": "Domain Generation Algorithms"
      },
      {
        "id": "T1568.003",
        "name": "DNS Calculation"
      }
    ]
  },
  {
    "technique_id": "T1568.001",
    "name": "Fast Flux DNS",
    "description": "",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Dynamic Resolution",
    "parent_technique_id": "T1568",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor",
    "last_updated": "2025-07-02T00:32:22.894469"
  },
  {
    "technique_id": "T1568.002",
    "name": "Domain Generation Algorithms",
    "description": "",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Dynamic Resolution",
    "parent_technique_id": "T1568",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor",
    "last_updated": "2025-07-02T00:32:22.894472"
  },
  {
    "technique_id": "T1568.003",
    "name": "DNS Calculation",
    "description": "",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Dynamic Resolution",
    "parent_technique_id": "T1568",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor",
    "last_updated": "2025-07-02T00:32:22.894475"
  },
  {
    "technique_id": "T1573",
    "name": "Encrypted Channel",
    "description": "Adversaries may employ an encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:49:09.017504",
    "subtechniques": [
      {
        "id": "T1573.001",
        "name": "Symmetric Cryptography"
      },
      {
        "id": "T1573.002",
        "name": "Asymmetric Cryptography"
      }
    ]
  },
  {
    "technique_id": "T1573.001",
    "name": "Symmetric Cryptography",
    "description": "Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Encrypted Channel",
    "parent_technique_id": "T1573",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:49:13.151866"
  },
  {
    "technique_id": "T1573.002",
    "name": "Asymmetric Cryptography",
    "description": "Adversaries may employ a known asymmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Asymmetric cryptography, also known as public key cryptography, uses a keypair per party: one public that can be freely distributed, and one private. Due to how the keys are generated, the sender encrypts data with the receiverâ€™s public key and the receiver decrypts the data with their private key. This ensures that only the intended recipient can read the encrypted data. Common public key encryption algorithms include RSA and ElGamal.For efficiency, many protocols (including SSL/TLS) use symmetric cryptography once a connection is established, but use asymmetric cryptography to establish or transmit a key. As such, these protocols are classified asAsymmetric Cryptography.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Encrypted Channel",
    "parent_technique_id": "T1573",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:49:17.128442"
  },
  {
    "technique_id": "T1008",
    "name": "Fallback Channels",
    "description": "Adversaries may use fallback or alternate communication channels if the primary channel is compromised or inaccessible in order to maintain reliable command and control and to avoid data transfer thresholds.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:49:21.307205",
    "subtechniques": []
  },
  {
    "technique_id": "T1665",
    "name": "Hide Infrastructure",
    "description": "Adversaries may manipulate network traffic in order to hide and evade detection of their C2 infrastructure. This can be accomplished in various ways including by identifying and filtering traffic from defensive tools,[1]masking malicious domains to obfuscate the true destination from both automated scanning tools and security researchers,[2][3][4]and otherwise hiding malicious artifacts to delay discovery and prolong the effectiveness of adversary infrastructure that could otherwise be identified, blocked, or taken down entirely.C2 networks may include the use ofProxyor VPNs to disguise IP addresses, which can allow adversaries to blend in with normal network traffic and bypass conditional access policies or anti-abuse protections. For example, an adversary may use a virtual private cloud to spoof their IP address to closer align with a victim's IP address ranges. This may also bypass security measures relying on geolocation of the source IP address.[5][6]Adversaries may also attempt to filter network traffic in order to evade defensive tools in numerous ways, including blocking/redirecting common incident responder or security appliance user agents.[7][8]Filtering traffic based on IP and geo-fencing may also avoid automated sandboxing or researcher activity (i.e.,Virtualization/Sandbox Evasion).[1][7]Hiding C2 infrastructure may also be supported byResource Developmentactivities such asAcquire InfrastructureandCompromise Infrastructure. For example, using widely trusted hosting services or domains such as prominent URL shortening providers or marketing services for C2 networks may enable adversaries to present benign content that later redirects victims to malicious web pages or infrastructure once specific conditions are met.[9][10]",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:49:24.677228",
    "subtechniques": []
  },
  {
    "technique_id": "T1105",
    "name": "Ingress Tool Transfer",
    "description": "Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such asftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e.Lateral Tool Transfer).On Windows, adversaries may use various utilities to download tools, such ascopy,finger,certutil, andPowerShellcommands such asIEX(New-Object Net.WebClient).downloadString()andInvoke-WebRequest. On Linux and macOS systems, a variety of utilities also exist, such ascurl,scp,sftp,tftp,rsync,finger, andwget.[1]A number of these tools, such aswget,curl, andscp, also exist on ESXi. After downloading a file, a threat actor may attempt to verify its integrity by checking its hash value (e.g., viacertutil -hashfile).[2]Adversaries may also abuse installers and package managers, such asyumorwinget, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windowssearch-msprotocol handler, to deliver malicious files to victims through remote file searches invoked byUser Execution(typically after interacting withPhishinglures).[3]Files can also be transferred using variousWeb Services as well as native or otherwise present tools on the victim system.[4]In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.[5]",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:49:28.324226",
    "subtechniques": []
  },
  {
    "technique_id": "T1104",
    "name": "Multi-Stage Channels",
    "description": "Adversaries may create multiple stages for command and control that are employed under different conditions or for certain functions. Use of multiple stages may obfuscate the command and control channel to make detection more difficult.Remote access tools will call back to the first-stage command and control server for instructions. The first stage may have automated capabilities to collect basic host information, update tools, and upload additional files. A second remote access tool (RAT) could be uploaded at that point to redirect the host to the second-stage command and control server. The second stage will likely be more fully featured and allow the adversary to interact with the system through a reverse shell and additional RAT features.The different stages will likely be hosted separately with no overlapping infrastructure. The loader may also have backup first-stage callbacks orFallback Channelsin case the original first-stage communication path is discovered and blocked.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:49:31.698732",
    "subtechniques": []
  },
  {
    "technique_id": "T1095",
    "name": "Non-Application Layer Protocol",
    "description": "Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive.[1]Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).ICMP communication between hosts is one example.[2]Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts.[3]However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.In ESXi environments, adversaries may leverage the Virtual Machine Communication Interface (VMCI) for communication between guest virtual machines and the ESXi host. This traffic is similar to client-server communications on traditional network sockets but is localized to the physical machine running the ESXi host, meaning it does not traverse external networks (routers, switches). This results in communications that are invisible to external monitoring and standard networking tools like tcpdump, netstat, nmap, and Wireshark. By adding a VMCI backdoor to a compromised ESXi host, adversaries may persistently regain access from any guest VM to the compromised ESXi hostâ€™s backdoor, regardless of network segmentation or firewall rules in place.[4]",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:49:35.114497",
    "subtechniques": []
  },
  {
    "technique_id": "T1571",
    "name": "Non-Standard Port",
    "description": "Adversaries may communicate using a protocol and port pairing that are typically not associated. For example, HTTPS over port 8088[1]or port 587[2]as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.Adversaries may also make changes to victim systems to abuse non-standard ports. For example, Registry keys and other configuration settings can be used to modify protocol and port pairings.[3]",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:49:38.447814",
    "subtechniques": []
  },
  {
    "technique_id": "T1572",
    "name": "Protocol Tunneling",
    "description": "Adversaries may tunnel network communications to and from a victim system within a separate protocol to avoid detection/network filtering and/or enable access to otherwise unreachable systems. Tunneling involves explicitly encapsulating a protocol within another. This behavior may conceal malicious traffic by blending in with existing traffic and/or provide an outer layer of encryption (similar to a VPN). Tunneling could also enable routing of network packets that would otherwise not reach their intended destination, such as SMB, RDP, or other traffic that would be filtered by network appliances or not routed over the Internet.There are various means to encapsulate a protocol within another protocol. For example, adversaries may perform SSH tunneling (also known as SSH port forwarding), which involves forwarding arbitrary data over an encrypted SSH tunnel.[1][2]Protocol Tunnelingmay also be abused by adversaries duringDynamic Resolution. Known as DNS over HTTPS (DoH), queries to resolve C2 infrastructure may be encapsulated within encrypted HTTPS packets.[3]Adversaries may also leverageProtocol Tunnelingin conjunction withProxyand/orProtocol or Service Impersonationto further conceal C2 communications and infrastructure.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:49:41.852082",
    "subtechniques": []
  },
  {
    "technique_id": "T1090",
    "name": "Proxy",
    "description": "Adversaries may use a connection proxy to direct network traffic between systems or act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, includingHTRAN, ZXProxy, and ZXPortMap.[1]Adversaries use these types of proxies to manage command and control communications, reduce the number of simultaneous outbound network connections, provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion. Adversaries may chain together multiple proxies to further disguise the source of malicious traffic.Adversaries can also take advantage of routing schemes in Content Delivery Networks (CDNs) to proxy command and control traffic.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:49:45.265637",
    "subtechniques": [
      {
        "id": "T1090.001",
        "name": "Internal Proxy"
      },
      {
        "id": "T1090.002",
        "name": "External Proxy"
      },
      {
        "id": "T1090.003",
        "name": "Multi-hop Proxy"
      },
      {
        "id": "T1090.004",
        "name": "Domain Fronting"
      }
    ]
  },
  {
    "technique_id": "T1090.001",
    "name": "Internal Proxy",
    "description": "Adversaries may use an internal proxy to direct command and control traffic between two or more systems in a compromised environment. Many tools exist that enable traffic redirection through proxies or port redirection, includingHTRAN, ZXProxy, and ZXPortMap.[1]Adversaries use internal proxies to manage command and control communications inside a compromised environment, to reduce the number of simultaneous outbound network connections, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between infected systems to avoid suspicion. Internal proxy connections may use common peer-to-peer (p2p) networking protocols, such as SMB, to better blend in with the environment.By using a compromised internal system as a proxy, adversaries may conceal the true destination of C2 traffic while reducing the need for numerous connections to external systems.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Proxy",
    "parent_technique_id": "T1090",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:49:48.638318"
  },
  {
    "technique_id": "T1090.002",
    "name": "External Proxy",
    "description": "Adversaries may use an external proxy to act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, includingHTRAN, ZXProxy, and ZXPortMap.[1]Adversaries use these types of proxies to manage command and control communications, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths to avoid suspicion.External connection proxies are used to mask the destination of C2 traffic and are typically implemented with port redirectors. Compromised systems outside of the victim environment may be used for these purposes, as well as purchased infrastructure such as cloud-based resources or virtual private servers. Proxies may be chosen based on the low likelihood that a connection to them from a compromised system would be investigated. Victim systems would communicate directly with the external proxy on the Internet and then the proxy would forward communications to the C2 server.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Proxy",
    "parent_technique_id": "T1090",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:49:51.979245"
  },
  {
    "technique_id": "T1090.003",
    "name": "Multi-hop Proxy",
    "description": "Adversaries may chain together multiple proxies to disguise the source of malicious traffic. Typically, a defender will be able to identify the last proxy traffic traversed before it enters their network; the defender may or may not be able to identify any previous proxies before the last-hop proxy. This technique makes identifying the original source of the malicious traffic even more difficult by requiring the defender to trace malicious traffic through several proxies to identify its source.For example, adversaries may construct or use onion routing networks â€“ such as the publicly availableTornetwork â€“ to transport encrypted C2 traffic through a compromised population, allowing communication with any device within the network.[1]Adversaries may also use operational relay box (ORB) networks composed of virtual private servers (VPS), Internet of Things (IoT) devices, smart devices, and end-of-life routers to obfuscate their operations.[2]In the case of network infrastructure, it is possible for an adversary to leverage multiple compromised devices to create a multi-hop proxy chain (i.e.,Network Devices). By leveragingPatch System Imageon routers, adversaries can add custom code to the affected network devices that will implement onion routing between those nodes. This method is dependent upon theNetwork Boundary Bridgingmethod allowing the adversaries to cross the protected network boundary of the Internet perimeter and into the organizationâ€™s Wide-Area Network (WAN).  Protocols such as ICMP may be used as a transport.Similarly, adversaries may abuse peer-to-peer (P2P) and blockchain-oriented infrastructure to implement routing between a decentralized network of peers.[3]",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Proxy",
    "parent_technique_id": "T1090",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:49:55.360922"
  },
  {
    "technique_id": "T1090.004",
    "name": "Domain Fronting",
    "description": "Adversaries may take advantage of routing schemes in Content Delivery Networks (CDNs) and other services which host multiple domains to obfuscate the intended destination of HTTPS traffic or traffic tunneled through HTTPS.[1]Domain fronting involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. If both domains are served from the same CDN, then the CDN may route to the address specified in the HTTP header after unwrapping the TLS header. A variation of the the technique, \"domainless\" fronting, utilizes a SNI field that is left blank; this may allow the fronting to work even when the CDN attempts to validate that the SNI and HTTP Host fields match (if the blank SNI fields are ignored).For example, if domain-x and domain-y are customers of the same CDN, it is possible to place domain-x in the TLS header and domain-y in the HTTP header. Traffic will appear to be going to domain-x, however the CDN may route it to domain-y.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Proxy",
    "parent_technique_id": "T1090",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:49:58.744483"
  },
  {
    "technique_id": "T1219",
    "name": "Remote Access Tools",
    "description": "An adversary may use legitimate remote access tools to establish an interactive command and control channel within a network. Remote access tools create a session between two trusted hosts through a graphical interface, a command line interaction, a protocol tunnel via development or management software, or hardware-level access such as KVM (Keyboard, Video, Mouse) over IP solutions. Desktop support software (usually graphical interface) and remote management software (typically command line interface) allow a user to control a computer remotely as if they are a local user inheriting the user or software permissions. This software is commonly used for troubleshooting, software installation, and system management.[1][2][3]Adversaries may similarly abuse response features included in EDR and other defensive tools that enable remote access.Remote access tools may be installed and used post-compromise as an alternate communications channel for redundant access or to establish an interactive remote desktop session with the target system. It may also be used as a malware component to establish a reverse connection or back-connect to a service or adversary-controlled system.Installation of many remote access tools may also include persistence (e.g., the software's installation routine creates aWindows Service). Remote access modules/features may also exist as part of otherwise existing software (e.g., Google Chromeâ€™s Remote Desktop).[4][5]",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:50:02.133384",
    "subtechniques": [
      {
        "id": "T1219.001",
        "name": "IDE Tunneling"
      },
      {
        "id": "T1219.002",
        "name": "Remote Desktop Software"
      },
      {
        "id": "T1219.003",
        "name": "Remote Access Hardware"
      }
    ]
  },
  {
    "technique_id": "T1219.001",
    "name": "IDE Tunneling",
    "description": "Adversaries may abuse Integrated Development Environment (IDE) software with remote development features to establish an interactive command and control channel on target systems within a network. IDE tunneling combines SSH, port forwarding, file sharing, and debugging into a single secure connection, letting developers work on remote systems as if they were local. Unlike SSH and port forwarding, IDE tunneling encapsulates an entire session and may use proprietary tunneling protocols alongside SSH, allowing adversaries to blend in with legitimate development workflows. Some IDEs, like Visual Studio Code, also provide CLI tools (e.g.,code tunnel) that adversaries may use to programmatically establish tunnels and generate web-accessible URLs for remote access. These tunnels can be authenticated through accounts such as GitHub, enabling the adversary to control the compromised system via a legitimate developer portal.[1][2][3]Additionally, adversaries may use IDE tunneling for persistence. Some IDEs, such as Visual Studio Code and JetBrains, support automatic reconnection. Adversaries may configure the IDE to auto-launch at startup, re-establishing the tunnel upon execution. Compromised developer machines may also be exploited as jump hosts to move further into the network.IDE tunneling tools may be built-in or installed asIDE Extensions.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Remote Access Tools",
    "parent_technique_id": "T1219",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:50:05.500740"
  },
  {
    "technique_id": "T1219.002",
    "name": "Remote Desktop Software",
    "description": "An adversary may use legitimate desktop support software to establish an interactive command and control channel to target systems within networks. Desktop support software provides a graphical interface for remotely controlling another computer, transmitting the display output, keyboard input, and mouse control between devices using various protocols. Desktop support software, such asVNC,Team Viewer,AnyDesk,ScreenConnect,LogMein,AmmyyAdmin, and other remote monitoring and management (RMM) tools, are commonly used as legitimate technical support software and may be allowed by application control within a target environment.[1][2][3]Remote access modules/features may also exist as part of otherwise existing software such as Zoom or Google Chromeâ€™s Remote Desktop.[4][5]",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Remote Access Tools",
    "parent_technique_id": "T1219",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:50:08.901958"
  },
  {
    "technique_id": "T1219.003",
    "name": "Remote Access Hardware",
    "description": "An adversary may use legitimate remote access hardware to establish an interactive command and control channel to target systems within networks. These services, including IP-based keyboard, video, or mouse (KVM) devices such as TinyPilot and PiKVM, are commonly used as legitimate tools and may be allowed by peripheral device policies within a target environment.Remote access hardware may be physically installed and used post-compromise as an alternate communications channel for redundant access or as a way to establish an interactive remote session with the target system. Using hardware-based remote access tools may allow threat actors to bypass software security solutions and gain more control over the compromised device(s).[1][2]",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Remote Access Tools",
    "parent_technique_id": "T1219",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:50:12.293569"
  },
  {
    "technique_id": "T1205",
    "name": "Traffic Signaling",
    "description": "Adversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e.Port Knocking), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software.Adversaries may also communicate with an already open port, but the service listening on that port will only respond to commands or trigger other malicious functionality if passed the appropriate magic value(s).The observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r[1], is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.On network devices, adversaries may use crafted packets to enableNetwork Device Authenticationfor standard services offered by the device such as telnet.  Such signaling may also be used to open a closed service port such as telnet, or to trigger module modification of malware implants on the device, adding, removing, or changing malicious capabilities.  Adversaries may use crafted packets to attempt to connect to one or more (open or closed) ports, but may also attempt to connect to a router interface, broadcast, and network address IP on the same port in order to achieve their goals and objectives.[2][3][4]To enable this traffic signaling on embedded devices, adversaries must first achieve and leveragePatch System Imagedue to the monolithic nature of the architecture.Adversaries may also use the Wake-on-LAN feature to turn on powered off systems. Wake-on-LAN is a hardware feature that allows a powered down system to be powered on, or woken up, by sending a magic packet to it. Once the system is powered on, it may become a target for lateral movement.[5][6]",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:50:15.584460",
    "subtechniques": [
      {
        "id": "T1205.001",
        "name": "Port Knocking"
      },
      {
        "id": "T1205.002",
        "name": "Socket Filters"
      }
    ]
  },
  {
    "technique_id": "T1205.001",
    "name": "Port Knocking",
    "description": "Adversaries may use port knocking to hide open ports used for persistence or command and control. To enable a port, an adversary sends a series of attempted connections to a predefined sequence of closed ports. After the sequence is completed, opening a port is often accomplished by the host based firewall, but could also be implemented by custom software.This technique has been observed both for the dynamic opening of a listening port as well as the initiating of a connection to a listening server on a different system.The observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r[1], is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Traffic Signaling",
    "parent_technique_id": "T1205",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:50:18.936008"
  },
  {
    "technique_id": "T1205.002",
    "name": "Socket Filters",
    "description": "Adversaries may attach filters to a network socket to monitor then activate backdoors used for persistence or command and control. With elevated permissions, adversaries can use features such as thelibpcaplibrary to open sockets and install filters to allow or disallow certain types of data to come through the socket. The filter may apply to all traffic passing through the specified network interface (or every interface if not specified). When the network interface receives a packet matching the filter criteria, additional actions can be triggered on the host, such as activation of a reverse shell.To establish a connection, an adversary sends a crafted packet to the targeted host that matches the installed filter criteria.[1]Adversaries have used these socket filters to trigger the installation of implants, conduct ping backs, and to invoke command shells. Communication with these socket filters may also be used in conjunction withProtocol Tunneling.[2][3]Filters can be installed on any Unix-like platform withlibpcapinstalled or on Windows hosts usingWinpcap.  Adversaries may use eitherlibpcapwithpcap_setfilteror the standard library functionsetsockoptwithSO_ATTACH_FILTERoptions. Since the socket connection is not active until the packet is received, this behavior may be difficult to detect due to the lack of activity on a host, low CPU overhead, and limited visibility into raw socket usage.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Traffic Signaling",
    "parent_technique_id": "T1205",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:50:22.308639"
  },
  {
    "technique_id": "T1102",
    "name": "Web Service",
    "description": "Adversaries may use an existing, legitimate external Web service as a means for relaying data to/from a compromised system. Popular websites, cloud services, and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google, Microsoft, or Twitter, makes it easier for adversaries to hide in expected noise.[1]Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.Use of Web services may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:50:25.695393",
    "subtechniques": [
      {
        "id": "T1102.001",
        "name": "Dead Drop Resolver"
      },
      {
        "id": "T1102.002",
        "name": "Bidirectional Communication"
      },
      {
        "id": "T1102.003",
        "name": "One-Way Communication"
      }
    ]
  },
  {
    "technique_id": "T1102.001",
    "name": "Dead Drop Resolver",
    "description": "Adversaries may use an existing, legitimate external Web service to host information that points to additional command and control (C2) infrastructure. Adversaries may post content, known as a dead drop resolver, on Web services with embedded (and often obfuscated/encoded) domains or IP addresses. Once infected, victims will reach out to and be redirected by these resolvers.Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.Use of a dead drop resolver may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Web Service",
    "parent_technique_id": "T1102",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:50:29.075330"
  },
  {
    "technique_id": "T1102.002",
    "name": "Bidirectional Communication",
    "description": "Adversaries may use an existing, legitimate external Web service as a means for sending commands to and receiving output from a compromised system over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems can then send the output from those commands back over that Web service channel. The return traffic may occur in a variety of ways, depending on the Web service being utilized. For example, the return traffic may take the form of the compromised system posting a comment on a forum, issuing a pull request to development project, updating a document hosted on a Web service, or by sending a Tweet.Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Web Service",
    "parent_technique_id": "T1102",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:50:32.449008"
  },
  {
    "technique_id": "T1102.003",
    "name": "One-Way Communication",
    "description": "Adversaries may use an existing, legitimate external Web service as a means for sending commands to a compromised system without receiving return output over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems may opt to send the output from those commands back over a different C2 channel, including to another distinct Web service. Alternatively, compromised systems may return no output at all in cases where adversaries want to send instructions to systems and do not want a response.Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.",
    "tactic": "Command and Control",
    "tactics": [
      "Command and Control"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Web Service",
    "parent_technique_id": "T1102",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:50:35.818898"
  },
  {
    "technique_id": "T1020",
    "name": "Automated Exfiltration",
    "description": "Adversaries may exfiltrate data, such as sensitive documents, through the use of automated processing after being gathered during Collection.[1]When automated exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such asExfiltration Over C2 ChannelandExfiltration Over Alternative Protocol.",
    "tactic": "Exfiltration",
    "tactics": [
      "Exfiltration"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:50:39.194678",
    "subtechniques": []
  },
  {
    "technique_id": "T1030",
    "name": "Data Transfer Size Limits",
    "description": "An adversary may exfiltrate data in fixed size chunks instead of whole files or limit packet sizes below certain thresholds. This approach may be used to avoid triggering network data transfer threshold alerts.",
    "tactic": "Exfiltration",
    "tactics": [
      "Exfiltration"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:50:42.599438",
    "subtechniques": []
  },
  {
    "technique_id": "T1048",
    "name": "Exfiltration Over Alternative Protocol",
    "description": "Adversaries may steal data by exfiltrating it over a different protocol than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.Alternate protocols include FTP, SMTP, HTTP/S, DNS, SMB, or any other network protocol not being used as the main command and control channel. Adversaries may also opt to encrypt and/or obfuscate these alternate channels.Exfiltration Over Alternative Protocolcan be done using various common operating system utilities such asNet/SMB or FTP.[1]On macOS and Linuxcurlmay be used to invoke protocols such as HTTP/S or FTP/S to exfiltrate data from a system.[2]Many IaaS and SaaS platforms (such as Microsoft Exchange, Microsoft SharePoint, GitHub, and AWS S3) support the direct download of files, emails, source code, and other sensitive information via the web console orCloud API.",
    "tactic": "Exfiltration",
    "tactics": [
      "Exfiltration"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:50:45.952848",
    "subtechniques": [
      {
        "id": "T1048.001",
        "name": "Exfiltration Over Symmetric Encrypted Non-C2 Protocol"
      },
      {
        "id": "T1048.002",
        "name": "Exfiltration Over Asymmetric Encrypted Non-C2 Protocol"
      },
      {
        "id": "T1048.003",
        "name": "Exfiltration Over Unencrypted Non-C2 Protocol"
      }
    ]
  },
  {
    "technique_id": "T1048.001",
    "name": "Exfiltration Over Symmetric Encrypted Non-C2 Protocol",
    "description": "Adversaries may steal data by exfiltrating it over a symmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.Symmetric encryption algorithms are those that use shared or the same keys/secrets on each end of the channel. This requires an exchange or pre-arranged agreement/possession of the value used to encrypt and decrypt data.Network protocols that use asymmetric encryption often utilize symmetric encryption once keys are exchanged, but adversaries may opt to manually share keys and implement symmetric cryptographic algorithms (ex: RC4, AES) vice using mechanisms that are baked into a protocol. This may result in multiple layers of encryption (in protocols that are natively encrypted such as HTTPS) or encryption in protocols that not typically encrypted (such as HTTP or FTP).",
    "tactic": "Exfiltration",
    "tactics": [
      "Exfiltration"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Exfiltration Over Alternative Protocol",
    "parent_technique_id": "T1048",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:50:49.327791"
  },
  {
    "technique_id": "T1048.002",
    "name": "Exfiltration Over Asymmetric Encrypted Non-C2 Protocol",
    "description": "Adversaries may steal data by exfiltrating it over an asymmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.Asymmetric encryption algorithms are those that use different keys on each end of the channel. Also known as public-key cryptography, this requires pairs of cryptographic keys that can encrypt/decrypt data from the corresponding key. Each end of the communication channels requires a private key (only in the procession of that entity) and the public key of the other entity. The public keys of each entity are exchanged before encrypted communications begin.Network protocols that use asymmetric encryption (such as HTTPS/TLS/SSL) often utilize symmetric encryption once keys are exchanged. Adversaries may opt to use these encrypted mechanisms that are baked into a protocol.",
    "tactic": "Exfiltration",
    "tactics": [
      "Exfiltration"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Exfiltration Over Alternative Protocol",
    "parent_technique_id": "T1048",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:50:52.692013"
  },
  {
    "technique_id": "T1048.003",
    "name": "Exfiltration Over Unencrypted Non-C2 Protocol",
    "description": "Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.[1]Adversaries may opt to obfuscate this data, without the use of encryption, within network protocols that are natively unencrypted (such as HTTP, FTP, or DNS). This may include custom or publicly available encoding/compression algorithms (such as base64) as well as embedding data within protocol headers and fields.",
    "tactic": "Exfiltration",
    "tactics": [
      "Exfiltration"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Exfiltration Over Alternative Protocol",
    "parent_technique_id": "T1048",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:50:56.084938"
  },
  {
    "technique_id": "T1041",
    "name": "Exfiltration Over C2 Channel",
    "description": "Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.",
    "tactic": "Exfiltration",
    "tactics": [
      "Exfiltration"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:50:59.614670",
    "subtechniques": []
  },
  {
    "technique_id": "T1011",
    "name": "Exfiltration Over Other Network Medium",
    "description": "Adversaries may attempt to exfiltrate data over a different network medium than the command and control channel. If the command and control network is a wired Internet connection, the exfiltration may occur, for example, over a WiFi connection, modem, cellular data connection, Bluetooth, or another radio frequency (RF) channel.Adversaries may choose to do this if they have sufficient access or proximity, and the connection might not be secured or defended as well as the primary Internet-connected channel because it is not routed through the same enterprise network.",
    "tactic": "Exfiltration",
    "tactics": [
      "Exfiltration"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:51:02.981008",
    "subtechniques": [
      {
        "id": "T1011.001",
        "name": "Exfiltration Over Bluetooth"
      }
    ]
  },
  {
    "technique_id": "T1011.001",
    "name": "Exfiltration Over Bluetooth",
    "description": "Adversaries may attempt to exfiltrate data over Bluetooth rather than the command and control channel. If the command and control network is a wired Internet connection, an adversary may opt to exfiltrate data using a Bluetooth communication channel.Adversaries may choose to do this if they have sufficient access and proximity. Bluetooth connections might not be secured or defended as well as the primary Internet-connected channel because it is not routed through the same enterprise network.",
    "tactic": "Exfiltration",
    "tactics": [
      "Exfiltration"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Exfiltration Over Other Network Medium",
    "parent_technique_id": "T1011",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:51:06.334436"
  },
  {
    "technique_id": "T1052",
    "name": "Exfiltration Over Physical Medium",
    "description": "Adversaries may attempt to exfiltrate data via a physical medium, such as a removable drive. In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a physical medium or device introduced by a user. Such media could be an external hard drive, USB drive, cellular phone, MP3 player, or other removable storage and processing device. The physical medium or device could be used as the final exfiltration point or to hop between otherwise disconnected systems.",
    "tactic": "Exfiltration",
    "tactics": [
      "Exfiltration"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:51:09.689567",
    "subtechniques": [
      {
        "id": "T1052.001",
        "name": "Exfiltration over USB"
      }
    ]
  },
  {
    "technique_id": "T1052.001",
    "name": "Exfiltration over USB",
    "description": "Adversaries may attempt to exfiltrate data over a USB connected physical device. In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a USB device introduced by a user. The USB device could be used as the final exfiltration point or to hop between otherwise disconnected systems.",
    "tactic": "Exfiltration",
    "tactics": [
      "Exfiltration"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Exfiltration Over Physical Medium",
    "parent_technique_id": "T1052",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:51:13.059302"
  },
  {
    "technique_id": "T1567",
    "name": "Exfiltration Over Web Service",
    "description": "Adversaries may use an existing, legitimate external Web service to exfiltrate data rather than their primary command and control channel. Popular Web services acting as an exfiltration mechanism may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to compromise. Firewall rules may also already exist to permit traffic to these services.Web service providers also commonly use SSL/TLS encryption, giving adversaries an added level of protection.",
    "tactic": "Exfiltration",
    "tactics": [
      "Exfiltration"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:51:16.410114",
    "subtechniques": [
      {
        "id": "T1567.001",
        "name": "Exfiltration to Code Repository"
      },
      {
        "id": "T1567.002",
        "name": "Exfiltration to Cloud Storage"
      },
      {
        "id": "T1567.003",
        "name": "Exfiltration to Text Storage Sites"
      },
      {
        "id": "T1567.004",
        "name": "Exfiltration Over Webhook"
      }
    ]
  },
  {
    "technique_id": "T1567.001",
    "name": "Exfiltration to Code Repository",
    "description": "Adversaries may exfiltrate data to a code repository rather than over their primary command and control channel. Code repositories are often accessible via an API (ex: https://api.github.com). Access to these APIs are often over HTTPS, which gives the adversary an additional level of protection.Exfiltration to a code repository can also provide a significant amount of cover to the adversary if it is a popular service already used by hosts within the network.",
    "tactic": "Exfiltration",
    "tactics": [
      "Exfiltration"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Exfiltration Over Web Service",
    "parent_technique_id": "T1567",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:51:19.781503"
  },
  {
    "technique_id": "T1567.002",
    "name": "Exfiltration to Cloud Storage",
    "description": "Adversaries may exfiltrate data to a cloud storage service rather than over their primary command and control channel. Cloud storage services allow for the storage, edit, and retrieval of data from a remote cloud storage server over the Internet.Examples of cloud storage services include Dropbox and Google Docs. Exfiltration to these cloud storage services can provide a significant amount of cover to the adversary if hosts within the network are already communicating with the service.",
    "tactic": "Exfiltration",
    "tactics": [
      "Exfiltration"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Exfiltration Over Web Service",
    "parent_technique_id": "T1567",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:51:23.160726"
  },
  {
    "technique_id": "T1567.003",
    "name": "Exfiltration to Text Storage Sites",
    "description": "Adversaries may exfiltrate data to text storage sites instead of their primary command and control channel. Text storage sites, such aspastebin[.]com, are commonly used by developers to share code and other information.Text storage sites are often used to host malicious code for C2 communication (e.g.,Stage Capabilities), but adversaries may also use these sites to exfiltrate collected data. Furthermore, paid features and encryption options may allow adversaries to conceal and store data more securely.[1]Note:This is distinct fromExfiltration to Code Repository, which highlight access to code repositories via APIs.",
    "tactic": "Exfiltration",
    "tactics": [
      "Exfiltration"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Exfiltration Over Web Service",
    "parent_technique_id": "T1567",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:51:26.567838"
  },
  {
    "technique_id": "T1567.004",
    "name": "Exfiltration Over Webhook",
    "description": "Adversaries may exfiltrate data to a webhook endpoint rather than over their primary command and control channel. Webhooks are simple mechanisms for allowing a server to push data over HTTP/S to a client without the need for the client to continuously poll the server.[1]Many public and commercial services, such as Discord, Slack, andwebhook.site, support the creation of webhook endpoints that can be used by other services, such as Github, Jira, or Trello.[2]When changes happen in the linked services (such as pushing a repository update or modifying a ticket), these services will automatically post the data to the webhook endpoint for use by the consuming application.Adversaries may link an adversary-owned environment to a victim-owned SaaS service to achieve repeatedAutomated Exfiltrationof emails, chat messages, and other data.[3]Alternatively, instead of linking the webhook endpoint to a service, an adversary can manually post staged data directly to the URL in order to exfiltrate it.[4]Access to webhook endpoints is often over HTTPS, which gives the adversary an additional level of protection. Exfiltration leveraging webhooks can also blend in with normal network traffic if the webhook endpoint points to a commonly used SaaS application or collaboration service.[5][6][7]",
    "tactic": "Exfiltration",
    "tactics": [
      "Exfiltration"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Exfiltration Over Web Service",
    "parent_technique_id": "T1567",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:51:29.918718"
  },
  {
    "technique_id": "T1029",
    "name": "Scheduled Transfer",
    "description": "Adversaries may schedule data exfiltration to be performed only at certain times of day or at certain intervals. This could be done to blend traffic patterns with normal activity or availability.When scheduled exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such asExfiltration Over C2 ChannelorExfiltration Over Alternative Protocol.",
    "tactic": "Exfiltration",
    "tactics": [
      "Exfiltration"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:51:33.258376",
    "subtechniques": []
  },
  {
    "technique_id": "T1531",
    "name": "Account Access Removal",
    "description": "Adversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users. Accounts may be deleted, locked, or manipulated (ex: changed credentials) to remove access to accounts. Adversaries may also subsequently log off and/or perform aSystem Shutdown/Rebootto set malicious changes into place.[1][2]In Windows,Netutility,Set-LocalUserandSet-ADAccountPasswordPowerShellcmdlets may be used by adversaries to modify user accounts. Accounts could also be disabled by Group Policy. In Linux, thepasswdutility may be used to change passwords. On ESXi servers, accounts can be removed or modified via esxcli (system account set,system account remove).Adversaries who use ransomware or similar attacks may first perform this and other Impact behaviors, such asData DestructionandDefacement, in order to impede incident response/recovery before completing theData Encrypted for Impactobjective.",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:51:36.535008",
    "subtechniques": []
  },
  {
    "technique_id": "T1485",
    "name": "Data Destruction",
    "description": "Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives.[1][2][3][4][5][6]Common operating system file deletion commands such asdelandrmoften only remove pointers to files without wiping the contents of the files themselves, making the files recoverable by proper forensic methodology. This behavior is distinct fromDisk Content WipeandDisk Structure Wipebecause individual files are destroyed rather than sections of a storage disk or the disk's logical structure.Adversaries may attempt to overwrite files and directories with randomly generated data to make it irrecoverable.[4][5]In some cases politically oriented image files have been used to overwrite data.[2][3][4]To maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware designed for destroying data may have worm-like features to propagate across a network by leveraging additional techniques likeValid Accounts,OS Credential Dumping, andSMB/Windows Admin Shares.[1][2][3][4][6].In cloud environments, adversaries may leverage access to delete cloud storage objects, machine images, database instances, and other infrastructure crucial to operations to damage an organization or their customers.[7][8]Similarly, they may delete virtual machines from on-prem virtualized environments.",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:51:39.941492",
    "subtechniques": []
  },
  {
    "technique_id": "T1486",
    "name": "Data Encrypted for Impact",
    "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted.[1][2][3][4]In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted (and often renamed and/or tagged with specific file markers). Adversaries may need to first employ other behaviors, such asFile and Directory Permissions ModificationorSystem Shutdown/Reboot, in order to unlock and/or gain access to manipulate these files.[5]In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.[3]Adversaries may also encrypt virtual machines hosted on ESXi or other hypervisors.[6]To maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques likeValid Accounts,OS Credential Dumping, andSMB/Windows Admin Shares.[2][3]Encryption malware may also leverageInternal Defacement, such as changing victim wallpapers or ESXi server login messages, or otherwise intimidate victims by sending ransom notes or other messages to connected printers (known as \"print bombing\").[7][8]In cloud environments, storage objects within compromised accounts may also be encrypted.[9]For example, in AWS environments, adversaries may leverage services such as AWSâ€™s Server-Side Encryption with Customer Provided Keys (SSE-C) to encrypt data.[10]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:51:43.410069",
    "subtechniques": []
  },
  {
    "technique_id": "T1565",
    "name": "Data Manipulation",
    "description": "Adversaries may insert, delete, or manipulate data in order to influence external outcomes or hide activity, thus threatening the integrity of the data.[1]By manipulating data, adversaries may attempt to affect a business process, organizational understanding, or decision making.The type of modification and the impact it will have depends on the target application and process as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:51:46.735077",
    "subtechniques": [
      {
        "id": "T1565.001",
        "name": "Stored Data Manipulation"
      },
      {
        "id": "T1565.002",
        "name": "Transmitted Data Manipulation"
      },
      {
        "id": "T1565.003",
        "name": "Runtime Data Manipulation"
      }
    ]
  },
  {
    "technique_id": "T1565.001",
    "name": "Stored Data Manipulation",
    "description": "Adversaries may insert, delete, or manipulate data at rest in order to influence external outcomes or hide activity, thus threatening the integrity of the data.[1][2]By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making.Stored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Data Manipulation",
    "parent_technique_id": "T1565",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:51:50.052319"
  },
  {
    "technique_id": "T1565.002",
    "name": "Transmitted Data Manipulation",
    "description": "Adversaries may alter data en route to storage or other systems in order to manipulate external outcomes or hide activity, thus threatening the integrity of the data.[1][2]By manipulating transmitted data, adversaries may attempt to affect a business process, organizational understanding, and decision making.Manipulation may be possible over a network connection or between system processes where there is an opportunity deploy a tool that will intercept and change information. The type of modification and the impact it will have depends on the target transmission mechanism as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Data Manipulation",
    "parent_technique_id": "T1565",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:51:53.411280"
  },
  {
    "technique_id": "T1565.003",
    "name": "Runtime Data Manipulation",
    "description": "Adversaries may modify systems in order to manipulate the data as it is accessed and displayed to an end user, thus threatening the integrity of the data.[1][2]By manipulating runtime data, adversaries may attempt to affect a business process, organizational understanding, and decision making.Adversaries may alter application binaries used to display data in order to cause runtime manipulations. Adversaries may also conductChange Default File AssociationandMasqueradingto cause a similar effect. The type of modification and the impact it will have depends on the target application and process as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Data Manipulation",
    "parent_technique_id": "T1565",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:51:56.763938"
  },
  {
    "technique_id": "T1491",
    "name": "Defacement",
    "description": "Adversaries may modify visual content available internally or externally to an enterprise network, thus affecting the integrity of the original content. Reasons forDefacementinclude delivering messaging, intimidation, or claiming (possibly false) credit for an intrusion. Disturbing or offensive images may be used as a part ofDefacementin order to cause user discomfort, or to pressure compliance with accompanying messages.",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:52:00.117486",
    "subtechniques": [
      {
        "id": "T1491.001",
        "name": "Internal Defacement"
      },
      {
        "id": "T1491.002",
        "name": "External Defacement"
      }
    ]
  },
  {
    "technique_id": "T1491.001",
    "name": "Internal Defacement",
    "description": "An adversary may deface systems internal to an organization in an attempt to intimidate or mislead users, thus discrediting the integrity of the systems. This may take the form of modifications to internal websites or server login messages, or directly to user systems with the replacement of the desktop wallpaper.[1][2]Disturbing or offensive images may be used as a part ofInternal Defacementin order to cause user discomfort, or to pressure compliance with accompanying messages. Since internally defacing systems exposes an adversary's presence, it often takes place after other intrusion goals have been accomplished.[3]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Defacement",
    "parent_technique_id": "T1491",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:52:03.471343"
  },
  {
    "technique_id": "T1491.002",
    "name": "External Defacement",
    "description": "An adversary may deface systems external to an organization in an attempt to deliver messaging, intimidate, or otherwise mislead an organization or users.External Defacementmay ultimately cause users to distrust the systems and to question/discredit the systemâ€™s integrity. Externally-facing websites are a common victim of defacement; often targeted by adversary and hacktivist groups in order to push a political message or spread propaganda.[1][2][3]External Defacementmay be used as a catalyst to trigger events, or as a response to actions taken by an organization or government. Similarly, website defacement may also be used as setup, or a precursor, for future attacks such asDrive-by Compromise.[4]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Defacement",
    "parent_technique_id": "T1491",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:52:06.842830"
  },
  {
    "technique_id": "T1561",
    "name": "Disk Wipe",
    "description": "Adversaries may wipe or corrupt raw disk data on specific systems or in large numbers in a network to interrupt availability to system and network resources. With direct write access to a disk, adversaries may attempt to overwrite portions of disk data. Adversaries may opt to wipe arbitrary portions of disk data and/or wipe disk structures like the master boot record (MBR). A complete wipe of all disk sectors may be attempted.To maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware used for wiping disks may have worm-like features to propagate across a network by leveraging additional techniques likeValid Accounts,OS Credential Dumping, andSMB/Windows Admin Shares.[1]On network devices, adversaries may wipe configuration files and other data from the device usingNetwork Device CLIcommands such aserase.[2]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:52:10.212548",
    "subtechniques": [
      {
        "id": "T1561.001",
        "name": "Disk Content Wipe"
      },
      {
        "id": "T1561.002",
        "name": "Disk Structure Wipe"
      }
    ]
  },
  {
    "technique_id": "T1561.001",
    "name": "Disk Content Wipe",
    "description": "Adversaries may erase the contents of storage devices on specific systems or in large numbers in a network to interrupt availability to system and network resources.Adversaries may partially or completely overwrite the contents of a storage device rendering the data irrecoverable through the storage interface.[1][2][3]Instead of wiping specific disk structures or files, adversaries with destructive intent may wipe arbitrary portions of disk content. To wipe disk content, adversaries may acquire direct access to the hard drive in order to overwrite arbitrarily sized portions of disk with random data.[2]Adversaries have also been observed leveraging third-party drivers likeRawDiskto directly access disk content.[1][2]This behavior is distinct fromData Destructionbecause sections of the disk are erased instead of individual files.To maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware used for wiping disk content may have worm-like features to propagate across a network by leveraging additional techniques likeValid Accounts,OS Credential Dumping, andSMB/Windows Admin Shares.[2]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Disk Wipe",
    "parent_technique_id": "T1561",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:52:13.575104"
  },
  {
    "technique_id": "T1561.002",
    "name": "Disk Structure Wipe",
    "description": "Adversaries may corrupt or wipe the disk data structures on a hard drive necessary to boot a system; targeting specific critical systems or in large numbers in a network to interrupt availability to system and network resources.Adversaries may attempt to render the system unable to boot by overwriting critical data located in structures such as the master boot record (MBR) or partition table.[1][2][3][4][5]The data contained in disk structures may include the initial executable code for loading an operating system or the location of the file system partitions on disk. If this information is not present, the computer will not be able to load an operating system during the boot process, leaving the computer unavailable.Disk Structure Wipemay be performed in isolation, or along withDisk Content Wipeif all sectors of a disk are wiped.On a network devices, adversaries may reformat the file system usingNetwork Device CLIcommands such asformat.[6]To maximize impact on the target organization, malware designed for destroying disk structures may have worm-like features to propagate across a network by leveraging other techniques likeValid Accounts,OS Credential Dumping, andSMB/Windows Admin Shares.[1][2][3][4]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Disk Wipe",
    "parent_technique_id": "T1561",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:52:16.973956"
  },
  {
    "technique_id": "T1667",
    "name": "Email Bombing",
    "description": "Adversaries may flood targeted email addresses with an overwhelming volume of messages. This may bury legitimate emails in a flood of spam and disrupt business operations.[1][2]An adversary may accomplish email bombing by leveraging an automated bot to register a targeted address for e-mail lists that do not validate new signups, such as online newsletters. The result can be a wave of thousands of e-mails that effectively overloads the victimâ€™s inbox.[2][3]By sending hundreds or thousands of e-mails in quick succession, adversaries may successfully divert attention away from and bury legitimate messages including security alerts, daily business processes like help desk tickets and client correspondence, or ongoing scams.[3]This behavior can also be used as a tool of harassment.[2]This behavior may be a precursor forSpearphishing Voice. For example, an adversary may email bomb a target and then follow up with a phone call to fraudulently offer assistance. This social engineering may lead to the use ofRemote Access Softwareto steal credentials, deploy ransomware, conductFinancial Theft[1], or engage in other malicious activity.[4]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:52:20.321988",
    "subtechniques": []
  },
  {
    "technique_id": "T1499",
    "name": "Endpoint Denial of Service",
    "description": "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes[1]and to support other malicious activities, including distraction[2], hacktivism, and extortion.[3]An Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).To perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.Adversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.Botnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.[4]In cases where traffic manipulation is used, there may be points in the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.[5]For attacks attempting to saturate the providing network, seeNetwork Denial of Service.",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:52:23.670835",
    "subtechniques": [
      {
        "id": "T1499.001",
        "name": "OS Exhaustion Flood"
      },
      {
        "id": "T1499.002",
        "name": "Service Exhaustion Flood"
      },
      {
        "id": "T1499.003",
        "name": "Application Exhaustion Flood"
      },
      {
        "id": "T1499.004",
        "name": "Application or System Exploitation"
      }
    ]
  },
  {
    "technique_id": "T1499.001",
    "name": "OS Exhaustion Flood",
    "description": "Adversaries may launch a denial of service (DoS) attack targeting an endpoint's operating system (OS). A system's OS is responsible for managing the finite resources as well as preventing the entire system from being overwhelmed by excessive demands on its capacity. These attacks do not need to exhaust the actual resources on a system; the attacks may simply exhaust the limits and available resources that an OS self-imposes.Different ways to achieve this exist, including TCP state-exhaustion attacks such as SYN floods and ACK floods.[1]With SYN floods, excessive amounts of SYN packets are sent, but the 3-way TCP handshake is never completed. Because each OS has a maximum number of concurrent TCP connections that it will allow, this can quickly exhaust the ability of the system to receive new requests for TCP connections, thus preventing access to any TCP service provided by the server.[2]ACK floods leverage the stateful nature of the TCP protocol. A flood of ACK packets are sent to the target. This forces the OS to search its state table for a related TCP connection that has already been established. Because the ACK packets are for connections that do not exist, the OS will have to search the entire state table to confirm that no match exists. When it is necessary to do this for a large flood of packets, the computational requirements can cause the server to become sluggish and/or unresponsive, due to the work it must do to eliminate the rogue ACK packets. This greatly reduces the resources available for providing the targeted service.[3]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Endpoint Denial of Service",
    "parent_technique_id": "T1499",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:52:27.010533"
  },
  {
    "technique_id": "T1499.002",
    "name": "Service Exhaustion Flood",
    "description": "Adversaries may target the different network services provided by systems to conduct a denial of service (DoS). Adversaries often target the availability of DNS and web services, however others have been targeted as well.[1]Web server software can be attacked through a variety of means, some of which apply generally while others are specific to the software being used to provide the service.One example of this type of attack is known as a simple HTTP flood, where an adversary sends a large number of HTTP requests to a web server to overwhelm it and/or an application that runs on top of it. This flood relies on raw volume to accomplish the objective, exhausting any of the various resources required by the victim software to provide the service.[2]Another variation, known as a SSL renegotiation attack, takes advantage of a protocol feature in SSL/TLS. The SSL/TLS protocol suite includes mechanisms for the client and server to agree on an encryption algorithm to use for subsequent secure connections. If SSL renegotiation is enabled, a request can be made for renegotiation of the crypto algorithm. In a renegotiation attack, the adversary establishes a SSL/TLS connection and then proceeds to make a series of renegotiation requests. Because the cryptographic renegotiation has a meaningful cost in computation cycles, this can cause an impact to the availability of the service when done in volume.[3]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Endpoint Denial of Service",
    "parent_technique_id": "T1499",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:52:30.359508"
  },
  {
    "technique_id": "T1499.003",
    "name": "Application Exhaustion Flood",
    "description": "Adversaries may target resource intensive features of applications to cause a denial of service (DoS), denying availability to those applications. For example, specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.[1]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Endpoint Denial of Service",
    "parent_technique_id": "T1499",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:52:33.712181"
  },
  {
    "technique_id": "T1499.004",
    "name": "Application or System Exploitation",
    "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users.[1]Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.Adversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such asData Destruction,Firmware Corruption,Service Stopetc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems.",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Endpoint Denial of Service",
    "parent_technique_id": "T1499",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:52:37.048737"
  },
  {
    "technique_id": "T1657",
    "name": "Financial Theft",
    "description": "Adversaries may steal monetary resources from targets through extortion, social engineering, technical theft, or other methods aimed at their own financial gain at the expense of the availability of these resources for victims. Financial theft is the ultimate objective of several popular campaign types including extortion by ransomware,[1]business email compromise (BEC) and fraud,[2]\"pig butchering,\"[3]bank hacking,[4]and exploiting cryptocurrency networks.[5]Adversaries mayCompromise Accountsto conduct unauthorized transfers of funds.[6]In the case of business email compromise or email fraud, an adversary may utilizeImpersonationof a trusted entity. Once the social engineering is successful, victims can be deceived into sending money to financial accounts controlled by an adversary.[2]This creates the potential for multiple victims (i.e., compromised accounts as well as the ultimate monetary loss) in incidents involving financial theft.[7]Extortion by ransomware may occur, for example, when an adversary demands payment from a victim afterData Encrypted for Impact[8]andExfiltrationof data, followed by threatening to leak sensitive data to the public unless payment is made to the adversary.[9]Adversaries may use dedicated leak sites to distribute victim data.[10]Due to the potentially immense business impact of financial theft, an adversary may abuse the possibility of financial theft and seeking monetary gain to divert attention from their true goals such asData Destructionand business disruption.[11]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:52:40.444626",
    "subtechniques": []
  },
  {
    "technique_id": "T1495",
    "name": "Firmware Corruption",
    "description": "Adversaries may overwrite or corrupt the flash memory contents of system BIOS or other firmware in devices attached to a system in order to render them inoperable or unable to boot, thus denying the availability to use the devices and/or the system.[1]Firmware is software that is loaded and executed from non-volatile memory on hardware devices in order to initialize and manage device functionality. These devices may include the motherboard, hard drive, or video cards.In general, adversaries may manipulate, overwrite, or corrupt firmware in order to deny the use of the system or devices. For example, corruption of firmware responsible for loading the operating system for network devices may render the network devices inoperable.[2][3]Depending on the device, this attack may also result inData Destruction.",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:52:43.805089",
    "subtechniques": []
  },
  {
    "technique_id": "T1490",
    "name": "Inhibit System Recovery",
    "description": "Adversaries may delete or remove built-in data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery.[1][2]This may deny access to available backups and recovery options.Operating systems may contain features that can help fix corrupted systems, such as a backup catalog, volume shadow copies, and automatic repair features. Adversaries may disable or delete system recovery features to augment the effects ofData DestructionandData Encrypted for Impact.[1][2]Furthermore, adversaries may disable recovery notifications, then corrupt backups.[3]A number of native Windows utilities have been used by adversaries to disable or delete system recovery features:vssadmin.execan be used to delete all volume shadow copies on a system -vssadmin.exe delete shadows /all /quietWindows Management Instrumentationcan be used to delete volume shadow copies -wmic shadowcopy deletewbadmin.execan be used to delete the Windows Backup Catalog -wbadmin.exe delete catalog -quietbcdedit.execan be used to disable automatic Windows recovery features by modifying boot configuration data -bcdedit.exe /set {default} bootstatuspolicy ignoreallfailures & bcdedit /set {default} recoveryenabled noREAgentC.execan be used to disable Windows Recovery Environment (WinRE) repair/recovery options of an infected systemdiskshadow.execan be used to delete all volume shadow copies on a system -diskshadow delete shadows all[4][5]On network devices, adversaries may leverageDisk Wipeto delete backup firmware images and reformat the file system, thenSystem Shutdown/Rebootto reload the device. Together this activity may leave network devices completely inoperable and inhibit recovery operations.On ESXi servers, adversaries may delete or encrypt snapshots of virtual machines to supportData Encrypted for Impact, preventing them from being leveraged as backups (e.g., viavim-cmd vmsvc/snapshot.removeall).[6]Adversaries may also delete \"online\" backups that are connected to their network â€“ whether via network storage media or through folders that sync to cloud services.[7]In cloud environments, adversaries may disable versioning and backup policies and delete snapshots, database backups, machine images, and prior versions of objects designed to be used in disaster recovery scenarios.[8][9]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:52:47.219371",
    "subtechniques": []
  },
  {
    "technique_id": "T1498",
    "name": "Network Denial of Service",
    "description": "Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes[1]and to support other malicious activities, including distraction[2], hacktivism, and extortion.[3]A Network DoS will occur when the bandwidth capacity of the network connection to a system is exhausted due to the volume of malicious traffic directed at the resource or the network connections and network devices the resource relies on. For example, an adversary may send 10Gbps of traffic to a server that is hosted by a network with a 1Gbps connection to the internet. This traffic can be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).To perform Network DoS attacks several aspects apply to multiple methods, including IP address spoofing, and botnets.Adversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.For DoS attacks targeting the hosting system directly, seeEndpoint Denial of Service.",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:52:50.586898",
    "subtechniques": [
      {
        "id": "T1498.001",
        "name": "Direct Network Flood"
      },
      {
        "id": "T1498.002",
        "name": "Reflection Amplification"
      }
    ]
  },
  {
    "technique_id": "T1498.001",
    "name": "Direct Network Flood",
    "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network.Direct Network Floods are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.Botnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.[1]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Network Denial of Service",
    "parent_technique_id": "T1498",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:52:54.126304"
  },
  {
    "technique_id": "T1498.002",
    "name": "Reflection Amplification",
    "description": "Adversaries may attempt to cause a denial of service (DoS) by reflecting a high-volume of network traffic to a target. This type of Network DoS takes advantage of a third-party server intermediary that hosts and will respond to a given spoofed source IP address. This third-party server is commonly termed a reflector. An adversary accomplishes a reflection attack by sending packets to reflectors with the spoofed address of the victim. Similar to Direct Network Floods, more than one system may be used to conduct the attack, or a botnet may be used. Likewise, one or more reflectors may be used to focus traffic on the target.[1]This Network DoS attack may also reduce the availability and functionality of the targeted system(s) and network.Reflection attacks often take advantage of protocols with larger responses than requests in order to amplify their traffic, commonly known as a Reflection Amplification attack. Adversaries may be able to generate an increase in volume of attack traffic that is several orders of magnitude greater than the requests sent to the amplifiers. The extent of this increase will depending upon many variables, such as the protocol in question, the technique used, and the amplifying servers that actually produce the amplification in attack volume. Two prominent protocols that have enabled Reflection Amplification Floods are DNS[2]and NTP[3], though the use of several others in the wild have been documented.[4]In particular, the memcache protocol showed itself to be a powerful protocol, with amplification sizes up to 51,200 times the requesting packet.[5]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Network Denial of Service",
    "parent_technique_id": "T1498",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:52:57.469989"
  },
  {
    "technique_id": "T1496",
    "name": "Resource Hijacking",
    "description": "Adversaries may leverage the resources of co-opted systems to complete resource-intensive tasks, which may impact system and/or hosted service availability.Resource hijacking may take a number of different forms. For example, adversaries may:Leverage compute resources in order to mine cryptocurrencySell network bandwidth to proxy networksGenerate SMS traffic for profitAbuse cloud-based messaging services to send large quantities of spam messagesIn some cases, adversaries may leverage multiple types of Resource Hijacking at once.[1]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:53:00.821269",
    "subtechniques": [
      {
        "id": "T1496.001",
        "name": "Compute Hijacking"
      },
      {
        "id": "T1496.002",
        "name": "Bandwidth Hijacking"
      }
    ]
  },
  {
    "technique_id": "T1496.001",
    "name": "Compute Hijacking",
    "description": "Adversaries may leverage the compute resources of co-opted systems to complete resource-intensive tasks, which may impact system and/or hosted service availability.One common purpose forCompute Hijackingis to validate transactions of cryptocurrency networks and earn virtual currency. Adversaries may consume enough system resources to negatively impact and/or cause affected machines to become unresponsive.[1]Servers and cloud-based systems are common targets because of the high potential for available resources, but user endpoint systems may also be compromised and used forCompute Hijackingand cryptocurrency mining.[2]Containerized environments may also be targeted due to the ease of deployment via exposed APIs and the potential for scaling mining activities by deploying or compromising multiple containers within an environment or cluster.[3][4]Additionally, some cryptocurrency mining malware identify then kill off processes for competing malware to ensure itâ€™s not competing for resources.[5]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Resource Hijacking",
    "parent_technique_id": "T1496",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:53:04.193768"
  },
  {
    "technique_id": "T1496.002",
    "name": "Bandwidth Hijacking",
    "description": "Adversaries may leverage the network bandwidth resources of co-opted systems to complete resource-intensive tasks, which may impact system and/or hosted service availability.Adversaries may also use malware that leverages a system's network bandwidth as part of a botnet in order to facilitateNetwork Denial of Servicecampaigns and/or to seed malicious torrents.[1]Alternatively, they may engage in proxyjacking by selling use of the victims' network bandwidth and IP address to proxyware services.[2]Finally, they may engage in internet-wide scanning in order to identify additional targets for compromise.[3]In addition to incurring potential financial costs or availability disruptions, this technique may cause reputational damage if a victimâ€™s bandwidth is used for illegal activities.[2]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": true,
    "parent_technique": "Resource Hijacking",
    "parent_technique_id": "T1496",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:53:07.563221"
  },
  {
    "technique_id": "T1489",
    "name": "Service Stop",
    "description": "Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services or processes can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment.[1][2]Adversaries may accomplish this by disabling individual services of high importance to an organization, such asMSExchangeIS, which will make Exchange content inaccessible.[2]In some cases, adversaries may stop or disable many or all services to render systems unusable.[1]Services or processes may not allow for modification of their data stores while running. Adversaries may stop services or processes in order to conductData DestructionorData Encrypted for Impacton the data stores of services like Exchange and SQL Server, or on virtual machines hosted on ESXi infrastructure.[3][4]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:53:10.950865",
    "subtechniques": []
  },
  {
    "technique_id": "T1529",
    "name": "System Shutdown/Reboot",
    "description": "Adversaries may shutdown/reboot systems to interrupt access to, or aid in the destruction of, those systems. Operating systems may contain commands to initiate a shutdown/reboot of a machine or network device. In some cases, these commands may also be used to initiate a shutdown/reboot of a remote computer or network device viaNetwork Device CLI(e.g.reload).[1][2]They may also include shutdown/reboot of a virtual machine via hypervisor / cloud consoles or command line tools.Shutting down or rebooting systems may disrupt access to computer resources for legitimate users while also impeding incident response/recovery.Adversaries may attempt to shutdown/reboot a system after impacting it in other ways, such asDisk Structure WipeorInhibit System Recovery, to hasten the intended effects on system availability.[3][4]",
    "tactic": "Impact",
    "tactics": [
      "Impact"
    ],
    "platforms": [
      "macOS"
    ],
    "data_sources": [],
    "is_subtechnique": false,
    "parent_technique": "",
    "parent_technique_id": "",
    "mitre_version": "1.0",
    "sync_source": "mitre_extractor_enhanced",
    "last_updated": "2025-07-02T13:53:14.312524",
    "subtechniques": []
  }
]