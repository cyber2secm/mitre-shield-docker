import React, { useState, useCallback, useEffect, useRef } from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Upload, FileText, CheckCircle, AlertCircle, Download, HelpCircle, Eye, Shield, X, Loader2, AlertTriangle } from "lucide-react";
import { ExtractDataFromUploadedFile, UploadFile } from "@/api/integrations";
import { validateRules } from "@/utils/ruleValidation";
import ValidationResultsModal from "./ValidationResultsModal";
import { motion } from "framer-motion";
import { Progress } from "@/components/ui/progress";

// Sample template data
const SAMPLE_RULES = [
  {
    rule_id: "RULE-001",
    name: "Suspicious PowerShell Execution",
    tactic: "Execution",
    technique_id: "T1059.001",
    xql_query: "dataset = xdr_data | filter action_process_image_name contains \"powershell.exe\" and action_process_command_line contains \"-ExecutionPolicy Bypass\"",
    severity: "High",
    rule_type: "SOC",
    description: "Detects PowerShell execution with bypassed execution policy which may indicate malicious activity",
    user: "admin",
    platform: "Windows"
  },
  {
    rule_id: "RULE-002", 
    name: "Credential Dumping via Mimikatz",
    tactic: "Credential Access",
    technique_id: "T1003.001",
    xql_query: "dataset = xdr_data | filter action_process_image_name contains \"mimikatz\" or action_process_command_line contains \"sekurlsa::logonpasswords\"",
    severity: "Critical",
    rule_type: "Product",
    description: "Detects potential credential dumping using Mimikatz or similar tools",
    user: "security-team",
    platform: "Windows"
  },
  {
    rule_id: "RULE-003",
    name: "Suspicious Network Connection",
    tactic: "Command and Control",
    technique_id: "T1071.001",
    xql_query: "dataset = xdr_data | filter action_network_connection_direction = \"OUTGOING\" and action_remote_port in (443, 80, 8080) and action_remote_ip not in (\"10.0.0.0/8\", \"192.168.0.0/16\", \"172.16.0.0/12\")",
    severity: "Medium",
    rule_type: "SOC",
    description: "Detects suspicious outbound network connections to external IPs",
    user: "analyst",
    platform: "Linux"
  },
  {
    rule_id: "RULE-004",
    name: "AWS CloudTrail Logging Disabled",
    tactic: "Defense Evasion",
    technique_id: "T1562.008",
    xql_query: "dataset = xdr_data | filter action_name = \"StopLogging\" and action_source = \"cloudtrail.amazonaws.com\"",
    severity: "High",
    rule_type: "Product",
    description: "Detects when AWS CloudTrail logging is disabled which may indicate evasion attempts",
    user: "cloud-security",
    platform: "AWS"
  },
  {
    rule_id: "RULE-005",
    name: "Container Escape Attempt",
    tactic: "Privilege Escalation",
    technique_id: "T1611",
    xql_query: "dataset = xdr_data | filter action_process_command_line contains \"docker\" and (action_process_command_line contains \"--privileged\" or action_process_command_line contains \"--cap-add=SYS_ADMIN\")",
    severity: "High",
    rule_type: "SOC",
    description: "Detects potential container escape attempts using privileged containers",
    user: "devops-team",
    platform: "Containers"
  }
];

const FIELD_DESCRIPTIONS = {
  modification_time: "Date and time when the rule was last modified (e.g., Nov 20th 2022 12:59:28)",
  rule_name: "Human-readable name for the rule",
  rule_id: "Unique identifier for the detection rule (e.g., 118)",
  description: "Detailed description of what the rule detects",
  severity: "Severity level: Critical, High, Medium, or Low",
  number_of_alerts: "Number of alerts generated by this rule (e.g., 58)",
  source: "Email or username of the person responsible for this rule",
  rule_type: "Rule type: Product (vendor-provided) or SOC (custom rules)",
  tactic: "MITRE ATT&CK tactic (e.g., Execution, Persistence, Defense Evasion)",
  technique_id: "MITRE ATT&CK technique ID (e.g., T1562.008)",
  xql_query: "XQL query logic for detection",
  platform: "Target platform: Windows, macOS, Linux, AWS, Azure, GCP, Oracle, Containers"
};

// Duplicate Rules Dialog Component
const DuplicateRulesDialog = ({ isOpen, onClose, duplicateIds, details, onSkipDuplicates, onUpdateExisting }) => {
  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-2xl">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2 text-amber-700 dark:text-amber-300">
            <AlertTriangle className="w-5 h-5" />
            Duplicate Rule IDs Found
          </DialogTitle>
          <DialogDescription>
            Some rules you're trying to import already exist in the database.
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-4">
          <Alert className="border-amber-200 dark:border-amber-800 bg-amber-50 dark:bg-amber-900/20">
            <AlertTriangle className="h-4 w-4 text-amber-600 dark:text-amber-400" />
            <AlertTitle className="text-amber-800 dark:text-amber-300">Import Summary</AlertTitle>
            <AlertDescription className="text-amber-700 dark:text-amber-400">
              <div className="mt-2 space-y-1">
                <div>Total rules in file: <strong>{details.total}</strong></div>
                <div>Existing rules: <strong>{details.duplicates}</strong></div>
                <div>New rules: <strong>{details.new}</strong></div>
              </div>
            </AlertDescription>
          </Alert>

          <div>
            <h4 className="font-medium text-slate-900 dark:text-slate-100 mb-2">
              Duplicate Rule IDs ({duplicateIds.length}):
            </h4>
            <div className="max-h-32 overflow-y-auto custom-scrollbar bg-slate-50 dark:bg-slate-800 rounded-lg p-3 border border-slate-200 dark:border-slate-700">
              <div className="flex flex-wrap gap-2">
                {duplicateIds.map((id, index) => (
                  <Badge key={index} variant="outline" className="font-mono text-xs bg-amber-50 dark:bg-amber-900/30 text-amber-700 dark:text-amber-300 border-amber-200 dark:border-amber-700">
                    {id}
                  </Badge>
                ))}
              </div>
            </div>
          </div>

          <div className="text-sm text-slate-600 dark:text-slate-400">
            <p><strong>Options:</strong></p>
            <ul className="mt-1 space-y-1 list-disc list-inside">
              <li><strong>Skip duplicates:</strong> Import only the {details.new} new rules</li>
              <li><strong>Update existing:</strong> Overwrite existing rules with new data and import new ones</li>
            </ul>
          </div>
        </div>

        <DialogFooter className="gap-3">
          <Button variant="outline" onClick={onClose}>
            Cancel
          </Button>
          <Button 
            variant="outline" 
            onClick={onSkipDuplicates}
            className="text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300"
          >
            Skip Duplicates ({details.new} new)
          </Button>
          <Button 
            onClick={onUpdateExisting}
            className="bg-amber-600 hover:bg-amber-700 dark:bg-amber-500 dark:hover:bg-amber-600"
          >
            Update Existing ({details.total} total)
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default function ImportModal({ isOpen, onClose, onImport }) {
  const fileRef = useRef(null);
  const [file, setFile] = useState(null);
  const [isParsing, setIsParsing] = useState(false);
  const [parsedRules, setParsedRules] = useState([]);
  const [validationResults, setValidationResults] = useState(null);
  const [showValidationModal, setShowValidationModal] = useState(false);
  const [error, setError] = useState(null);
  const [importResult, setImportResult] = useState(null);
  const [showPreview, setShowPreview] = useState(false);
  const [activeTab, setActiveTab] = useState("upload");
  const [isUploading, setIsUploading] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [uploadStatus, setUploadStatus] = useState({ type: null, message: null });
  const [showValidationResults, setShowValidationResults] = useState(false);
  const [duplicateInfo, setDuplicateInfo] = useState(null);
  const [showDuplicateDialog, setShowDuplicateDialog] = useState(false);

  const downloadTemplate = () => {
    // Use the backend endpoint to download the updated template
    const link = document.createElement('a');
    link.setAttribute('href', '/api/download/template');
    link.setAttribute('download', 'detection_rules_template.csv');
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const handleFileChange = (e) => {
    const selectedFile = e.target.files[0];
    if (selectedFile && (selectedFile.type === "text/csv" || selectedFile.name.endsWith('.csv'))) {
      setFile(selectedFile);
      setError(null);
      setParsedRules([]);
      setImportResult(null);
      setShowPreview(false);
    } else {
      setError("Please select a valid .csv file.");
      setFile(null);
    }
  };

  const parseFileWithIntegration = async (fileToParse) => {
    try {
      const { file_url } = await UploadFile({ file: fileToParse });
      
      const schema = {
        type: "array",
        items: {
          type: "object",
          properties: {
            modification_time: { type: "string" },
            rule_name: { type: "string" },
            rule_id: { type: "string" },
            description: { type: "string" },
            severity: { type: "string" },
            number_of_alerts: { type: "string" },
            source: { type: "string" },
            rule_type: { type: "string" },
            tactic: { type: "string" },
            technique_id: { type: "string" },
            xql_query: { type: "string" },
            platform: { type: "string" }
          },
          required: ["rule_name", "rule_id", "tactic", "technique_id", "xql_query", "severity", "rule_type", "platform"]
        }
      };

      const result = await ExtractDataFromUploadedFile({
        file_url,
        json_schema: schema
      });

      if (result.status === "error") {
        throw new Error(result.details || "Failed to parse file");
      }

      if (!result.data || !Array.isArray(result.data)) {
        throw new Error("The parsed file did not return an array of rules. Please check the file format.");
      }

      const rules = result.data.map((rule, index) => {
        // Handle platform: normalize to match enum capitalization
        if (rule.platform && typeof rule.platform === 'string') {
          const p = rule.platform.toLowerCase();
          const platformMap = {
              'windows': 'Windows',
              'macos': 'macOS',
              'linux': 'Linux',
              'aws': 'AWS',
              'azure': 'Azure',
              'gcp': 'GCP',
              'oracle': 'Oracle',
              'containers': 'Containers'
          };
          rule.platform = platformMap[p] || rule.platform;
        }

        // Handle severity: normalize case
        if (rule.severity && typeof rule.severity === 'string') {
          const s = rule.severity.toLowerCase();
          const severityMap = {
              'critical': 'Critical',
              'high': 'High',
              'medium': 'Medium',
              'low': 'Low'
          };
          rule.severity = severityMap[s] || rule.severity;
        }

        // Handle rule_type: normalize case
        if (rule.rule_type && typeof rule.rule_type === 'string') {
          const rt = rule.rule_type.toLowerCase();
          const ruleTypeMap = {
              'soc': 'SOC',
              'product': 'Product'
          };
          rule.rule_type = ruleTypeMap[rt] || rule.rule_type;
        }

        // Handle tactic: normalize case to proper MITRE format
        if (rule.tactic && typeof rule.tactic === 'string') {
          const t = rule.tactic.toLowerCase();
          const tacticMap = {
              'reconnaissance': 'Reconnaissance',
              'resource development': 'Resource Development',
              'initial access': 'Initial Access',
              'execution': 'Execution',
              'persistence': 'Persistence',
              'privilege escalation': 'Privilege Escalation',
              'defense evasion': 'Defense Evasion',
              'credential access': 'Credential Access',
              'discovery': 'Discovery',
              'lateral movement': 'Lateral Movement',
              'collection': 'Collection',
              'command and control': 'Command and Control',
              'exfiltration': 'Exfiltration',
              'impact': 'Impact'
          };
          rule.tactic = tacticMap[t] || rule.tactic;
        }

        // Map template field names to backend field names
        if (rule.rule_name) {
          rule.name = rule.rule_name;
          delete rule.rule_name;
        }

        if (rule.source) {
          rule.assigned_user = rule.source;
          delete rule.source;
        }

        // Set defaults for optional fields
        rule.status = "Testing"; // Default status
        rule.description = rule.description || "";
        rule.assigned_user = rule.assigned_user || "admin";

        // Validate required fields (using original template field names)
        const requiredFields = ["rule_id", "name", "tactic", "technique_id", "xql_query", "severity", "rule_type", "platform"];
        for (const field of requiredFields) {
          if (!rule[field]) {
            throw new Error(`Row ${index + 2}: Missing required field '${field}'`);
          }
        }

        return rule;
      });

      return rules;
    } catch (error) {
      console.error("File parsing error:", error);
      throw new Error(`Failed to parse file: ${error.message}`);
    }
  };

  const handleParse = useCallback(async () => {
    if (!file) {
      setError("Please select a file first.");
      return;
    }
    
    setIsParsing(true);
    setError(null);
    setParsedRules([]);

    try {
      const rules = await parseFileWithIntegration(file);
      setParsedRules(rules);
      
      // Perform validation
      const validation = validateRules(rules);
      setValidationResults(validation);
      
      // Always show preview when rules are parsed successfully
      setShowPreview(true);
      
      if (validation.invalid.length > 0 || validation.warnings.length > 0) {
        setShowValidationModal(true);
      }
    } catch (e) {
      setError(e.message);
    } finally {
      setIsParsing(false);
    }
  }, [file]);

  const handleConfirmImport = async (rulesToImport = null) => {
    const rules = rulesToImport || parsedRules;
    if (rules.length === 0) return;
    
    const result = await onImport(rules);
    setImportResult(result);

    if (result.success) {
      setTimeout(() => {
        handleClose();
      }, 2000);
    }
  };

  const handleValidationClose = () => {
    setShowValidationModal(false);
    setShowPreview(true);
  };

  const handleProceedWithValid = async (validRules) => {
    setShowValidationModal(false);
    await handleConfirmImport(validRules);
  };

  const handleFixAndRetry = () => {
    setShowValidationModal(false);
    setFile(null);
    setParsedRules([]);
    setValidationResults(null);
    setError("Please fix the validation errors in your file and try again.");
  };

  const handleClose = () => {
    setFile(null);
    setParsedRules([]);
    setValidationResults(null);
    setShowValidationModal(false);
    setError(null);
    setImportResult(null);
    setShowPreview(false);
    setActiveTab("upload");
    setDuplicateInfo(null);
    setShowDuplicateDialog(false);
    setIsUploading(false);
    setUploadStatus({ type: null, message: null });
    setUploadProgress(0);
    setShowValidationResults(false);
    if (fileRef.current) {
      fileRef.current.value = '';
    }
    onClose();
  };

  const handleImport = async (allowUpdate = false) => {
    if (!file) {
      setError("Please select a file first.");
      return;
    }

    setIsUploading(true);
    setError(null);
    setUploadStatus({ type: null, message: null });

    try {
      let rules = parsedRules;
      
      // If not parsed yet, parse the file first
      if (rules.length === 0) {
        rules = await parseFileWithIntegration(file);
        setParsedRules(rules);
        
        // Perform validation
        const validation = validateRules(rules);
        setValidationResults(validation);
        
        // Always show preview when rules are parsed successfully
        setShowPreview(true);
        
        if (validation && (validation.invalid.length > 0 || validation.warnings.length > 0)) {
          setShowValidationResults(true);
          setIsUploading(false);
          return;
        }
      }
      
      // Import the rules
      const result = await onImport(rules, allowUpdate);
      console.log('Import result:', result); // Debug log
      
      if (result.success) {
        setUploadStatus({ type: 'success', message: result.message });
        setTimeout(() => {
          handleClose();
        }, 2000);
      } else {
        // Check if it's a duplicate error
        if (result.error && result.error.includes('Duplicate rule IDs') && result.duplicateIds) {
          console.log('Showing duplicate dialog:', result.duplicateIds); // Debug log
          setDuplicateInfo({
            duplicateIds: result.duplicateIds,
            details: result.details
          });
          setShowDuplicateDialog(true);
        } else {
          console.log('Showing error status:', result.message); // Debug log
          setUploadStatus({ type: 'error', message: result.message });
        }
      }
    } catch (e) {
      setError(e.message);
      setUploadStatus({ type: 'error', message: e.message });
    } finally {
      setIsUploading(false);
    }
  };

  const handleSkipDuplicates = async () => {
    setShowDuplicateDialog(false);
    // Filter out duplicates and import only new rules
    const newRules = parsedRules.filter(rule => !duplicateInfo.duplicateIds.includes(rule.rule_id));
    
    if (newRules.length === 0) {
      setUploadStatus({ 
        type: 'error', 
        message: 'All rules in the file already exist. No new rules to import.' 
      });
      // Close modal after showing message briefly
      setTimeout(() => {
        handleClose();
      }, 3000);
      return;
    }
    
    setIsUploading(true);
    try {
      const result = await onImport(newRules, false);
      if (result.success) {
        setUploadStatus({ type: 'success', message: result.message });
        setTimeout(() => {
          handleClose();
        }, 2000);
      } else {
        setUploadStatus({ type: 'error', message: result.message });
      }
    } catch (e) {
      setError(e.message);
      setUploadStatus({ type: 'error', message: e.message });
    } finally {
      setIsUploading(false);
    }
  };

  const handleUpdateExisting = async () => {
    setShowDuplicateDialog(false);
    setUploadStatus({ type: null, message: null }); // Clear any previous status
    await handleImport(true); // Allow updates
  };

  // Ensure proper scroll behavior and state reset when modal opens
  useEffect(() => {
    if (isOpen) {
      // Reset any scroll positions when modal opens
      document.body.style.overflow = 'hidden';
      
      // Reset all state when modal opens fresh
      setFile(null);
      setParsedRules([]);
      setValidationResults(null);
      setShowValidationModal(false);
      setError(null);
      setImportResult(null);
      setShowPreview(false);
      setActiveTab("upload");
      setDuplicateInfo(null);
      setShowDuplicateDialog(false);
      setIsUploading(false);
      setUploadStatus({ type: null, message: null });
      setUploadProgress(0);
      setShowValidationResults(false);
      if (fileRef.current) {
        fileRef.current.value = '';
      }
      
      return () => {
        document.body.style.overflow = 'unset';
      };
    }
  }, [isOpen]);

  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="max-w-5xl max-h-[95vh] overflow-hidden">
        <div className="flex flex-col h-full min-h-0">
          <DialogHeader className="flex-shrink-0 pb-4">
            <DialogTitle className="text-xl font-semibold text-slate-900 dark:text-slate-100">Import Detection Rules</DialogTitle>
            <DialogDescription className="text-slate-600 dark:text-slate-400">
              Upload a CSV file containing detection rules. Use the template below to ensure correct field formatting.
            </DialogDescription>
          </DialogHeader>

          <div className="flex-1 space-y-4 overflow-y-auto custom-scrollbar pr-2">
            {/* File Upload Section */}
            <div className="px-1">
              <label className="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">
                Select File
              </label>
              <div className="relative">
                <input
                  type="file"
                  ref={fileRef}
                  onChange={handleFileChange}
                  accept=".csv"
                  className="block w-full text-sm text-slate-500 dark:text-slate-400
                            file:mr-4 file:py-2 file:px-4
                            file:rounded-lg file:border-0
                            file:text-sm file:font-medium
                            file:bg-blue-50 file:text-blue-700
                            dark:file:bg-blue-900/50 dark:file:text-blue-300
                            hover:file:bg-blue-100 dark:hover:file:bg-blue-900/70
                            file:transition-colors file:cursor-pointer
                            cursor-pointer
                            border-2 border-slate-200 dark:border-slate-700 rounded-lg
                            bg-white dark:bg-slate-800 px-3 py-2
                            focus:ring-2 focus:ring-blue-500 focus:border-blue-500
                            focus:outline-none transition-all duration-200"
                />
              </div>
              {uploadStatus.type === 'error' && (
                <p className="mt-2 text-sm text-red-600 dark:text-red-400">
                  {uploadStatus.message}
                </p>
              )}
            </div>

            {/* Download Template Section */}
            <div className="bg-slate-50 dark:bg-slate-800/50 rounded-lg p-4 border border-slate-200 dark:border-slate-700">
              <h3 className="text-sm font-medium text-slate-900 dark:text-slate-100 mb-2">Need a template?</h3>
              <p className="text-sm text-slate-600 dark:text-slate-400 mb-3">
                Download our template with all required fields and example data:
              </p>
              <div className="flex gap-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => downloadTemplate()}
                  className="flex items-center gap-2"
                >
                  <FileText className="w-4 h-4" />
                  CSV Template
                </Button>
              </div>
            </div>

            {/* Progress Section */}
            {isUploading && (
              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <span className="text-sm font-medium text-slate-700 dark:text-slate-300">Processing...</span>
                  <span className="text-sm text-slate-500 dark:text-slate-400">{uploadProgress}%</span>
                </div>
                <Progress value={uploadProgress} className="w-full" />
              </div>
            )}

            {/* Success/Error Messages */}
            {uploadStatus.type === 'success' && (
              <Alert className="border-emerald-200 dark:border-emerald-800 bg-emerald-50 dark:bg-emerald-900/20">
                <CheckCircle className="h-4 w-4 text-emerald-600 dark:text-emerald-400" />
                <AlertTitle className="text-emerald-800 dark:text-emerald-300">Upload Successful</AlertTitle>
                <AlertDescription className="text-emerald-700 dark:text-emerald-400">
                  {uploadStatus.message}
                </AlertDescription>
              </Alert>
            )}

            {/* Rules Preview */}
            {parsedRules.length > 0 && (
              <div className="space-y-3 flex-shrink-0">
                <div className="flex items-center justify-between">
                  <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100">
                    Rules Preview ({parsedRules.length} rules)
                  </h3>
                </div>
                
                <div className="border border-slate-200 dark:border-slate-700 rounded-lg bg-slate-50 dark:bg-slate-800/50 overflow-hidden">
                  <div className="max-h-[400px] overflow-y-auto custom-scrollbar">
                    <div className="p-4 space-y-3">
                      {parsedRules.map((rule, index) => (
                        <div key={index} className="bg-white dark:bg-slate-800 p-4 rounded-lg border border-slate-200 dark:border-slate-600 shadow-sm">
                          <div className="flex items-start justify-between">
                            <div className="space-y-2 flex-1">
                              <div className="flex items-center gap-3 flex-wrap">
                                <h4 className="font-medium text-slate-900 dark:text-slate-100">{rule.name || rule.rule_name}</h4>
                                <Badge variant="outline" className="text-xs bg-blue-50 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300">
                                  {rule.technique_id}
                                </Badge>
                              </div>
                              
                              {rule.description && (
                                <p className="text-sm text-slate-600 dark:text-slate-400 line-clamp-2">
                                  {rule.description}
                                </p>
                              )}
                              
                              <div className="flex items-center gap-4 text-xs text-slate-500 dark:text-slate-400 flex-wrap">
                                <span>Type: <span className="font-medium text-slate-700 dark:text-slate-300">{rule.rule_type}</span></span>
                                <span>Platform: <span className="font-medium text-slate-700 dark:text-slate-300">{rule.platform}</span></span>
                                <span>Tactic: <span className="font-medium text-slate-700 dark:text-slate-300">{rule.tactic}</span></span>
                                <span>Severity: <span className="font-medium text-slate-700 dark:text-slate-300">{rule.severity}</span></span>
                              </div>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* Error Display */}
            {error && (
              <Alert variant="destructive" className="bg-red-50 dark:bg-red-900/20 border-red-200 dark:border-red-800">
                <AlertCircle className="h-4 w-4" />
                <AlertDescription className="text-red-800 dark:text-red-200">{error}</AlertDescription>
              </Alert>
            )}

            {/* Validation Results */}
            {validationResults && (
              <ValidationResultsModal
                isOpen={showValidationResults}
                onClose={() => setShowValidationResults(false)}
                validationResults={validationResults}
              />
            )}
          </div>

          <DialogFooter className="flex-shrink-0 pt-4 gap-3">
            <Button variant="outline" onClick={handleClose} disabled={isUploading}>
              Cancel
            </Button>
            <Button 
              onClick={() => handleImport()} 
              disabled={!file || isUploading}
              className="bg-emerald-600 hover:bg-emerald-700 dark:bg-emerald-500 dark:hover:bg-emerald-600"
            >
              {isUploading ? (
                <>
                  <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                  Importing...
                </>
              ) : (
                <>
                  <Upload className="w-4 h-4 mr-2" />
                  Import Rules
                </>
              )}
            </Button>
          </DialogFooter>

          <DuplicateRulesDialog
            isOpen={showDuplicateDialog}
            onClose={() => setShowDuplicateDialog(false)}
            duplicateIds={duplicateInfo?.duplicateIds || []}
            details={duplicateInfo?.details || {}}
            onSkipDuplicates={handleSkipDuplicates}
            onUpdateExisting={handleUpdateExisting}
          />
        </div>
      </DialogContent>
    </Dialog>
  );
}
