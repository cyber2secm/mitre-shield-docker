# MITRE Shield - Self-Contained Cloud Run Dockerfile
# Includes MongoDB + data built-in for zero-dependency deployment

# Build frontend
FROM node:18-alpine AS frontend-build
WORKDIR /app
COPY package*.json ./
RUN npm ci
COPY . .
RUN npm run build

# Backend stage  
FROM node:18-alpine AS backend-build
WORKDIR /app
COPY backend-example/package*.json ./
RUN npm ci --only=production

# Production stage - self-contained with MongoDB
FROM node:18-slim

# Install required system packages including MongoDB
RUN apt-get update && apt-get install -y \
    nginx \
    curl \
    gettext-base \
    gnupg \
    wget \
    ca-certificates \
    && mkdir -p /etc/apt/keyrings \
    && curl -fsSL https://pgp.mongodb.com/server-7.0.asc | gpg -o /etc/apt/keyrings/mongodb-server-7.0.gpg --dearmor \
    && echo "deb [ arch=amd64,arm64 signed-by=/etc/apt/keyrings/mongodb-server-7.0.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse" | tee /etc/apt/sources.list.d/mongodb-org-7.0.list \
    && apt-get update \
    && apt-get install -y mongodb-org \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create app user and directories
RUN groupadd -r appuser && useradd -r -g appuser appuser \
    && mkdir -p /app /app/uploads /var/log/nginx /usr/share/nginx/html /data/db /var/log/mongodb \
    && chown -R appuser:appuser /app \
    && chown -R mongodb:mongodb /data/db /var/log/mongodb

# Setup application
WORKDIR /app
COPY --from=backend-build /app/node_modules ./node_modules
COPY backend-example/ ./
COPY --from=frontend-build /app/dist /usr/share/nginx/html

# Copy database backup
COPY database-backup/ ./database-backup/

# Create nginx configuration template (using our proven working config)
RUN echo 'events {\n\
    worker_connections 1024;\n\
}\n\
\n\
http {\n\
    include /etc/nginx/mime.types;\n\
    default_type application/octet-stream;\n\
    access_log off;\n\
    error_log /var/log/nginx/error.log warn;\n\
    \n\
    server {\n\
        listen ${PORT} default_server;\n\
        server_name _;\n\
        \n\
        # Health check endpoint\n\
        location /health {\n\
            access_log off;\n\
            return 200 "healthy";\n\
            add_header Content-Type text/plain;\n\
        }\n\
        \n\
        # API proxy to backend\n\
        location /api/ {\n\
            proxy_pass http://127.0.0.1:3000;\n\
            proxy_http_version 1.1;\n\
            proxy_set_header Host $host;\n\
            proxy_set_header X-Real-IP $remote_addr;\n\
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\
            proxy_set_header X-Forwarded-Proto $scheme;\n\
            proxy_connect_timeout 30s;\n\
            proxy_send_timeout 30s;\n\
            proxy_read_timeout 30s;\n\
        }\n\
        \n\
        # Serve uploaded files\n\
        location /uploads/ {\n\
            alias /app/uploads/;\n\
            expires 1d;\n\
            add_header Cache-Control \"public\";\n\
        }\n\
        \n\
        # Frontend static files\n\
        location / {\n\
            root /usr/share/nginx/html;\n\
            index index.html;\n\
            try_files $uri $uri/ /index.html;\n\
            \n\
            # Cache static assets\n\
            location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {\n\
                expires 1y;\n\
                add_header Cache-Control "public, immutable";\n\
            }\n\
        }\n\
    }\n\
}' > /etc/nginx/nginx.conf.template

# Create database restore script
RUN echo '#!/bin/bash\n\
set -e\n\
\n\
echo "🗄️ Starting MongoDB..."\n\
# Start MongoDB in background\n\
mongod --dbpath /data/db --bind_ip_all --fork --logpath /var/log/mongodb/mongod.log\n\
\n\
# Wait for MongoDB to be ready\n\
echo "⏳ Waiting for MongoDB to be ready..."\n\
for i in {1..30}; do\n\
    if mongosh --host localhost --eval "print(\"ready\")" >/dev/null 2>&1; then\n\
        echo "✅ MongoDB is ready!"\n\
        break\n\
    fi\n\
    if [ $i -eq 30 ]; then\n\
        echo "❌ MongoDB failed to start"\n\
        exit 1\n\
    fi\n\
    sleep 2\n\
done\n\
\n\
# Check if database has data\n\
TECHNIQUE_COUNT=$(mongosh --host localhost --quiet --eval "db.mitretechniques.countDocuments()" mitre-shield 2>/dev/null || echo "0")\n\
\n\
if [ "$TECHNIQUE_COUNT" -eq 0 ]; then\n\
    echo "📊 Database is empty. Restoring from backup..."\n\
    if [ -d "/app/database-backup/mitre-shield" ]; then\n\
        mongorestore --host localhost --db mitre-shield /app/database-backup/mitre-shield/ --quiet\n\
        NEW_COUNT=$(mongosh --host localhost --quiet --eval "db.mitretechniques.countDocuments()" mitre-shield 2>/dev/null || echo "0")\n\
        echo "✅ Restored $NEW_COUNT MITRE techniques!"\n\
    else\n\
        echo "⚠️ No backup data found"\n\
    fi\n\
else\n\
    echo "✅ Database already contains $TECHNIQUE_COUNT techniques"\n\
fi' > /usr/local/bin/setup-db.sh \
    && chmod +x /usr/local/bin/setup-db.sh

# Create startup script optimized for Cloud Run
RUN echo '#!/bin/bash\n\
set -e\n\
\n\
# Configuration\n\
export PORT=${PORT:-8080}\n\
export NODE_ENV=${NODE_ENV:-production}\n\
export MONGODB_URI=${MONGODB_URI:-mongodb://localhost:27017/mitre-shield}\n\
\n\
echo "=== MITRE Shield Self-Contained Startup ==="\n\
echo "PORT: $PORT"\n\
echo "NODE_ENV: $NODE_ENV"\n\
echo "Starting all services..."\n\
\n\
# Setup database first\n\
/usr/local/bin/setup-db.sh\n\
\n\
# Generate nginx config (as root) - only substitute PORT variable\n\
envsubst '"'"'$PORT'"'"' < /etc/nginx/nginx.conf.template > /etc/nginx/nginx.conf\n\
nginx -t\n\
\n\
# Create log files with proper permissions\n\
touch /var/log/nginx/access.log /var/log/nginx/error.log\n\
chown appuser:appuser /var/log/nginx/access.log /var/log/nginx/error.log\n\
\n\
# Start backend as appuser in background on port 3000\n\
echo "Starting backend on port 3000..."\n\
su appuser -c "cd /app && PORT=3000 MONGODB_URI=$MONGODB_URI npm start" &\n\
BACKEND_PID=$!\n\
\n\
# Wait for backend to be ready\n\
echo "Waiting for backend to be ready..."\n\
for i in {1..30}; do\n\
    if curl -s http://localhost:3000/api/health >/dev/null 2>&1; then\n\
        echo "✅ Backend is ready!"\n\
        break\n\
    fi\n\
    if [ $i -eq 30 ]; then\n\
        echo "❌ Backend failed to start within 60 seconds"\n\
        exit 1\n\
    fi\n\
    sleep 2\n\
done\n\
\n\
# Start nginx in foreground (as root for port binding)\n\
echo "Starting nginx on port $PORT..."\n\
exec nginx -g "daemon off;"' > /usr/local/bin/start-app.sh \
    && chmod +x /usr/local/bin/start-app.sh

# Set proper permissions for app files
RUN chown -R appuser:appuser /app /usr/share/nginx/html

# Keep as root user for nginx to bind to port 8080 and manage services

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Expose port
EXPOSE 8080

# Start the application
CMD ["/usr/local/bin/start-app.sh"] 